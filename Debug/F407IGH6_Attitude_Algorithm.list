
F407IGH6_Attitude_Algorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009100  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08009288  08009288  00019288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094f8  080094f8  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009500  08009500  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009504  08009504  00019504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08009508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
 10 .bss          0000017c  200000f8  200000f8  000200f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  000200f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001204b  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ac8  00000000  00000000  00032173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00034c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f58  00000000  00000000  00035ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002300e  00000000  00000000  00036c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016098  00000000  00000000  00059c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d06c0  00000000  00000000  0006fce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001403a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d1c  00000000  00000000  001403f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000f8 	.word	0x200000f8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009270 	.word	0x08009270

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000fc 	.word	0x200000fc
 80001c4:	08009270 	.word	0x08009270

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b6c      	ldr	r3, [pc, #432]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a6b      	ldr	r2, [pc, #428]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b69      	ldr	r3, [pc, #420]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b65      	ldr	r3, [pc, #404]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a64      	ldr	r2, [pc, #400]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b62      	ldr	r3, [pc, #392]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b5e      	ldr	r3, [pc, #376]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a5d      	ldr	r2, [pc, #372]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b54      	ldr	r3, [pc, #336]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b50      	ldr	r3, [pc, #320]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b49      	ldr	r3, [pc, #292]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a48      	ldr	r2, [pc, #288]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b46      	ldr	r3, [pc, #280]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OLED_SDA_Pin|OLED_SCL_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2103      	movs	r1, #3
 8000f56:	4843      	ldr	r0, [pc, #268]	; (8001064 <MX_GPIO_Init+0x1d0>)
 8000f58:	f000 ffa8 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST8310_RST_GPIO_Port, IST8310_RST_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4841      	ldr	r0, [pc, #260]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000f62:	f000 ffa3 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f6c:	483f      	ldr	r0, [pc, #252]	; (800106c <MX_GPIO_Init+0x1d8>)
 8000f6e:	f000 ff9d 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Accel_GPIO_Port, CS1_Accel_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2110      	movs	r1, #16
 8000f76:	483e      	ldr	r0, [pc, #248]	; (8001070 <MX_GPIO_Init+0x1dc>)
 8000f78:	f000 ff98 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Gyro_GPIO_Port, CS1_Gyro_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	483c      	ldr	r0, [pc, #240]	; (8001074 <MX_GPIO_Init+0x1e0>)
 8000f82:	f000 ff93 	bl	8001eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OLED_SDA_Pin|OLED_SCL_Pin;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4831      	ldr	r0, [pc, #196]	; (8001064 <MX_GPIO_Init+0x1d0>)
 8000f9e:	f000 fde9 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST8310_RST_Pin;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IST8310_RST_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000fba:	f000 fddb 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000fbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_GPIO_Init+0x1d8>)
 8000fd8:	f000 fdcc 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST8310_DRDY_Pin;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST8310_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000ff2:	f000 fdbf 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001000:	2301      	movs	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4819      	ldr	r0, [pc, #100]	; (8001070 <MX_GPIO_Init+0x1dc>)
 800100c:	f000 fdb2 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Accel_Pin;
 8001010:	2310      	movs	r3, #16
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS1_Accel_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4812      	ldr	r0, [pc, #72]	; (8001070 <MX_GPIO_Init+0x1dc>)
 8001028:	f000 fda4 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Gyro_Pin;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS1_Gyro_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x1e0>)
 8001044:	f000 fd96 	bl	8001b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2006      	movs	r0, #6
 800104e:	f000 fd5a 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001052:	2006      	movs	r0, #6
 8001054:	f000 fd73 	bl	8001b3e <HAL_NVIC_EnableIRQ>

}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	; 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400

08001078 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C3_Init+0x50>)
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <MX_I2C3_Init+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_I2C3_Init+0x58>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C3_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_I2C3_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010b6:	f000 ff51 	bl	8001f5c <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 f95c 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000114 	.word	0x20000114
 80010cc:	40005c00 	.word	0x40005c00
 80010d0:	00061a80 	.word	0x00061a80

080010d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_I2C_MspInit+0xc4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d14b      	bne.n	800118e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_I2C_MspInit+0xc8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a20      	ldr	r2, [pc, #128]	; (800119c <HAL_I2C_MspInit+0xc8>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001140:	2304      	movs	r3, #4
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <HAL_I2C_MspInit+0xcc>)
 800114c:	f000 fd12 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001156:	2312      	movs	r3, #18
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001162:	2304      	movs	r3, #4
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 800116e:	f000 fd01 	bl	8001b74 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_I2C_MspInit+0xc8>)
 800117c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005c00 	.word	0x40005c00
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_WWDG_Refresh(&hwwdg);
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	static uint16_t count = 0;
	if (htim->Instance == TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d13a      	bne.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		count++;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011c4:	801a      	strh	r2, [r3, #0]
		count %= 1000;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011cc:	fba2 1203 	umull	r1, r2, r2, r3
 80011d0:	0992      	lsrs	r2, r2, #6
 80011d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d6:	fb01 f202 	mul.w	r2, r1, r2
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011e0:	801a      	strh	r2, [r3, #0]
		if(count % 5 == 0)
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80011e8:	fba3 1302 	umull	r1, r3, r3, r2
 80011ec:	0899      	lsrs	r1, r3, #2
 80011ee:	460b      	mov	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d106      	bne.n	800120a <HAL_TIM_PeriodElapsedCallback+0x62>
		{
//			HAL_WWDG_Refresh(&hwwdg);
			IMU_Data_Fusion_Mahony(0.005, &g_roll, &g_pitch, &g_yaw);
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80011fe:	4912      	ldr	r1, [pc, #72]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001200:	4812      	ldr	r0, [pc, #72]	; (800124c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001202:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001250 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001206:	f004 ff2b 	bl	8006060 <IMU_Data_Fusion_Mahony>
//			g_temperature = BMI088_Get_Temperature();
		}
		if(count % 500 == 0)
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001210:	fba2 1203 	umull	r1, r2, r2, r3
 8001214:	0952      	lsrs	r2, r2, #5
 8001216:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800121a:	fb01 f202 	mul.w	r2, r1, r2
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	b29b      	uxth	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d104      	bne.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			LED_TOG(LED_R);
 8001226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800122c:	f000 fe57 	bl	8001ede <HAL_GPIO_TogglePin>
		}
	}
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000174 	.word	0x20000174
 800123c:	10624dd3 	.word	0x10624dd3
 8001240:	cccccccd 	.word	0xcccccccd
 8001244:	20000170 	.word	0x20000170
 8001248:	2000016c 	.word	0x2000016c
 800124c:	20000168 	.word	0x20000168
 8001250:	3ba3d70a 	.word	0x3ba3d70a
 8001254:	40021c00 	.word	0x40021c00

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125e:	f000 fae1 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001262:	f000 f821 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f7ff fe15 	bl	8000e94 <MX_GPIO_Init>
  MX_TIM2_Init();
 800126a:	f000 f9a1 	bl	80015b0 <MX_TIM2_Init>
  MX_I2C3_Init();
 800126e:	f7ff ff03 	bl	8001078 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001272:	f000 f889 	bl	8001388 <MX_SPI1_Init>
  MX_TIM10_Init();
 8001276:	f000 f9e7 	bl	8001648 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  uint8_t IMU_error = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	71fb      	strb	r3, [r7, #7]
  OLED_Init();
 800127e:	f005 fcef 	bl	8006c60 <OLED_Init>
  IMU_error = IMU_Init();
 8001282:	f004 fad5 	bl	8005830 <IMU_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800128a:	2100      	movs	r1, #0
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <main+0x48>)
 800128e:	f003 f92b 	bl	80044e8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <main+0x4c>)
 8001294:	f003 f85e 	bl	8004354 <HAL_TIM_Base_Start_IT>

  IMU_Start();
 8001298:	f004 fae2 	bl	8005860 <IMU_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800129c:	e7fe      	b.n	800129c <main+0x44>
 800129e:	bf00      	nop
 80012a0:	20000218 	.word	0x20000218
 80012a4:	200001d0 	.word	0x200001d0

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b094      	sub	sp, #80	; 0x50
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2230      	movs	r2, #48	; 0x30
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f005 fe0a 	bl	8006ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <SystemClock_Config+0xcc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a27      	ldr	r2, [pc, #156]	; (8001374 <SystemClock_Config+0xcc>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <SystemClock_Config+0xcc>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <SystemClock_Config+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a21      	ldr	r2, [pc, #132]	; (8001378 <SystemClock_Config+0xd0>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <SystemClock_Config+0xd0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130e:	2302      	movs	r3, #2
 8001310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001312:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001318:	2306      	movs	r3, #6
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800131c:	23a8      	movs	r3, #168	; 0xa8
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001320:	2302      	movs	r3, #2
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001324:	2304      	movs	r3, #4
 8001326:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fdd5 	bl	8002edc <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001338:	f000 f820 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800133c:	230f      	movs	r3, #15
 800133e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001340:	2302      	movs	r3, #2
 8001342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001348:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800134c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2105      	movs	r1, #5
 800135a:	4618      	mov	r0, r3
 800135c:	f002 f836 	bl	80033cc <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001366:	f000 f809 	bl	800137c <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3750      	adds	r7, #80	; 0x50
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001384:	e7fe      	b.n	8001384 <Error_Handler+0x8>
	...

08001388 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_SPI1_Init+0x64>)
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <MX_SPI1_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI1_Init+0x64>)
 8001394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a8:	2202      	movs	r2, #2
 80013aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_SPI1_Init+0x64>)
 80013b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_SPI1_Init+0x64>)
 80013bc:	2218      	movs	r2, #24
 80013be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SPI1_Init+0x64>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_SPI1_Init+0x64>)
 80013da:	f002 f9c3 	bl	8003764 <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013e4:	f7ff ffca 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000178 	.word	0x20000178
 80013f0:	40013000 	.word	0x40013000

080013f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <HAL_SPI_MspInit+0xc0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d149      	bne.n	80014aa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_SPI_MspInit+0xc4>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <HAL_SPI_MspInit+0xc4>)
 8001420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_SPI_MspInit+0xc4>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <HAL_SPI_MspInit+0xc4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a1f      	ldr	r2, [pc, #124]	; (80014b8 <HAL_SPI_MspInit+0xc4>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_SPI_MspInit+0xc4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_SPI_MspInit+0xc4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_SPI_MspInit+0xc4>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_SPI_MspInit+0xc4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800146a:	2318      	movs	r3, #24
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147a:	2305      	movs	r3, #5
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <HAL_SPI_MspInit+0xc8>)
 8001486:	f000 fb75 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800149a:	2305      	movs	r3, #5
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	4806      	ldr	r0, [pc, #24]	; (80014c0 <HAL_SPI_MspInit+0xcc>)
 80014a6:	f000 fb65 	bl	8001b74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	; 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40013000 	.word	0x40013000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020000 	.word	0x40020000

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_MspInit+0x4c>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_MspInit+0x4c>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <NMI_Handler+0x4>

0800151a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151e:	e7fe      	b.n	800151e <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler+0x4>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	b480      	push	{r7}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152a:	e7fe      	b.n	800152a <BusFault_Handler+0x4>

0800152c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <UsageFault_Handler+0x4>

08001532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001560:	f000 f9b2 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 800156c:	2001      	movs	r0, #1
 800156e:	f000 fcd1 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <TIM2_IRQHandler+0x10>)
 800157e:	f003 f87b 	bl	8004678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200001d0 	.word	0x200001d0

0800158c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <SystemInit+0x20>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <SystemInit+0x20>)
 8001598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800159c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	463b      	mov	r3, r7
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_TIM2_Init+0x94>)
 80015ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_TIM2_Init+0x94>)
 80015d6:	2253      	movs	r2, #83	; 0x53
 80015d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_TIM2_Init+0x94>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_TIM2_Init+0x94>)
 80015e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_TIM2_Init+0x94>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_TIM2_Init+0x94>)
 80015f0:	2280      	movs	r2, #128	; 0x80
 80015f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f4:	4813      	ldr	r0, [pc, #76]	; (8001644 <MX_TIM2_Init+0x94>)
 80015f6:	f002 fe5d 	bl	80042b4 <HAL_TIM_Base_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001600:	f7ff febc 	bl	800137c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <MX_TIM2_Init+0x94>)
 8001612:	f003 f9fb 	bl	8004a0c <HAL_TIM_ConfigClockSource>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800161c:	f7ff feae 	bl	800137c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_TIM2_Init+0x94>)
 800162e:	f003 fded 	bl	800520c <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001638:	f7ff fea0 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200001d0 	.word	0x200001d0

08001648 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_TIM10_Init+0x94>)
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <MX_TIM10_Init+0x98>)
 8001664:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <MX_TIM10_Init+0x94>)
 8001668:	22a7      	movs	r2, #167	; 0xa7
 800166a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_TIM10_Init+0x94>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <MX_TIM10_Init+0x94>)
 8001674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001678:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_TIM10_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_TIM10_Init+0x94>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001686:	4815      	ldr	r0, [pc, #84]	; (80016dc <MX_TIM10_Init+0x94>)
 8001688:	f002 fe14 	bl	80042b4 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001692:	f7ff fe73 	bl	800137c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001696:	4811      	ldr	r0, [pc, #68]	; (80016dc <MX_TIM10_Init+0x94>)
 8001698:	f002 fecc 	bl	8004434 <HAL_TIM_PWM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80016a2:	f7ff fe6b 	bl	800137c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a6:	2360      	movs	r3, #96	; 0x60
 80016a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <MX_TIM10_Init+0x94>)
 80016be:	f003 f8e3 	bl	8004888 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80016c8:	f7ff fe58 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <MX_TIM10_Init+0x94>)
 80016ce:	f000 f845 	bl	800175c <HAL_TIM_MspPostInit>

}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000218 	.word	0x20000218
 80016e0:	40014400 	.word	0x40014400

080016e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f4:	d116      	bne.n	8001724 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	201c      	movs	r0, #28
 8001718:	f000 f9f5 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800171c:	201c      	movs	r0, #28
 800171e:	f000 fa0e 	bl	8001b3e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001722:	e012      	b.n	800174a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <HAL_TIM_Base_MspInit+0x74>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10d      	bne.n	800174a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_TIM_Base_MspInit+0x70>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40014400 	.word	0x40014400

0800175c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_TIM_MspPostInit+0x68>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d11d      	bne.n	80017ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_TIM_MspPostInit+0x6c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_TIM_MspPostInit+0x6c>)
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_TIM_MspPostInit+0x6c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PF6     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800179a:	2340      	movs	r3, #64	; 0x40
 800179c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80017aa:	2303      	movs	r3, #3
 80017ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <HAL_TIM_MspPostInit+0x70>)
 80017b6:	f000 f9dd 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40014400 	.word	0x40014400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40021400 	.word	0x40021400

080017d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001808 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017d6:	490e      	ldr	r1, [pc, #56]	; (8001810 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017ec:	4c0b      	ldr	r4, [pc, #44]	; (800181c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017fa:	f7ff fec7 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017fe:	f005 fb43 	bl	8006e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001802:	f7ff fd29 	bl	8001258 <main>
  bx  lr    
 8001806:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001814:	08009508 	.word	0x08009508
  ldr r2, =_sbss
 8001818:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 800181c:	20000274 	.word	0x20000274

08001820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC_IRQHandler>
	...

08001824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <HAL_Init+0x40>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_Init+0x40>)
 800183a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800183e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x40>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f94f 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001852:	200f      	movs	r0, #15
 8001854:	f000 f808 	bl	8001868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001858:	f7ff fe34 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40023c00 	.word	0x40023c00

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x54>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x58>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f000 f967 	bl	8001b5a <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f000 f92f 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x5c>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000260 	.word	0x20000260

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000260 	.word	0x20000260

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000008 	.word	0x20000008

08001950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800196c:	4013      	ands	r3, r2
 800196e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <__NVIC_SetPriorityGrouping+0x44>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60d3      	str	r3, [r2, #12]
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_GetPriorityGrouping+0x18>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	f003 0307 	and.w	r3, r3, #7
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db0b      	blt.n	80019de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	4907      	ldr	r1, [pc, #28]	; (80019ec <__NVIC_EnableIRQ+0x38>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff8e 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff29 	bl	8001950 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff3e 	bl	8001998 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff8e 	bl	8001a44 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5d 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff31 	bl	80019b4 <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e16b      	b.n	8001e68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f040 815a 	bne.w	8001e62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d005      	beq.n	8001bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d130      	bne.n	8001c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0201 	and.w	r2, r3, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d017      	beq.n	8001c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d123      	bne.n	8001cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	08da      	lsrs	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3208      	adds	r2, #8
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08da      	lsrs	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3208      	adds	r2, #8
 8001cb2:	69b9      	ldr	r1, [r7, #24]
 8001cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0203 	and.w	r2, r3, #3
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80b4 	beq.w	8001e62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b60      	ldr	r3, [pc, #384]	; (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a5f      	ldr	r2, [pc, #380]	; (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <HAL_GPIO_Init+0x30c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d16:	4a5b      	ldr	r2, [pc, #364]	; (8001e84 <HAL_GPIO_Init+0x310>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_GPIO_Init+0x314>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d02b      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a51      	ldr	r2, [pc, #324]	; (8001e8c <HAL_GPIO_Init+0x318>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d025      	beq.n	8001d96 <HAL_GPIO_Init+0x222>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a50      	ldr	r2, [pc, #320]	; (8001e90 <HAL_GPIO_Init+0x31c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <HAL_GPIO_Init+0x21e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4f      	ldr	r2, [pc, #316]	; (8001e94 <HAL_GPIO_Init+0x320>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d019      	beq.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4e      	ldr	r2, [pc, #312]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x216>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4d      	ldr	r2, [pc, #308]	; (8001e9c <HAL_GPIO_Init+0x328>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x212>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ea0 <HAL_GPIO_Init+0x32c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4b      	ldr	r2, [pc, #300]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x20a>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00e      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d7e:	2308      	movs	r3, #8
 8001d80:	e00c      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d82:	2306      	movs	r3, #6
 8001d84:	e00a      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d86:	2305      	movs	r3, #5
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x228>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dac:	4935      	ldr	r1, [pc, #212]	; (8001e84 <HAL_GPIO_Init+0x310>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dde:	4a32      	ldr	r2, [pc, #200]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e32:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e38:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	f67f ae90 	bls.w	8001b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40021400 	.word	0x40021400
 8001ea0:	40021800 	.word	0x40021800
 8001ea4:	40021c00 	.word	0x40021c00
 8001ea8:	40013c00 	.word	0x40013c00

08001eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ebc:	787b      	ldrb	r3, [r7, #1]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ec8:	e003      	b.n	8001ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	619a      	str	r2, [r3, #24]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	400b      	ands	r3, r1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f806 	bl	8001f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e12b      	b.n	80021c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff f8a6 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0201 	bic.w	r2, r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc0:	f001 fbbc 	bl	800373c <HAL_RCC_GetPCLK1Freq>
 8001fc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a81      	ldr	r2, [pc, #516]	; (80021d0 <HAL_I2C_Init+0x274>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d807      	bhi.n	8001fe0 <HAL_I2C_Init+0x84>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a80      	ldr	r2, [pc, #512]	; (80021d4 <HAL_I2C_Init+0x278>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	bf94      	ite	ls
 8001fd8:	2301      	movls	r3, #1
 8001fda:	2300      	movhi	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e006      	b.n	8001fee <HAL_I2C_Init+0x92>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4a7d      	ldr	r2, [pc, #500]	; (80021d8 <HAL_I2C_Init+0x27c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	bf94      	ite	ls
 8001fe8:	2301      	movls	r3, #1
 8001fea:	2300      	movhi	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0e7      	b.n	80021c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4a78      	ldr	r2, [pc, #480]	; (80021dc <HAL_I2C_Init+0x280>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0c9b      	lsrs	r3, r3, #18
 8002000:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	430a      	orrs	r2, r1
 8002014:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <HAL_I2C_Init+0x274>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d802      	bhi.n	8002030 <HAL_I2C_Init+0xd4>
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3301      	adds	r3, #1
 800202e:	e009      	b.n	8002044 <HAL_I2C_Init+0xe8>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	4a69      	ldr	r2, [pc, #420]	; (80021e0 <HAL_I2C_Init+0x284>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	3301      	adds	r3, #1
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002056:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	495c      	ldr	r1, [pc, #368]	; (80021d0 <HAL_I2C_Init+0x274>)
 8002060:	428b      	cmp	r3, r1
 8002062:	d819      	bhi.n	8002098 <HAL_I2C_Init+0x13c>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e59      	subs	r1, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002072:	1c59      	adds	r1, r3, #1
 8002074:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002078:	400b      	ands	r3, r1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_I2C_Init+0x138>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e59      	subs	r1, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fbb1 f3f3 	udiv	r3, r1, r3
 800208c:	3301      	adds	r3, #1
 800208e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002092:	e051      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002094:	2304      	movs	r3, #4
 8002096:	e04f      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <HAL_I2C_Init+0x168>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e58      	subs	r0, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e012      	b.n	80020ea <HAL_I2C_Init+0x18e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1e58      	subs	r0, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	0099      	lsls	r1, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	bf0c      	ite	eq
 80020e4:	2301      	moveq	r3, #1
 80020e6:	2300      	movne	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Init+0x196>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e022      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10e      	bne.n	8002118 <HAL_I2C_Init+0x1bc>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e58      	subs	r0, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	440b      	add	r3, r1
 8002108:	fbb0 f3f3 	udiv	r3, r0, r3
 800210c:	3301      	adds	r3, #1
 800210e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002116:	e00f      	b.n	8002138 <HAL_I2C_Init+0x1dc>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1e58      	subs	r0, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	0099      	lsls	r1, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	6809      	ldr	r1, [r1, #0]
 800213c:	4313      	orrs	r3, r2
 800213e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69da      	ldr	r2, [r3, #28]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6911      	ldr	r1, [r2, #16]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68d2      	ldr	r2, [r2, #12]
 8002172:	4311      	orrs	r1, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695a      	ldr	r2, [r3, #20]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	000186a0 	.word	0x000186a0
 80021d4:	001e847f 	.word	0x001e847f
 80021d8:	003d08ff 	.word	0x003d08ff
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	10624dd3 	.word	0x10624dd3

080021e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	817b      	strh	r3, [r7, #10]
 80021f6:	460b      	mov	r3, r1
 80021f8:	813b      	strh	r3, [r7, #8]
 80021fa:	4613      	mov	r3, r2
 80021fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021fe:	f7ff fb77 	bl	80018f0 <HAL_GetTick>
 8002202:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b20      	cmp	r3, #32
 800220e:	f040 80d9 	bne.w	80023c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2319      	movs	r3, #25
 8002218:	2201      	movs	r2, #1
 800221a:	496d      	ldr	r1, [pc, #436]	; (80023d0 <HAL_I2C_Mem_Write+0x1ec>)
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fc7f 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
 800222a:	e0cc      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_I2C_Mem_Write+0x56>
 8002236:	2302      	movs	r3, #2
 8002238:	e0c5      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d007      	beq.n	8002260 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0201 	orr.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800226e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2221      	movs	r2, #33	; 0x21
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a3a      	ldr	r2, [r7, #32]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a4d      	ldr	r2, [pc, #308]	; (80023d4 <HAL_I2C_Mem_Write+0x1f0>)
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022a2:	88f8      	ldrh	r0, [r7, #6]
 80022a4:	893a      	ldrh	r2, [r7, #8]
 80022a6:	8979      	ldrh	r1, [r7, #10]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	4603      	mov	r3, r0
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fab6 	bl	8002824 <I2C_RequestMemoryWrite>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d052      	beq.n	8002364 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e081      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fd00 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00d      	beq.n	80022ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d107      	bne.n	80022ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e06b      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	3b01      	subs	r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d11b      	bne.n	8002364 <HAL_I2C_Mem_Write+0x180>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	2b00      	cmp	r3, #0
 8002332:	d017      	beq.n	8002364 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	781a      	ldrb	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1aa      	bne.n	80022c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fcec 	bl	8002d4e <I2C_WaitOnBTFFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	2b04      	cmp	r3, #4
 8002382:	d107      	bne.n	8002394 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e016      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	e000      	b.n	80023c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023c4:	2302      	movs	r3, #2
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	00100002 	.word	0x00100002
 80023d4:	ffff0000 	.word	0xffff0000

080023d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	; 0x30
 80023dc:	af02      	add	r7, sp, #8
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023f2:	f7ff fa7d 	bl	80018f0 <HAL_GetTick>
 80023f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	f040 8208 	bne.w	8002816 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	2319      	movs	r3, #25
 800240c:	2201      	movs	r2, #1
 800240e:	497b      	ldr	r1, [pc, #492]	; (80025fc <HAL_I2C_Mem_Read+0x224>)
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fb85 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
 800241e:	e1fb      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_I2C_Mem_Read+0x56>
 800242a:	2302      	movs	r3, #2
 800242c:	e1f4      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d007      	beq.n	8002454 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2222      	movs	r2, #34	; 0x22
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2240      	movs	r2, #64	; 0x40
 8002470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a5b      	ldr	r2, [pc, #364]	; (8002600 <HAL_I2C_Mem_Read+0x228>)
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002496:	88f8      	ldrh	r0, [r7, #6]
 8002498:	893a      	ldrh	r2, [r7, #8]
 800249a:	8979      	ldrh	r1, [r7, #10]
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	4603      	mov	r3, r0
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa52 	bl	8002950 <I2C_RequestMemoryRead>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1b0      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d113      	bne.n	80024e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024be:	2300      	movs	r3, #0
 80024c0:	623b      	str	r3, [r7, #32]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	623b      	str	r3, [r7, #32]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e184      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d11b      	bne.n	8002526 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e164      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	2b02      	cmp	r3, #2
 800252c:	d11b      	bne.n	8002566 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800254c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	e144      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800257c:	e138      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002582:	2b03      	cmp	r3, #3
 8002584:	f200 80f1 	bhi.w	800276a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b01      	cmp	r3, #1
 800258e:	d123      	bne.n	80025d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 fc1b 	bl	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e139      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025d6:	e10b      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d14e      	bne.n	800267e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	2200      	movs	r2, #0
 80025e8:	4906      	ldr	r1, [pc, #24]	; (8002604 <HAL_I2C_Mem_Read+0x22c>)
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa98 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e10e      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
 80025fa:	bf00      	nop
 80025fc:	00100002 	.word	0x00100002
 8002600:	ffff0000 	.word	0xffff0000
 8002604:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800267c:	e0b8      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	2200      	movs	r2, #0
 8002686:	4966      	ldr	r1, [pc, #408]	; (8002820 <HAL_I2C_Mem_Read+0x448>)
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fa49 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0bf      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	2200      	movs	r2, #0
 80026e2:	494f      	ldr	r1, [pc, #316]	; (8002820 <HAL_I2C_Mem_Read+0x448>)
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fa1b 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e091      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002768:	e042      	b.n	80027f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fb2e 	bl	8002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e04c      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	691a      	ldr	r2, [r3, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d118      	bne.n	80027f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f aec2 	bne.w	800257e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002816:	2302      	movs	r3, #2
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3728      	adds	r7, #40	; 0x28
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	00010004 	.word	0x00010004

08002824 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	461a      	mov	r2, r3
 8002832:	4603      	mov	r3, r0
 8002834:	817b      	strh	r3, [r7, #10]
 8002836:	460b      	mov	r3, r1
 8002838:	813b      	strh	r3, [r7, #8]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800284c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	2200      	movs	r2, #0
 8002856:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f960 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002874:	d103      	bne.n	800287e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e05f      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	6a3a      	ldr	r2, [r7, #32]
 8002896:	492d      	ldr	r1, [pc, #180]	; (800294c <I2C_RequestMemoryWrite+0x128>)
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f998 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e04c      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fa02 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d107      	bne.n	80028e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e02b      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d105      	bne.n	80028fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028f0:	893b      	ldrh	r3, [r7, #8]
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	e021      	b.n	8002940 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	b29b      	uxth	r3, r3
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f9dc 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b04      	cmp	r3, #4
 8002920:	d107      	bne.n	8002932 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e005      	b.n	8002942 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002936:	893b      	ldrh	r3, [r7, #8]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	00010002 	.word	0x00010002

08002950 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af02      	add	r7, sp, #8
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	4608      	mov	r0, r1
 800295a:	4611      	mov	r1, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4603      	mov	r3, r0
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	460b      	mov	r3, r1
 8002964:	813b      	strh	r3, [r7, #8]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002978:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002988:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	2200      	movs	r2, #0
 8002992:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f8c2 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b0:	d103      	bne.n	80029ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0aa      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029be:	897b      	ldrh	r3, [r7, #10]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	4952      	ldr	r1, [pc, #328]	; (8002b1c <I2C_RequestMemoryRead+0x1cc>)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 f8fa 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e097      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f964 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d107      	bne.n	8002a22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e076      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a2c:	893b      	ldrh	r3, [r7, #8]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	e021      	b.n	8002a7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	6a39      	ldr	r1, [r7, #32]
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f93e 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00d      	beq.n	8002a72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d107      	bne.n	8002a6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e050      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a72:	893b      	ldrh	r3, [r7, #8]
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a7e:	6a39      	ldr	r1, [r7, #32]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f923 	bl	8002ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00d      	beq.n	8002aa8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d107      	bne.n	8002aa4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e035      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f82b 	bl	8002b20 <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ade:	d103      	bne.n	8002ae8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e013      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aec:	897b      	ldrh	r3, [r7, #10]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	6a3a      	ldr	r2, [r7, #32]
 8002b00:	4906      	ldr	r1, [pc, #24]	; (8002b1c <I2C_RequestMemoryRead+0x1cc>)
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f863 	bl	8002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	00010002 	.word	0x00010002

08002b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b30:	e025      	b.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d021      	beq.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3a:	f7fe fed9 	bl	80018f0 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d302      	bcc.n	8002b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d116      	bne.n	8002b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e023      	b.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d10d      	bne.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	43da      	mvns	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4013      	ands	r3, r2
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	e00c      	b.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf0c      	ite	eq
 8002bb6:	2301      	moveq	r3, #1
 8002bb8:	2300      	movne	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d0b6      	beq.n	8002b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bdc:	e051      	b.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bec:	d123      	bne.n	8002c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f043 0204 	orr.w	r2, r3, #4
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e046      	b.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d021      	beq.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3e:	f7fe fe57 	bl	80018f0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d302      	bcc.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d116      	bne.n	8002c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f043 0220 	orr.w	r2, r3, #32
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e020      	b.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10c      	bne.n	8002ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4013      	ands	r3, r2
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e00b      	b.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	43da      	mvns	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d18d      	bne.n	8002bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cd8:	e02d      	b.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8ce 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e02d      	b.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf0:	d021      	beq.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf2:	f7fe fdfd 	bl	80018f0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d302      	bcc.n	8002d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f043 0220 	orr.w	r2, r3, #32
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e007      	b.n	8002d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	d1ca      	bne.n	8002cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d5a:	e02d      	b.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f88d 	bl	8002e7c <I2C_IsAcknowledgeFailed>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e02d      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d021      	beq.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d74:	f7fe fdbc 	bl	80018f0 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d302      	bcc.n	8002d8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d116      	bne.n	8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e007      	b.n	8002dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d1ca      	bne.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ddc:	e042      	b.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d119      	bne.n	8002e20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0210 	mvn.w	r2, #16
 8002df4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e029      	b.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e20:	f7fe fd66 	bl	80018f0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d302      	bcc.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e007      	b.n	8002e74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d1b5      	bne.n	8002dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e92:	d11b      	bne.n	8002ecc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e267      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d075      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efa:	4b88      	ldr	r3, [pc, #544]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d00c      	beq.n	8002f20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f06:	4b85      	ldr	r3, [pc, #532]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d112      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f12:	4b82      	ldr	r3, [pc, #520]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1e:	d10b      	bne.n	8002f38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	4b7e      	ldr	r3, [pc, #504]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d05b      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x108>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d157      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e242      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d106      	bne.n	8002f50 <HAL_RCC_OscConfig+0x74>
 8002f42:	4b76      	ldr	r3, [pc, #472]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a75      	ldr	r2, [pc, #468]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e01d      	b.n	8002f8c <HAL_RCC_OscConfig+0xb0>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x98>
 8002f5a:	4b70      	ldr	r3, [pc, #448]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6f      	ldr	r2, [pc, #444]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b6d      	ldr	r3, [pc, #436]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6c      	ldr	r2, [pc, #432]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0xb0>
 8002f74:	4b69      	ldr	r3, [pc, #420]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a68      	ldr	r2, [pc, #416]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	4b66      	ldr	r3, [pc, #408]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a65      	ldr	r2, [pc, #404]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fcac 	bl	80018f0 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fca8 	bl	80018f0 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e207      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b5b      	ldr	r3, [pc, #364]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0xc0>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fc98 	bl	80018f0 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fc94 	bl	80018f0 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e1f3      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd6:	4b51      	ldr	r3, [pc, #324]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0xe8>
 8002fe2:	e000      	b.n	8002fe6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d063      	beq.n	80030ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff2:	4b4a      	ldr	r3, [pc, #296]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b47      	ldr	r3, [pc, #284]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003006:	2b08      	cmp	r3, #8
 8003008:	d11c      	bne.n	8003044 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300a:	4b44      	ldr	r3, [pc, #272]	; (800311c <HAL_RCC_OscConfig+0x240>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d116      	bne.n	8003044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	4b41      	ldr	r3, [pc, #260]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_RCC_OscConfig+0x152>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e1c7      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4937      	ldr	r1, [pc, #220]	; (800311c <HAL_RCC_OscConfig+0x240>)
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	e03a      	b.n	80030ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304c:	4b34      	ldr	r3, [pc, #208]	; (8003120 <HAL_RCC_OscConfig+0x244>)
 800304e:	2201      	movs	r2, #1
 8003050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003052:	f7fe fc4d 	bl	80018f0 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305a:	f7fe fc49 	bl	80018f0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e1a8      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306c:	4b2b      	ldr	r3, [pc, #172]	; (800311c <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_RCC_OscConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4925      	ldr	r1, [pc, #148]	; (800311c <HAL_RCC_OscConfig+0x240>)
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
 800308c:	e015      	b.n	80030ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_OscConfig+0x244>)
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fc2c 	bl	80018f0 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800309c:	f7fe fc28 	bl	80018f0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e187      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d036      	beq.n	8003134 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d016      	beq.n	80030fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_RCC_OscConfig+0x248>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fe fc0c 	bl	80018f0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030dc:	f7fe fc08 	bl	80018f0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e167      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ee:	4b0b      	ldr	r3, [pc, #44]	; (800311c <HAL_RCC_OscConfig+0x240>)
 80030f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0x200>
 80030fa:	e01b      	b.n	8003134 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <HAL_RCC_OscConfig+0x248>)
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7fe fbf5 	bl	80018f0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003108:	e00e      	b.n	8003128 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310a:	f7fe fbf1 	bl	80018f0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d907      	bls.n	8003128 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e150      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
 800311c:	40023800 	.word	0x40023800
 8003120:	42470000 	.word	0x42470000
 8003124:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	4b88      	ldr	r3, [pc, #544]	; (800334c <HAL_RCC_OscConfig+0x470>)
 800312a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ea      	bne.n	800310a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 8097 	beq.w	8003270 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003146:	4b81      	ldr	r3, [pc, #516]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10f      	bne.n	8003172 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	4b7d      	ldr	r3, [pc, #500]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	4a7c      	ldr	r2, [pc, #496]	; (800334c <HAL_RCC_OscConfig+0x470>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003160:	6413      	str	r3, [r2, #64]	; 0x40
 8003162:	4b7a      	ldr	r3, [pc, #488]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316e:	2301      	movs	r3, #1
 8003170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b77      	ldr	r3, [pc, #476]	; (8003350 <HAL_RCC_OscConfig+0x474>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d118      	bne.n	80031b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317e:	4b74      	ldr	r3, [pc, #464]	; (8003350 <HAL_RCC_OscConfig+0x474>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a73      	ldr	r2, [pc, #460]	; (8003350 <HAL_RCC_OscConfig+0x474>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318a:	f7fe fbb1 	bl	80018f0 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7fe fbad 	bl	80018f0 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e10c      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b6a      	ldr	r3, [pc, #424]	; (8003350 <HAL_RCC_OscConfig+0x474>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x2ea>
 80031b8:	4b64      	ldr	r3, [pc, #400]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a63      	ldr	r2, [pc, #396]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	e01c      	b.n	8003200 <HAL_RCC_OscConfig+0x324>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x30c>
 80031ce:	4b5f      	ldr	r3, [pc, #380]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a5e      	ldr	r2, [pc, #376]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031d4:	f043 0304 	orr.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	4b5c      	ldr	r3, [pc, #368]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031de:	4a5b      	ldr	r2, [pc, #364]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6713      	str	r3, [r2, #112]	; 0x70
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0x324>
 80031e8:	4b58      	ldr	r3, [pc, #352]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a57      	ldr	r2, [pc, #348]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
 80031f4:	4b55      	ldr	r3, [pc, #340]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	4a54      	ldr	r2, [pc, #336]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80031fa:	f023 0304 	bic.w	r3, r3, #4
 80031fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe fb72 	bl	80018f0 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fe fb6e 	bl	80018f0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e0cb      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	4b49      	ldr	r3, [pc, #292]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ee      	beq.n	8003210 <HAL_RCC_OscConfig+0x334>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003234:	f7fe fb5c 	bl	80018f0 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7fe fb58 	bl	80018f0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0b5      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003252:	4b3e      	ldr	r3, [pc, #248]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ee      	bne.n	800323c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b39      	ldr	r3, [pc, #228]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	4a38      	ldr	r2, [pc, #224]	; (800334c <HAL_RCC_OscConfig+0x470>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80a1 	beq.w	80033bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800327a:	4b34      	ldr	r3, [pc, #208]	; (800334c <HAL_RCC_OscConfig+0x470>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b08      	cmp	r3, #8
 8003284:	d05c      	beq.n	8003340 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d141      	bne.n	8003312 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328e:	4b31      	ldr	r3, [pc, #196]	; (8003354 <HAL_RCC_OscConfig+0x478>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fb2c 	bl	80018f0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe fb28 	bl	80018f0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e087      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b27      	ldr	r3, [pc, #156]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	019b      	lsls	r3, r3, #6
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	3b01      	subs	r3, #1
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	491b      	ldr	r1, [pc, #108]	; (800334c <HAL_RCC_OscConfig+0x470>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCC_OscConfig+0x478>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ea:	f7fe fb01 	bl	80018f0 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fe fafd 	bl	80018f0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e05c      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x416>
 8003310:	e054      	b.n	80033bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_RCC_OscConfig+0x478>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe faea 	bl	80018f0 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003320:	f7fe fae6 	bl	80018f0 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e045      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_RCC_OscConfig+0x470>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x444>
 800333e:	e03d      	b.n	80033bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e038      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
 800334c:	40023800 	.word	0x40023800
 8003350:	40007000 	.word	0x40007000
 8003354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x4ec>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d028      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003370:	429a      	cmp	r2, r3
 8003372:	d121      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d11a      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003388:	4013      	ands	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003390:	4293      	cmp	r3, r2
 8003392:	d111      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3b01      	subs	r3, #1
 80033a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800

080033cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0cc      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e0:	4b68      	ldr	r3, [pc, #416]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d90c      	bls.n	8003408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b65      	ldr	r3, [pc, #404]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b63      	ldr	r3, [pc, #396]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0b8      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d020      	beq.n	8003456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003420:	4b59      	ldr	r3, [pc, #356]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a58      	ldr	r2, [pc, #352]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003438:	4b53      	ldr	r3, [pc, #332]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003444:	4b50      	ldr	r3, [pc, #320]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	494d      	ldr	r1, [pc, #308]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	4313      	orrs	r3, r2
 8003454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d044      	beq.n	80034ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d119      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e07f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d003      	beq.n	800348a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003486:	2b03      	cmp	r3, #3
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348a:	4b3f      	ldr	r3, [pc, #252]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b3b      	ldr	r3, [pc, #236]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e067      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f023 0203 	bic.w	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4934      	ldr	r1, [pc, #208]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034bc:	f7fe fa18 	bl	80018f0 <HAL_GetTick>
 80034c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	e00a      	b.n	80034da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c4:	f7fe fa14 	bl	80018f0 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e04f      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 020c 	and.w	r2, r3, #12
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d1eb      	bne.n	80034c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d20c      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fa:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e032      	b.n	800357a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	d008      	beq.n	8003532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	4916      	ldr	r1, [pc, #88]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	490e      	ldr	r1, [pc, #56]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003552:	f000 f821 	bl	8003598 <HAL_RCC_GetSysClockFreq>
 8003556:	4602      	mov	r2, r0
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	490a      	ldr	r1, [pc, #40]	; (800358c <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a09      	ldr	r2, [pc, #36]	; (8003590 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1c8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe f978 	bl	8001868 <HAL_InitTick>

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023c00 	.word	0x40023c00
 8003588:	40023800 	.word	0x40023800
 800358c:	0800929c 	.word	0x0800929c
 8003590:	20000000 	.word	0x20000000
 8003594:	20000004 	.word	0x20000004

08003598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b090      	sub	sp, #64	; 0x40
 800359e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	637b      	str	r3, [r7, #52]	; 0x34
 80035a4:	2300      	movs	r3, #0
 80035a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a8:	2300      	movs	r3, #0
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b0:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d00d      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x40>
 80035bc:	2b08      	cmp	r3, #8
 80035be:	f200 80a1 	bhi.w	8003704 <HAL_RCC_GetSysClockFreq+0x16c>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x34>
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ca:	e09b      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b53      	ldr	r3, [pc, #332]	; (800371c <HAL_RCC_GetSysClockFreq+0x184>)
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80035d0:	e09b      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_GetSysClockFreq+0x188>)
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80035d6:	e098      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035d8:	4b4f      	ldr	r3, [pc, #316]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e2:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d028      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ee:	4b4a      	ldr	r3, [pc, #296]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	2200      	movs	r2, #0
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	627a      	str	r2, [r7, #36]	; 0x24
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003600:	2100      	movs	r1, #0
 8003602:	4b47      	ldr	r3, [pc, #284]	; (8003720 <HAL_RCC_GetSysClockFreq+0x188>)
 8003604:	fb03 f201 	mul.w	r2, r3, r1
 8003608:	2300      	movs	r3, #0
 800360a:	fb00 f303 	mul.w	r3, r0, r3
 800360e:	4413      	add	r3, r2
 8003610:	4a43      	ldr	r2, [pc, #268]	; (8003720 <HAL_RCC_GetSysClockFreq+0x188>)
 8003612:	fba0 1202 	umull	r1, r2, r0, r2
 8003616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003618:	460a      	mov	r2, r1
 800361a:	62ba      	str	r2, [r7, #40]	; 0x28
 800361c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361e:	4413      	add	r3, r2
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003624:	2200      	movs	r2, #0
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	61fa      	str	r2, [r7, #28]
 800362a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003632:	f7fd faad 	bl	8000b90 <__aeabi_uldivmod>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	4613      	mov	r3, r2
 800363c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800363e:	e053      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003640:	4b35      	ldr	r3, [pc, #212]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	2200      	movs	r2, #0
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	617a      	str	r2, [r7, #20]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003652:	f04f 0b00 	mov.w	fp, #0
 8003656:	4652      	mov	r2, sl
 8003658:	465b      	mov	r3, fp
 800365a:	f04f 0000 	mov.w	r0, #0
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	0159      	lsls	r1, r3, #5
 8003664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003668:	0150      	lsls	r0, r2, #5
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	ebb2 080a 	subs.w	r8, r2, sl
 8003672:	eb63 090b 	sbc.w	r9, r3, fp
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003682:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003686:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800368a:	ebb2 0408 	subs.w	r4, r2, r8
 800368e:	eb63 0509 	sbc.w	r5, r3, r9
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	00eb      	lsls	r3, r5, #3
 800369c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036a0:	00e2      	lsls	r2, r4, #3
 80036a2:	4614      	mov	r4, r2
 80036a4:	461d      	mov	r5, r3
 80036a6:	eb14 030a 	adds.w	r3, r4, sl
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	eb45 030b 	adc.w	r3, r5, fp
 80036b0:	607b      	str	r3, [r7, #4]
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036be:	4629      	mov	r1, r5
 80036c0:	028b      	lsls	r3, r1, #10
 80036c2:	4621      	mov	r1, r4
 80036c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c8:	4621      	mov	r1, r4
 80036ca:	028a      	lsls	r2, r1, #10
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d2:	2200      	movs	r2, #0
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	60fa      	str	r2, [r7, #12]
 80036d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036dc:	f7fd fa58 	bl	8000b90 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4613      	mov	r3, r2
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036e8:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	3301      	adds	r3, #1
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003702:	e002      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetSysClockFreq+0x184>)
 8003706:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800370c:	4618      	mov	r0, r3
 800370e:	3740      	adds	r7, #64	; 0x40
 8003710:	46bd      	mov	sp, r7
 8003712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	00f42400 	.word	0x00f42400
 8003720:	00b71b00 	.word	0x00b71b00

08003724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003728:	4b03      	ldr	r3, [pc, #12]	; (8003738 <HAL_RCC_GetHCLKFreq+0x14>)
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000000 	.word	0x20000000

0800373c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003740:	f7ff fff0 	bl	8003724 <HAL_RCC_GetHCLKFreq>
 8003744:	4602      	mov	r2, r0
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0a9b      	lsrs	r3, r3, #10
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4903      	ldr	r1, [pc, #12]	; (8003760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003752:	5ccb      	ldrb	r3, [r1, r3]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	080092ac 	.word	0x080092ac

08003764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e07b      	b.n	800386e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d108      	bne.n	8003790 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003786:	d009      	beq.n	800379c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	61da      	str	r2, [r3, #28]
 800378e:	e005      	b.n	800379c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7fd fe1c 	bl	80013f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	ea42 0103 	orr.w	r1, r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	f003 0104 	and.w	r1, r3, #4
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f003 0210 	and.w	r2, r3, #16
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	69da      	ldr	r2, [r3, #28]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b088      	sub	sp, #32
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	603b      	str	r3, [r7, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_SPI_Transmit+0x22>
 8003894:	2302      	movs	r3, #2
 8003896:	e126      	b.n	8003ae6 <HAL_SPI_Transmit+0x270>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038a0:	f7fe f826 	bl	80018f0 <HAL_GetTick>
 80038a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d002      	beq.n	80038bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
 80038b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038ba:	e10b      	b.n	8003ad4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_SPI_Transmit+0x52>
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038cc:	e102      	b.n	8003ad4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2203      	movs	r2, #3
 80038d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	88fa      	ldrh	r2, [r7, #6]
 80038ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003914:	d10f      	bne.n	8003936 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003924:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003934:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	d007      	beq.n	8003954 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003952:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395c:	d14b      	bne.n	80039f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <HAL_SPI_Transmit+0xf6>
 8003966:	8afb      	ldrh	r3, [r7, #22]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d13e      	bne.n	80039ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	881a      	ldrh	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	1c9a      	adds	r2, r3, #2
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003990:	e02b      	b.n	80039ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b02      	cmp	r3, #2
 800399e:	d112      	bne.n	80039c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	881a      	ldrh	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80039c4:	e011      	b.n	80039ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c6:	f7fd ff93 	bl	80018f0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d803      	bhi.n	80039de <HAL_SPI_Transmit+0x168>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d102      	bne.n	80039e4 <HAL_SPI_Transmit+0x16e>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039e8:	e074      	b.n	8003ad4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ce      	bne.n	8003992 <HAL_SPI_Transmit+0x11c>
 80039f4:	e04c      	b.n	8003a90 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_SPI_Transmit+0x18e>
 80039fe:	8afb      	ldrh	r3, [r7, #22]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d140      	bne.n	8003a86 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	7812      	ldrb	r2, [r2, #0]
 8003a10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a2a:	e02c      	b.n	8003a86 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d113      	bne.n	8003a62 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	7812      	ldrb	r2, [r2, #0]
 8003a46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a60:	e011      	b.n	8003a86 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a62:	f7fd ff45 	bl	80018f0 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d803      	bhi.n	8003a7a <HAL_SPI_Transmit+0x204>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d102      	bne.n	8003a80 <HAL_SPI_Transmit+0x20a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a84:	e026      	b.n	8003ad4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1cd      	bne.n	8003a2c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	6839      	ldr	r1, [r7, #0]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fbcb 	bl	8004230 <SPI_EndRxTxTransaction>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e000      	b.n	8003ad4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ad2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ae4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b088      	sub	sp, #32
 8003af2:	af02      	add	r7, sp, #8
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b0a:	d112      	bne.n	8003b32 <HAL_SPI_Receive+0x44>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10e      	bne.n	8003b32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2204      	movs	r2, #4
 8003b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b1c:	88fa      	ldrh	r2, [r7, #6]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	4613      	mov	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f8f1 	bl	8003d10 <HAL_SPI_TransmitReceive>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	e0ea      	b.n	8003d08 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d101      	bne.n	8003b40 <HAL_SPI_Receive+0x52>
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e0e3      	b.n	8003d08 <HAL_SPI_Receive+0x21a>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b48:	f7fd fed2 	bl	80018f0 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d002      	beq.n	8003b60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b5e:	e0ca      	b.n	8003cf6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <HAL_SPI_Receive+0x7e>
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b70:	e0c1      	b.n	8003cf6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2204      	movs	r2, #4
 8003b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	88fa      	ldrh	r2, [r7, #6]
 8003b8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	88fa      	ldrh	r2, [r7, #6]
 8003b90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb8:	d10f      	bne.n	8003bda <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bd8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d007      	beq.n	8003bf8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d162      	bne.n	8003cc6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c00:	e02e      	b.n	8003c60 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d115      	bne.n	8003c3c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f103 020c 	add.w	r2, r3, #12
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c3a:	e011      	b.n	8003c60 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c3c:	f7fd fe58 	bl	80018f0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d803      	bhi.n	8003c54 <HAL_SPI_Receive+0x166>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d102      	bne.n	8003c5a <HAL_SPI_Receive+0x16c>
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c5e:	e04a      	b.n	8003cf6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1cb      	bne.n	8003c02 <HAL_SPI_Receive+0x114>
 8003c6a:	e031      	b.n	8003cd0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d113      	bne.n	8003ca2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c84:	b292      	uxth	r2, r2
 8003c86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	1c9a      	adds	r2, r3, #2
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ca0:	e011      	b.n	8003cc6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca2:	f7fd fe25 	bl	80018f0 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d803      	bhi.n	8003cba <HAL_SPI_Receive+0x1cc>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d102      	bne.n	8003cc0 <HAL_SPI_Receive+0x1d2>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d102      	bne.n	8003cc6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003cc4:	e017      	b.n	8003cf6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1cd      	bne.n	8003c6c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	6839      	ldr	r1, [r7, #0]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 fa45 	bl	8004164 <SPI_EndRxTransaction>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
 8003cf2:	e000      	b.n	8003cf6 <HAL_SPI_Receive+0x208>
  }

error :
 8003cf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08c      	sub	sp, #48	; 0x30
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_SPI_TransmitReceive+0x26>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e18a      	b.n	800404c <HAL_SPI_TransmitReceive+0x33c>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d3e:	f7fd fdd7 	bl	80018f0 <HAL_GetTick>
 8003d42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003d54:	887b      	ldrh	r3, [r7, #2]
 8003d56:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d00f      	beq.n	8003d80 <HAL_SPI_TransmitReceive+0x70>
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d66:	d107      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <HAL_SPI_TransmitReceive+0x68>
 8003d70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d003      	beq.n	8003d80 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d7e:	e15b      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x82>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x82>
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d98:	e14e      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d003      	beq.n	8003dae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2205      	movs	r2, #5
 8003daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	887a      	ldrh	r2, [r7, #2]
 8003dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	887a      	ldrh	r2, [r7, #2]
 8003dd6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b40      	cmp	r3, #64	; 0x40
 8003df0:	d007      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e0a:	d178      	bne.n	8003efe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_TransmitReceive+0x10a>
 8003e14:	8b7b      	ldrh	r3, [r7, #26]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d166      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	881a      	ldrh	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	1c9a      	adds	r2, r3, #2
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e3e:	e053      	b.n	8003ee8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d11b      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x176>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d016      	beq.n	8003e86 <HAL_SPI_TransmitReceive+0x176>
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d113      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	1c9a      	adds	r2, r3, #2
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d119      	bne.n	8003ec8 <HAL_SPI_TransmitReceive+0x1b8>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d014      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	b292      	uxth	r2, r2
 8003eaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	1c9a      	adds	r2, r3, #2
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ec8:	f7fd fd12 	bl	80018f0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d807      	bhi.n	8003ee8 <HAL_SPI_TransmitReceive+0x1d8>
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d003      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ee6:	e0a7      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1a6      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x130>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1a1      	bne.n	8003e40 <HAL_SPI_TransmitReceive+0x130>
 8003efc:	e07c      	b.n	8003ff8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x1fc>
 8003f06:	8b7b      	ldrh	r3, [r7, #26]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d16b      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	330c      	adds	r3, #12
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f32:	e057      	b.n	8003fe4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d11c      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x26c>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d017      	beq.n	8003f7c <HAL_SPI_TransmitReceive+0x26c>
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d114      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d119      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x2ae>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d014      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fbe:	f7fd fc97 	bl	80018f0 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d803      	bhi.n	8003fd6 <HAL_SPI_TransmitReceive+0x2c6>
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d102      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x2cc>
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fe2:	e029      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1a2      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x224>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d19d      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f917 	bl	8004230 <SPI_EndRxTxTransaction>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d006      	beq.n	8004016 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004014:	e010      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	e000      	b.n	8004038 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004036:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800404c:	4618      	mov	r0, r3
 800404e:	3730      	adds	r7, #48	; 0x30
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b088      	sub	sp, #32
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004064:	f7fd fc44 	bl	80018f0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	4413      	add	r3, r2
 8004072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004074:	f7fd fc3c 	bl	80018f0 <HAL_GetTick>
 8004078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800407a:	4b39      	ldr	r3, [pc, #228]	; (8004160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	015b      	lsls	r3, r3, #5
 8004080:	0d1b      	lsrs	r3, r3, #20
 8004082:	69fa      	ldr	r2, [r7, #28]
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800408a:	e054      	b.n	8004136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d050      	beq.n	8004136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004094:	f7fd fc2c 	bl	80018f0 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d902      	bls.n	80040aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d13d      	bne.n	8004126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c2:	d111      	bne.n	80040e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040cc:	d004      	beq.n	80040d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d107      	bne.n	80040e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f0:	d10f      	bne.n	8004112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e017      	b.n	8004156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3b01      	subs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4013      	ands	r3, r2
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	429a      	cmp	r2, r3
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	429a      	cmp	r2, r3
 8004152:	d19b      	bne.n	800408c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000000 	.word	0x20000000

08004164 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004178:	d111      	bne.n	800419e <SPI_EndRxTransaction+0x3a>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004182:	d004      	beq.n	800418e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418c:	d107      	bne.n	800419e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800419c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a6:	d12a      	bne.n	80041fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b0:	d012      	beq.n	80041d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2200      	movs	r2, #0
 80041ba:	2180      	movs	r1, #128	; 0x80
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff ff49 	bl	8004054 <SPI_WaitFlagStateUntilTimeout>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d02d      	beq.n	8004224 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e026      	b.n	8004226 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2200      	movs	r2, #0
 80041e0:	2101      	movs	r1, #1
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff36 	bl	8004054 <SPI_WaitFlagStateUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d01a      	beq.n	8004224 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f043 0220 	orr.w	r2, r3, #32
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e013      	b.n	8004226 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2200      	movs	r2, #0
 8004206:	2101      	movs	r1, #1
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f7ff ff23 	bl	8004054 <SPI_WaitFlagStateUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d007      	beq.n	8004224 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e000      	b.n	8004226 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af02      	add	r7, sp, #8
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <SPI_EndRxTxTransaction+0x7c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <SPI_EndRxTxTransaction+0x80>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	0d5b      	lsrs	r3, r3, #21
 8004248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800424c:	fb02 f303 	mul.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800425a:	d112      	bne.n	8004282 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2200      	movs	r2, #0
 8004264:	2180      	movs	r1, #128	; 0x80
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	f7ff fef4 	bl	8004054 <SPI_WaitFlagStateUntilTimeout>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f043 0220 	orr.w	r2, r3, #32
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e00f      	b.n	80042a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3b01      	subs	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	2b80      	cmp	r3, #128	; 0x80
 800429a:	d0f2      	beq.n	8004282 <SPI_EndRxTxTransaction+0x52>
 800429c:	e000      	b.n	80042a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800429e:	bf00      	nop
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000000 	.word	0x20000000
 80042b0:	165e9f81 	.word	0x165e9f81

080042b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e041      	b.n	800434a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fd fa02 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f000 fc7a 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d001      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e04e      	b.n	800440a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a23      	ldr	r2, [pc, #140]	; (8004418 <HAL_TIM_Base_Start_IT+0xc4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d022      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d01d      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_TIM_Base_Start_IT+0xc8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <HAL_TIM_Base_Start_IT+0xcc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1c      	ldr	r2, [pc, #112]	; (8004424 <HAL_TIM_Base_Start_IT+0xd0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1b      	ldr	r2, [pc, #108]	; (8004428 <HAL_TIM_Base_Start_IT+0xd4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a19      	ldr	r2, [pc, #100]	; (800442c <HAL_TIM_Base_Start_IT+0xd8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x80>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a18      	ldr	r2, [pc, #96]	; (8004430 <HAL_TIM_Base_Start_IT+0xdc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d111      	bne.n	80043f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d010      	beq.n	8004408 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f6:	e007      	b.n	8004408 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40010000 	.word	0x40010000
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800
 8004424:	40000c00 	.word	0x40000c00
 8004428:	40010400 	.word	0x40010400
 800442c:	40014000 	.word	0x40014000
 8004430:	40001800 	.word	0x40001800

08004434 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e041      	b.n	80044ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f839 	bl	80044d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f000 fbba 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <HAL_TIM_PWM_Start+0x24>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	bf14      	ite	ne
 8004504:	2301      	movne	r3, #1
 8004506:	2300      	moveq	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	e022      	b.n	8004552 <HAL_TIM_PWM_Start+0x6a>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b04      	cmp	r3, #4
 8004510:	d109      	bne.n	8004526 <HAL_TIM_PWM_Start+0x3e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	bf14      	ite	ne
 800451e:	2301      	movne	r3, #1
 8004520:	2300      	moveq	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	e015      	b.n	8004552 <HAL_TIM_PWM_Start+0x6a>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d109      	bne.n	8004540 <HAL_TIM_PWM_Start+0x58>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e008      	b.n	8004552 <HAL_TIM_PWM_Start+0x6a>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b01      	cmp	r3, #1
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07c      	b.n	8004654 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <HAL_TIM_PWM_Start+0x82>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004568:	e013      	b.n	8004592 <HAL_TIM_PWM_Start+0xaa>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b04      	cmp	r3, #4
 800456e:	d104      	bne.n	800457a <HAL_TIM_PWM_Start+0x92>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004578:	e00b      	b.n	8004592 <HAL_TIM_PWM_Start+0xaa>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	d104      	bne.n	800458a <HAL_TIM_PWM_Start+0xa2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004588:	e003      	b.n	8004592 <HAL_TIM_PWM_Start+0xaa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2201      	movs	r2, #1
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fe10 	bl	80051c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2d      	ldr	r2, [pc, #180]	; (800465c <HAL_TIM_PWM_Start+0x174>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIM_PWM_Start+0xcc>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <HAL_TIM_PWM_Start+0x178>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_PWM_Start+0xd0>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_TIM_PWM_Start+0xd2>
 80045b8:	2300      	movs	r3, #0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <HAL_TIM_PWM_Start+0x174>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e0:	d01d      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <HAL_TIM_PWM_Start+0x17c>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <HAL_TIM_PWM_Start+0x180>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1c      	ldr	r2, [pc, #112]	; (800466c <HAL_TIM_PWM_Start+0x184>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_TIM_PWM_Start+0x178>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIM_PWM_Start+0x188>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIM_PWM_Start+0x136>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a16      	ldr	r2, [pc, #88]	; (8004674 <HAL_TIM_PWM_Start+0x18c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d111      	bne.n	8004642 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d010      	beq.n	8004652 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	e007      	b.n	8004652 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40010000 	.word	0x40010000
 8004660:	40010400 	.word	0x40010400
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40014000 	.word	0x40014000
 8004674:	40001800 	.word	0x40001800

08004678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d122      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b02      	cmp	r3, #2
 800469a:	d11b      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0202 	mvn.w	r2, #2
 80046a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa77 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 80046c0:	e005      	b.n	80046ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa69 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fa7a 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d122      	bne.n	8004728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d11b      	bne.n	8004728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0204 	mvn.w	r2, #4
 80046f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa4d 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 8004714:	e005      	b.n	8004722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa3f 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa50 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b08      	cmp	r3, #8
 8004734:	d122      	bne.n	800477c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b08      	cmp	r3, #8
 8004742:	d11b      	bne.n	800477c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f06f 0208 	mvn.w	r2, #8
 800474c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2204      	movs	r2, #4
 8004752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fa23 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 8004768:	e005      	b.n	8004776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa15 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fa26 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b10      	cmp	r3, #16
 8004788:	d122      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b10      	cmp	r3, #16
 8004796:	d11b      	bne.n	80047d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0210 	mvn.w	r2, #16
 80047a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2208      	movs	r2, #8
 80047a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f9f9 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 80047bc:	e005      	b.n	80047ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f9eb 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f9fc 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d10e      	bne.n	80047fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d107      	bne.n	80047fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0201 	mvn.w	r2, #1
 80047f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc fcd6 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b80      	cmp	r3, #128	; 0x80
 8004808:	d10e      	bne.n	8004828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004814:	2b80      	cmp	r3, #128	; 0x80
 8004816:	d107      	bne.n	8004828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fd78 	bl	8005318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	d10e      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b40      	cmp	r3, #64	; 0x40
 8004842:	d107      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9c1 	bl	8004bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b20      	cmp	r3, #32
 8004860:	d10e      	bne.n	8004880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b20      	cmp	r3, #32
 800486e:	d107      	bne.n	8004880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0220 	mvn.w	r2, #32
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fd42 	bl	8005304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004880:	bf00      	nop
 8004882:	3708      	adds	r7, #8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e0ae      	b.n	8004a04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	f200 809f 	bhi.w	80049f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	080049f5 	.word	0x080049f5
 80048c4:	080049f5 	.word	0x080049f5
 80048c8:	080049f5 	.word	0x080049f5
 80048cc:	08004931 	.word	0x08004931
 80048d0:	080049f5 	.word	0x080049f5
 80048d4:	080049f5 	.word	0x080049f5
 80048d8:	080049f5 	.word	0x080049f5
 80048dc:	08004973 	.word	0x08004973
 80048e0:	080049f5 	.word	0x080049f5
 80048e4:	080049f5 	.word	0x080049f5
 80048e8:	080049f5 	.word	0x080049f5
 80048ec:	080049b3 	.word	0x080049b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fa18 	bl	8004d2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699a      	ldr	r2, [r3, #24]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0208 	orr.w	r2, r2, #8
 800490a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0204 	bic.w	r2, r2, #4
 800491a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6999      	ldr	r1, [r3, #24]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	619a      	str	r2, [r3, #24]
      break;
 800492e:	e064      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fa68 	bl	8004e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800494a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699a      	ldr	r2, [r3, #24]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6999      	ldr	r1, [r3, #24]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	021a      	lsls	r2, r3, #8
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	619a      	str	r2, [r3, #24]
      break;
 8004970:	e043      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fabd 	bl	8004ef8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69da      	ldr	r2, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0208 	orr.w	r2, r2, #8
 800498c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0204 	bic.w	r2, r2, #4
 800499c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	61da      	str	r2, [r3, #28]
      break;
 80049b0:	e023      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fb11 	bl	8004fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69da      	ldr	r2, [r3, #28]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69d9      	ldr	r1, [r3, #28]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	021a      	lsls	r2, r3, #8
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	61da      	str	r2, [r3, #28]
      break;
 80049f2:	e002      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
      break;
 80049f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIM_ConfigClockSource+0x1c>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e0b4      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x186>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a60:	d03e      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0xd4>
 8004a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a66:	f200 8087 	bhi.w	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	f000 8086 	beq.w	8004b7e <HAL_TIM_ConfigClockSource+0x172>
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a76:	d87f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b70      	cmp	r3, #112	; 0x70
 8004a7a:	d01a      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xa6>
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d87b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d050      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x11a>
 8004a84:	2b60      	cmp	r3, #96	; 0x60
 8004a86:	d877      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b50      	cmp	r3, #80	; 0x50
 8004a8a:	d03c      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0xfa>
 8004a8c:	2b50      	cmp	r3, #80	; 0x50
 8004a8e:	d873      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d058      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x13a>
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d86f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b30      	cmp	r3, #48	; 0x30
 8004a9a:	d064      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	2b30      	cmp	r3, #48	; 0x30
 8004a9e:	d86b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d060      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d867      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05c      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d05a      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15a>
 8004ab0:	e062      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6899      	ldr	r1, [r3, #8]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f000 fb5d 	bl	8005180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	609a      	str	r2, [r3, #8]
      break;
 8004ade:	e04f      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f000 fb46 	bl	8005180 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b02:	609a      	str	r2, [r3, #8]
      break;
 8004b04:	e03c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 faba 	bl	800508c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2150      	movs	r1, #80	; 0x50
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fb13 	bl	800514a <TIM_ITRx_SetConfig>
      break;
 8004b24:	e02c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 fad9 	bl	80050ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2160      	movs	r1, #96	; 0x60
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fb03 	bl	800514a <TIM_ITRx_SetConfig>
      break;
 8004b44:	e01c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 fa9a 	bl	800508c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2140      	movs	r1, #64	; 0x40
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 faf3 	bl	800514a <TIM_ITRx_SetConfig>
      break;
 8004b64:	e00c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 faea 	bl	800514a <TIM_ITRx_SetConfig>
      break;
 8004b76:	e003      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e000      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3d      	ldr	r2, [pc, #244]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3b      	ldr	r2, [pc, #236]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3a      	ldr	r2, [pc, #232]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d027      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d023      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d01b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d017      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <TIM_Base_SetConfig+0x128>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00f      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00b      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a25      	ldr	r2, [pc, #148]	; (8004d20 <TIM_Base_SetConfig+0x134>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <TIM_Base_SetConfig+0x138>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d003      	beq.n	8004c9e <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a23      	ldr	r2, [pc, #140]	; (8004d28 <TIM_Base_SetConfig+0x13c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d108      	bne.n	8004cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a0a      	ldr	r2, [pc, #40]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40010000 	.word	0x40010000
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40010400 	.word	0x40010400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800
 8004d20:	40001800 	.word	0x40001800
 8004d24:	40001c00 	.word	0x40001c00
 8004d28:	40002000 	.word	0x40002000

08004d2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0201 	bic.w	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0303 	bic.w	r3, r3, #3
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 0302 	bic.w	r3, r3, #2
 8004d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a20      	ldr	r2, [pc, #128]	; (8004e04 <TIM_OC1_SetConfig+0xd8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_OC1_SetConfig+0x64>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1f      	ldr	r2, [pc, #124]	; (8004e08 <TIM_OC1_SetConfig+0xdc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d10c      	bne.n	8004daa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	f023 0308 	bic.w	r3, r3, #8
 8004d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f023 0304 	bic.w	r3, r3, #4
 8004da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <TIM_OC1_SetConfig+0xd8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_OC1_SetConfig+0x8e>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <TIM_OC1_SetConfig+0xdc>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d111      	bne.n	8004dde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40010400 	.word	0x40010400

08004e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0210 	bic.w	r2, r3, #16
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	f023 0320 	bic.w	r3, r3, #32
 8004e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a22      	ldr	r2, [pc, #136]	; (8004ef0 <TIM_OC2_SetConfig+0xe4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d003      	beq.n	8004e74 <TIM_OC2_SetConfig+0x68>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <TIM_OC2_SetConfig+0xe8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d10d      	bne.n	8004e90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <TIM_OC2_SetConfig+0xe4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_OC2_SetConfig+0x94>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <TIM_OC2_SetConfig+0xe8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d113      	bne.n	8004ec8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	40010000 	.word	0x40010000
 8004ef4:	40010400 	.word	0x40010400

08004ef8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	021b      	lsls	r3, r3, #8
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a21      	ldr	r2, [pc, #132]	; (8004fd8 <TIM_OC3_SetConfig+0xe0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_OC3_SetConfig+0x66>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a20      	ldr	r2, [pc, #128]	; (8004fdc <TIM_OC3_SetConfig+0xe4>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10d      	bne.n	8004f7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <TIM_OC3_SetConfig+0xe0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_OC3_SetConfig+0x92>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <TIM_OC3_SetConfig+0xe4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d113      	bne.n	8004fb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	621a      	str	r2, [r3, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800502a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	031b      	lsls	r3, r3, #12
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a12      	ldr	r2, [pc, #72]	; (8005084 <TIM_OC4_SetConfig+0xa4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_OC4_SetConfig+0x68>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a11      	ldr	r2, [pc, #68]	; (8005088 <TIM_OC4_SetConfig+0xa8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d109      	bne.n	800505c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800504e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	019b      	lsls	r3, r3, #6
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40010400 	.word	0x40010400

0800508c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f023 0201 	bic.w	r2, r3, #1
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f023 030a 	bic.w	r3, r3, #10
 80050c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	621a      	str	r2, [r3, #32]
}
 80050de:	bf00      	nop
 80050e0:	371c      	adds	r7, #28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b087      	sub	sp, #28
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f023 0210 	bic.w	r2, r3, #16
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800514a:	b480      	push	{r7}
 800514c:	b085      	sub	sp, #20
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005160:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	f043 0307 	orr.w	r3, r3, #7
 800516c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	609a      	str	r2, [r3, #8]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	021a      	lsls	r2, r3, #8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	609a      	str	r2, [r3, #8]
}
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 031f 	and.w	r3, r3, #31
 80051d2:	2201      	movs	r2, #1
 80051d4:	fa02 f303 	lsl.w	r3, r2, r3
 80051d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1a      	ldr	r2, [r3, #32]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	401a      	ands	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1a      	ldr	r2, [r3, #32]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 031f 	and.w	r3, r3, #31
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	fa01 f303 	lsl.w	r3, r1, r3
 80051f8:	431a      	orrs	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005220:	2302      	movs	r3, #2
 8005222:	e05a      	b.n	80052da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	4313      	orrs	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a21      	ldr	r2, [pc, #132]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d022      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005270:	d01d      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d018      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00e      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a17      	ldr	r2, [pc, #92]	; (80052fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a15      	ldr	r2, [pc, #84]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d10c      	bne.n	80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40010400 	.word	0x40010400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40001800 	.word	0x40001800

08005304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <invSqrt>:
  * @author         Guo_Hui_Lin
  * @param[in]      输入
  * @retval         输入值开方的倒数
  */
float invSqrt(float num)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfnum = 0.5f * num;
 8005336:	edd7 7a01 	vldr	s15, [r7, #4]
 800533a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800533e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005342:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = num;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 800534a:	f107 0310 	add.w	r3, r7, #16
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i >> 1);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	105a      	asrs	r2, r3, #1
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <invSqrt+0x74>)
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 800535c:	f107 030c 	add.w	r3, r7, #12
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfnum * y * y));
 8005364:	ed97 7a04 	vldr	s14, [r7, #16]
 8005368:	edd7 7a05 	vldr	s15, [r7, #20]
 800536c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005370:	edd7 7a04 	vldr	s15, [r7, #16]
 8005374:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005378:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800537c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005380:	edd7 7a04 	vldr	s15, [r7, #16]
 8005384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005388:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	ee07 3a90 	vmov	s15, r3
}
 8005392:	eeb0 0a67 	vmov.f32	s0, s15
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	5f3759df 	.word	0x5f3759df

080053a4 <limit_control>:
  * @param	需要限幅的变量
  * @param	限幅值
  * @retval 限幅值之内的值
  */
float limit_control(float input, float limit)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80053ae:	edc7 0a00 	vstr	s1, [r7]
	float limit_output = input;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
	if(input > limit) limit_output = limit;
 80053b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80053ba:	edd7 7a00 	vldr	s15, [r7]
 80053be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c6:	dd02      	ble.n	80053ce <limit_control+0x2a>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e010      	b.n	80053f0 <limit_control+0x4c>
	else if(input < (-1 * limit)) limit_output = (-1 * limit);
 80053ce:	edd7 7a00 	vldr	s15, [r7]
 80053d2:	eef1 7a67 	vneg.f32	s15, s15
 80053d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80053da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e2:	d505      	bpl.n	80053f0 <limit_control+0x4c>
 80053e4:	edd7 7a00 	vldr	s15, [r7]
 80053e8:	eef1 7a67 	vneg.f32	s15, s15
 80053ec:	edc7 7a03 	vstr	s15, [r7, #12]

	return limit_output;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	ee07 3a90 	vmov	s15, r3
}
 80053f6:	eeb0 0a67 	vmov.f32	s0, s15
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <BMI088_Acc_WriteReg>:
  * @param :data :要写入的数据
  * @note  :此函数是基于HAL库的HAL_SPI_Transmit()函数，使用SPI1，请确定是否已经配置完成
  * @retval:无
  */
void BMI088_Acc_WriteReg(uint8_t addr, uint8_t data)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	460a      	mov	r2, r1
 800540e:	71fb      	strb	r3, [r7, #7]
 8005410:	4613      	mov	r3, r2
 8005412:	71bb      	strb	r3, [r7, #6]
	SPI_ACC_ENABLE();
 8005414:	2200      	movs	r2, #0
 8005416:	2110      	movs	r1, #16
 8005418:	4811      	ldr	r0, [pc, #68]	; (8005460 <BMI088_Acc_WriteReg+0x5c>)
 800541a:	f7fc fd47 	bl	8001eac <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr & BMI088_SPI_WRITE_CODE);
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005424:	b2db      	uxtb	r3, r3
 8005426:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8005428:	f107 010f 	add.w	r1, r7, #15
 800542c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005430:	2201      	movs	r2, #1
 8005432:	480c      	ldr	r0, [pc, #48]	; (8005464 <BMI088_Acc_WriteReg+0x60>)
 8005434:	f7fe fa1f 	bl	8003876 <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005438:	1db9      	adds	r1, r7, #6
 800543a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800543e:	2201      	movs	r2, #1
 8005440:	4808      	ldr	r0, [pc, #32]	; (8005464 <BMI088_Acc_WriteReg+0x60>)
 8005442:	f7fe fa18 	bl	8003876 <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_Delay(1);
 8005446:	2001      	movs	r0, #1
 8005448:	f7fc fa5e 	bl	8001908 <HAL_Delay>
	SPI_ACC_DISABLE();
 800544c:	2201      	movs	r2, #1
 800544e:	2110      	movs	r1, #16
 8005450:	4803      	ldr	r0, [pc, #12]	; (8005460 <BMI088_Acc_WriteReg+0x5c>)
 8005452:	f7fc fd2b 	bl	8001eac <HAL_GPIO_WritePin>
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40020000 	.word	0x40020000
 8005464:	20000178 	.word	0x20000178

08005468 <BMI088_Gyro_WriteReg>:
  * @param :data :要写入的数据
  * @note  :此函数是基于HAL库的HAL_SPI_Transmit()函数，使用SPI1，请确定是否已经配置完成
  * @retval:无
  */
void BMI088_Gyro_WriteReg(uint8_t addr, uint8_t data)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	460a      	mov	r2, r1
 8005472:	71fb      	strb	r3, [r7, #7]
 8005474:	4613      	mov	r3, r2
 8005476:	71bb      	strb	r3, [r7, #6]
	SPI_GYRO_ENABLE();
 8005478:	2200      	movs	r2, #0
 800547a:	2101      	movs	r1, #1
 800547c:	480f      	ldr	r0, [pc, #60]	; (80054bc <BMI088_Gyro_WriteReg+0x54>)
 800547e:	f7fc fd15 	bl	8001eac <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr & BMI088_SPI_WRITE_CODE);
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005488:	b2db      	uxtb	r3, r3
 800548a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 800548c:	f107 010f 	add.w	r1, r7, #15
 8005490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005494:	2201      	movs	r2, #1
 8005496:	480a      	ldr	r0, [pc, #40]	; (80054c0 <BMI088_Gyro_WriteReg+0x58>)
 8005498:	f7fe f9ed 	bl	8003876 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800549c:	1db9      	adds	r1, r7, #6
 800549e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054a2:	2201      	movs	r2, #1
 80054a4:	4806      	ldr	r0, [pc, #24]	; (80054c0 <BMI088_Gyro_WriteReg+0x58>)
 80054a6:	f7fe f9e6 	bl	8003876 <HAL_SPI_Transmit>

	SPI_GYRO_DISABLE();
 80054aa:	2201      	movs	r2, #1
 80054ac:	2101      	movs	r1, #1
 80054ae:	4803      	ldr	r0, [pc, #12]	; (80054bc <BMI088_Gyro_WriteReg+0x54>)
 80054b0:	f7fc fcfc 	bl	8001eac <HAL_GPIO_WritePin>
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40020400 	.word	0x40020400
 80054c0:	20000178 	.word	0x20000178

080054c4 <BMI088_Acc_ReadReg>:
  * @param :len :读取数据的字节数
  * @note  :此函数是基于HAL库的HAL_SPI_Receive()函数，使用SPI1，请确定是否已经配置完成
  * @retval:无
  */
void BMI088_Acc_ReadReg(uint8_t addr, uint8_t *pdata, uint8_t len)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	6039      	str	r1, [r7, #0]
 80054ce:	71fb      	strb	r3, [r7, #7]
 80054d0:	4613      	mov	r3, r2
 80054d2:	71bb      	strb	r3, [r7, #6]
	SPI_ACC_ENABLE();
 80054d4:	2200      	movs	r2, #0
 80054d6:	2110      	movs	r1, #16
 80054d8:	4814      	ldr	r0, [pc, #80]	; (800552c <BMI088_Acc_ReadReg+0x68>)
 80054da:	f7fc fce7 	bl	8001eac <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr | BMI088_SPI_READ_CODE);
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 80054e8:	f107 010f 	add.w	r1, r7, #15
 80054ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054f0:	2201      	movs	r2, #1
 80054f2:	480f      	ldr	r0, [pc, #60]	; (8005530 <BMI088_Acc_ReadReg+0x6c>)
 80054f4:	f7fe f9bf 	bl	8003876 <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_SPI_Receive(&hspi1, &pTxData, 1, 1000);
 80054f8:	f107 010f 	add.w	r1, r7, #15
 80054fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005500:	2201      	movs	r2, #1
 8005502:	480b      	ldr	r0, [pc, #44]	; (8005530 <BMI088_Acc_ReadReg+0x6c>)
 8005504:	f7fe faf3 	bl	8003aee <HAL_SPI_Receive>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_RX);
	HAL_SPI_Receive(&hspi1, pdata, len, 0XFFFF);
 8005508:	79bb      	ldrb	r3, [r7, #6]
 800550a:	b29a      	uxth	r2, r3
 800550c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005510:	6839      	ldr	r1, [r7, #0]
 8005512:	4807      	ldr	r0, [pc, #28]	; (8005530 <BMI088_Acc_ReadReg+0x6c>)
 8005514:	f7fe faeb 	bl	8003aee <HAL_SPI_Receive>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_RX);

	SPI_ACC_DISABLE();
 8005518:	2201      	movs	r2, #1
 800551a:	2110      	movs	r1, #16
 800551c:	4803      	ldr	r0, [pc, #12]	; (800552c <BMI088_Acc_ReadReg+0x68>)
 800551e:	f7fc fcc5 	bl	8001eac <HAL_GPIO_WritePin>
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40020000 	.word	0x40020000
 8005530:	20000178 	.word	0x20000178

08005534 <BMI088_Gyro_ReadReg>:
  * @param :len :读取数据的字节数
  * @note  :此函数是基于HAL库的HAL_SPI_Receive()函数，使用SPI1，请确定是否已经配置完成
  * @retval:无
  */
void BMI088_Gyro_ReadReg(uint8_t addr, uint8_t *pdata, uint8_t len)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	6039      	str	r1, [r7, #0]
 800553e:	71fb      	strb	r3, [r7, #7]
 8005540:	4613      	mov	r3, r2
 8005542:	71bb      	strb	r3, [r7, #6]
	SPI_GYRO_ENABLE();
 8005544:	2200      	movs	r2, #0
 8005546:	2101      	movs	r1, #1
 8005548:	4810      	ldr	r0, [pc, #64]	; (800558c <BMI088_Gyro_ReadReg+0x58>)
 800554a:	f7fc fcaf 	bl	8001eac <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr | BMI088_SPI_READ_CODE);
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005554:	b2db      	uxtb	r3, r3
 8005556:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8005558:	f107 010f 	add.w	r1, r7, #15
 800555c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005560:	2201      	movs	r2, #1
 8005562:	480b      	ldr	r0, [pc, #44]	; (8005590 <BMI088_Gyro_ReadReg+0x5c>)
 8005564:	f7fe f987 	bl	8003876 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pdata, len, 1000);
 8005568:	79bb      	ldrb	r3, [r7, #6]
 800556a:	b29a      	uxth	r2, r3
 800556c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005570:	6839      	ldr	r1, [r7, #0]
 8005572:	4807      	ldr	r0, [pc, #28]	; (8005590 <BMI088_Gyro_ReadReg+0x5c>)
 8005574:	f7fe fabb 	bl	8003aee <HAL_SPI_Receive>

	SPI_GYRO_DISABLE();
 8005578:	2201      	movs	r2, #1
 800557a:	2101      	movs	r1, #1
 800557c:	4803      	ldr	r0, [pc, #12]	; (800558c <BMI088_Gyro_ReadReg+0x58>)
 800557e:	f7fc fc95 	bl	8001eac <HAL_GPIO_WritePin>
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40020400 	.word	0x40020400
 8005590:	20000178 	.word	0x20000178

08005594 <BMI088_Acc_ReadID>:

/*--------BMI088数据读取函数--------*/
uint8_t BMI088_Acc_ReadID(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
	uint8_t ID;
	BMI088_Acc_ReadReg(BMI088_ACC_CHIP_ID, &ID, 1);
 800559a:	1dfb      	adds	r3, r7, #7
 800559c:	2201      	movs	r2, #1
 800559e:	4619      	mov	r1, r3
 80055a0:	2000      	movs	r0, #0
 80055a2:	f7ff ff8f 	bl	80054c4 <BMI088_Acc_ReadReg>

	return ID;
 80055a6:	79fb      	ldrb	r3, [r7, #7]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <BMI088_Gyro_ReadID>:

uint8_t BMI088_Gyro_ReadID(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
	uint8_t ID;
	BMI088_Gyro_ReadReg(BMI088_GYRO_CHIP_ID, &ID, 1);
 80055b6:	1dfb      	adds	r3, r7, #7
 80055b8:	2201      	movs	r2, #1
 80055ba:	4619      	mov	r1, r3
 80055bc:	2000      	movs	r0, #0
 80055be:	f7ff ffb9 	bl	8005534 <BMI088_Gyro_ReadReg>

	return ID;
 80055c2:	79fb      	ldrb	r3, [r7, #7]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <BMI088_Get_Temperature>:

float BMI088_Get_Temperature(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
	uint8_t buff[2];
	uint16_t temp_uint11;
	int16_t temp_int11;

	BMI088_Acc_ReadReg(BMI088_TEMP_M, buff, 2);
 80055d2:	463b      	mov	r3, r7
 80055d4:	2202      	movs	r2, #2
 80055d6:	4619      	mov	r1, r3
 80055d8:	2022      	movs	r0, #34	; 0x22
 80055da:	f7ff ff73 	bl	80054c4 <BMI088_Acc_ReadReg>
	temp_uint11 = (buff[0] << 3) + (buff[1] >> 5);
 80055de:	783b      	ldrb	r3, [r7, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	787b      	ldrb	r3, [r7, #1]
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	80bb      	strh	r3, [r7, #4]
	if (temp_uint11 > 1023)
 80055f2:	88bb      	ldrh	r3, [r7, #4]
 80055f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f8:	d305      	bcc.n	8005606 <BMI088_Get_Temperature+0x3a>
	{
		temp_int11 = temp_uint11 - 2048;
 80055fa:	88bb      	ldrh	r3, [r7, #4]
 80055fc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005600:	b29b      	uxth	r3, r3
 8005602:	80fb      	strh	r3, [r7, #6]
 8005604:	e001      	b.n	800560a <BMI088_Get_Temperature+0x3e>
	}
	else
	{
		temp_int11 = temp_uint11;
 8005606:	88bb      	ldrh	r3, [r7, #4]
 8005608:	80fb      	strh	r3, [r7, #6]
	}

	return (temp_int11 * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET);
 800560a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005616:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800561a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800561e:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005622:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005626:	eeb0 0a67 	vmov.f32	s0, s15
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <BMI088_Getdata_Acc_raw>:
//raw
void BMI088_Getdata_Acc_raw(int16_t *accdata)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	BMI088_Acc_ReadReg(BMI088_ACCEL_XOUT_L, buff, 6);
 8005638:	f107 0308 	add.w	r3, r7, #8
 800563c:	2206      	movs	r2, #6
 800563e:	4619      	mov	r1, r3
 8005640:	2012      	movs	r0, #18
 8005642:	f7ff ff3f 	bl	80054c4 <BMI088_Acc_ReadReg>
	accdata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 8005646:	7a7b      	ldrb	r3, [r7, #9]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	b21a      	sxth	r2, r3
 800564c:	7a3b      	ldrb	r3, [r7, #8]
 800564e:	b21b      	sxth	r3, r3
 8005650:	4313      	orrs	r3, r2
 8005652:	b21a      	sxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	801a      	strh	r2, [r3, #0]
	accdata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 8005658:	7afb      	ldrb	r3, [r7, #11]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	b219      	sxth	r1, r3
 800565e:	7abb      	ldrb	r3, [r7, #10]
 8005660:	b21a      	sxth	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3302      	adds	r3, #2
 8005666:	430a      	orrs	r2, r1
 8005668:	b212      	sxth	r2, r2
 800566a:	801a      	strh	r2, [r3, #0]
	accdata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 800566c:	7b7b      	ldrb	r3, [r7, #13]
 800566e:	021b      	lsls	r3, r3, #8
 8005670:	b219      	sxth	r1, r3
 8005672:	7b3b      	ldrb	r3, [r7, #12]
 8005674:	b21a      	sxth	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	430a      	orrs	r2, r1
 800567c:	b212      	sxth	r2, r2
 800567e:	801a      	strh	r2, [r3, #0]
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <BMI088_Getdata_Gyro_raw>:
//rad / s
void BMI088_Getdata_Gyro_raw(int16_t *gyrodata)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	BMI088_Gyro_ReadReg(BMI088_GYRO_X_L, buff, 6);
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	2206      	movs	r2, #6
 8005696:	4619      	mov	r1, r3
 8005698:	2002      	movs	r0, #2
 800569a:	f7ff ff4b 	bl	8005534 <BMI088_Gyro_ReadReg>
	gyrodata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 800569e:	7a7b      	ldrb	r3, [r7, #9]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	b21a      	sxth	r2, r3
 80056a4:	7a3b      	ldrb	r3, [r7, #8]
 80056a6:	b21b      	sxth	r3, r3
 80056a8:	4313      	orrs	r3, r2
 80056aa:	b21a      	sxth	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	801a      	strh	r2, [r3, #0]
	gyrodata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 80056b0:	7afb      	ldrb	r3, [r7, #11]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	b219      	sxth	r1, r3
 80056b6:	7abb      	ldrb	r3, [r7, #10]
 80056b8:	b21a      	sxth	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3302      	adds	r3, #2
 80056be:	430a      	orrs	r2, r1
 80056c0:	b212      	sxth	r2, r2
 80056c2:	801a      	strh	r2, [r3, #0]
	gyrodata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 80056c4:	7b7b      	ldrb	r3, [r7, #13]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	b219      	sxth	r1, r3
 80056ca:	7b3b      	ldrb	r3, [r7, #12]
 80056cc:	b21a      	sxth	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	430a      	orrs	r2, r1
 80056d4:	b212      	sxth	r2, r2
 80056d6:	801a      	strh	r2, [r3, #0]
}
 80056d8:	bf00      	nop
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <BMI088_Acc_Init>:
	tempbuff = (int16_t)( (buff[5] << 8) | buff[4] );
	gyrodata[2] = tempbuff * BMI088_GYRO_2000_SEN;
}
/*--------BMI088初始化函数--------*/
IMU_ERROR_Typedef BMI088_Acc_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t ID;
	uint8_t BMI088_Acc_Init_Data[6][2] = {
 80056e6:	4a21      	ldr	r2, [pc, #132]	; (800576c <BMI088_Acc_Init+0x8c>)
 80056e8:	463b      	mov	r3, r7
 80056ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80056ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			{BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE},//加速度正常工作模式
			{BMI088_ACC_RANGE, BMI088_ACC_RANGE_3G},//设置范围为+-3G
			{BMI088_ACC_CONF, BMI088_ACC_NORMAL | BMI088_ACC_800_HZ | BMI088_ACC_CONF_MUST_Set},//设置采样， 输出频率1600HZ
			{BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_OFF},
	};
    ID = BMI088_Acc_ReadID();
 80056f0:	f7ff ff50 	bl	8005594 <BMI088_Acc_ReadID>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73bb      	strb	r3, [r7, #14]
    if (ID != BMI088_ACC_CHIP_ID_VALUE)
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	2b1e      	cmp	r3, #30
 80056fc:	d006      	beq.n	800570c <BMI088_Acc_Init+0x2c>
    {
    	HAL_Delay(100);
 80056fe:	2064      	movs	r0, #100	; 0x64
 8005700:	f7fc f902 	bl	8001908 <HAL_Delay>
    	ID = BMI088_Acc_ReadID();
 8005704:	f7ff ff46 	bl	8005594 <BMI088_Acc_ReadID>
 8005708:	4603      	mov	r3, r0
 800570a:	73bb      	strb	r3, [r7, #14]
    }

    if (ID == BMI088_ACC_CHIP_ID_VALUE)
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	2b1e      	cmp	r3, #30
 8005710:	d126      	bne.n	8005760 <BMI088_Acc_Init+0x80>
    {
    	BMI088_Acc_WriteReg(BMI088_Acc_Init_Data[0][0], BMI088_Acc_Init_Data[0][1]);
 8005712:	783b      	ldrb	r3, [r7, #0]
 8005714:	787a      	ldrb	r2, [r7, #1]
 8005716:	4611      	mov	r1, r2
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fe73 	bl	8005404 <BMI088_Acc_WriteReg>
    	HAL_Delay(50);
 800571e:	2032      	movs	r0, #50	; 0x32
 8005720:	f7fc f8f2 	bl	8001908 <HAL_Delay>


    	for(i = 1; i < 5; i++)
 8005724:	2301      	movs	r3, #1
 8005726:	73fb      	strb	r3, [r7, #15]
 8005728:	e015      	b.n	8005756 <BMI088_Acc_Init+0x76>
    	{
    		BMI088_Acc_WriteReg(BMI088_Acc_Init_Data[i][0], BMI088_Acc_Init_Data[i][1]);
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	3310      	adds	r3, #16
 8005730:	443b      	add	r3, r7
 8005732:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	3310      	adds	r3, #16
 800573c:	443b      	add	r3, r7
 800573e:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f7ff fe5d 	bl	8005404 <BMI088_Acc_WriteReg>
    		HAL_Delay(5);
 800574a:	2005      	movs	r0, #5
 800574c:	f7fc f8dc 	bl	8001908 <HAL_Delay>
    	for(i = 1; i < 5; i++)
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	3301      	adds	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b04      	cmp	r3, #4
 800575a:	d9e6      	bls.n	800572a <BMI088_Acc_Init+0x4a>
    	}


    	return IMU_NO_ERROR;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <BMI088_Acc_Init+0x82>
    }
    else
    {
    	return IMU_ACC_ERROR;
 8005760:	2301      	movs	r3, #1
    }

}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	08009288 	.word	0x08009288

08005770 <BMI088_Gyro_Init>:

IMU_ERROR_Typedef BMI088_Gyro_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t ID;
	uint8_t BMI088_Gyro_Init_Data[4][2] = {
 8005776:	4a21      	ldr	r2, [pc, #132]	; (80057fc <BMI088_Gyro_Init+0x8c>)
 8005778:	1d3b      	adds	r3, r7, #4
 800577a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800577e:	e883 0003 	stmia.w	r3, {r0, r1}
			{BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE},//软件复位，清空所用寄存器
			{BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE},//陀螺仪正常工作模式
			{BMI088_GYRO_RANGE, BMI088_GYRO_2000},//设置范围为+-2000°/s
			{BMI088_GYRO_BANDWIDTH, BMI088_GYRO_2000_532_HZ},//2000Hz输出频率，532Hz滤波器带宽
	};
    ID = BMI088_Gyro_ReadID();
 8005782:	f7ff ff15 	bl	80055b0 <BMI088_Gyro_ReadID>
 8005786:	4603      	mov	r3, r0
 8005788:	73bb      	strb	r3, [r7, #14]
    if (ID != BMI088_GYRO_CHIP_ID_VALUE)
 800578a:	7bbb      	ldrb	r3, [r7, #14]
 800578c:	2b0f      	cmp	r3, #15
 800578e:	d006      	beq.n	800579e <BMI088_Gyro_Init+0x2e>
    {
    	HAL_Delay(100);
 8005790:	2064      	movs	r0, #100	; 0x64
 8005792:	f7fc f8b9 	bl	8001908 <HAL_Delay>
    	ID = BMI088_Gyro_ReadID();
 8005796:	f7ff ff0b 	bl	80055b0 <BMI088_Gyro_ReadID>
 800579a:	4603      	mov	r3, r0
 800579c:	73bb      	strb	r3, [r7, #14]
    }

    if (ID == BMI088_GYRO_CHIP_ID_VALUE)
 800579e:	7bbb      	ldrb	r3, [r7, #14]
 80057a0:	2b0f      	cmp	r3, #15
 80057a2:	d126      	bne.n	80057f2 <BMI088_Gyro_Init+0x82>
    {
    	BMI088_Gyro_WriteReg(BMI088_Gyro_Init_Data[0][0], BMI088_Gyro_Init_Data[0][1]);
 80057a4:	793b      	ldrb	r3, [r7, #4]
 80057a6:	797a      	ldrb	r2, [r7, #5]
 80057a8:	4611      	mov	r1, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7ff fe5c 	bl	8005468 <BMI088_Gyro_WriteReg>
    	HAL_Delay(50);
 80057b0:	2032      	movs	r0, #50	; 0x32
 80057b2:	f7fc f8a9 	bl	8001908 <HAL_Delay>
    	for(i = 1; i < 4; i++)
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
 80057ba:	e015      	b.n	80057e8 <BMI088_Gyro_Init+0x78>
    	{
    		BMI088_Gyro_WriteReg(BMI088_Gyro_Init_Data[i][0], BMI088_Gyro_Init_Data[i][1]);
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	3310      	adds	r3, #16
 80057c2:	443b      	add	r3, r7
 80057c4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	3310      	adds	r3, #16
 80057ce:	443b      	add	r3, r7
 80057d0:	f813 3c0b 	ldrb.w	r3, [r3, #-11]
 80057d4:	4619      	mov	r1, r3
 80057d6:	4610      	mov	r0, r2
 80057d8:	f7ff fe46 	bl	8005468 <BMI088_Gyro_WriteReg>
    		HAL_Delay(5);
 80057dc:	2005      	movs	r0, #5
 80057de:	f7fc f893 	bl	8001908 <HAL_Delay>
    	for(i = 1; i < 4; i++)
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	3301      	adds	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d9e6      	bls.n	80057bc <BMI088_Gyro_Init+0x4c>
    	}

    	return IMU_NO_ERROR;
 80057ee:	2300      	movs	r3, #0
 80057f0:	e000      	b.n	80057f4 <BMI088_Gyro_Init+0x84>
    }
    else
    {
    	return IMU_GYRO_ERROR;
 80057f2:	2302      	movs	r3, #2
    }
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	08009294 	.word	0x08009294

08005800 <BMI088_Init>:



IMU_ERROR_Typedef BMI088_Init(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
	uint8_t bmi088_error = IMU_NO_ERROR;
 8005806:	2300      	movs	r3, #0
 8005808:	71fb      	strb	r3, [r7, #7]
	bmi088_error |= BMI088_Gyro_Init();
 800580a:	f7ff ffb1 	bl	8005770 <BMI088_Gyro_Init>
 800580e:	4603      	mov	r3, r0
 8005810:	461a      	mov	r2, r3
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	4313      	orrs	r3, r2
 8005816:	71fb      	strb	r3, [r7, #7]
	bmi088_error |= BMI088_Acc_Init();
 8005818:	f7ff ff62 	bl	80056e0 <BMI088_Acc_Init>
 800581c:	4603      	mov	r3, r0
 800581e:	461a      	mov	r2, r3
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	4313      	orrs	r3, r2
 8005824:	71fb      	strb	r3, [r7, #7]
	return bmi088_error;
 8005826:	79fb      	ldrb	r3, [r7, #7]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <IMU_Init>:
  * @param :无
  * @note  :无
  * @retval:IMU_ERROR_Typedef类型数据，可用于定位发生错误位置
  */
IMU_ERROR_Typedef IMU_Init(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
	IMU_ERROR_Typedef imu_error = IMU_NO_ERROR;
 8005836:	2300      	movs	r3, #0
 8005838:	71fb      	strb	r3, [r7, #7]
	imu_error |= BMI088_Init();
 800583a:	f7ff ffe1 	bl	8005800 <BMI088_Init>
 800583e:	4603      	mov	r3, r0
 8005840:	461a      	mov	r2, r3
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	4313      	orrs	r3, r2
 8005846:	71fb      	strb	r3, [r7, #7]
	imu_error |= IST8310_Init();
 8005848:	f001 f8ce 	bl	80069e8 <IST8310_Init>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	4313      	orrs	r3, r2
 8005854:	71fb      	strb	r3, [r7, #7]

	return imu_error;
 8005856:	79fb      	ldrb	r3, [r7, #7]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <IMU_Start>:

void IMU_Start(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
	while (IMU_START_STATUS == Status_ERROR)
 8005864:	e01c      	b.n	80058a0 <IMU_Start+0x40>
	{
		if (fabs(g_imu_struct.temperature - IMU_MAX_TEMP_SET) <= 0.2)
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <IMU_Start+0x58>)
 8005868:	edd3 7a08 	vldr	s15, [r3, #32]
 800586c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80058bc <IMU_Start+0x5c>
 8005870:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005874:	eef0 7ae7 	vabs.f32	s15, s15
 8005878:	ee17 0a90 	vmov	r0, s15
 800587c:	f7fa fe08 	bl	8000490 <__aeabi_f2d>
 8005880:	a30b      	add	r3, pc, #44	; (adr r3, 80058b0 <IMU_Start+0x50>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fb f8d7 	bl	8000a38 <__aeabi_dcmple>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d100      	bne.n	8005892 <IMU_Start+0x32>
 8005890:	e006      	b.n	80058a0 <IMU_Start+0x40>
		{
			IMU_START_STATUS = Status_OK;
 8005892:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <IMU_Start+0x60>)
 8005894:	2201      	movs	r2, #1
 8005896:	701a      	strb	r2, [r3, #0]
			Get_Gyro_StaticError();
 8005898:	f000 f814 	bl	80058c4 <Get_Gyro_StaticError>
			Init_Quaternions();
 800589c:	f000 f922 	bl	8005ae4 <Init_Quaternions>
	while (IMU_START_STATUS == Status_ERROR)
 80058a0:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <IMU_Start+0x60>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0de      	beq.n	8005866 <IMU_Start+0x6>
		}
	}
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	9999999a 	.word	0x9999999a
 80058b4:	3fc99999 	.word	0x3fc99999
 80058b8:	2000000c 	.word	0x2000000c
 80058bc:	42200000 	.word	0x42200000
 80058c0:	20000264 	.word	0x20000264

080058c4 <Get_Gyro_StaticError>:

static void Get_Gyro_StaticError(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
	const uint16_t SAMPLES_COUNT = 500;
 80058ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80058ce:	81bb      	strh	r3, [r7, #12]
	int16_t gyro_error_data[3];
	uint16_t i;
	for (i = 0; i < SAMPLES_COUNT; i++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	81fb      	strh	r3, [r7, #14]
 80058d4:	e033      	b.n	800593e <Get_Gyro_StaticError+0x7a>
	{
		BMI088_Getdata_Gyro_raw(gyro_error_data);
 80058d6:	1d3b      	adds	r3, r7, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff fed5 	bl	8005688 <BMI088_Getdata_Gyro_raw>
		g_imu_struct.gx_offset += gyro_error_data[0];
 80058de:	4b2f      	ldr	r3, [pc, #188]	; (800599c <Get_Gyro_StaticError+0xd8>)
 80058e0:	ed93 7a05 	vldr	s14, [r3, #20]
 80058e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80058e8:	ee07 3a90 	vmov	s15, r3
 80058ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058f4:	4b29      	ldr	r3, [pc, #164]	; (800599c <Get_Gyro_StaticError+0xd8>)
 80058f6:	edc3 7a05 	vstr	s15, [r3, #20]
		g_imu_struct.gy_offset += gyro_error_data[1];
 80058fa:	4b28      	ldr	r3, [pc, #160]	; (800599c <Get_Gyro_StaticError+0xd8>)
 80058fc:	ed93 7a06 	vldr	s14, [r3, #24]
 8005900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800590c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005910:	4b22      	ldr	r3, [pc, #136]	; (800599c <Get_Gyro_StaticError+0xd8>)
 8005912:	edc3 7a06 	vstr	s15, [r3, #24]
		g_imu_struct.gz_offset += gyro_error_data[2];
 8005916:	4b21      	ldr	r3, [pc, #132]	; (800599c <Get_Gyro_StaticError+0xd8>)
 8005918:	ed93 7a07 	vldr	s14, [r3, #28]
 800591c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005920:	ee07 3a90 	vmov	s15, r3
 8005924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <Get_Gyro_StaticError+0xd8>)
 800592e:	edc3 7a07 	vstr	s15, [r3, #28]
		HAL_Delay(1);
 8005932:	2001      	movs	r0, #1
 8005934:	f7fb ffe8 	bl	8001908 <HAL_Delay>
	for (i = 0; i < SAMPLES_COUNT; i++)
 8005938:	89fb      	ldrh	r3, [r7, #14]
 800593a:	3301      	adds	r3, #1
 800593c:	81fb      	strh	r3, [r7, #14]
 800593e:	89fa      	ldrh	r2, [r7, #14]
 8005940:	89bb      	ldrh	r3, [r7, #12]
 8005942:	429a      	cmp	r2, r3
 8005944:	d3c7      	bcc.n	80058d6 <Get_Gyro_StaticError+0x12>
	}
	 g_imu_struct.gx_offset /=  SAMPLES_COUNT;
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <Get_Gyro_StaticError+0xd8>)
 8005948:	edd3 6a05 	vldr	s13, [r3, #20]
 800594c:	89bb      	ldrh	r3, [r7, #12]
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800595a:	4b10      	ldr	r3, [pc, #64]	; (800599c <Get_Gyro_StaticError+0xd8>)
 800595c:	edc3 7a05 	vstr	s15, [r3, #20]
	 g_imu_struct.gy_offset /=  SAMPLES_COUNT;
 8005960:	4b0e      	ldr	r3, [pc, #56]	; (800599c <Get_Gyro_StaticError+0xd8>)
 8005962:	edd3 6a06 	vldr	s13, [r3, #24]
 8005966:	89bb      	ldrh	r3, [r7, #12]
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <Get_Gyro_StaticError+0xd8>)
 8005976:	edc3 7a06 	vstr	s15, [r3, #24]
	 g_imu_struct.gz_offset /=  SAMPLES_COUNT;
 800597a:	4b08      	ldr	r3, [pc, #32]	; (800599c <Get_Gyro_StaticError+0xd8>)
 800597c:	edd3 6a07 	vldr	s13, [r3, #28]
 8005980:	89bb      	ldrh	r3, [r7, #12]
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800598a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800598e:	4b03      	ldr	r3, [pc, #12]	; (800599c <Get_Gyro_StaticError+0xd8>)
 8005990:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8005994:	bf00      	nop
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	2000000c 	.word	0x2000000c

080059a0 <IMU_GetInit_Angle>:

static void IMU_GetInit_Angle(void)
{
 80059a0:	b5b0      	push	{r4, r5, r7, lr}
 80059a2:	b08a      	sub	sp, #40	; 0x28
 80059a4:	af00      	add	r7, sp, #0

	float temp = 0;
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	627b      	str	r3, [r7, #36]	; 0x24

	float roll = 0;
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	623b      	str	r3, [r7, #32]
	float pitch = 0;
 80059b2:	f04f 0300 	mov.w	r3, #0
 80059b6:	61fb      	str	r3, [r7, #28]
	float yaw = 0;
 80059b8:	f04f 0300 	mov.w	r3, #0
 80059bc:	61bb      	str	r3, [r7, #24]

	IMU_GetData();
 80059be:	f000 fb0d 	bl	8005fdc <IMU_GetData>

	float ax = g_imu_struct.ax_raw;
 80059c2:	4b47      	ldr	r3, [pc, #284]	; (8005ae0 <IMU_GetInit_Angle+0x140>)
 80059c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059c8:	ee07 3a90 	vmov	s15, r3
 80059cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059d0:	edc7 7a05 	vstr	s15, [r7, #20]
	float ay = g_imu_struct.ay_raw;
 80059d4:	4b42      	ldr	r3, [pc, #264]	; (8005ae0 <IMU_GetInit_Angle+0x140>)
 80059d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059e2:	edc7 7a04 	vstr	s15, [r7, #16]
	float az = g_imu_struct.az_raw;
 80059e6:	4b3e      	ldr	r3, [pc, #248]	; (8005ae0 <IMU_GetInit_Angle+0x140>)
 80059e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059f4:	edc7 7a03 	vstr	s15, [r7, #12]
	float mx = g_imu_struct.mx_raw;
 80059f8:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <IMU_GetInit_Angle+0x140>)
 80059fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a06:	edc7 7a02 	vstr	s15, [r7, #8]
	float my = g_imu_struct.my_raw;
 8005a0a:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <IMU_GetInit_Angle+0x140>)
 8005a0c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005a10:	ee07 3a90 	vmov	s15, r3
 8005a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a18:	edc7 7a01 	vstr	s15, [r7, #4]
	float mz = g_imu_struct.mz_raw;
 8005a1c:	4b30      	ldr	r3, [pc, #192]	; (8005ae0 <IMU_GetInit_Angle+0x140>)
 8005a1e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2a:	edc7 7a00 	vstr	s15, [r7]

	temp = 1 / invSqrt( pow(ay, 2) + pow(az, 2));
 8005a2e:	6938      	ldr	r0, [r7, #16]
 8005a30:	f7fa fd2e 	bl	8000490 <__aeabi_f2d>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8005ad8 <IMU_GetInit_Angle+0x138>
 8005a3c:	ec43 2b10 	vmov	d0, r2, r3
 8005a40:	f001 fafa 	bl	8007038 <pow>
 8005a44:	ec55 4b10 	vmov	r4, r5, d0
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7fa fd21 	bl	8000490 <__aeabi_f2d>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005ad8 <IMU_GetInit_Angle+0x138>
 8005a56:	ec43 2b10 	vmov	d0, r2, r3
 8005a5a:	f001 faed 	bl	8007038 <pow>
 8005a5e:	ec53 2b10 	vmov	r2, r3, d0
 8005a62:	4620      	mov	r0, r4
 8005a64:	4629      	mov	r1, r5
 8005a66:	f7fa fbb5 	bl	80001d4 <__adddf3>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7fb f83d 	bl	8000af0 <__aeabi_d2f>
 8005a76:	4603      	mov	r3, r0
 8005a78:	ee00 3a10 	vmov	s0, r3
 8005a7c:	f7ff fc56 	bl	800532c <invSqrt>
 8005a80:	eeb0 7a40 	vmov.f32	s14, s0
 8005a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	roll = atan2f(ay, az);
 8005a90:	edd7 0a03 	vldr	s1, [r7, #12]
 8005a94:	ed97 0a04 	vldr	s0, [r7, #16]
 8005a98:	f001 fb6a 	bl	8007170 <atan2f>
 8005a9c:	ed87 0a08 	vstr	s0, [r7, #32]
	pitch = -atan2f(ax, temp);
 8005aa0:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005aa4:	ed97 0a05 	vldr	s0, [r7, #20]
 8005aa8:	f001 fb62 	bl	8007170 <atan2f>
 8005aac:	eef0 7a40 	vmov.f32	s15, s0
 8005ab0:	eef1 7a67 	vneg.f32	s15, s15
 8005ab4:	edc7 7a07 	vstr	s15, [r7, #28]
#ifdef IST8310_IN_WORK
	mx = mx * cos(roll) + my * sin(roll) * sin(pitch) + mz * sin(roll) * cos(pitch);
	my = my * cos(pitch) - mz * sin(pitch);
	yaw = -atan2f(my, mx);//此处为负结果才是正确的
#endif
	g_imu_struct.roll = roll;
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <IMU_GetInit_Angle+0x140>)
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	6293      	str	r3, [r2, #40]	; 0x28
    g_imu_struct.pitch = pitch;
 8005abe:	4a08      	ldr	r2, [pc, #32]	; (8005ae0 <IMU_GetInit_Angle+0x140>)
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
    g_imu_struct.yaw = yaw;
 8005ac4:	4a06      	ldr	r2, [pc, #24]	; (8005ae0 <IMU_GetInit_Angle+0x140>)
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	6313      	str	r3, [r2, #48]	; 0x30

}
 8005aca:	bf00      	nop
 8005acc:	3728      	adds	r7, #40	; 0x28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	00000000 	.word	0x00000000
 8005adc:	40000000 	.word	0x40000000
 8005ae0:	2000000c 	.word	0x2000000c

08005ae4 <Init_Quaternions>:

static void Init_Quaternions(void)
{
 8005ae4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
	float roll = 0;
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	60fb      	str	r3, [r7, #12]
	float pitch = 0;
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	60bb      	str	r3, [r7, #8]
	float yaw = 0;
 8005af8:	f04f 0300 	mov.w	r3, #0
 8005afc:	607b      	str	r3, [r7, #4]

	IMU_GetInit_Angle();
 8005afe:	f7ff ff4f 	bl	80059a0 <IMU_GetInit_Angle>

	roll = g_imu_struct.roll;
 8005b02:	4bf7      	ldr	r3, [pc, #988]	; (8005ee0 <Init_Quaternions+0x3fc>)
 8005b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b06:	60fb      	str	r3, [r7, #12]
	pitch = g_imu_struct.pitch;
 8005b08:	4bf5      	ldr	r3, [pc, #980]	; (8005ee0 <Init_Quaternions+0x3fc>)
 8005b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0c:	60bb      	str	r3, [r7, #8]
#ifdef IST8310_IN_WORK
	yaw = g_imu_struct.yaw;
#endif


	g_imu_struct.quat.q0 = cos(roll / 2)*cos(pitch / 2)*cos(yaw / 2) + sin(roll / 2)*sin(pitch / 2)*sin(yaw / 2);
 8005b0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b12:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005b16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b1a:	ee16 0a90 	vmov	r0, s13
 8005b1e:	f7fa fcb7 	bl	8000490 <__aeabi_f2d>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	ec43 2b10 	vmov	d0, r2, r3
 8005b2a:	f001 f9d9 	bl	8006ee0 <cos>
 8005b2e:	ec55 4b10 	vmov	r4, r5, d0
 8005b32:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b36:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005b3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b3e:	ee16 0a90 	vmov	r0, s13
 8005b42:	f7fa fca5 	bl	8000490 <__aeabi_f2d>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	ec43 2b10 	vmov	d0, r2, r3
 8005b4e:	f001 f9c7 	bl	8006ee0 <cos>
 8005b52:	ec53 2b10 	vmov	r2, r3, d0
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa fcf1 	bl	8000540 <__aeabi_dmul>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4614      	mov	r4, r2
 8005b64:	461d      	mov	r5, r3
 8005b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b6a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005b6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b72:	ee16 0a90 	vmov	r0, s13
 8005b76:	f7fa fc8b 	bl	8000490 <__aeabi_f2d>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	ec43 2b10 	vmov	d0, r2, r3
 8005b82:	f001 f9ad 	bl	8006ee0 <cos>
 8005b86:	ec53 2b10 	vmov	r2, r3, d0
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	f7fa fcd7 	bl	8000540 <__aeabi_dmul>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4614      	mov	r4, r2
 8005b98:	461d      	mov	r5, r3
 8005b9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b9e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005ba2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ba6:	ee16 0a90 	vmov	r0, s13
 8005baa:	f7fa fc71 	bl	8000490 <__aeabi_f2d>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	ec43 2b10 	vmov	d0, r2, r3
 8005bb6:	f001 f9e7 	bl	8006f88 <sin>
 8005bba:	ec59 8b10 	vmov	r8, r9, d0
 8005bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bc2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005bc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bca:	ee16 0a90 	vmov	r0, s13
 8005bce:	f7fa fc5f 	bl	8000490 <__aeabi_f2d>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	ec43 2b10 	vmov	d0, r2, r3
 8005bda:	f001 f9d5 	bl	8006f88 <sin>
 8005bde:	ec53 2b10 	vmov	r2, r3, d0
 8005be2:	4640      	mov	r0, r8
 8005be4:	4649      	mov	r1, r9
 8005be6:	f7fa fcab 	bl	8000540 <__aeabi_dmul>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	4690      	mov	r8, r2
 8005bf0:	4699      	mov	r9, r3
 8005bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bf6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005bfa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bfe:	ee16 0a90 	vmov	r0, s13
 8005c02:	f7fa fc45 	bl	8000490 <__aeabi_f2d>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	ec43 2b10 	vmov	d0, r2, r3
 8005c0e:	f001 f9bb 	bl	8006f88 <sin>
 8005c12:	ec53 2b10 	vmov	r2, r3, d0
 8005c16:	4640      	mov	r0, r8
 8005c18:	4649      	mov	r1, r9
 8005c1a:	f7fa fc91 	bl	8000540 <__aeabi_dmul>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4620      	mov	r0, r4
 8005c24:	4629      	mov	r1, r5
 8005c26:	f7fa fad5 	bl	80001d4 <__adddf3>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4610      	mov	r0, r2
 8005c30:	4619      	mov	r1, r3
 8005c32:	f7fa ff5d 	bl	8000af0 <__aeabi_d2f>
 8005c36:	4603      	mov	r3, r0
 8005c38:	4aa9      	ldr	r2, [pc, #676]	; (8005ee0 <Init_Quaternions+0x3fc>)
 8005c3a:	6353      	str	r3, [r2, #52]	; 0x34
	g_imu_struct.quat.q1 = sin(roll / 2)*cos(pitch / 2)*cos(yaw / 2) - cos(roll / 2)*sin(pitch / 2)*sin(yaw / 2);
 8005c3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005c44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c48:	ee16 0a90 	vmov	r0, s13
 8005c4c:	f7fa fc20 	bl	8000490 <__aeabi_f2d>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	ec43 2b10 	vmov	d0, r2, r3
 8005c58:	f001 f996 	bl	8006f88 <sin>
 8005c5c:	ec55 4b10 	vmov	r4, r5, d0
 8005c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c64:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005c68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c6c:	ee16 0a90 	vmov	r0, s13
 8005c70:	f7fa fc0e 	bl	8000490 <__aeabi_f2d>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	ec43 2b10 	vmov	d0, r2, r3
 8005c7c:	f001 f930 	bl	8006ee0 <cos>
 8005c80:	ec53 2b10 	vmov	r2, r3, d0
 8005c84:	4620      	mov	r0, r4
 8005c86:	4629      	mov	r1, r5
 8005c88:	f7fa fc5a 	bl	8000540 <__aeabi_dmul>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	461d      	mov	r5, r3
 8005c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c98:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005c9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ca0:	ee16 0a90 	vmov	r0, s13
 8005ca4:	f7fa fbf4 	bl	8000490 <__aeabi_f2d>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	ec43 2b10 	vmov	d0, r2, r3
 8005cb0:	f001 f916 	bl	8006ee0 <cos>
 8005cb4:	ec53 2b10 	vmov	r2, r3, d0
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4629      	mov	r1, r5
 8005cbc:	f7fa fc40 	bl	8000540 <__aeabi_dmul>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ccc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005cd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cd4:	ee16 0a90 	vmov	r0, s13
 8005cd8:	f7fa fbda 	bl	8000490 <__aeabi_f2d>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	ec43 2b10 	vmov	d0, r2, r3
 8005ce4:	f001 f8fc 	bl	8006ee0 <cos>
 8005ce8:	ec59 8b10 	vmov	r8, r9, d0
 8005cec:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cf0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005cf4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cf8:	ee16 0a90 	vmov	r0, s13
 8005cfc:	f7fa fbc8 	bl	8000490 <__aeabi_f2d>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	ec43 2b10 	vmov	d0, r2, r3
 8005d08:	f001 f93e 	bl	8006f88 <sin>
 8005d0c:	ec53 2b10 	vmov	r2, r3, d0
 8005d10:	4640      	mov	r0, r8
 8005d12:	4649      	mov	r1, r9
 8005d14:	f7fa fc14 	bl	8000540 <__aeabi_dmul>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4690      	mov	r8, r2
 8005d1e:	4699      	mov	r9, r3
 8005d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d24:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005d28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d2c:	ee16 0a90 	vmov	r0, s13
 8005d30:	f7fa fbae 	bl	8000490 <__aeabi_f2d>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	ec43 2b10 	vmov	d0, r2, r3
 8005d3c:	f001 f924 	bl	8006f88 <sin>
 8005d40:	ec53 2b10 	vmov	r2, r3, d0
 8005d44:	4640      	mov	r0, r8
 8005d46:	4649      	mov	r1, r9
 8005d48:	f7fa fbfa 	bl	8000540 <__aeabi_dmul>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4620      	mov	r0, r4
 8005d52:	4629      	mov	r1, r5
 8005d54:	f7fa fa3c 	bl	80001d0 <__aeabi_dsub>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f7fa fec6 	bl	8000af0 <__aeabi_d2f>
 8005d64:	4603      	mov	r3, r0
 8005d66:	4a5e      	ldr	r2, [pc, #376]	; (8005ee0 <Init_Quaternions+0x3fc>)
 8005d68:	6393      	str	r3, [r2, #56]	; 0x38
	g_imu_struct.quat.q2 = cos(roll / 2)*sin(pitch / 2)*cos(yaw / 2) + sin(roll / 2)*cos(pitch / 2)*sin(yaw / 2);
 8005d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005d72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d76:	ee16 0a90 	vmov	r0, s13
 8005d7a:	f7fa fb89 	bl	8000490 <__aeabi_f2d>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	ec43 2b10 	vmov	d0, r2, r3
 8005d86:	f001 f8ab 	bl	8006ee0 <cos>
 8005d8a:	ec55 4b10 	vmov	r4, r5, d0
 8005d8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005d96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d9a:	ee16 0a90 	vmov	r0, s13
 8005d9e:	f7fa fb77 	bl	8000490 <__aeabi_f2d>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	ec43 2b10 	vmov	d0, r2, r3
 8005daa:	f001 f8ed 	bl	8006f88 <sin>
 8005dae:	ec53 2b10 	vmov	r2, r3, d0
 8005db2:	4620      	mov	r0, r4
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7fa fbc3 	bl	8000540 <__aeabi_dmul>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4614      	mov	r4, r2
 8005dc0:	461d      	mov	r5, r3
 8005dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dc6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005dca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005dce:	ee16 0a90 	vmov	r0, s13
 8005dd2:	f7fa fb5d 	bl	8000490 <__aeabi_f2d>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	ec43 2b10 	vmov	d0, r2, r3
 8005dde:	f001 f87f 	bl	8006ee0 <cos>
 8005de2:	ec53 2b10 	vmov	r2, r3, d0
 8005de6:	4620      	mov	r0, r4
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7fa fba9 	bl	8000540 <__aeabi_dmul>
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4614      	mov	r4, r2
 8005df4:	461d      	mov	r5, r3
 8005df6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dfa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005dfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e02:	ee16 0a90 	vmov	r0, s13
 8005e06:	f7fa fb43 	bl	8000490 <__aeabi_f2d>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	ec43 2b10 	vmov	d0, r2, r3
 8005e12:	f001 f8b9 	bl	8006f88 <sin>
 8005e16:	ec59 8b10 	vmov	r8, r9, d0
 8005e1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e1e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005e22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e26:	ee16 0a90 	vmov	r0, s13
 8005e2a:	f7fa fb31 	bl	8000490 <__aeabi_f2d>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	ec43 2b10 	vmov	d0, r2, r3
 8005e36:	f001 f853 	bl	8006ee0 <cos>
 8005e3a:	ec53 2b10 	vmov	r2, r3, d0
 8005e3e:	4640      	mov	r0, r8
 8005e40:	4649      	mov	r1, r9
 8005e42:	f7fa fb7d 	bl	8000540 <__aeabi_dmul>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4690      	mov	r8, r2
 8005e4c:	4699      	mov	r9, r3
 8005e4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e52:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005e56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e5a:	ee16 0a90 	vmov	r0, s13
 8005e5e:	f7fa fb17 	bl	8000490 <__aeabi_f2d>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	ec43 2b10 	vmov	d0, r2, r3
 8005e6a:	f001 f88d 	bl	8006f88 <sin>
 8005e6e:	ec53 2b10 	vmov	r2, r3, d0
 8005e72:	4640      	mov	r0, r8
 8005e74:	4649      	mov	r1, r9
 8005e76:	f7fa fb63 	bl	8000540 <__aeabi_dmul>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4620      	mov	r0, r4
 8005e80:	4629      	mov	r1, r5
 8005e82:	f7fa f9a7 	bl	80001d4 <__adddf3>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f7fa fe2f 	bl	8000af0 <__aeabi_d2f>
 8005e92:	4603      	mov	r3, r0
 8005e94:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <Init_Quaternions+0x3fc>)
 8005e96:	63d3      	str	r3, [r2, #60]	; 0x3c
	g_imu_struct.quat.q3 = cos(roll / 2)*cos(pitch / 2)*sin(yaw / 2) + sin(roll / 2)*sin(pitch / 2)*cos(yaw / 2);
 8005e98:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e9c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005ea0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ea4:	ee16 0a90 	vmov	r0, s13
 8005ea8:	f7fa faf2 	bl	8000490 <__aeabi_f2d>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	ec43 2b10 	vmov	d0, r2, r3
 8005eb4:	f001 f814 	bl	8006ee0 <cos>
 8005eb8:	ec55 4b10 	vmov	r4, r5, d0
 8005ebc:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ec0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005ec4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ec8:	ee16 0a90 	vmov	r0, s13
 8005ecc:	f7fa fae0 	bl	8000490 <__aeabi_f2d>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	ec43 2b10 	vmov	d0, r2, r3
 8005ed8:	f001 f802 	bl	8006ee0 <cos>
 8005edc:	e002      	b.n	8005ee4 <Init_Quaternions+0x400>
 8005ede:	bf00      	nop
 8005ee0:	2000000c 	.word	0x2000000c
 8005ee4:	ec53 2b10 	vmov	r2, r3, d0
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4629      	mov	r1, r5
 8005eec:	f7fa fb28 	bl	8000540 <__aeabi_dmul>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4614      	mov	r4, r2
 8005ef6:	461d      	mov	r5, r3
 8005ef8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005efc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005f00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f04:	ee16 0a90 	vmov	r0, s13
 8005f08:	f7fa fac2 	bl	8000490 <__aeabi_f2d>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	ec43 2b10 	vmov	d0, r2, r3
 8005f14:	f001 f838 	bl	8006f88 <sin>
 8005f18:	ec53 2b10 	vmov	r2, r3, d0
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	f7fa fb0e 	bl	8000540 <__aeabi_dmul>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4614      	mov	r4, r2
 8005f2a:	461d      	mov	r5, r3
 8005f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005f34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f38:	ee16 0a90 	vmov	r0, s13
 8005f3c:	f7fa faa8 	bl	8000490 <__aeabi_f2d>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	ec43 2b10 	vmov	d0, r2, r3
 8005f48:	f001 f81e 	bl	8006f88 <sin>
 8005f4c:	ec59 8b10 	vmov	r8, r9, d0
 8005f50:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005f58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f5c:	ee16 0a90 	vmov	r0, s13
 8005f60:	f7fa fa96 	bl	8000490 <__aeabi_f2d>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	ec43 2b10 	vmov	d0, r2, r3
 8005f6c:	f001 f80c 	bl	8006f88 <sin>
 8005f70:	ec53 2b10 	vmov	r2, r3, d0
 8005f74:	4640      	mov	r0, r8
 8005f76:	4649      	mov	r1, r9
 8005f78:	f7fa fae2 	bl	8000540 <__aeabi_dmul>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4690      	mov	r8, r2
 8005f82:	4699      	mov	r9, r3
 8005f84:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f88:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005f8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f90:	ee16 0a90 	vmov	r0, s13
 8005f94:	f7fa fa7c 	bl	8000490 <__aeabi_f2d>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	ec43 2b10 	vmov	d0, r2, r3
 8005fa0:	f000 ff9e 	bl	8006ee0 <cos>
 8005fa4:	ec53 2b10 	vmov	r2, r3, d0
 8005fa8:	4640      	mov	r0, r8
 8005faa:	4649      	mov	r1, r9
 8005fac:	f7fa fac8 	bl	8000540 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa f90c 	bl	80001d4 <__adddf3>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	f7fa fd94 	bl	8000af0 <__aeabi_d2f>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	4a03      	ldr	r2, [pc, #12]	; (8005fd8 <Init_Quaternions+0x4f4>)
 8005fcc:	6413      	str	r3, [r2, #64]	; 0x40


}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005fd8:	2000000c 	.word	0x2000000c

08005fdc <IMU_GetData>:
static void IMU_GetData(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
	int16_t accdata[3];
	int16_t gyrodata[3];
	int16_t magdata[3];
	BMI088_Getdata_Acc_raw(accdata);
 8005fe2:	f107 0310 	add.w	r3, r7, #16
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fb22 	bl	8005630 <BMI088_Getdata_Acc_raw>
	BMI088_Getdata_Gyro_raw(gyrodata);
 8005fec:	f107 0308 	add.w	r3, r7, #8
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff fb49 	bl	8005688 <BMI088_Getdata_Gyro_raw>
	IST8310_Getdata_Mag_raw(magdata);
 8005ff6:	463b      	mov	r3, r7
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f000 fd29 	bl	8006a50 <IST8310_Getdata_Mag_raw>
	g_imu_struct.temperature =  BMI088_Get_Temperature();
 8005ffe:	f7ff fae5 	bl	80055cc <BMI088_Get_Temperature>
 8006002:	eef0 7a40 	vmov.f32	s15, s0
 8006006:	4b15      	ldr	r3, [pc, #84]	; (800605c <IMU_GetData+0x80>)
 8006008:	edc3 7a08 	vstr	s15, [r3, #32]
	g_imu_struct.ax_raw = accdata[0];
 800600c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <IMU_GetData+0x80>)
 8006012:	801a      	strh	r2, [r3, #0]
	g_imu_struct.ay_raw = accdata[1];
 8006014:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006018:	4b10      	ldr	r3, [pc, #64]	; (800605c <IMU_GetData+0x80>)
 800601a:	805a      	strh	r2, [r3, #2]
	g_imu_struct.az_raw = accdata[2];
 800601c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006020:	4b0e      	ldr	r3, [pc, #56]	; (800605c <IMU_GetData+0x80>)
 8006022:	809a      	strh	r2, [r3, #4]
	g_imu_struct.gx_raw = gyrodata[0];
 8006024:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <IMU_GetData+0x80>)
 800602a:	80da      	strh	r2, [r3, #6]
	g_imu_struct.gy_raw = gyrodata[1];
 800602c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <IMU_GetData+0x80>)
 8006032:	811a      	strh	r2, [r3, #8]
	g_imu_struct.gz_raw = gyrodata[2];
 8006034:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006038:	4b08      	ldr	r3, [pc, #32]	; (800605c <IMU_GetData+0x80>)
 800603a:	815a      	strh	r2, [r3, #10]
	g_imu_struct.mx_raw = magdata[0];
 800603c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <IMU_GetData+0x80>)
 8006042:	819a      	strh	r2, [r3, #12]
	g_imu_struct.my_raw = magdata[1];
 8006044:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006048:	4b04      	ldr	r3, [pc, #16]	; (800605c <IMU_GetData+0x80>)
 800604a:	81da      	strh	r2, [r3, #14]
	g_imu_struct.mz_raw = magdata[2];
 800604c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006050:	4b02      	ldr	r3, [pc, #8]	; (800605c <IMU_GetData+0x80>)
 8006052:	821a      	strh	r2, [r3, #16]
}
 8006054:	bf00      	nop
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	2000000c 	.word	0x2000000c

08006060 <IMU_Data_Fusion_Mahony>:

//三传感器显式互补滤波数据融合解算姿态
void IMU_Data_Fusion_Mahony(float dt, float *roll, float *pitch, float *yaw)
{
 8006060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006064:	b0aa      	sub	sp, #168	; 0xa8
 8006066:	af00      	add	r7, sp, #0
 8006068:	ed87 0a03 	vstr	s0, [r7, #12]
 800606c:	60b8      	str	r0, [r7, #8]
 800606e:	6079      	str	r1, [r7, #4]
 8006070:	603a      	str	r2, [r7, #0]

	IMU_GetData();
 8006072:	f7ff ffb3 	bl	8005fdc <IMU_GetData>
	IMU_Temperature_Compensate();
 8006076:	f000 fc1f 	bl	80068b8 <IMU_Temperature_Compensate>
	//未开始执行IMU功能,直接返回
	if (IMU_START_STATUS == Status_ERROR)
 800607a:	4bec      	ldr	r3, [pc, #944]	; (800642c <IMU_Data_Fusion_Mahony+0x3cc>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8411 	beq.w	80068a6 <IMU_Data_Fusion_Mahony+0x846>

	//四元数转余弦矩阵中间变量
	float g1, g2, g3, g4, g5;


	float ax = g_imu_struct.ax_raw;
 8006084:	4bea      	ldr	r3, [pc, #936]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 8006086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006092:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	float ay = g_imu_struct.ay_raw;
 8006096:	4be6      	ldr	r3, [pc, #920]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 8006098:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	float az = g_imu_struct.az_raw;
 80060a8:	4be1      	ldr	r3, [pc, #900]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80060aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80060ae:	ee07 3a90 	vmov	s15, r3
 80060b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float mx = g_imu_struct.mx_raw;
 80060ba:	4bdd      	ldr	r3, [pc, #884]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80060bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060c8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float my = g_imu_struct.my_raw;
 80060cc:	4bd8      	ldr	r3, [pc, #864]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80060ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060da:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float mz = g_imu_struct.mz_raw;
 80060de:	4bd4      	ldr	r3, [pc, #848]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80060e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80060e4:	ee07 3a90 	vmov	s15, r3
 80060e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ec:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

	float q0 = g_imu_struct.quat.q0;
 80060f0:	4bcf      	ldr	r3, [pc, #828]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80060f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	float q1 = g_imu_struct.quat.q1;
 80060f8:	4bcd      	ldr	r3, [pc, #820]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float q2 = g_imu_struct.quat.q2;
 8006100:	4bcb      	ldr	r3, [pc, #812]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float q3 = g_imu_struct.quat.q3;
 8006108:	4bc9      	ldr	r3, [pc, #804]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    float q0q0 = q0 * q0;
 8006110:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006114:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006118:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float q0q1 = q0 * q1;
 800611c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006120:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006128:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    float q0q2 = q0 * q2;
 800612c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006130:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006138:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float q0q3 = q0 * q3;
 800613c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006140:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006148:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    float q1q1 = q1 * q1;
 800614c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006150:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006154:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    float q1q2 = q1 * q2;
 8006158:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800615c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006164:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    float q1q3 = q1 * q3;
 8006168:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800616c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006174:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    float q2q2 = q2 * q2;
 8006178:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800617c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006180:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    float q2q3 = q2 * q3;
 8006184:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8006188:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800618c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006190:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    float q3q3 = q3 * q3;
 8006194:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006198:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800619c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	//更新数据

	//零漂补偿并弧度制陀螺仪数据
	gx_rad = (g_imu_struct.gx_raw - g_imu_struct.gx_offset) * BMI088_GYRO_2000_SEN;
 80061a0:	4ba3      	ldr	r3, [pc, #652]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80061a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ae:	4ba0      	ldr	r3, [pc, #640]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80061b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80061b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061b8:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8006434 <IMU_Data_Fusion_Mahony+0x3d4>
 80061bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	gy_rad = (g_imu_struct.gy_raw - g_imu_struct.gy_offset) * BMI088_GYRO_2000_SEN;
 80061c4:	4b9a      	ldr	r3, [pc, #616]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80061c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061d2:	4b97      	ldr	r3, [pc, #604]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80061d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80061d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061dc:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006434 <IMU_Data_Fusion_Mahony+0x3d4>
 80061e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061e4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	gz_rad = (g_imu_struct.gz_raw - g_imu_struct.gz_offset) * BMI088_GYRO_2000_SEN;
 80061e8:	4b91      	ldr	r3, [pc, #580]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80061ea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80061ee:	ee07 3a90 	vmov	s15, r3
 80061f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061f6:	4b8e      	ldr	r3, [pc, #568]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80061f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80061fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006200:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8006434 <IMU_Data_Fusion_Mahony+0x3d4>
 8006204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006208:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	//加速度归一化
	norm_temp = invSqrt(ax * ax + ay * ay + az * az);
 800620c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006210:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006214:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006218:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800621c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006220:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006224:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800622c:	eeb0 0a67 	vmov.f32	s0, s15
 8006230:	f7ff f87c 	bl	800532c <invSqrt>
 8006234:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm_temp;
 8006238:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800623c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006244:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	ay = ay * norm_temp;
 8006248:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800624c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006254:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	az = az * norm_temp;
 8006258:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800625c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006264:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	//用陀螺仪的数据计算物体坐标系重力分量
    vx = 2.0f * (q1q3 - q0q2);
 8006268:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800626c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006274:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006278:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    vy = 2.0f * (q0q1 + q2q3);
 800627c:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8006280:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006288:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800628c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    vz = q0q0 - q1q1 - q2q2 + q3q3;
 8006290:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8006294:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006298:	ee37 7a67 	vsub.f32	s14, s14, s15
 800629c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80062a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062a4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80062a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
    wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
    wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
#else
    mx = 0;
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    my = 0;
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    mz = 0;
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#endif
    //求姿态误差
    ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 80062c8:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80062cc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80062d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062d4:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 80062d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80062dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062e4:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80062e8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80062ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80062f0:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80062f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80062f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80062fc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006304:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8006308:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800630c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006314:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8006318:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800631c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006320:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006324:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8006328:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800632c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006330:	ed97 6a26 	vldr	s12, [r7, #152]	; 0x98
 8006334:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006338:	ee66 7a27 	vmul.f32	s15, s12, s15
 800633c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006344:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8006348:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800634c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006354:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 8006358:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800635c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006360:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006364:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8006368:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800636c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006370:	ed97 6a25 	vldr	s12, [r7, #148]	; 0x94
 8006374:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006378:	ee66 7a27 	vmul.f32	s15, s12, s15
 800637c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006384:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


	//误差积分
	ex_sum += g_imu_struct.Ki * dt * ex;
 8006388:	4b29      	ldr	r3, [pc, #164]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 800638a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800638e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006396:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800639a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800639e:	4b26      	ldr	r3, [pc, #152]	; (8006438 <IMU_Data_Fusion_Mahony+0x3d8>)
 80063a0:	edd3 7a00 	vldr	s15, [r3]
 80063a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a8:	4b23      	ldr	r3, [pc, #140]	; (8006438 <IMU_Data_Fusion_Mahony+0x3d8>)
 80063aa:	edc3 7a00 	vstr	s15, [r3]
	ey_sum += g_imu_struct.Ki * dt * ey;
 80063ae:	4b20      	ldr	r3, [pc, #128]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80063b0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80063b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80063b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80063c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063c4:	4b1d      	ldr	r3, [pc, #116]	; (800643c <IMU_Data_Fusion_Mahony+0x3dc>)
 80063c6:	edd3 7a00 	vldr	s15, [r3]
 80063ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ce:	4b1b      	ldr	r3, [pc, #108]	; (800643c <IMU_Data_Fusion_Mahony+0x3dc>)
 80063d0:	edc3 7a00 	vstr	s15, [r3]
	ez_sum += g_imu_struct.Ki * dt * ez;
 80063d4:	4b16      	ldr	r3, [pc, #88]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80063d6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80063da:	edd7 7a03 	vldr	s15, [r7, #12]
 80063de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80063e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063ea:	4b15      	ldr	r3, [pc, #84]	; (8006440 <IMU_Data_Fusion_Mahony+0x3e0>)
 80063ec:	edd3 7a00 	vldr	s15, [r3]
 80063f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <IMU_Data_Fusion_Mahony+0x3e0>)
 80063f6:	edc3 7a00 	vstr	s15, [r3]
	//互补滤波
	gx_rad = gx_rad + g_imu_struct.Kp * ex + ex_sum;
 80063fa:	4b0d      	ldr	r3, [pc, #52]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 80063fc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006400:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006404:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006408:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800640c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006410:	4b09      	ldr	r3, [pc, #36]	; (8006438 <IMU_Data_Fusion_Mahony+0x3d8>)
 8006412:	edd3 7a00 	vldr	s15, [r3]
 8006416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800641a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	gy_rad = gy_rad + g_imu_struct.Kp * ey + ey_sum;
 800641e:	4b04      	ldr	r3, [pc, #16]	; (8006430 <IMU_Data_Fusion_Mahony+0x3d0>)
 8006420:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006424:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006428:	e00c      	b.n	8006444 <IMU_Data_Fusion_Mahony+0x3e4>
 800642a:	bf00      	nop
 800642c:	20000264 	.word	0x20000264
 8006430:	2000000c 	.word	0x2000000c
 8006434:	3a8ba058 	.word	0x3a8ba058
 8006438:	20000268 	.word	0x20000268
 800643c:	2000026c 	.word	0x2000026c
 8006440:	20000270 	.word	0x20000270
 8006444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006448:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800644c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006450:	4bef      	ldr	r3, [pc, #956]	; (8006810 <IMU_Data_Fusion_Mahony+0x7b0>)
 8006452:	edd3 7a00 	vldr	s15, [r3]
 8006456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800645a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	gz_rad = gz_rad + g_imu_struct.Kp * ez + ez_sum;
 800645e:	4bed      	ldr	r3, [pc, #948]	; (8006814 <IMU_Data_Fusion_Mahony+0x7b4>)
 8006460:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006464:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800646c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006474:	4be8      	ldr	r3, [pc, #928]	; (8006818 <IMU_Data_Fusion_Mahony+0x7b8>)
 8006476:	edd3 7a00 	vldr	s15, [r3]
 800647a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800647e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
//    now_update = HAL_GetTick(); //ms
//    halfperiod = ((float)(now_update - last_update) / 2000.0f);
//    last_update = now_update;

	//解四元数微分方程更新四元数
	q0 = q0 +  0.5 * dt *(-gx_rad * q1 - gy_rad * q2 - gz_rad * q3);
 8006482:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8006486:	f7fa f803 	bl	8000490 <__aeabi_f2d>
 800648a:	4604      	mov	r4, r0
 800648c:	460d      	mov	r5, r1
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f7f9 fffe 	bl	8000490 <__aeabi_f2d>
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	4be0      	ldr	r3, [pc, #896]	; (800681c <IMU_Data_Fusion_Mahony+0x7bc>)
 800649a:	f7fa f851 	bl	8000540 <__aeabi_dmul>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4690      	mov	r8, r2
 80064a4:	4699      	mov	r9, r3
 80064a6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80064aa:	eeb1 7a67 	vneg.f32	s14, s15
 80064ae:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80064b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064b6:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80064ba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80064be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80064c6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80064ca:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80064ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064d6:	ee17 0a90 	vmov	r0, s15
 80064da:	f7f9 ffd9 	bl	8000490 <__aeabi_f2d>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4640      	mov	r0, r8
 80064e4:	4649      	mov	r1, r9
 80064e6:	f7fa f82b 	bl	8000540 <__aeabi_dmul>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	4620      	mov	r0, r4
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7f9 fe6f 	bl	80001d4 <__adddf3>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	f7fa faf7 	bl	8000af0 <__aeabi_d2f>
 8006502:	4603      	mov	r3, r0
 8006504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	q1 = q1 +  0.5 * dt *( gx_rad * q0 - gy_rad * q3 + gz_rad * q2);
 8006508:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800650c:	f7f9 ffc0 	bl	8000490 <__aeabi_f2d>
 8006510:	4604      	mov	r4, r0
 8006512:	460d      	mov	r5, r1
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f7f9 ffbb 	bl	8000490 <__aeabi_f2d>
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	4bbf      	ldr	r3, [pc, #764]	; (800681c <IMU_Data_Fusion_Mahony+0x7bc>)
 8006520:	f7fa f80e 	bl	8000540 <__aeabi_dmul>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4690      	mov	r8, r2
 800652a:	4699      	mov	r9, r3
 800652c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006530:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006538:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800653c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006544:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006548:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800654c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006558:	ee17 0a90 	vmov	r0, s15
 800655c:	f7f9 ff98 	bl	8000490 <__aeabi_f2d>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4640      	mov	r0, r8
 8006566:	4649      	mov	r1, r9
 8006568:	f7f9 ffea 	bl	8000540 <__aeabi_dmul>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4620      	mov	r0, r4
 8006572:	4629      	mov	r1, r5
 8006574:	f7f9 fe2e 	bl	80001d4 <__adddf3>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4610      	mov	r0, r2
 800657e:	4619      	mov	r1, r3
 8006580:	f7fa fab6 	bl	8000af0 <__aeabi_d2f>
 8006584:	4603      	mov	r3, r0
 8006586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	q2 = q2 +  0.5 * dt *( gx_rad * q3 + gy_rad * q0 - gz_rad * q1);
 800658a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800658e:	f7f9 ff7f 	bl	8000490 <__aeabi_f2d>
 8006592:	4604      	mov	r4, r0
 8006594:	460d      	mov	r5, r1
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7f9 ff7a 	bl	8000490 <__aeabi_f2d>
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	4b9e      	ldr	r3, [pc, #632]	; (800681c <IMU_Data_Fusion_Mahony+0x7bc>)
 80065a2:	f7f9 ffcd 	bl	8000540 <__aeabi_dmul>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4690      	mov	r8, r2
 80065ac:	4699      	mov	r9, r3
 80065ae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80065b2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80065b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065ba:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80065be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80065c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065ca:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80065ce:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80065d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065da:	ee17 0a90 	vmov	r0, s15
 80065de:	f7f9 ff57 	bl	8000490 <__aeabi_f2d>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4640      	mov	r0, r8
 80065e8:	4649      	mov	r1, r9
 80065ea:	f7f9 ffa9 	bl	8000540 <__aeabi_dmul>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	f7f9 fded 	bl	80001d4 <__adddf3>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4610      	mov	r0, r2
 8006600:	4619      	mov	r1, r3
 8006602:	f7fa fa75 	bl	8000af0 <__aeabi_d2f>
 8006606:	4603      	mov	r3, r0
 8006608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	q3 = q3 +  0.5 * dt *(-gx_rad * q2 + gy_rad * q1 + gz_rad * q0);
 800660c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006610:	f7f9 ff3e 	bl	8000490 <__aeabi_f2d>
 8006614:	4604      	mov	r4, r0
 8006616:	460d      	mov	r5, r1
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7f9 ff39 	bl	8000490 <__aeabi_f2d>
 800661e:	f04f 0200 	mov.w	r2, #0
 8006622:	4b7e      	ldr	r3, [pc, #504]	; (800681c <IMU_Data_Fusion_Mahony+0x7bc>)
 8006624:	f7f9 ff8c 	bl	8000540 <__aeabi_dmul>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4690      	mov	r8, r2
 800662e:	4699      	mov	r9, r3
 8006630:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006634:	eeb1 7a67 	vneg.f32	s14, s15
 8006638:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800663c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006640:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8006644:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800664c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006650:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006654:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800665c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006660:	ee17 0a90 	vmov	r0, s15
 8006664:	f7f9 ff14 	bl	8000490 <__aeabi_f2d>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4640      	mov	r0, r8
 800666e:	4649      	mov	r1, r9
 8006670:	f7f9 ff66 	bl	8000540 <__aeabi_dmul>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4620      	mov	r0, r4
 800667a:	4629      	mov	r1, r5
 800667c:	f7f9 fdaa 	bl	80001d4 <__adddf3>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4610      	mov	r0, r2
 8006686:	4619      	mov	r1, r3
 8006688:	f7fa fa32 	bl	8000af0 <__aeabi_d2f>
 800668c:	4603      	mov	r3, r0
 800668e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	//四元数归一化
	norm_temp = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8006692:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006696:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800669a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800669e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066a6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80066aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066b2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80066b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066be:	eeb0 0a67 	vmov.f32	s0, s15
 80066c2:	f7fe fe33 	bl	800532c <invSqrt>
 80066c6:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = q0 * norm_temp;
 80066ca:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 80066ce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	q1 = q1 * norm_temp;
 80066da:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80066de:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80066e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	q2 = q2 * norm_temp;
 80066ea:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80066ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80066f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066f6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	q3 = q3 * norm_temp;
 80066fa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80066fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	//将更新后的四元数存到到g_imu_struct中
	g_imu_struct.quat.q0 = q0;
 800670a:	4a42      	ldr	r2, [pc, #264]	; (8006814 <IMU_Data_Fusion_Mahony+0x7b4>)
 800670c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006710:	6353      	str	r3, [r2, #52]	; 0x34
	g_imu_struct.quat.q1 = q1;
 8006712:	4a40      	ldr	r2, [pc, #256]	; (8006814 <IMU_Data_Fusion_Mahony+0x7b4>)
 8006714:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006718:	6393      	str	r3, [r2, #56]	; 0x38
	g_imu_struct.quat.q2 = q2;
 800671a:	4a3e      	ldr	r2, [pc, #248]	; (8006814 <IMU_Data_Fusion_Mahony+0x7b4>)
 800671c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006720:	63d3      	str	r3, [r2, #60]	; 0x3c
	g_imu_struct.quat.q3 = q3;
 8006722:	4a3c      	ldr	r2, [pc, #240]	; (8006814 <IMU_Data_Fusion_Mahony+0x7b4>)
 8006724:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006728:	6413      	str	r3, [r2, #64]	; 0x40
	//四元数转旋转矩阵
	g1 = 2.0f * (q1 * q3 - q0 * q2);
 800672a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800672e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006736:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800673a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800673e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006746:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800674a:	edc7 7a08 	vstr	s15, [r7, #32]
	g2 = 2.0f * (q0 * q1 + q2 * q3);
 800674e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8006752:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800675a:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 800675e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800676a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800676e:	edc7 7a07 	vstr	s15, [r7, #28]
	g3 = q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3;
 8006772:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006776:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800677a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800677e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006782:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006786:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800678a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800678e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006792:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006796:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800679a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800679e:	edc7 7a06 	vstr	s15, [r7, #24]
	g4 = 2.0f * (q1 * q2 + q0 * q3);
 80067a2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80067a6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80067aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067ae:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80067b2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80067b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067c2:	edc7 7a05 	vstr	s15, [r7, #20]
	g5 = q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3;
 80067c6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80067ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80067ce:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80067d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067da:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80067de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80067e6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80067ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80067ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067f2:	edc7 7a04 	vstr	s15, [r7, #16]

	*roll = atan2f(g2,g3) * 57.29578;
 80067f6:	edd7 0a06 	vldr	s1, [r7, #24]
 80067fa:	ed97 0a07 	vldr	s0, [r7, #28]
 80067fe:	f000 fcb7 	bl	8007170 <atan2f>
 8006802:	ee10 3a10 	vmov	r3, s0
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 fe42 	bl	8000490 <__aeabi_f2d>
 800680c:	e008      	b.n	8006820 <IMU_Data_Fusion_Mahony+0x7c0>
 800680e:	bf00      	nop
 8006810:	2000026c 	.word	0x2000026c
 8006814:	2000000c 	.word	0x2000000c
 8006818:	20000270 	.word	0x20000270
 800681c:	3fe00000 	.word	0x3fe00000
 8006820:	a323      	add	r3, pc, #140	; (adr r3, 80068b0 <IMU_Data_Fusion_Mahony+0x850>)
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f7f9 fe8b 	bl	8000540 <__aeabi_dmul>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4610      	mov	r0, r2
 8006830:	4619      	mov	r1, r3
 8006832:	f7fa f95d 	bl	8000af0 <__aeabi_d2f>
 8006836:	4602      	mov	r2, r0
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	601a      	str	r2, [r3, #0]
	*pitch = -asinf(g1) * 57.29578;
 800683c:	ed97 0a08 	vldr	s0, [r7, #32]
 8006840:	f000 fc6a 	bl	8007118 <asinf>
 8006844:	eef0 7a40 	vmov.f32	s15, s0
 8006848:	eef1 7a67 	vneg.f32	s15, s15
 800684c:	ee17 3a90 	vmov	r3, s15
 8006850:	4618      	mov	r0, r3
 8006852:	f7f9 fe1d 	bl	8000490 <__aeabi_f2d>
 8006856:	a316      	add	r3, pc, #88	; (adr r3, 80068b0 <IMU_Data_Fusion_Mahony+0x850>)
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	f7f9 fe70 	bl	8000540 <__aeabi_dmul>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4610      	mov	r0, r2
 8006866:	4619      	mov	r1, r3
 8006868:	f7fa f942 	bl	8000af0 <__aeabi_d2f>
 800686c:	4602      	mov	r2, r0
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
	*yaw = atan2f(g4, g5) * 57.29578;
 8006872:	edd7 0a04 	vldr	s1, [r7, #16]
 8006876:	ed97 0a05 	vldr	s0, [r7, #20]
 800687a:	f000 fc79 	bl	8007170 <atan2f>
 800687e:	ee10 3a10 	vmov	r3, s0
 8006882:	4618      	mov	r0, r3
 8006884:	f7f9 fe04 	bl	8000490 <__aeabi_f2d>
 8006888:	a309      	add	r3, pc, #36	; (adr r3, 80068b0 <IMU_Data_Fusion_Mahony+0x850>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 fe57 	bl	8000540 <__aeabi_dmul>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f929 	bl	8000af0 <__aeabi_d2f>
 800689e:	4602      	mov	r2, r0
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e000      	b.n	80068a8 <IMU_Data_Fusion_Mahony+0x848>
		return;
 80068a6:	bf00      	nop

}
 80068a8:	37a8      	adds	r7, #168	; 0xa8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068b0:	1e7967cb 	.word	0x1e7967cb
 80068b4:	404ca5dc 	.word	0x404ca5dc

080068b8 <IMU_Temperature_Compensate>:

static void IMU_Temperature_Compensate(void)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
			.limit.max_i_out = IMU_TEMP_PWM_MAX - 500,
			.output.i_out = 200,
			.limit.max_total_out = IMU_TEMP_PWM_MAX
	};

	real_temp = g_imu_struct.temperature;
 80068be:	4b21      	ldr	r3, [pc, #132]	; (8006944 <IMU_Temperature_Compensate+0x8c>)
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	60bb      	str	r3, [r7, #8]

	if (real_temp < 38.5f)
 80068c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80068c8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006948 <IMU_Temperature_Compensate+0x90>
 80068cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d4:	d514      	bpl.n	8006900 <IMU_Temperature_Compensate+0x48>
	{
		//温度低于36度，满功率加热
		if (real_temp<36)
 80068d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80068da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800694c <IMU_Temperature_Compensate+0x94>
 80068de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e6:	d505      	bpl.n	80068f4 <IMU_Temperature_Compensate+0x3c>
		{
			__HAL_TIM_SetCompare(&htim10, TIM_CHANNEL_1, IMU_TEMP_PWM_MAX);
 80068e8:	4b19      	ldr	r3, [pc, #100]	; (8006950 <IMU_Temperature_Compensate+0x98>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80068f0:	635a      	str	r2, [r3, #52]	; 0x34
			return ;
 80068f2:	e023      	b.n	800693c <IMU_Temperature_Compensate+0x84>
		}
		//温度高于36度但低于38.5度，半功率加热
		__HAL_TIM_SetCompare(&htim10, TIM_CHANNEL_1, IMU_TEMP_PWM_MAX / 2);
 80068f4:	4b16      	ldr	r3, [pc, #88]	; (8006950 <IMU_Temperature_Compensate+0x98>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80068fc:	635a      	str	r2, [r3, #52]	; 0x34
		return ;
 80068fe:	e01d      	b.n	800693c <IMU_Temperature_Compensate+0x84>
	}

	//温度高于38.5度，用pid控制温度
	temp_pid_out = Pid_Calculate(&s_temp_pidstruct, real_temp, IMU_MAX_TEMP_SET);
 8006900:	eddf 0a14 	vldr	s1, [pc, #80]	; 8006954 <IMU_Temperature_Compensate+0x9c>
 8006904:	ed97 0a02 	vldr	s0, [r7, #8]
 8006908:	4813      	ldr	r0, [pc, #76]	; (8006958 <IMU_Temperature_Compensate+0xa0>)
 800690a:	f000 fa17 	bl	8006d3c <Pid_Calculate>
 800690e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (temp_pid_out < 0)
 8006912:	edd7 7a01 	vldr	s15, [r7, #4]
 8006916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800691a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800691e:	d502      	bpl.n	8006926 <IMU_Temperature_Compensate+0x6e>
	{
		temp_pwm = 0;
 8006920:	2300      	movs	r3, #0
 8006922:	81fb      	strh	r3, [r7, #14]
 8006924:	e006      	b.n	8006934 <IMU_Temperature_Compensate+0x7c>
	}
	else
	{
		temp_pwm =  (uint16_t)temp_pid_out;
 8006926:	edd7 7a01 	vldr	s15, [r7, #4]
 800692a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800692e:	ee17 3a90 	vmov	r3, s15
 8006932:	81fb      	strh	r3, [r7, #14]
	}
	__HAL_TIM_SetCompare(&htim10, TIM_CHANNEL_1, temp_pwm);
 8006934:	4b06      	ldr	r3, [pc, #24]	; (8006950 <IMU_Temperature_Compensate+0x98>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	89fa      	ldrh	r2, [r7, #14]
 800693a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	2000000c 	.word	0x2000000c
 8006948:	421a0000 	.word	0x421a0000
 800694c:	42100000 	.word	0x42100000
 8006950:	20000218 	.word	0x20000218
 8006954:	42200000 	.word	0x42200000
 8006958:	20000058 	.word	0x20000058

0800695c <IST8310_WriteReg>:
  * @param   reg_add:寄存器地址
	* @param	 reg_data:要写入的数据
  * @retval
  */
void IST8310_WriteReg(uint8_t reg_add,uint8_t reg_dat)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af04      	add	r7, sp, #16
 8006962:	4603      	mov	r3, r0
 8006964:	460a      	mov	r2, r1
 8006966:	71fb      	strb	r3, [r7, #7]
 8006968:	4613      	mov	r3, r2
 800696a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS << 1, reg_add, I2C_MEMADD_SIZE_8BIT, &reg_dat, 1, 0xff);
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	b29a      	uxth	r2, r3
 8006970:	23ff      	movs	r3, #255	; 0xff
 8006972:	9302      	str	r3, [sp, #8]
 8006974:	2301      	movs	r3, #1
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	1dbb      	adds	r3, r7, #6
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	2301      	movs	r3, #1
 800697e:	211c      	movs	r1, #28
 8006980:	4803      	ldr	r0, [pc, #12]	; (8006990 <IST8310_WriteReg+0x34>)
 8006982:	f7fb fc2f 	bl	80021e4 <HAL_I2C_Mem_Write>
}
 8006986:	bf00      	nop
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20000114 	.word	0x20000114

08006994 <IST8310_ReadData>:
	* @param	 *pdata:存储数据的缓存区
	* @param	 len:要读取的数据量
  * @retval
  */
void IST8310_ReadData(uint8_t reg_add,uint8_t *pdata,uint8_t len)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af04      	add	r7, sp, #16
 800699a:	4603      	mov	r3, r0
 800699c:	6039      	str	r1, [r7, #0]
 800699e:	71fb      	strb	r3, [r7, #7]
 80069a0:	4613      	mov	r3, r2
 80069a2:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS << 1, reg_add, I2C_MEMADD_SIZE_8BIT, pdata, len, 0xff);
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	79bb      	ldrb	r3, [r7, #6]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	21ff      	movs	r1, #255	; 0xff
 80069ae:	9102      	str	r1, [sp, #8]
 80069b0:	9301      	str	r3, [sp, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	2301      	movs	r3, #1
 80069b8:	211c      	movs	r1, #28
 80069ba:	4803      	ldr	r0, [pc, #12]	; (80069c8 <IST8310_ReadData+0x34>)
 80069bc:	f7fb fd0c 	bl	80023d8 <HAL_I2C_Mem_Read>
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000114 	.word	0x20000114

080069cc <IST8310_ReadID>:
/**
  * @brief   读取mpu6050的ID
  * @retval  Status_OK正常 | Status_ERROR错误
  */
uint8_t IST8310_ReadID(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
	uint8_t ID;
	IST8310_ReadData(IST8310_WHO_AM_I, &ID, 1);
 80069d2:	1dfb      	adds	r3, r7, #7
 80069d4:	2201      	movs	r2, #1
 80069d6:	4619      	mov	r1, r3
 80069d8:	2000      	movs	r0, #0
 80069da:	f7ff ffdb 	bl	8006994 <IST8310_ReadData>
	return ID;
 80069de:	79fb      	ldrb	r3, [r7, #7]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <IST8310_Init>:

IMU_ERROR_Typedef IST8310_Init(void)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
	if(IST8310_ReadID() == IST8310_WHO_AM_I_VALUE)
 80069ec:	f7ff ffee 	bl	80069cc <IST8310_ReadID>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d126      	bne.n	8006a44 <IST8310_Init+0x5c>
	{
		//重启IST8310
		HAL_GPIO_WritePin(GPIOG, IST8310_RST_PIN, GPIO_PIN_RESET);
 80069f6:	2200      	movs	r2, #0
 80069f8:	2140      	movs	r1, #64	; 0x40
 80069fa:	4814      	ldr	r0, [pc, #80]	; (8006a4c <IST8310_Init+0x64>)
 80069fc:	f7fb fa56 	bl	8001eac <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8006a00:	2032      	movs	r0, #50	; 0x32
 8006a02:	f7fa ff81 	bl	8001908 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, IST8310_RST_PIN, GPIO_PIN_SET);
 8006a06:	2201      	movs	r2, #1
 8006a08:	2140      	movs	r1, #64	; 0x40
 8006a0a:	4810      	ldr	r0, [pc, #64]	; (8006a4c <IST8310_Init+0x64>)
 8006a0c:	f7fb fa4e 	bl	8001eac <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8006a10:	2032      	movs	r0, #50	; 0x32
 8006a12:	f7fa ff79 	bl	8001908 <HAL_Delay>
		//不开启中断
		IST8310_WriteReg(IST8310_CNTL2_ADDR, 0x00);
 8006a16:	2100      	movs	r1, #0
 8006a18:	200b      	movs	r0, #11
 8006a1a:	f7ff ff9f 	bl	800695c <IST8310_WriteReg>
		HAL_Delay(150);
 8006a1e:	2096      	movs	r0, #150	; 0x96
 8006a20:	f7fa ff72 	bl	8001908 <HAL_Delay>
		//四次采样平均
		IST8310_WriteReg(IST8310_AVGCNTL_ADDR, IST8310_AVGCNTL_FOURTH);
 8006a24:	2112      	movs	r1, #18
 8006a26:	2041      	movs	r0, #65	; 0x41
 8006a28:	f7ff ff98 	bl	800695c <IST8310_WriteReg>
		HAL_Delay(150);
 8006a2c:	2096      	movs	r0, #150	; 0x96
 8006a2e:	f7fa ff6b 	bl	8001908 <HAL_Delay>
		//连续采样，200HZ输出模式
		IST8310_WriteReg(IST8310_CNTL1_ADDR, IST8310_CNTL1_CONTINUE);
 8006a32:	210b      	movs	r1, #11
 8006a34:	200a      	movs	r0, #10
 8006a36:	f7ff ff91 	bl	800695c <IST8310_WriteReg>
		HAL_Delay(150);
 8006a3a:	2096      	movs	r0, #150	; 0x96
 8006a3c:	f7fa ff64 	bl	8001908 <HAL_Delay>

    	return IMU_NO_ERROR;
 8006a40:	2300      	movs	r3, #0
 8006a42:	e000      	b.n	8006a46 <IST8310_Init+0x5e>
	}
	else
	{
		return IMU_MAG_ERROR;
 8006a44:	2304      	movs	r3, #4
	}
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40021800 	.word	0x40021800

08006a50 <IST8310_Getdata_Mag_raw>:

void IST8310_Getdata_Mag_raw(int16_t *magdata)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	IST8310_ReadData(IST8310_DATA_XL_ADDR, buff, 6);
 8006a58:	f107 0308 	add.w	r3, r7, #8
 8006a5c:	2206      	movs	r2, #6
 8006a5e:	4619      	mov	r1, r3
 8006a60:	2003      	movs	r0, #3
 8006a62:	f7ff ff97 	bl	8006994 <IST8310_ReadData>
	magdata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 8006a66:	7a7b      	ldrb	r3, [r7, #9]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	b21a      	sxth	r2, r3
 8006a6c:	7a3b      	ldrb	r3, [r7, #8]
 8006a6e:	b21b      	sxth	r3, r3
 8006a70:	4313      	orrs	r3, r2
 8006a72:	b21a      	sxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	801a      	strh	r2, [r3, #0]
	magdata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	b219      	sxth	r1, r3
 8006a7e:	7abb      	ldrb	r3, [r7, #10]
 8006a80:	b21a      	sxth	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3302      	adds	r3, #2
 8006a86:	430a      	orrs	r2, r1
 8006a88:	b212      	sxth	r2, r2
 8006a8a:	801a      	strh	r2, [r3, #0]
	magdata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 8006a8c:	7b7b      	ldrb	r3, [r7, #13]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	b219      	sxth	r1, r3
 8006a92:	7b3b      	ldrb	r3, [r7, #12]
 8006a94:	b21a      	sxth	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	b212      	sxth	r2, r2
 8006a9e:	801a      	strh	r2, [r3, #0]
}
 8006aa0:	bf00      	nop
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <OLED_I2C_Start>:
  * @brief  I2C开始
  * @param  无
  * @retval 无
  */
void OLED_I2C_Start(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 8006aac:	2201      	movs	r2, #1
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4809      	ldr	r0, [pc, #36]	; (8006ad8 <OLED_I2C_Start+0x30>)
 8006ab2:	f7fb f9fb 	bl	8001eac <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	2102      	movs	r1, #2
 8006aba:	4807      	ldr	r0, [pc, #28]	; (8006ad8 <OLED_I2C_Start+0x30>)
 8006abc:	f7fb f9f6 	bl	8001eac <HAL_GPIO_WritePin>
	OLED_W_SDA(0);
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	4804      	ldr	r0, [pc, #16]	; (8006ad8 <OLED_I2C_Start+0x30>)
 8006ac6:	f7fb f9f1 	bl	8001eac <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8006aca:	2200      	movs	r2, #0
 8006acc:	2102      	movs	r1, #2
 8006ace:	4802      	ldr	r0, [pc, #8]	; (8006ad8 <OLED_I2C_Start+0x30>)
 8006ad0:	f7fb f9ec 	bl	8001eac <HAL_GPIO_WritePin>
}
 8006ad4:	bf00      	nop
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40021400 	.word	0x40021400

08006adc <OLED_I2C_Stop>:
  * @brief  I2C停止
  * @param  无
  * @retval 无
  */
void OLED_I2C_Stop(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	4807      	ldr	r0, [pc, #28]	; (8006b04 <OLED_I2C_Stop+0x28>)
 8006ae6:	f7fb f9e1 	bl	8001eac <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8006aea:	2201      	movs	r2, #1
 8006aec:	2102      	movs	r1, #2
 8006aee:	4805      	ldr	r0, [pc, #20]	; (8006b04 <OLED_I2C_Stop+0x28>)
 8006af0:	f7fb f9dc 	bl	8001eac <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8006af4:	2201      	movs	r2, #1
 8006af6:	2101      	movs	r1, #1
 8006af8:	4802      	ldr	r0, [pc, #8]	; (8006b04 <OLED_I2C_Stop+0x28>)
 8006afa:	f7fb f9d7 	bl	8001eac <HAL_GPIO_WritePin>
}
 8006afe:	bf00      	nop
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	40021400 	.word	0x40021400

08006b08 <OLED_I2C_SendByte>:
  * @brief  I2C发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
 8006b16:	e01b      	b.n	8006b50 <OLED_I2C_SendByte+0x48>
	{
		OLED_W_SDA(Byte & (0x80 >> i));
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2280      	movs	r2, #128	; 0x80
 8006b1c:	fa42 f303 	asr.w	r3, r2, r3
 8006b20:	b25a      	sxtb	r2, r3
 8006b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b26:	4013      	ands	r3, r2
 8006b28:	b25b      	sxtb	r3, r3
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2101      	movs	r1, #1
 8006b30:	4810      	ldr	r0, [pc, #64]	; (8006b74 <OLED_I2C_SendByte+0x6c>)
 8006b32:	f7fb f9bb 	bl	8001eac <HAL_GPIO_WritePin>
		OLED_W_SCL(1);
 8006b36:	2201      	movs	r2, #1
 8006b38:	2102      	movs	r1, #2
 8006b3a:	480e      	ldr	r0, [pc, #56]	; (8006b74 <OLED_I2C_SendByte+0x6c>)
 8006b3c:	f7fb f9b6 	bl	8001eac <HAL_GPIO_WritePin>
		OLED_W_SCL(0);
 8006b40:	2200      	movs	r2, #0
 8006b42:	2102      	movs	r1, #2
 8006b44:	480b      	ldr	r0, [pc, #44]	; (8006b74 <OLED_I2C_SendByte+0x6c>)
 8006b46:	f7fb f9b1 	bl	8001eac <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	73fb      	strb	r3, [r7, #15]
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b07      	cmp	r3, #7
 8006b54:	d9e0      	bls.n	8006b18 <OLED_I2C_SendByte+0x10>
	}
	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 8006b56:	2201      	movs	r2, #1
 8006b58:	2102      	movs	r1, #2
 8006b5a:	4806      	ldr	r0, [pc, #24]	; (8006b74 <OLED_I2C_SendByte+0x6c>)
 8006b5c:	f7fb f9a6 	bl	8001eac <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8006b60:	2200      	movs	r2, #0
 8006b62:	2102      	movs	r1, #2
 8006b64:	4803      	ldr	r0, [pc, #12]	; (8006b74 <OLED_I2C_SendByte+0x6c>)
 8006b66:	f7fb f9a1 	bl	8001eac <HAL_GPIO_WritePin>
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	40021400 	.word	0x40021400

08006b78 <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 8006b82:	f7ff ff91 	bl	8006aa8 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 8006b86:	2078      	movs	r0, #120	; 0x78
 8006b88:	f7ff ffbe 	bl	8006b08 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//写命令
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	f7ff ffbb 	bl	8006b08 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command); 
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff ffb7 	bl	8006b08 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8006b9a:	f7ff ff9f 	bl	8006adc <OLED_I2C_Stop>
}
 8006b9e:	bf00      	nop
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	4603      	mov	r3, r0
 8006bae:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 8006bb0:	f7ff ff7a 	bl	8006aa8 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 8006bb4:	2078      	movs	r0, #120	; 0x78
 8006bb6:	f7ff ffa7 	bl	8006b08 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//写数据
 8006bba:	2040      	movs	r0, #64	; 0x40
 8006bbc:	f7ff ffa4 	bl	8006b08 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff ffa0 	bl	8006b08 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8006bc8:	f7ff ff88 	bl	8006adc <OLED_I2C_Stop>
}
 8006bcc:	bf00      	nop
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	460a      	mov	r2, r1
 8006bde:	71fb      	strb	r3, [r7, #7]
 8006be0:	4613      	mov	r3, r2
 8006be2:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff ffc3 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置低4位
 8006bf2:	79bb      	ldrb	r3, [r7, #6]
 8006bf4:	091b      	lsrs	r3, r3, #4
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	f043 0310 	orr.w	r3, r3, #16
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff ffba 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置高4位
 8006c04:	79bb      	ldrb	r3, [r7, #6]
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff ffb3 	bl	8006b78 <OLED_WriteCommand>
}
 8006c12:	bf00      	nop
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b082      	sub	sp, #8
 8006c1e:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8006c20:	2300      	movs	r3, #0
 8006c22:	71bb      	strb	r3, [r7, #6]
 8006c24:	e014      	b.n	8006c50 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 8006c26:	79bb      	ldrb	r3, [r7, #6]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff ffd2 	bl	8006bd4 <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8006c30:	2300      	movs	r3, #0
 8006c32:	71fb      	strb	r3, [r7, #7]
 8006c34:	e005      	b.n	8006c42 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 8006c36:	2000      	movs	r0, #0
 8006c38:	f7ff ffb5 	bl	8006ba6 <OLED_WriteData>
		for(i = 0; i < 128; i++)
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	71fb      	strb	r3, [r7, #7]
 8006c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	daf5      	bge.n	8006c36 <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8006c4a:	79bb      	ldrb	r3, [r7, #6]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	71bb      	strb	r3, [r7, #6]
 8006c50:	79bb      	ldrb	r3, [r7, #6]
 8006c52:	2b07      	cmp	r3, #7
 8006c54:	d9e7      	bls.n	8006c26 <OLED_Clear+0xc>
		}
	}
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
 8006c6a:	e00c      	b.n	8006c86 <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	e002      	b.n	8006c78 <OLED_Init+0x18>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	3301      	adds	r3, #1
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c7e:	d3f8      	bcc.n	8006c72 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3301      	adds	r3, #1
 8006c84:	607b      	str	r3, [r7, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c8c:	d3ee      	bcc.n	8006c6c <OLED_Init+0xc>
	}
	OLED_W_SCL(1);
 8006c8e:	2201      	movs	r2, #1
 8006c90:	2102      	movs	r1, #2
 8006c92:	4829      	ldr	r0, [pc, #164]	; (8006d38 <OLED_Init+0xd8>)
 8006c94:	f7fb f90a 	bl	8001eac <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8006c98:	2201      	movs	r2, #1
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	4826      	ldr	r0, [pc, #152]	; (8006d38 <OLED_Init+0xd8>)
 8006c9e:	f7fb f905 	bl	8001eac <HAL_GPIO_WritePin>
	//OLED_I2C_Init();			//端口初始化
	
	OLED_WriteCommand(0xAE);	//关闭显示
 8006ca2:	20ae      	movs	r0, #174	; 0xae
 8006ca4:	f7ff ff68 	bl	8006b78 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 8006ca8:	20d5      	movs	r0, #213	; 0xd5
 8006caa:	f7ff ff65 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 8006cae:	2080      	movs	r0, #128	; 0x80
 8006cb0:	f7ff ff62 	bl	8006b78 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 8006cb4:	20a8      	movs	r0, #168	; 0xa8
 8006cb6:	f7ff ff5f 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8006cba:	203f      	movs	r0, #63	; 0x3f
 8006cbc:	f7ff ff5c 	bl	8006b78 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 8006cc0:	20d3      	movs	r0, #211	; 0xd3
 8006cc2:	f7ff ff59 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8006cc6:	2000      	movs	r0, #0
 8006cc8:	f7ff ff56 	bl	8006b78 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 8006ccc:	2040      	movs	r0, #64	; 0x40
 8006cce:	f7ff ff53 	bl	8006b78 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 8006cd2:	20a1      	movs	r0, #161	; 0xa1
 8006cd4:	f7ff ff50 	bl	8006b78 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 8006cd8:	20c8      	movs	r0, #200	; 0xc8
 8006cda:	f7ff ff4d 	bl	8006b78 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8006cde:	20da      	movs	r0, #218	; 0xda
 8006ce0:	f7ff ff4a 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8006ce4:	2012      	movs	r0, #18
 8006ce6:	f7ff ff47 	bl	8006b78 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 8006cea:	2081      	movs	r0, #129	; 0x81
 8006cec:	f7ff ff44 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8006cf0:	20cf      	movs	r0, #207	; 0xcf
 8006cf2:	f7ff ff41 	bl	8006b78 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8006cf6:	20d9      	movs	r0, #217	; 0xd9
 8006cf8:	f7ff ff3e 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8006cfc:	20f1      	movs	r0, #241	; 0xf1
 8006cfe:	f7ff ff3b 	bl	8006b78 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8006d02:	20db      	movs	r0, #219	; 0xdb
 8006d04:	f7ff ff38 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8006d08:	2030      	movs	r0, #48	; 0x30
 8006d0a:	f7ff ff35 	bl	8006b78 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8006d0e:	20a4      	movs	r0, #164	; 0xa4
 8006d10:	f7ff ff32 	bl	8006b78 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 8006d14:	20a6      	movs	r0, #166	; 0xa6
 8006d16:	f7ff ff2f 	bl	8006b78 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8006d1a:	208d      	movs	r0, #141	; 0x8d
 8006d1c:	f7ff ff2c 	bl	8006b78 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8006d20:	2014      	movs	r0, #20
 8006d22:	f7ff ff29 	bl	8006b78 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8006d26:	20af      	movs	r0, #175	; 0xaf
 8006d28:	f7ff ff26 	bl	8006b78 <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8006d2c:	f7ff ff75 	bl	8006c1a <OLED_Clear>
}
 8006d30:	bf00      	nop
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	40021400 	.word	0x40021400

08006d3c <Pid_Calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output
  */
float Pid_Calculate(PID_Typedef *pid, float get, float set)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	ed87 0a02 	vstr	s0, [r7, #8]
 8006d48:	edc7 0a01 	vstr	s1, [r7, #4]
//	uint8_t flag = 0;
	//get input
	pid->input.get = get;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	605a      	str	r2, [r3, #4]
	pid->input.set = set;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	601a      	str	r2, [r3, #0]
	pid->input.last_err = pid->input.err;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	60da      	str	r2, [r3, #12]
	pid->input.err = set - get;
 8006d60:	ed97 7a01 	vldr	s14, [r7, #4]
 8006d64:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	edc3 7a02 	vstr	s15, [r3, #8]

	//input limit

	if ((pid->limit.max_err_input != 0) && (fabs(pid->input.err) > pid->limit.max_err_input))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006d78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d80:	d00f      	beq.n	8006da2 <Pid_Calculate+0x66>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d88:	eeb0 7ae7 	vabs.f32	s14, s15
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9a:	dd02      	ble.n	8006da2 <Pid_Calculate+0x66>
		return 0;
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	e062      	b.n	8006e68 <Pid_Calculate+0x12c>

	//output calculate
	pid->output.p_out  = pid->param.Kp * pid->input.err;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	ed93 7a05 	vldr	s14, [r3, #20]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	edd3 7a02 	vldr	s15, [r3, #8]
 8006dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->output.i_out += pid->param.Ki * pid->input.err;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	edd3 6a06 	vldr	s13, [r3, #24]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8006dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pid->output.d_out  = pid->param.Kd * (pid->input.err - pid->input.last_err) * 1000;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	ed93 7a07 	vldr	s14, [r3, #28]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	edd3 6a02 	vldr	s13, [r3, #8]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006dea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006e78 <Pid_Calculate+0x13c>
 8006df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	//output limit
	pid->output.i_out	  = limit_control(pid->output.i_out, pid->limit.max_i_out);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006e0c:	eef0 0a47 	vmov.f32	s1, s14
 8006e10:	eeb0 0a67 	vmov.f32	s0, s15
 8006e14:	f7fe fac6 	bl	80053a4 <limit_control>
 8006e18:	eef0 7a40 	vmov.f32	s15, s0
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pid->output.total_out = pid->output.p_out + pid->output.i_out + pid->output.d_out;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	ed93 7a08 	vldr	s14, [r3, #32]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid->output.total_out = limit_control(pid->output.total_out, pid->limit.max_total_out);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8006e4e:	eef0 0a47 	vmov.f32	s1, s14
 8006e52:	eeb0 0a67 	vmov.f32	s0, s15
 8006e56:	f7fe faa5 	bl	80053a4 <limit_control>
 8006e5a:	eef0 7a40 	vmov.f32	s15, s0
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	return pid->output.total_out;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8006e68:	ee07 3a90 	vmov	s15, r3
 8006e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	447a0000 	.word	0x447a0000

08006e7c <__errno>:
 8006e7c:	4b01      	ldr	r3, [pc, #4]	; (8006e84 <__errno+0x8>)
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20000094 	.word	0x20000094

08006e88 <__libc_init_array>:
 8006e88:	b570      	push	{r4, r5, r6, lr}
 8006e8a:	4d0d      	ldr	r5, [pc, #52]	; (8006ec0 <__libc_init_array+0x38>)
 8006e8c:	4c0d      	ldr	r4, [pc, #52]	; (8006ec4 <__libc_init_array+0x3c>)
 8006e8e:	1b64      	subs	r4, r4, r5
 8006e90:	10a4      	asrs	r4, r4, #2
 8006e92:	2600      	movs	r6, #0
 8006e94:	42a6      	cmp	r6, r4
 8006e96:	d109      	bne.n	8006eac <__libc_init_array+0x24>
 8006e98:	4d0b      	ldr	r5, [pc, #44]	; (8006ec8 <__libc_init_array+0x40>)
 8006e9a:	4c0c      	ldr	r4, [pc, #48]	; (8006ecc <__libc_init_array+0x44>)
 8006e9c:	f002 f9e8 	bl	8009270 <_init>
 8006ea0:	1b64      	subs	r4, r4, r5
 8006ea2:	10a4      	asrs	r4, r4, #2
 8006ea4:	2600      	movs	r6, #0
 8006ea6:	42a6      	cmp	r6, r4
 8006ea8:	d105      	bne.n	8006eb6 <__libc_init_array+0x2e>
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb0:	4798      	blx	r3
 8006eb2:	3601      	adds	r6, #1
 8006eb4:	e7ee      	b.n	8006e94 <__libc_init_array+0xc>
 8006eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eba:	4798      	blx	r3
 8006ebc:	3601      	adds	r6, #1
 8006ebe:	e7f2      	b.n	8006ea6 <__libc_init_array+0x1e>
 8006ec0:	08009500 	.word	0x08009500
 8006ec4:	08009500 	.word	0x08009500
 8006ec8:	08009500 	.word	0x08009500
 8006ecc:	08009504 	.word	0x08009504

08006ed0 <memset>:
 8006ed0:	4402      	add	r2, r0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d100      	bne.n	8006eda <memset+0xa>
 8006ed8:	4770      	bx	lr
 8006eda:	f803 1b01 	strb.w	r1, [r3], #1
 8006ede:	e7f9      	b.n	8006ed4 <memset+0x4>

08006ee0 <cos>:
 8006ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ee2:	ec53 2b10 	vmov	r2, r3, d0
 8006ee6:	4826      	ldr	r0, [pc, #152]	; (8006f80 <cos+0xa0>)
 8006ee8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006eec:	4281      	cmp	r1, r0
 8006eee:	dc06      	bgt.n	8006efe <cos+0x1e>
 8006ef0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006f78 <cos+0x98>
 8006ef4:	b005      	add	sp, #20
 8006ef6:	f85d eb04 	ldr.w	lr, [sp], #4
 8006efa:	f001 bab5 	b.w	8008468 <__kernel_cos>
 8006efe:	4821      	ldr	r0, [pc, #132]	; (8006f84 <cos+0xa4>)
 8006f00:	4281      	cmp	r1, r0
 8006f02:	dd09      	ble.n	8006f18 <cos+0x38>
 8006f04:	ee10 0a10 	vmov	r0, s0
 8006f08:	4619      	mov	r1, r3
 8006f0a:	f7f9 f961 	bl	80001d0 <__aeabi_dsub>
 8006f0e:	ec41 0b10 	vmov	d0, r0, r1
 8006f12:	b005      	add	sp, #20
 8006f14:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f18:	4668      	mov	r0, sp
 8006f1a:	f000 fe5d 	bl	8007bd8 <__ieee754_rem_pio2>
 8006f1e:	f000 0003 	and.w	r0, r0, #3
 8006f22:	2801      	cmp	r0, #1
 8006f24:	d00b      	beq.n	8006f3e <cos+0x5e>
 8006f26:	2802      	cmp	r0, #2
 8006f28:	d016      	beq.n	8006f58 <cos+0x78>
 8006f2a:	b9e0      	cbnz	r0, 8006f66 <cos+0x86>
 8006f2c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f30:	ed9d 0b00 	vldr	d0, [sp]
 8006f34:	f001 fa98 	bl	8008468 <__kernel_cos>
 8006f38:	ec51 0b10 	vmov	r0, r1, d0
 8006f3c:	e7e7      	b.n	8006f0e <cos+0x2e>
 8006f3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f42:	ed9d 0b00 	vldr	d0, [sp]
 8006f46:	f001 fea7 	bl	8008c98 <__kernel_sin>
 8006f4a:	ec53 2b10 	vmov	r2, r3, d0
 8006f4e:	ee10 0a10 	vmov	r0, s0
 8006f52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006f56:	e7da      	b.n	8006f0e <cos+0x2e>
 8006f58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f5c:	ed9d 0b00 	vldr	d0, [sp]
 8006f60:	f001 fa82 	bl	8008468 <__kernel_cos>
 8006f64:	e7f1      	b.n	8006f4a <cos+0x6a>
 8006f66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f6a:	ed9d 0b00 	vldr	d0, [sp]
 8006f6e:	2001      	movs	r0, #1
 8006f70:	f001 fe92 	bl	8008c98 <__kernel_sin>
 8006f74:	e7e0      	b.n	8006f38 <cos+0x58>
 8006f76:	bf00      	nop
	...
 8006f80:	3fe921fb 	.word	0x3fe921fb
 8006f84:	7fefffff 	.word	0x7fefffff

08006f88 <sin>:
 8006f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f8a:	ec53 2b10 	vmov	r2, r3, d0
 8006f8e:	4828      	ldr	r0, [pc, #160]	; (8007030 <sin+0xa8>)
 8006f90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f94:	4281      	cmp	r1, r0
 8006f96:	dc07      	bgt.n	8006fa8 <sin+0x20>
 8006f98:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007028 <sin+0xa0>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	b005      	add	sp, #20
 8006fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa4:	f001 be78 	b.w	8008c98 <__kernel_sin>
 8006fa8:	4822      	ldr	r0, [pc, #136]	; (8007034 <sin+0xac>)
 8006faa:	4281      	cmp	r1, r0
 8006fac:	dd09      	ble.n	8006fc2 <sin+0x3a>
 8006fae:	ee10 0a10 	vmov	r0, s0
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	f7f9 f90c 	bl	80001d0 <__aeabi_dsub>
 8006fb8:	ec41 0b10 	vmov	d0, r0, r1
 8006fbc:	b005      	add	sp, #20
 8006fbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fc2:	4668      	mov	r0, sp
 8006fc4:	f000 fe08 	bl	8007bd8 <__ieee754_rem_pio2>
 8006fc8:	f000 0003 	and.w	r0, r0, #3
 8006fcc:	2801      	cmp	r0, #1
 8006fce:	d00c      	beq.n	8006fea <sin+0x62>
 8006fd0:	2802      	cmp	r0, #2
 8006fd2:	d011      	beq.n	8006ff8 <sin+0x70>
 8006fd4:	b9f0      	cbnz	r0, 8007014 <sin+0x8c>
 8006fd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fda:	ed9d 0b00 	vldr	d0, [sp]
 8006fde:	2001      	movs	r0, #1
 8006fe0:	f001 fe5a 	bl	8008c98 <__kernel_sin>
 8006fe4:	ec51 0b10 	vmov	r0, r1, d0
 8006fe8:	e7e6      	b.n	8006fb8 <sin+0x30>
 8006fea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fee:	ed9d 0b00 	vldr	d0, [sp]
 8006ff2:	f001 fa39 	bl	8008468 <__kernel_cos>
 8006ff6:	e7f5      	b.n	8006fe4 <sin+0x5c>
 8006ff8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ffc:	ed9d 0b00 	vldr	d0, [sp]
 8007000:	2001      	movs	r0, #1
 8007002:	f001 fe49 	bl	8008c98 <__kernel_sin>
 8007006:	ec53 2b10 	vmov	r2, r3, d0
 800700a:	ee10 0a10 	vmov	r0, s0
 800700e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007012:	e7d1      	b.n	8006fb8 <sin+0x30>
 8007014:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007018:	ed9d 0b00 	vldr	d0, [sp]
 800701c:	f001 fa24 	bl	8008468 <__kernel_cos>
 8007020:	e7f1      	b.n	8007006 <sin+0x7e>
 8007022:	bf00      	nop
 8007024:	f3af 8000 	nop.w
	...
 8007030:	3fe921fb 	.word	0x3fe921fb
 8007034:	7fefffff 	.word	0x7fefffff

08007038 <pow>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	ed2d 8b02 	vpush	{d8}
 800703e:	eeb0 8a40 	vmov.f32	s16, s0
 8007042:	eef0 8a60 	vmov.f32	s17, s1
 8007046:	ec55 4b11 	vmov	r4, r5, d1
 800704a:	f000 f895 	bl	8007178 <__ieee754_pow>
 800704e:	4622      	mov	r2, r4
 8007050:	462b      	mov	r3, r5
 8007052:	4620      	mov	r0, r4
 8007054:	4629      	mov	r1, r5
 8007056:	ec57 6b10 	vmov	r6, r7, d0
 800705a:	f7f9 fd0b 	bl	8000a74 <__aeabi_dcmpun>
 800705e:	2800      	cmp	r0, #0
 8007060:	d13b      	bne.n	80070da <pow+0xa2>
 8007062:	ec51 0b18 	vmov	r0, r1, d8
 8007066:	2200      	movs	r2, #0
 8007068:	2300      	movs	r3, #0
 800706a:	f7f9 fcd1 	bl	8000a10 <__aeabi_dcmpeq>
 800706e:	b1b8      	cbz	r0, 80070a0 <pow+0x68>
 8007070:	2200      	movs	r2, #0
 8007072:	2300      	movs	r3, #0
 8007074:	4620      	mov	r0, r4
 8007076:	4629      	mov	r1, r5
 8007078:	f7f9 fcca 	bl	8000a10 <__aeabi_dcmpeq>
 800707c:	2800      	cmp	r0, #0
 800707e:	d146      	bne.n	800710e <pow+0xd6>
 8007080:	ec45 4b10 	vmov	d0, r4, r5
 8007084:	f001 feff 	bl	8008e86 <finite>
 8007088:	b338      	cbz	r0, 80070da <pow+0xa2>
 800708a:	2200      	movs	r2, #0
 800708c:	2300      	movs	r3, #0
 800708e:	4620      	mov	r0, r4
 8007090:	4629      	mov	r1, r5
 8007092:	f7f9 fcc7 	bl	8000a24 <__aeabi_dcmplt>
 8007096:	b300      	cbz	r0, 80070da <pow+0xa2>
 8007098:	f7ff fef0 	bl	8006e7c <__errno>
 800709c:	2322      	movs	r3, #34	; 0x22
 800709e:	e01b      	b.n	80070d8 <pow+0xa0>
 80070a0:	ec47 6b10 	vmov	d0, r6, r7
 80070a4:	f001 feef 	bl	8008e86 <finite>
 80070a8:	b9e0      	cbnz	r0, 80070e4 <pow+0xac>
 80070aa:	eeb0 0a48 	vmov.f32	s0, s16
 80070ae:	eef0 0a68 	vmov.f32	s1, s17
 80070b2:	f001 fee8 	bl	8008e86 <finite>
 80070b6:	b1a8      	cbz	r0, 80070e4 <pow+0xac>
 80070b8:	ec45 4b10 	vmov	d0, r4, r5
 80070bc:	f001 fee3 	bl	8008e86 <finite>
 80070c0:	b180      	cbz	r0, 80070e4 <pow+0xac>
 80070c2:	4632      	mov	r2, r6
 80070c4:	463b      	mov	r3, r7
 80070c6:	4630      	mov	r0, r6
 80070c8:	4639      	mov	r1, r7
 80070ca:	f7f9 fcd3 	bl	8000a74 <__aeabi_dcmpun>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d0e2      	beq.n	8007098 <pow+0x60>
 80070d2:	f7ff fed3 	bl	8006e7c <__errno>
 80070d6:	2321      	movs	r3, #33	; 0x21
 80070d8:	6003      	str	r3, [r0, #0]
 80070da:	ecbd 8b02 	vpop	{d8}
 80070de:	ec47 6b10 	vmov	d0, r6, r7
 80070e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e4:	2200      	movs	r2, #0
 80070e6:	2300      	movs	r3, #0
 80070e8:	4630      	mov	r0, r6
 80070ea:	4639      	mov	r1, r7
 80070ec:	f7f9 fc90 	bl	8000a10 <__aeabi_dcmpeq>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d0f2      	beq.n	80070da <pow+0xa2>
 80070f4:	eeb0 0a48 	vmov.f32	s0, s16
 80070f8:	eef0 0a68 	vmov.f32	s1, s17
 80070fc:	f001 fec3 	bl	8008e86 <finite>
 8007100:	2800      	cmp	r0, #0
 8007102:	d0ea      	beq.n	80070da <pow+0xa2>
 8007104:	ec45 4b10 	vmov	d0, r4, r5
 8007108:	f001 febd 	bl	8008e86 <finite>
 800710c:	e7c3      	b.n	8007096 <pow+0x5e>
 800710e:	4f01      	ldr	r7, [pc, #4]	; (8007114 <pow+0xdc>)
 8007110:	2600      	movs	r6, #0
 8007112:	e7e2      	b.n	80070da <pow+0xa2>
 8007114:	3ff00000 	.word	0x3ff00000

08007118 <asinf>:
 8007118:	b508      	push	{r3, lr}
 800711a:	ed2d 8b02 	vpush	{d8}
 800711e:	eeb0 8a40 	vmov.f32	s16, s0
 8007122:	f001 f817 	bl	8008154 <__ieee754_asinf>
 8007126:	eeb4 8a48 	vcmp.f32	s16, s16
 800712a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712e:	eef0 8a40 	vmov.f32	s17, s0
 8007132:	d615      	bvs.n	8007160 <asinf+0x48>
 8007134:	eeb0 0a48 	vmov.f32	s0, s16
 8007138:	f002 f88c 	bl	8009254 <fabsf>
 800713c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007140:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007148:	dd0a      	ble.n	8007160 <asinf+0x48>
 800714a:	f7ff fe97 	bl	8006e7c <__errno>
 800714e:	ecbd 8b02 	vpop	{d8}
 8007152:	2321      	movs	r3, #33	; 0x21
 8007154:	6003      	str	r3, [r0, #0]
 8007156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800715a:	4804      	ldr	r0, [pc, #16]	; (800716c <asinf+0x54>)
 800715c:	f002 b882 	b.w	8009264 <nanf>
 8007160:	eeb0 0a68 	vmov.f32	s0, s17
 8007164:	ecbd 8b02 	vpop	{d8}
 8007168:	bd08      	pop	{r3, pc}
 800716a:	bf00      	nop
 800716c:	080092b4 	.word	0x080092b4

08007170 <atan2f>:
 8007170:	f001 b8d6 	b.w	8008320 <__ieee754_atan2f>
 8007174:	0000      	movs	r0, r0
	...

08007178 <__ieee754_pow>:
 8007178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	ed2d 8b06 	vpush	{d8-d10}
 8007180:	b089      	sub	sp, #36	; 0x24
 8007182:	ed8d 1b00 	vstr	d1, [sp]
 8007186:	e9dd 2900 	ldrd	r2, r9, [sp]
 800718a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800718e:	ea58 0102 	orrs.w	r1, r8, r2
 8007192:	ec57 6b10 	vmov	r6, r7, d0
 8007196:	d115      	bne.n	80071c4 <__ieee754_pow+0x4c>
 8007198:	19b3      	adds	r3, r6, r6
 800719a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800719e:	4152      	adcs	r2, r2
 80071a0:	4299      	cmp	r1, r3
 80071a2:	4b89      	ldr	r3, [pc, #548]	; (80073c8 <__ieee754_pow+0x250>)
 80071a4:	4193      	sbcs	r3, r2
 80071a6:	f080 84d2 	bcs.w	8007b4e <__ieee754_pow+0x9d6>
 80071aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071ae:	4630      	mov	r0, r6
 80071b0:	4639      	mov	r1, r7
 80071b2:	f7f9 f80f 	bl	80001d4 <__adddf3>
 80071b6:	ec41 0b10 	vmov	d0, r0, r1
 80071ba:	b009      	add	sp, #36	; 0x24
 80071bc:	ecbd 8b06 	vpop	{d8-d10}
 80071c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c4:	4b81      	ldr	r3, [pc, #516]	; (80073cc <__ieee754_pow+0x254>)
 80071c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80071ca:	429c      	cmp	r4, r3
 80071cc:	ee10 aa10 	vmov	sl, s0
 80071d0:	463d      	mov	r5, r7
 80071d2:	dc06      	bgt.n	80071e2 <__ieee754_pow+0x6a>
 80071d4:	d101      	bne.n	80071da <__ieee754_pow+0x62>
 80071d6:	2e00      	cmp	r6, #0
 80071d8:	d1e7      	bne.n	80071aa <__ieee754_pow+0x32>
 80071da:	4598      	cmp	r8, r3
 80071dc:	dc01      	bgt.n	80071e2 <__ieee754_pow+0x6a>
 80071de:	d10f      	bne.n	8007200 <__ieee754_pow+0x88>
 80071e0:	b172      	cbz	r2, 8007200 <__ieee754_pow+0x88>
 80071e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80071e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80071ea:	ea55 050a 	orrs.w	r5, r5, sl
 80071ee:	d1dc      	bne.n	80071aa <__ieee754_pow+0x32>
 80071f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80071f4:	18db      	adds	r3, r3, r3
 80071f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80071fa:	4152      	adcs	r2, r2
 80071fc:	429d      	cmp	r5, r3
 80071fe:	e7d0      	b.n	80071a2 <__ieee754_pow+0x2a>
 8007200:	2d00      	cmp	r5, #0
 8007202:	da3b      	bge.n	800727c <__ieee754_pow+0x104>
 8007204:	4b72      	ldr	r3, [pc, #456]	; (80073d0 <__ieee754_pow+0x258>)
 8007206:	4598      	cmp	r8, r3
 8007208:	dc51      	bgt.n	80072ae <__ieee754_pow+0x136>
 800720a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800720e:	4598      	cmp	r8, r3
 8007210:	f340 84ac 	ble.w	8007b6c <__ieee754_pow+0x9f4>
 8007214:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007218:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800721c:	2b14      	cmp	r3, #20
 800721e:	dd0f      	ble.n	8007240 <__ieee754_pow+0xc8>
 8007220:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007224:	fa22 f103 	lsr.w	r1, r2, r3
 8007228:	fa01 f303 	lsl.w	r3, r1, r3
 800722c:	4293      	cmp	r3, r2
 800722e:	f040 849d 	bne.w	8007b6c <__ieee754_pow+0x9f4>
 8007232:	f001 0101 	and.w	r1, r1, #1
 8007236:	f1c1 0302 	rsb	r3, r1, #2
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	b182      	cbz	r2, 8007260 <__ieee754_pow+0xe8>
 800723e:	e05f      	b.n	8007300 <__ieee754_pow+0x188>
 8007240:	2a00      	cmp	r2, #0
 8007242:	d15b      	bne.n	80072fc <__ieee754_pow+0x184>
 8007244:	f1c3 0314 	rsb	r3, r3, #20
 8007248:	fa48 f103 	asr.w	r1, r8, r3
 800724c:	fa01 f303 	lsl.w	r3, r1, r3
 8007250:	4543      	cmp	r3, r8
 8007252:	f040 8488 	bne.w	8007b66 <__ieee754_pow+0x9ee>
 8007256:	f001 0101 	and.w	r1, r1, #1
 800725a:	f1c1 0302 	rsb	r3, r1, #2
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	4b5c      	ldr	r3, [pc, #368]	; (80073d4 <__ieee754_pow+0x25c>)
 8007262:	4598      	cmp	r8, r3
 8007264:	d132      	bne.n	80072cc <__ieee754_pow+0x154>
 8007266:	f1b9 0f00 	cmp.w	r9, #0
 800726a:	f280 8478 	bge.w	8007b5e <__ieee754_pow+0x9e6>
 800726e:	4959      	ldr	r1, [pc, #356]	; (80073d4 <__ieee754_pow+0x25c>)
 8007270:	4632      	mov	r2, r6
 8007272:	463b      	mov	r3, r7
 8007274:	2000      	movs	r0, #0
 8007276:	f7f9 fa8d 	bl	8000794 <__aeabi_ddiv>
 800727a:	e79c      	b.n	80071b6 <__ieee754_pow+0x3e>
 800727c:	2300      	movs	r3, #0
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	2a00      	cmp	r2, #0
 8007282:	d13d      	bne.n	8007300 <__ieee754_pow+0x188>
 8007284:	4b51      	ldr	r3, [pc, #324]	; (80073cc <__ieee754_pow+0x254>)
 8007286:	4598      	cmp	r8, r3
 8007288:	d1ea      	bne.n	8007260 <__ieee754_pow+0xe8>
 800728a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800728e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007292:	ea53 030a 	orrs.w	r3, r3, sl
 8007296:	f000 845a 	beq.w	8007b4e <__ieee754_pow+0x9d6>
 800729a:	4b4f      	ldr	r3, [pc, #316]	; (80073d8 <__ieee754_pow+0x260>)
 800729c:	429c      	cmp	r4, r3
 800729e:	dd08      	ble.n	80072b2 <__ieee754_pow+0x13a>
 80072a0:	f1b9 0f00 	cmp.w	r9, #0
 80072a4:	f2c0 8457 	blt.w	8007b56 <__ieee754_pow+0x9de>
 80072a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072ac:	e783      	b.n	80071b6 <__ieee754_pow+0x3e>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e7e5      	b.n	800727e <__ieee754_pow+0x106>
 80072b2:	f1b9 0f00 	cmp.w	r9, #0
 80072b6:	f04f 0000 	mov.w	r0, #0
 80072ba:	f04f 0100 	mov.w	r1, #0
 80072be:	f6bf af7a 	bge.w	80071b6 <__ieee754_pow+0x3e>
 80072c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80072c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80072ca:	e774      	b.n	80071b6 <__ieee754_pow+0x3e>
 80072cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80072d0:	d106      	bne.n	80072e0 <__ieee754_pow+0x168>
 80072d2:	4632      	mov	r2, r6
 80072d4:	463b      	mov	r3, r7
 80072d6:	4630      	mov	r0, r6
 80072d8:	4639      	mov	r1, r7
 80072da:	f7f9 f931 	bl	8000540 <__aeabi_dmul>
 80072de:	e76a      	b.n	80071b6 <__ieee754_pow+0x3e>
 80072e0:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <__ieee754_pow+0x264>)
 80072e2:	4599      	cmp	r9, r3
 80072e4:	d10c      	bne.n	8007300 <__ieee754_pow+0x188>
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	db0a      	blt.n	8007300 <__ieee754_pow+0x188>
 80072ea:	ec47 6b10 	vmov	d0, r6, r7
 80072ee:	b009      	add	sp, #36	; 0x24
 80072f0:	ecbd 8b06 	vpop	{d8-d10}
 80072f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f8:	f000 be7a 	b.w	8007ff0 <__ieee754_sqrt>
 80072fc:	2300      	movs	r3, #0
 80072fe:	9304      	str	r3, [sp, #16]
 8007300:	ec47 6b10 	vmov	d0, r6, r7
 8007304:	f001 fdb6 	bl	8008e74 <fabs>
 8007308:	ec51 0b10 	vmov	r0, r1, d0
 800730c:	f1ba 0f00 	cmp.w	sl, #0
 8007310:	d129      	bne.n	8007366 <__ieee754_pow+0x1ee>
 8007312:	b124      	cbz	r4, 800731e <__ieee754_pow+0x1a6>
 8007314:	4b2f      	ldr	r3, [pc, #188]	; (80073d4 <__ieee754_pow+0x25c>)
 8007316:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800731a:	429a      	cmp	r2, r3
 800731c:	d123      	bne.n	8007366 <__ieee754_pow+0x1ee>
 800731e:	f1b9 0f00 	cmp.w	r9, #0
 8007322:	da05      	bge.n	8007330 <__ieee754_pow+0x1b8>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	2000      	movs	r0, #0
 800732a:	492a      	ldr	r1, [pc, #168]	; (80073d4 <__ieee754_pow+0x25c>)
 800732c:	f7f9 fa32 	bl	8000794 <__aeabi_ddiv>
 8007330:	2d00      	cmp	r5, #0
 8007332:	f6bf af40 	bge.w	80071b6 <__ieee754_pow+0x3e>
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800733c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007340:	4323      	orrs	r3, r4
 8007342:	d108      	bne.n	8007356 <__ieee754_pow+0x1de>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4610      	mov	r0, r2
 800734a:	4619      	mov	r1, r3
 800734c:	f7f8 ff40 	bl	80001d0 <__aeabi_dsub>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	e78f      	b.n	8007276 <__ieee754_pow+0xfe>
 8007356:	9b04      	ldr	r3, [sp, #16]
 8007358:	2b01      	cmp	r3, #1
 800735a:	f47f af2c 	bne.w	80071b6 <__ieee754_pow+0x3e>
 800735e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007362:	4619      	mov	r1, r3
 8007364:	e727      	b.n	80071b6 <__ieee754_pow+0x3e>
 8007366:	0feb      	lsrs	r3, r5, #31
 8007368:	3b01      	subs	r3, #1
 800736a:	9306      	str	r3, [sp, #24]
 800736c:	9a06      	ldr	r2, [sp, #24]
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	4313      	orrs	r3, r2
 8007372:	d102      	bne.n	800737a <__ieee754_pow+0x202>
 8007374:	4632      	mov	r2, r6
 8007376:	463b      	mov	r3, r7
 8007378:	e7e6      	b.n	8007348 <__ieee754_pow+0x1d0>
 800737a:	4b19      	ldr	r3, [pc, #100]	; (80073e0 <__ieee754_pow+0x268>)
 800737c:	4598      	cmp	r8, r3
 800737e:	f340 80fb 	ble.w	8007578 <__ieee754_pow+0x400>
 8007382:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007386:	4598      	cmp	r8, r3
 8007388:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <__ieee754_pow+0x260>)
 800738a:	dd0c      	ble.n	80073a6 <__ieee754_pow+0x22e>
 800738c:	429c      	cmp	r4, r3
 800738e:	dc0f      	bgt.n	80073b0 <__ieee754_pow+0x238>
 8007390:	f1b9 0f00 	cmp.w	r9, #0
 8007394:	da0f      	bge.n	80073b6 <__ieee754_pow+0x23e>
 8007396:	2000      	movs	r0, #0
 8007398:	b009      	add	sp, #36	; 0x24
 800739a:	ecbd 8b06 	vpop	{d8-d10}
 800739e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073a2:	f001 bd5e 	b.w	8008e62 <__math_oflow>
 80073a6:	429c      	cmp	r4, r3
 80073a8:	dbf2      	blt.n	8007390 <__ieee754_pow+0x218>
 80073aa:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <__ieee754_pow+0x25c>)
 80073ac:	429c      	cmp	r4, r3
 80073ae:	dd19      	ble.n	80073e4 <__ieee754_pow+0x26c>
 80073b0:	f1b9 0f00 	cmp.w	r9, #0
 80073b4:	dcef      	bgt.n	8007396 <__ieee754_pow+0x21e>
 80073b6:	2000      	movs	r0, #0
 80073b8:	b009      	add	sp, #36	; 0x24
 80073ba:	ecbd 8b06 	vpop	{d8-d10}
 80073be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c2:	f001 bd45 	b.w	8008e50 <__math_uflow>
 80073c6:	bf00      	nop
 80073c8:	fff00000 	.word	0xfff00000
 80073cc:	7ff00000 	.word	0x7ff00000
 80073d0:	433fffff 	.word	0x433fffff
 80073d4:	3ff00000 	.word	0x3ff00000
 80073d8:	3fefffff 	.word	0x3fefffff
 80073dc:	3fe00000 	.word	0x3fe00000
 80073e0:	41e00000 	.word	0x41e00000
 80073e4:	4b60      	ldr	r3, [pc, #384]	; (8007568 <__ieee754_pow+0x3f0>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	f7f8 fef2 	bl	80001d0 <__aeabi_dsub>
 80073ec:	a354      	add	r3, pc, #336	; (adr r3, 8007540 <__ieee754_pow+0x3c8>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	4604      	mov	r4, r0
 80073f4:	460d      	mov	r5, r1
 80073f6:	f7f9 f8a3 	bl	8000540 <__aeabi_dmul>
 80073fa:	a353      	add	r3, pc, #332	; (adr r3, 8007548 <__ieee754_pow+0x3d0>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	4606      	mov	r6, r0
 8007402:	460f      	mov	r7, r1
 8007404:	4620      	mov	r0, r4
 8007406:	4629      	mov	r1, r5
 8007408:	f7f9 f89a 	bl	8000540 <__aeabi_dmul>
 800740c:	4b57      	ldr	r3, [pc, #348]	; (800756c <__ieee754_pow+0x3f4>)
 800740e:	4682      	mov	sl, r0
 8007410:	468b      	mov	fp, r1
 8007412:	2200      	movs	r2, #0
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f9 f892 	bl	8000540 <__aeabi_dmul>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	a14b      	add	r1, pc, #300	; (adr r1, 8007550 <__ieee754_pow+0x3d8>)
 8007422:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007426:	f7f8 fed3 	bl	80001d0 <__aeabi_dsub>
 800742a:	4622      	mov	r2, r4
 800742c:	462b      	mov	r3, r5
 800742e:	f7f9 f887 	bl	8000540 <__aeabi_dmul>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	2000      	movs	r0, #0
 8007438:	494d      	ldr	r1, [pc, #308]	; (8007570 <__ieee754_pow+0x3f8>)
 800743a:	f7f8 fec9 	bl	80001d0 <__aeabi_dsub>
 800743e:	4622      	mov	r2, r4
 8007440:	4680      	mov	r8, r0
 8007442:	4689      	mov	r9, r1
 8007444:	462b      	mov	r3, r5
 8007446:	4620      	mov	r0, r4
 8007448:	4629      	mov	r1, r5
 800744a:	f7f9 f879 	bl	8000540 <__aeabi_dmul>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4640      	mov	r0, r8
 8007454:	4649      	mov	r1, r9
 8007456:	f7f9 f873 	bl	8000540 <__aeabi_dmul>
 800745a:	a33f      	add	r3, pc, #252	; (adr r3, 8007558 <__ieee754_pow+0x3e0>)
 800745c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007460:	f7f9 f86e 	bl	8000540 <__aeabi_dmul>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4650      	mov	r0, sl
 800746a:	4659      	mov	r1, fp
 800746c:	f7f8 feb0 	bl	80001d0 <__aeabi_dsub>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	4680      	mov	r8, r0
 8007476:	4689      	mov	r9, r1
 8007478:	4630      	mov	r0, r6
 800747a:	4639      	mov	r1, r7
 800747c:	f7f8 feaa 	bl	80001d4 <__adddf3>
 8007480:	2000      	movs	r0, #0
 8007482:	4632      	mov	r2, r6
 8007484:	463b      	mov	r3, r7
 8007486:	4604      	mov	r4, r0
 8007488:	460d      	mov	r5, r1
 800748a:	f7f8 fea1 	bl	80001d0 <__aeabi_dsub>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4640      	mov	r0, r8
 8007494:	4649      	mov	r1, r9
 8007496:	f7f8 fe9b 	bl	80001d0 <__aeabi_dsub>
 800749a:	9b04      	ldr	r3, [sp, #16]
 800749c:	9a06      	ldr	r2, [sp, #24]
 800749e:	3b01      	subs	r3, #1
 80074a0:	4313      	orrs	r3, r2
 80074a2:	4682      	mov	sl, r0
 80074a4:	468b      	mov	fp, r1
 80074a6:	f040 81e7 	bne.w	8007878 <__ieee754_pow+0x700>
 80074aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007560 <__ieee754_pow+0x3e8>
 80074ae:	eeb0 8a47 	vmov.f32	s16, s14
 80074b2:	eef0 8a67 	vmov.f32	s17, s15
 80074b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80074ba:	2600      	movs	r6, #0
 80074bc:	4632      	mov	r2, r6
 80074be:	463b      	mov	r3, r7
 80074c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c4:	f7f8 fe84 	bl	80001d0 <__aeabi_dsub>
 80074c8:	4622      	mov	r2, r4
 80074ca:	462b      	mov	r3, r5
 80074cc:	f7f9 f838 	bl	8000540 <__aeabi_dmul>
 80074d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074d4:	4680      	mov	r8, r0
 80074d6:	4689      	mov	r9, r1
 80074d8:	4650      	mov	r0, sl
 80074da:	4659      	mov	r1, fp
 80074dc:	f7f9 f830 	bl	8000540 <__aeabi_dmul>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4640      	mov	r0, r8
 80074e6:	4649      	mov	r1, r9
 80074e8:	f7f8 fe74 	bl	80001d4 <__adddf3>
 80074ec:	4632      	mov	r2, r6
 80074ee:	463b      	mov	r3, r7
 80074f0:	4680      	mov	r8, r0
 80074f2:	4689      	mov	r9, r1
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7f9 f822 	bl	8000540 <__aeabi_dmul>
 80074fc:	460b      	mov	r3, r1
 80074fe:	4604      	mov	r4, r0
 8007500:	460d      	mov	r5, r1
 8007502:	4602      	mov	r2, r0
 8007504:	4649      	mov	r1, r9
 8007506:	4640      	mov	r0, r8
 8007508:	f7f8 fe64 	bl	80001d4 <__adddf3>
 800750c:	4b19      	ldr	r3, [pc, #100]	; (8007574 <__ieee754_pow+0x3fc>)
 800750e:	4299      	cmp	r1, r3
 8007510:	ec45 4b19 	vmov	d9, r4, r5
 8007514:	4606      	mov	r6, r0
 8007516:	460f      	mov	r7, r1
 8007518:	468b      	mov	fp, r1
 800751a:	f340 82f1 	ble.w	8007b00 <__ieee754_pow+0x988>
 800751e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007522:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007526:	4303      	orrs	r3, r0
 8007528:	f000 81e4 	beq.w	80078f4 <__ieee754_pow+0x77c>
 800752c:	ec51 0b18 	vmov	r0, r1, d8
 8007530:	2200      	movs	r2, #0
 8007532:	2300      	movs	r3, #0
 8007534:	f7f9 fa76 	bl	8000a24 <__aeabi_dcmplt>
 8007538:	3800      	subs	r0, #0
 800753a:	bf18      	it	ne
 800753c:	2001      	movne	r0, #1
 800753e:	e72b      	b.n	8007398 <__ieee754_pow+0x220>
 8007540:	60000000 	.word	0x60000000
 8007544:	3ff71547 	.word	0x3ff71547
 8007548:	f85ddf44 	.word	0xf85ddf44
 800754c:	3e54ae0b 	.word	0x3e54ae0b
 8007550:	55555555 	.word	0x55555555
 8007554:	3fd55555 	.word	0x3fd55555
 8007558:	652b82fe 	.word	0x652b82fe
 800755c:	3ff71547 	.word	0x3ff71547
 8007560:	00000000 	.word	0x00000000
 8007564:	bff00000 	.word	0xbff00000
 8007568:	3ff00000 	.word	0x3ff00000
 800756c:	3fd00000 	.word	0x3fd00000
 8007570:	3fe00000 	.word	0x3fe00000
 8007574:	408fffff 	.word	0x408fffff
 8007578:	4bd5      	ldr	r3, [pc, #852]	; (80078d0 <__ieee754_pow+0x758>)
 800757a:	402b      	ands	r3, r5
 800757c:	2200      	movs	r2, #0
 800757e:	b92b      	cbnz	r3, 800758c <__ieee754_pow+0x414>
 8007580:	4bd4      	ldr	r3, [pc, #848]	; (80078d4 <__ieee754_pow+0x75c>)
 8007582:	f7f8 ffdd 	bl	8000540 <__aeabi_dmul>
 8007586:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800758a:	460c      	mov	r4, r1
 800758c:	1523      	asrs	r3, r4, #20
 800758e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007592:	4413      	add	r3, r2
 8007594:	9305      	str	r3, [sp, #20]
 8007596:	4bd0      	ldr	r3, [pc, #832]	; (80078d8 <__ieee754_pow+0x760>)
 8007598:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800759c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80075a0:	429c      	cmp	r4, r3
 80075a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80075a6:	dd08      	ble.n	80075ba <__ieee754_pow+0x442>
 80075a8:	4bcc      	ldr	r3, [pc, #816]	; (80078dc <__ieee754_pow+0x764>)
 80075aa:	429c      	cmp	r4, r3
 80075ac:	f340 8162 	ble.w	8007874 <__ieee754_pow+0x6fc>
 80075b0:	9b05      	ldr	r3, [sp, #20]
 80075b2:	3301      	adds	r3, #1
 80075b4:	9305      	str	r3, [sp, #20]
 80075b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80075ba:	2400      	movs	r4, #0
 80075bc:	00e3      	lsls	r3, r4, #3
 80075be:	9307      	str	r3, [sp, #28]
 80075c0:	4bc7      	ldr	r3, [pc, #796]	; (80078e0 <__ieee754_pow+0x768>)
 80075c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075c6:	ed93 7b00 	vldr	d7, [r3]
 80075ca:	4629      	mov	r1, r5
 80075cc:	ec53 2b17 	vmov	r2, r3, d7
 80075d0:	eeb0 9a47 	vmov.f32	s18, s14
 80075d4:	eef0 9a67 	vmov.f32	s19, s15
 80075d8:	4682      	mov	sl, r0
 80075da:	f7f8 fdf9 	bl	80001d0 <__aeabi_dsub>
 80075de:	4652      	mov	r2, sl
 80075e0:	4606      	mov	r6, r0
 80075e2:	460f      	mov	r7, r1
 80075e4:	462b      	mov	r3, r5
 80075e6:	ec51 0b19 	vmov	r0, r1, d9
 80075ea:	f7f8 fdf3 	bl	80001d4 <__adddf3>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	2000      	movs	r0, #0
 80075f4:	49bb      	ldr	r1, [pc, #748]	; (80078e4 <__ieee754_pow+0x76c>)
 80075f6:	f7f9 f8cd 	bl	8000794 <__aeabi_ddiv>
 80075fa:	ec41 0b1a 	vmov	d10, r0, r1
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4630      	mov	r0, r6
 8007604:	4639      	mov	r1, r7
 8007606:	f7f8 ff9b 	bl	8000540 <__aeabi_dmul>
 800760a:	2300      	movs	r3, #0
 800760c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007610:	9302      	str	r3, [sp, #8]
 8007612:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007616:	46ab      	mov	fp, r5
 8007618:	106d      	asrs	r5, r5, #1
 800761a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800761e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007622:	ec41 0b18 	vmov	d8, r0, r1
 8007626:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800762a:	2200      	movs	r2, #0
 800762c:	4640      	mov	r0, r8
 800762e:	4649      	mov	r1, r9
 8007630:	4614      	mov	r4, r2
 8007632:	461d      	mov	r5, r3
 8007634:	f7f8 ff84 	bl	8000540 <__aeabi_dmul>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4630      	mov	r0, r6
 800763e:	4639      	mov	r1, r7
 8007640:	f7f8 fdc6 	bl	80001d0 <__aeabi_dsub>
 8007644:	ec53 2b19 	vmov	r2, r3, d9
 8007648:	4606      	mov	r6, r0
 800764a:	460f      	mov	r7, r1
 800764c:	4620      	mov	r0, r4
 800764e:	4629      	mov	r1, r5
 8007650:	f7f8 fdbe 	bl	80001d0 <__aeabi_dsub>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4650      	mov	r0, sl
 800765a:	4659      	mov	r1, fp
 800765c:	f7f8 fdb8 	bl	80001d0 <__aeabi_dsub>
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	f7f8 ff6c 	bl	8000540 <__aeabi_dmul>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4630      	mov	r0, r6
 800766e:	4639      	mov	r1, r7
 8007670:	f7f8 fdae 	bl	80001d0 <__aeabi_dsub>
 8007674:	ec53 2b1a 	vmov	r2, r3, d10
 8007678:	f7f8 ff62 	bl	8000540 <__aeabi_dmul>
 800767c:	ec53 2b18 	vmov	r2, r3, d8
 8007680:	ec41 0b19 	vmov	d9, r0, r1
 8007684:	ec51 0b18 	vmov	r0, r1, d8
 8007688:	f7f8 ff5a 	bl	8000540 <__aeabi_dmul>
 800768c:	a37c      	add	r3, pc, #496	; (adr r3, 8007880 <__ieee754_pow+0x708>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	4604      	mov	r4, r0
 8007694:	460d      	mov	r5, r1
 8007696:	f7f8 ff53 	bl	8000540 <__aeabi_dmul>
 800769a:	a37b      	add	r3, pc, #492	; (adr r3, 8007888 <__ieee754_pow+0x710>)
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f7f8 fd98 	bl	80001d4 <__adddf3>
 80076a4:	4622      	mov	r2, r4
 80076a6:	462b      	mov	r3, r5
 80076a8:	f7f8 ff4a 	bl	8000540 <__aeabi_dmul>
 80076ac:	a378      	add	r3, pc, #480	; (adr r3, 8007890 <__ieee754_pow+0x718>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f7f8 fd8f 	bl	80001d4 <__adddf3>
 80076b6:	4622      	mov	r2, r4
 80076b8:	462b      	mov	r3, r5
 80076ba:	f7f8 ff41 	bl	8000540 <__aeabi_dmul>
 80076be:	a376      	add	r3, pc, #472	; (adr r3, 8007898 <__ieee754_pow+0x720>)
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	f7f8 fd86 	bl	80001d4 <__adddf3>
 80076c8:	4622      	mov	r2, r4
 80076ca:	462b      	mov	r3, r5
 80076cc:	f7f8 ff38 	bl	8000540 <__aeabi_dmul>
 80076d0:	a373      	add	r3, pc, #460	; (adr r3, 80078a0 <__ieee754_pow+0x728>)
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f7f8 fd7d 	bl	80001d4 <__adddf3>
 80076da:	4622      	mov	r2, r4
 80076dc:	462b      	mov	r3, r5
 80076de:	f7f8 ff2f 	bl	8000540 <__aeabi_dmul>
 80076e2:	a371      	add	r3, pc, #452	; (adr r3, 80078a8 <__ieee754_pow+0x730>)
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f7f8 fd74 	bl	80001d4 <__adddf3>
 80076ec:	4622      	mov	r2, r4
 80076ee:	4606      	mov	r6, r0
 80076f0:	460f      	mov	r7, r1
 80076f2:	462b      	mov	r3, r5
 80076f4:	4620      	mov	r0, r4
 80076f6:	4629      	mov	r1, r5
 80076f8:	f7f8 ff22 	bl	8000540 <__aeabi_dmul>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f8 ff1c 	bl	8000540 <__aeabi_dmul>
 8007708:	4642      	mov	r2, r8
 800770a:	4604      	mov	r4, r0
 800770c:	460d      	mov	r5, r1
 800770e:	464b      	mov	r3, r9
 8007710:	ec51 0b18 	vmov	r0, r1, d8
 8007714:	f7f8 fd5e 	bl	80001d4 <__adddf3>
 8007718:	ec53 2b19 	vmov	r2, r3, d9
 800771c:	f7f8 ff10 	bl	8000540 <__aeabi_dmul>
 8007720:	4622      	mov	r2, r4
 8007722:	462b      	mov	r3, r5
 8007724:	f7f8 fd56 	bl	80001d4 <__adddf3>
 8007728:	4642      	mov	r2, r8
 800772a:	4682      	mov	sl, r0
 800772c:	468b      	mov	fp, r1
 800772e:	464b      	mov	r3, r9
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	f7f8 ff04 	bl	8000540 <__aeabi_dmul>
 8007738:	4b6b      	ldr	r3, [pc, #428]	; (80078e8 <__ieee754_pow+0x770>)
 800773a:	2200      	movs	r2, #0
 800773c:	4606      	mov	r6, r0
 800773e:	460f      	mov	r7, r1
 8007740:	f7f8 fd48 	bl	80001d4 <__adddf3>
 8007744:	4652      	mov	r2, sl
 8007746:	465b      	mov	r3, fp
 8007748:	f7f8 fd44 	bl	80001d4 <__adddf3>
 800774c:	2000      	movs	r0, #0
 800774e:	4604      	mov	r4, r0
 8007750:	460d      	mov	r5, r1
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f8 fef1 	bl	8000540 <__aeabi_dmul>
 800775e:	4b62      	ldr	r3, [pc, #392]	; (80078e8 <__ieee754_pow+0x770>)
 8007760:	4680      	mov	r8, r0
 8007762:	4689      	mov	r9, r1
 8007764:	2200      	movs	r2, #0
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f7f8 fd31 	bl	80001d0 <__aeabi_dsub>
 800776e:	4632      	mov	r2, r6
 8007770:	463b      	mov	r3, r7
 8007772:	f7f8 fd2d 	bl	80001d0 <__aeabi_dsub>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4650      	mov	r0, sl
 800777c:	4659      	mov	r1, fp
 800777e:	f7f8 fd27 	bl	80001d0 <__aeabi_dsub>
 8007782:	ec53 2b18 	vmov	r2, r3, d8
 8007786:	f7f8 fedb 	bl	8000540 <__aeabi_dmul>
 800778a:	4622      	mov	r2, r4
 800778c:	4606      	mov	r6, r0
 800778e:	460f      	mov	r7, r1
 8007790:	462b      	mov	r3, r5
 8007792:	ec51 0b19 	vmov	r0, r1, d9
 8007796:	f7f8 fed3 	bl	8000540 <__aeabi_dmul>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4630      	mov	r0, r6
 80077a0:	4639      	mov	r1, r7
 80077a2:	f7f8 fd17 	bl	80001d4 <__adddf3>
 80077a6:	4606      	mov	r6, r0
 80077a8:	460f      	mov	r7, r1
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4640      	mov	r0, r8
 80077b0:	4649      	mov	r1, r9
 80077b2:	f7f8 fd0f 	bl	80001d4 <__adddf3>
 80077b6:	a33e      	add	r3, pc, #248	; (adr r3, 80078b0 <__ieee754_pow+0x738>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	2000      	movs	r0, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	460d      	mov	r5, r1
 80077c2:	f7f8 febd 	bl	8000540 <__aeabi_dmul>
 80077c6:	4642      	mov	r2, r8
 80077c8:	ec41 0b18 	vmov	d8, r0, r1
 80077cc:	464b      	mov	r3, r9
 80077ce:	4620      	mov	r0, r4
 80077d0:	4629      	mov	r1, r5
 80077d2:	f7f8 fcfd 	bl	80001d0 <__aeabi_dsub>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4630      	mov	r0, r6
 80077dc:	4639      	mov	r1, r7
 80077de:	f7f8 fcf7 	bl	80001d0 <__aeabi_dsub>
 80077e2:	a335      	add	r3, pc, #212	; (adr r3, 80078b8 <__ieee754_pow+0x740>)
 80077e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e8:	f7f8 feaa 	bl	8000540 <__aeabi_dmul>
 80077ec:	a334      	add	r3, pc, #208	; (adr r3, 80078c0 <__ieee754_pow+0x748>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	4606      	mov	r6, r0
 80077f4:	460f      	mov	r7, r1
 80077f6:	4620      	mov	r0, r4
 80077f8:	4629      	mov	r1, r5
 80077fa:	f7f8 fea1 	bl	8000540 <__aeabi_dmul>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4630      	mov	r0, r6
 8007804:	4639      	mov	r1, r7
 8007806:	f7f8 fce5 	bl	80001d4 <__adddf3>
 800780a:	9a07      	ldr	r2, [sp, #28]
 800780c:	4b37      	ldr	r3, [pc, #220]	; (80078ec <__ieee754_pow+0x774>)
 800780e:	4413      	add	r3, r2
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f7f8 fcde 	bl	80001d4 <__adddf3>
 8007818:	4682      	mov	sl, r0
 800781a:	9805      	ldr	r0, [sp, #20]
 800781c:	468b      	mov	fp, r1
 800781e:	f7f8 fe25 	bl	800046c <__aeabi_i2d>
 8007822:	9a07      	ldr	r2, [sp, #28]
 8007824:	4b32      	ldr	r3, [pc, #200]	; (80078f0 <__ieee754_pow+0x778>)
 8007826:	4413      	add	r3, r2
 8007828:	e9d3 8900 	ldrd	r8, r9, [r3]
 800782c:	4606      	mov	r6, r0
 800782e:	460f      	mov	r7, r1
 8007830:	4652      	mov	r2, sl
 8007832:	465b      	mov	r3, fp
 8007834:	ec51 0b18 	vmov	r0, r1, d8
 8007838:	f7f8 fccc 	bl	80001d4 <__adddf3>
 800783c:	4642      	mov	r2, r8
 800783e:	464b      	mov	r3, r9
 8007840:	f7f8 fcc8 	bl	80001d4 <__adddf3>
 8007844:	4632      	mov	r2, r6
 8007846:	463b      	mov	r3, r7
 8007848:	f7f8 fcc4 	bl	80001d4 <__adddf3>
 800784c:	2000      	movs	r0, #0
 800784e:	4632      	mov	r2, r6
 8007850:	463b      	mov	r3, r7
 8007852:	4604      	mov	r4, r0
 8007854:	460d      	mov	r5, r1
 8007856:	f7f8 fcbb 	bl	80001d0 <__aeabi_dsub>
 800785a:	4642      	mov	r2, r8
 800785c:	464b      	mov	r3, r9
 800785e:	f7f8 fcb7 	bl	80001d0 <__aeabi_dsub>
 8007862:	ec53 2b18 	vmov	r2, r3, d8
 8007866:	f7f8 fcb3 	bl	80001d0 <__aeabi_dsub>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4650      	mov	r0, sl
 8007870:	4659      	mov	r1, fp
 8007872:	e610      	b.n	8007496 <__ieee754_pow+0x31e>
 8007874:	2401      	movs	r4, #1
 8007876:	e6a1      	b.n	80075bc <__ieee754_pow+0x444>
 8007878:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80078c8 <__ieee754_pow+0x750>
 800787c:	e617      	b.n	80074ae <__ieee754_pow+0x336>
 800787e:	bf00      	nop
 8007880:	4a454eef 	.word	0x4a454eef
 8007884:	3fca7e28 	.word	0x3fca7e28
 8007888:	93c9db65 	.word	0x93c9db65
 800788c:	3fcd864a 	.word	0x3fcd864a
 8007890:	a91d4101 	.word	0xa91d4101
 8007894:	3fd17460 	.word	0x3fd17460
 8007898:	518f264d 	.word	0x518f264d
 800789c:	3fd55555 	.word	0x3fd55555
 80078a0:	db6fabff 	.word	0xdb6fabff
 80078a4:	3fdb6db6 	.word	0x3fdb6db6
 80078a8:	33333303 	.word	0x33333303
 80078ac:	3fe33333 	.word	0x3fe33333
 80078b0:	e0000000 	.word	0xe0000000
 80078b4:	3feec709 	.word	0x3feec709
 80078b8:	dc3a03fd 	.word	0xdc3a03fd
 80078bc:	3feec709 	.word	0x3feec709
 80078c0:	145b01f5 	.word	0x145b01f5
 80078c4:	be3e2fe0 	.word	0xbe3e2fe0
 80078c8:	00000000 	.word	0x00000000
 80078cc:	3ff00000 	.word	0x3ff00000
 80078d0:	7ff00000 	.word	0x7ff00000
 80078d4:	43400000 	.word	0x43400000
 80078d8:	0003988e 	.word	0x0003988e
 80078dc:	000bb679 	.word	0x000bb679
 80078e0:	080092b8 	.word	0x080092b8
 80078e4:	3ff00000 	.word	0x3ff00000
 80078e8:	40080000 	.word	0x40080000
 80078ec:	080092d8 	.word	0x080092d8
 80078f0:	080092c8 	.word	0x080092c8
 80078f4:	a3b5      	add	r3, pc, #724	; (adr r3, 8007bcc <__ieee754_pow+0xa54>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	4640      	mov	r0, r8
 80078fc:	4649      	mov	r1, r9
 80078fe:	f7f8 fc69 	bl	80001d4 <__adddf3>
 8007902:	4622      	mov	r2, r4
 8007904:	ec41 0b1a 	vmov	d10, r0, r1
 8007908:	462b      	mov	r3, r5
 800790a:	4630      	mov	r0, r6
 800790c:	4639      	mov	r1, r7
 800790e:	f7f8 fc5f 	bl	80001d0 <__aeabi_dsub>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	ec51 0b1a 	vmov	r0, r1, d10
 800791a:	f7f9 f8a1 	bl	8000a60 <__aeabi_dcmpgt>
 800791e:	2800      	cmp	r0, #0
 8007920:	f47f ae04 	bne.w	800752c <__ieee754_pow+0x3b4>
 8007924:	4aa4      	ldr	r2, [pc, #656]	; (8007bb8 <__ieee754_pow+0xa40>)
 8007926:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800792a:	4293      	cmp	r3, r2
 800792c:	f340 8108 	ble.w	8007b40 <__ieee754_pow+0x9c8>
 8007930:	151b      	asrs	r3, r3, #20
 8007932:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007936:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800793a:	fa4a f303 	asr.w	r3, sl, r3
 800793e:	445b      	add	r3, fp
 8007940:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007944:	4e9d      	ldr	r6, [pc, #628]	; (8007bbc <__ieee754_pow+0xa44>)
 8007946:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800794a:	4116      	asrs	r6, r2
 800794c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007950:	2000      	movs	r0, #0
 8007952:	ea23 0106 	bic.w	r1, r3, r6
 8007956:	f1c2 0214 	rsb	r2, r2, #20
 800795a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800795e:	fa4a fa02 	asr.w	sl, sl, r2
 8007962:	f1bb 0f00 	cmp.w	fp, #0
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	bfb8      	it	lt
 8007970:	f1ca 0a00 	rsblt	sl, sl, #0
 8007974:	f7f8 fc2c 	bl	80001d0 <__aeabi_dsub>
 8007978:	ec41 0b19 	vmov	d9, r0, r1
 800797c:	4642      	mov	r2, r8
 800797e:	464b      	mov	r3, r9
 8007980:	ec51 0b19 	vmov	r0, r1, d9
 8007984:	f7f8 fc26 	bl	80001d4 <__adddf3>
 8007988:	a37b      	add	r3, pc, #492	; (adr r3, 8007b78 <__ieee754_pow+0xa00>)
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	2000      	movs	r0, #0
 8007990:	4604      	mov	r4, r0
 8007992:	460d      	mov	r5, r1
 8007994:	f7f8 fdd4 	bl	8000540 <__aeabi_dmul>
 8007998:	ec53 2b19 	vmov	r2, r3, d9
 800799c:	4606      	mov	r6, r0
 800799e:	460f      	mov	r7, r1
 80079a0:	4620      	mov	r0, r4
 80079a2:	4629      	mov	r1, r5
 80079a4:	f7f8 fc14 	bl	80001d0 <__aeabi_dsub>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4640      	mov	r0, r8
 80079ae:	4649      	mov	r1, r9
 80079b0:	f7f8 fc0e 	bl	80001d0 <__aeabi_dsub>
 80079b4:	a372      	add	r3, pc, #456	; (adr r3, 8007b80 <__ieee754_pow+0xa08>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f7f8 fdc1 	bl	8000540 <__aeabi_dmul>
 80079be:	a372      	add	r3, pc, #456	; (adr r3, 8007b88 <__ieee754_pow+0xa10>)
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	4680      	mov	r8, r0
 80079c6:	4689      	mov	r9, r1
 80079c8:	4620      	mov	r0, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	f7f8 fdb8 	bl	8000540 <__aeabi_dmul>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4640      	mov	r0, r8
 80079d6:	4649      	mov	r1, r9
 80079d8:	f7f8 fbfc 	bl	80001d4 <__adddf3>
 80079dc:	4604      	mov	r4, r0
 80079de:	460d      	mov	r5, r1
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	4630      	mov	r0, r6
 80079e6:	4639      	mov	r1, r7
 80079e8:	f7f8 fbf4 	bl	80001d4 <__adddf3>
 80079ec:	4632      	mov	r2, r6
 80079ee:	463b      	mov	r3, r7
 80079f0:	4680      	mov	r8, r0
 80079f2:	4689      	mov	r9, r1
 80079f4:	f7f8 fbec 	bl	80001d0 <__aeabi_dsub>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 fbe6 	bl	80001d0 <__aeabi_dsub>
 8007a04:	4642      	mov	r2, r8
 8007a06:	4606      	mov	r6, r0
 8007a08:	460f      	mov	r7, r1
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	4640      	mov	r0, r8
 8007a0e:	4649      	mov	r1, r9
 8007a10:	f7f8 fd96 	bl	8000540 <__aeabi_dmul>
 8007a14:	a35e      	add	r3, pc, #376	; (adr r3, 8007b90 <__ieee754_pow+0xa18>)
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	f7f8 fd8f 	bl	8000540 <__aeabi_dmul>
 8007a22:	a35d      	add	r3, pc, #372	; (adr r3, 8007b98 <__ieee754_pow+0xa20>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f7f8 fbd2 	bl	80001d0 <__aeabi_dsub>
 8007a2c:	4622      	mov	r2, r4
 8007a2e:	462b      	mov	r3, r5
 8007a30:	f7f8 fd86 	bl	8000540 <__aeabi_dmul>
 8007a34:	a35a      	add	r3, pc, #360	; (adr r3, 8007ba0 <__ieee754_pow+0xa28>)
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f7f8 fbcb 	bl	80001d4 <__adddf3>
 8007a3e:	4622      	mov	r2, r4
 8007a40:	462b      	mov	r3, r5
 8007a42:	f7f8 fd7d 	bl	8000540 <__aeabi_dmul>
 8007a46:	a358      	add	r3, pc, #352	; (adr r3, 8007ba8 <__ieee754_pow+0xa30>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7f8 fbc0 	bl	80001d0 <__aeabi_dsub>
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	f7f8 fd74 	bl	8000540 <__aeabi_dmul>
 8007a58:	a355      	add	r3, pc, #340	; (adr r3, 8007bb0 <__ieee754_pow+0xa38>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fbb9 	bl	80001d4 <__adddf3>
 8007a62:	4622      	mov	r2, r4
 8007a64:	462b      	mov	r3, r5
 8007a66:	f7f8 fd6b 	bl	8000540 <__aeabi_dmul>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4640      	mov	r0, r8
 8007a70:	4649      	mov	r1, r9
 8007a72:	f7f8 fbad 	bl	80001d0 <__aeabi_dsub>
 8007a76:	4604      	mov	r4, r0
 8007a78:	460d      	mov	r5, r1
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4640      	mov	r0, r8
 8007a80:	4649      	mov	r1, r9
 8007a82:	f7f8 fd5d 	bl	8000540 <__aeabi_dmul>
 8007a86:	2200      	movs	r2, #0
 8007a88:	ec41 0b19 	vmov	d9, r0, r1
 8007a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a90:	4620      	mov	r0, r4
 8007a92:	4629      	mov	r1, r5
 8007a94:	f7f8 fb9c 	bl	80001d0 <__aeabi_dsub>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	ec51 0b19 	vmov	r0, r1, d9
 8007aa0:	f7f8 fe78 	bl	8000794 <__aeabi_ddiv>
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	460d      	mov	r5, r1
 8007aaa:	463b      	mov	r3, r7
 8007aac:	4640      	mov	r0, r8
 8007aae:	4649      	mov	r1, r9
 8007ab0:	f7f8 fd46 	bl	8000540 <__aeabi_dmul>
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	f7f8 fb8c 	bl	80001d4 <__adddf3>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	f7f8 fb84 	bl	80001d0 <__aeabi_dsub>
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	f7f8 fb80 	bl	80001d0 <__aeabi_dsub>
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	493a      	ldr	r1, [pc, #232]	; (8007bc0 <__ieee754_pow+0xa48>)
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	f7f8 fb7a 	bl	80001d0 <__aeabi_dsub>
 8007adc:	ec41 0b10 	vmov	d0, r0, r1
 8007ae0:	ee10 3a90 	vmov	r3, s1
 8007ae4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aec:	da2b      	bge.n	8007b46 <__ieee754_pow+0x9ce>
 8007aee:	4650      	mov	r0, sl
 8007af0:	f001 fa56 	bl	8008fa0 <scalbn>
 8007af4:	ec51 0b10 	vmov	r0, r1, d0
 8007af8:	ec53 2b18 	vmov	r2, r3, d8
 8007afc:	f7ff bbed 	b.w	80072da <__ieee754_pow+0x162>
 8007b00:	4b30      	ldr	r3, [pc, #192]	; (8007bc4 <__ieee754_pow+0xa4c>)
 8007b02:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007b06:	429e      	cmp	r6, r3
 8007b08:	f77f af0c 	ble.w	8007924 <__ieee754_pow+0x7ac>
 8007b0c:	4b2e      	ldr	r3, [pc, #184]	; (8007bc8 <__ieee754_pow+0xa50>)
 8007b0e:	440b      	add	r3, r1
 8007b10:	4303      	orrs	r3, r0
 8007b12:	d009      	beq.n	8007b28 <__ieee754_pow+0x9b0>
 8007b14:	ec51 0b18 	vmov	r0, r1, d8
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f7f8 ff82 	bl	8000a24 <__aeabi_dcmplt>
 8007b20:	3800      	subs	r0, #0
 8007b22:	bf18      	it	ne
 8007b24:	2001      	movne	r0, #1
 8007b26:	e447      	b.n	80073b8 <__ieee754_pow+0x240>
 8007b28:	4622      	mov	r2, r4
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	f7f8 fb50 	bl	80001d0 <__aeabi_dsub>
 8007b30:	4642      	mov	r2, r8
 8007b32:	464b      	mov	r3, r9
 8007b34:	f7f8 ff8a 	bl	8000a4c <__aeabi_dcmpge>
 8007b38:	2800      	cmp	r0, #0
 8007b3a:	f43f aef3 	beq.w	8007924 <__ieee754_pow+0x7ac>
 8007b3e:	e7e9      	b.n	8007b14 <__ieee754_pow+0x99c>
 8007b40:	f04f 0a00 	mov.w	sl, #0
 8007b44:	e71a      	b.n	800797c <__ieee754_pow+0x804>
 8007b46:	ec51 0b10 	vmov	r0, r1, d0
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	e7d4      	b.n	8007af8 <__ieee754_pow+0x980>
 8007b4e:	491c      	ldr	r1, [pc, #112]	; (8007bc0 <__ieee754_pow+0xa48>)
 8007b50:	2000      	movs	r0, #0
 8007b52:	f7ff bb30 	b.w	80071b6 <__ieee754_pow+0x3e>
 8007b56:	2000      	movs	r0, #0
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f7ff bb2c 	b.w	80071b6 <__ieee754_pow+0x3e>
 8007b5e:	4630      	mov	r0, r6
 8007b60:	4639      	mov	r1, r7
 8007b62:	f7ff bb28 	b.w	80071b6 <__ieee754_pow+0x3e>
 8007b66:	9204      	str	r2, [sp, #16]
 8007b68:	f7ff bb7a 	b.w	8007260 <__ieee754_pow+0xe8>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f7ff bb64 	b.w	800723a <__ieee754_pow+0xc2>
 8007b72:	bf00      	nop
 8007b74:	f3af 8000 	nop.w
 8007b78:	00000000 	.word	0x00000000
 8007b7c:	3fe62e43 	.word	0x3fe62e43
 8007b80:	fefa39ef 	.word	0xfefa39ef
 8007b84:	3fe62e42 	.word	0x3fe62e42
 8007b88:	0ca86c39 	.word	0x0ca86c39
 8007b8c:	be205c61 	.word	0xbe205c61
 8007b90:	72bea4d0 	.word	0x72bea4d0
 8007b94:	3e663769 	.word	0x3e663769
 8007b98:	c5d26bf1 	.word	0xc5d26bf1
 8007b9c:	3ebbbd41 	.word	0x3ebbbd41
 8007ba0:	af25de2c 	.word	0xaf25de2c
 8007ba4:	3f11566a 	.word	0x3f11566a
 8007ba8:	16bebd93 	.word	0x16bebd93
 8007bac:	3f66c16c 	.word	0x3f66c16c
 8007bb0:	5555553e 	.word	0x5555553e
 8007bb4:	3fc55555 	.word	0x3fc55555
 8007bb8:	3fe00000 	.word	0x3fe00000
 8007bbc:	000fffff 	.word	0x000fffff
 8007bc0:	3ff00000 	.word	0x3ff00000
 8007bc4:	4090cbff 	.word	0x4090cbff
 8007bc8:	3f6f3400 	.word	0x3f6f3400
 8007bcc:	652b82fe 	.word	0x652b82fe
 8007bd0:	3c971547 	.word	0x3c971547
 8007bd4:	00000000 	.word	0x00000000

08007bd8 <__ieee754_rem_pio2>:
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	ed2d 8b02 	vpush	{d8}
 8007be0:	ec55 4b10 	vmov	r4, r5, d0
 8007be4:	4bca      	ldr	r3, [pc, #808]	; (8007f10 <__ieee754_rem_pio2+0x338>)
 8007be6:	b08b      	sub	sp, #44	; 0x2c
 8007be8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007bec:	4598      	cmp	r8, r3
 8007bee:	4682      	mov	sl, r0
 8007bf0:	9502      	str	r5, [sp, #8]
 8007bf2:	dc08      	bgt.n	8007c06 <__ieee754_rem_pio2+0x2e>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	ed80 0b00 	vstr	d0, [r0]
 8007bfc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007c00:	f04f 0b00 	mov.w	fp, #0
 8007c04:	e028      	b.n	8007c58 <__ieee754_rem_pio2+0x80>
 8007c06:	4bc3      	ldr	r3, [pc, #780]	; (8007f14 <__ieee754_rem_pio2+0x33c>)
 8007c08:	4598      	cmp	r8, r3
 8007c0a:	dc78      	bgt.n	8007cfe <__ieee754_rem_pio2+0x126>
 8007c0c:	9b02      	ldr	r3, [sp, #8]
 8007c0e:	4ec2      	ldr	r6, [pc, #776]	; (8007f18 <__ieee754_rem_pio2+0x340>)
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	ee10 0a10 	vmov	r0, s0
 8007c16:	a3b0      	add	r3, pc, #704	; (adr r3, 8007ed8 <__ieee754_rem_pio2+0x300>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	dd39      	ble.n	8007c94 <__ieee754_rem_pio2+0xbc>
 8007c20:	f7f8 fad6 	bl	80001d0 <__aeabi_dsub>
 8007c24:	45b0      	cmp	r8, r6
 8007c26:	4604      	mov	r4, r0
 8007c28:	460d      	mov	r5, r1
 8007c2a:	d01b      	beq.n	8007c64 <__ieee754_rem_pio2+0x8c>
 8007c2c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007ee0 <__ieee754_rem_pio2+0x308>)
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f7f8 facd 	bl	80001d0 <__aeabi_dsub>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	e9ca 2300 	strd	r2, r3, [sl]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 fac5 	bl	80001d0 <__aeabi_dsub>
 8007c46:	a3a6      	add	r3, pc, #664	; (adr r3, 8007ee0 <__ieee754_rem_pio2+0x308>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f7f8 fac0 	bl	80001d0 <__aeabi_dsub>
 8007c50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007c54:	f04f 0b01 	mov.w	fp, #1
 8007c58:	4658      	mov	r0, fp
 8007c5a:	b00b      	add	sp, #44	; 0x2c
 8007c5c:	ecbd 8b02 	vpop	{d8}
 8007c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c64:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ee8 <__ieee754_rem_pio2+0x310>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fab1 	bl	80001d0 <__aeabi_dsub>
 8007c6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007ef0 <__ieee754_rem_pio2+0x318>)
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	4604      	mov	r4, r0
 8007c76:	460d      	mov	r5, r1
 8007c78:	f7f8 faaa 	bl	80001d0 <__aeabi_dsub>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	e9ca 2300 	strd	r2, r3, [sl]
 8007c84:	4620      	mov	r0, r4
 8007c86:	4629      	mov	r1, r5
 8007c88:	f7f8 faa2 	bl	80001d0 <__aeabi_dsub>
 8007c8c:	a398      	add	r3, pc, #608	; (adr r3, 8007ef0 <__ieee754_rem_pio2+0x318>)
 8007c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c92:	e7db      	b.n	8007c4c <__ieee754_rem_pio2+0x74>
 8007c94:	f7f8 fa9e 	bl	80001d4 <__adddf3>
 8007c98:	45b0      	cmp	r8, r6
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	460d      	mov	r5, r1
 8007c9e:	d016      	beq.n	8007cce <__ieee754_rem_pio2+0xf6>
 8007ca0:	a38f      	add	r3, pc, #572	; (adr r3, 8007ee0 <__ieee754_rem_pio2+0x308>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fa95 	bl	80001d4 <__adddf3>
 8007caa:	4602      	mov	r2, r0
 8007cac:	460b      	mov	r3, r1
 8007cae:	e9ca 2300 	strd	r2, r3, [sl]
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	f7f8 fa8b 	bl	80001d0 <__aeabi_dsub>
 8007cba:	a389      	add	r3, pc, #548	; (adr r3, 8007ee0 <__ieee754_rem_pio2+0x308>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	f7f8 fa88 	bl	80001d4 <__adddf3>
 8007cc4:	f04f 3bff 	mov.w	fp, #4294967295
 8007cc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ccc:	e7c4      	b.n	8007c58 <__ieee754_rem_pio2+0x80>
 8007cce:	a386      	add	r3, pc, #536	; (adr r3, 8007ee8 <__ieee754_rem_pio2+0x310>)
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	f7f8 fa7e 	bl	80001d4 <__adddf3>
 8007cd8:	a385      	add	r3, pc, #532	; (adr r3, 8007ef0 <__ieee754_rem_pio2+0x318>)
 8007cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cde:	4604      	mov	r4, r0
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	f7f8 fa77 	bl	80001d4 <__adddf3>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	e9ca 2300 	strd	r2, r3, [sl]
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 fa6d 	bl	80001d0 <__aeabi_dsub>
 8007cf6:	a37e      	add	r3, pc, #504	; (adr r3, 8007ef0 <__ieee754_rem_pio2+0x318>)
 8007cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfc:	e7e0      	b.n	8007cc0 <__ieee754_rem_pio2+0xe8>
 8007cfe:	4b87      	ldr	r3, [pc, #540]	; (8007f1c <__ieee754_rem_pio2+0x344>)
 8007d00:	4598      	cmp	r8, r3
 8007d02:	f300 80d9 	bgt.w	8007eb8 <__ieee754_rem_pio2+0x2e0>
 8007d06:	f001 f8b5 	bl	8008e74 <fabs>
 8007d0a:	ec55 4b10 	vmov	r4, r5, d0
 8007d0e:	ee10 0a10 	vmov	r0, s0
 8007d12:	a379      	add	r3, pc, #484	; (adr r3, 8007ef8 <__ieee754_rem_pio2+0x320>)
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	4629      	mov	r1, r5
 8007d1a:	f7f8 fc11 	bl	8000540 <__aeabi_dmul>
 8007d1e:	4b80      	ldr	r3, [pc, #512]	; (8007f20 <__ieee754_rem_pio2+0x348>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	f7f8 fa57 	bl	80001d4 <__adddf3>
 8007d26:	f7f8 febb 	bl	8000aa0 <__aeabi_d2iz>
 8007d2a:	4683      	mov	fp, r0
 8007d2c:	f7f8 fb9e 	bl	800046c <__aeabi_i2d>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	ec43 2b18 	vmov	d8, r2, r3
 8007d38:	a367      	add	r3, pc, #412	; (adr r3, 8007ed8 <__ieee754_rem_pio2+0x300>)
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	f7f8 fbff 	bl	8000540 <__aeabi_dmul>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4620      	mov	r0, r4
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7f8 fa41 	bl	80001d0 <__aeabi_dsub>
 8007d4e:	a364      	add	r3, pc, #400	; (adr r3, 8007ee0 <__ieee754_rem_pio2+0x308>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	4606      	mov	r6, r0
 8007d56:	460f      	mov	r7, r1
 8007d58:	ec51 0b18 	vmov	r0, r1, d8
 8007d5c:	f7f8 fbf0 	bl	8000540 <__aeabi_dmul>
 8007d60:	f1bb 0f1f 	cmp.w	fp, #31
 8007d64:	4604      	mov	r4, r0
 8007d66:	460d      	mov	r5, r1
 8007d68:	dc0d      	bgt.n	8007d86 <__ieee754_rem_pio2+0x1ae>
 8007d6a:	4b6e      	ldr	r3, [pc, #440]	; (8007f24 <__ieee754_rem_pio2+0x34c>)
 8007d6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d74:	4543      	cmp	r3, r8
 8007d76:	d006      	beq.n	8007d86 <__ieee754_rem_pio2+0x1ae>
 8007d78:	4622      	mov	r2, r4
 8007d7a:	462b      	mov	r3, r5
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	4639      	mov	r1, r7
 8007d80:	f7f8 fa26 	bl	80001d0 <__aeabi_dsub>
 8007d84:	e00f      	b.n	8007da6 <__ieee754_rem_pio2+0x1ce>
 8007d86:	462b      	mov	r3, r5
 8007d88:	4622      	mov	r2, r4
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	4639      	mov	r1, r7
 8007d8e:	f7f8 fa1f 	bl	80001d0 <__aeabi_dsub>
 8007d92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007d9c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007da0:	f1b8 0f10 	cmp.w	r8, #16
 8007da4:	dc02      	bgt.n	8007dac <__ieee754_rem_pio2+0x1d4>
 8007da6:	e9ca 0100 	strd	r0, r1, [sl]
 8007daa:	e039      	b.n	8007e20 <__ieee754_rem_pio2+0x248>
 8007dac:	a34e      	add	r3, pc, #312	; (adr r3, 8007ee8 <__ieee754_rem_pio2+0x310>)
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	ec51 0b18 	vmov	r0, r1, d8
 8007db6:	f7f8 fbc3 	bl	8000540 <__aeabi_dmul>
 8007dba:	4604      	mov	r4, r0
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	f7f8 fa03 	bl	80001d0 <__aeabi_dsub>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4680      	mov	r8, r0
 8007dd0:	4689      	mov	r9, r1
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	f7f8 f9fb 	bl	80001d0 <__aeabi_dsub>
 8007dda:	4622      	mov	r2, r4
 8007ddc:	462b      	mov	r3, r5
 8007dde:	f7f8 f9f7 	bl	80001d0 <__aeabi_dsub>
 8007de2:	a343      	add	r3, pc, #268	; (adr r3, 8007ef0 <__ieee754_rem_pio2+0x318>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	4604      	mov	r4, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	ec51 0b18 	vmov	r0, r1, d8
 8007df0:	f7f8 fba6 	bl	8000540 <__aeabi_dmul>
 8007df4:	4622      	mov	r2, r4
 8007df6:	462b      	mov	r3, r5
 8007df8:	f7f8 f9ea 	bl	80001d0 <__aeabi_dsub>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4604      	mov	r4, r0
 8007e02:	460d      	mov	r5, r1
 8007e04:	4640      	mov	r0, r8
 8007e06:	4649      	mov	r1, r9
 8007e08:	f7f8 f9e2 	bl	80001d0 <__aeabi_dsub>
 8007e0c:	9a03      	ldr	r2, [sp, #12]
 8007e0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	2b31      	cmp	r3, #49	; 0x31
 8007e16:	dc24      	bgt.n	8007e62 <__ieee754_rem_pio2+0x28a>
 8007e18:	e9ca 0100 	strd	r0, r1, [sl]
 8007e1c:	4646      	mov	r6, r8
 8007e1e:	464f      	mov	r7, r9
 8007e20:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e24:	4630      	mov	r0, r6
 8007e26:	4642      	mov	r2, r8
 8007e28:	464b      	mov	r3, r9
 8007e2a:	4639      	mov	r1, r7
 8007e2c:	f7f8 f9d0 	bl	80001d0 <__aeabi_dsub>
 8007e30:	462b      	mov	r3, r5
 8007e32:	4622      	mov	r2, r4
 8007e34:	f7f8 f9cc 	bl	80001d0 <__aeabi_dsub>
 8007e38:	9b02      	ldr	r3, [sp, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007e40:	f6bf af0a 	bge.w	8007c58 <__ieee754_rem_pio2+0x80>
 8007e44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e48:	f8ca 3004 	str.w	r3, [sl, #4]
 8007e4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e50:	f8ca 8000 	str.w	r8, [sl]
 8007e54:	f8ca 0008 	str.w	r0, [sl, #8]
 8007e58:	f8ca 300c 	str.w	r3, [sl, #12]
 8007e5c:	f1cb 0b00 	rsb	fp, fp, #0
 8007e60:	e6fa      	b.n	8007c58 <__ieee754_rem_pio2+0x80>
 8007e62:	a327      	add	r3, pc, #156	; (adr r3, 8007f00 <__ieee754_rem_pio2+0x328>)
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	ec51 0b18 	vmov	r0, r1, d8
 8007e6c:	f7f8 fb68 	bl	8000540 <__aeabi_dmul>
 8007e70:	4604      	mov	r4, r0
 8007e72:	460d      	mov	r5, r1
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4640      	mov	r0, r8
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	f7f8 f9a8 	bl	80001d0 <__aeabi_dsub>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4606      	mov	r6, r0
 8007e86:	460f      	mov	r7, r1
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	f7f8 f9a0 	bl	80001d0 <__aeabi_dsub>
 8007e90:	4622      	mov	r2, r4
 8007e92:	462b      	mov	r3, r5
 8007e94:	f7f8 f99c 	bl	80001d0 <__aeabi_dsub>
 8007e98:	a31b      	add	r3, pc, #108	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x330>)
 8007e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	460d      	mov	r5, r1
 8007ea2:	ec51 0b18 	vmov	r0, r1, d8
 8007ea6:	f7f8 fb4b 	bl	8000540 <__aeabi_dmul>
 8007eaa:	4622      	mov	r2, r4
 8007eac:	462b      	mov	r3, r5
 8007eae:	f7f8 f98f 	bl	80001d0 <__aeabi_dsub>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	460d      	mov	r5, r1
 8007eb6:	e75f      	b.n	8007d78 <__ieee754_rem_pio2+0x1a0>
 8007eb8:	4b1b      	ldr	r3, [pc, #108]	; (8007f28 <__ieee754_rem_pio2+0x350>)
 8007eba:	4598      	cmp	r8, r3
 8007ebc:	dd36      	ble.n	8007f2c <__ieee754_rem_pio2+0x354>
 8007ebe:	ee10 2a10 	vmov	r2, s0
 8007ec2:	462b      	mov	r3, r5
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 f982 	bl	80001d0 <__aeabi_dsub>
 8007ecc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ed0:	e9ca 0100 	strd	r0, r1, [sl]
 8007ed4:	e694      	b.n	8007c00 <__ieee754_rem_pio2+0x28>
 8007ed6:	bf00      	nop
 8007ed8:	54400000 	.word	0x54400000
 8007edc:	3ff921fb 	.word	0x3ff921fb
 8007ee0:	1a626331 	.word	0x1a626331
 8007ee4:	3dd0b461 	.word	0x3dd0b461
 8007ee8:	1a600000 	.word	0x1a600000
 8007eec:	3dd0b461 	.word	0x3dd0b461
 8007ef0:	2e037073 	.word	0x2e037073
 8007ef4:	3ba3198a 	.word	0x3ba3198a
 8007ef8:	6dc9c883 	.word	0x6dc9c883
 8007efc:	3fe45f30 	.word	0x3fe45f30
 8007f00:	2e000000 	.word	0x2e000000
 8007f04:	3ba3198a 	.word	0x3ba3198a
 8007f08:	252049c1 	.word	0x252049c1
 8007f0c:	397b839a 	.word	0x397b839a
 8007f10:	3fe921fb 	.word	0x3fe921fb
 8007f14:	4002d97b 	.word	0x4002d97b
 8007f18:	3ff921fb 	.word	0x3ff921fb
 8007f1c:	413921fb 	.word	0x413921fb
 8007f20:	3fe00000 	.word	0x3fe00000
 8007f24:	080092e8 	.word	0x080092e8
 8007f28:	7fefffff 	.word	0x7fefffff
 8007f2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007f30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007f34:	ee10 0a10 	vmov	r0, s0
 8007f38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007f3c:	ee10 6a10 	vmov	r6, s0
 8007f40:	460f      	mov	r7, r1
 8007f42:	f7f8 fdad 	bl	8000aa0 <__aeabi_d2iz>
 8007f46:	f7f8 fa91 	bl	800046c <__aeabi_i2d>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f56:	f7f8 f93b 	bl	80001d0 <__aeabi_dsub>
 8007f5a:	4b23      	ldr	r3, [pc, #140]	; (8007fe8 <__ieee754_rem_pio2+0x410>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f7f8 faef 	bl	8000540 <__aeabi_dmul>
 8007f62:	460f      	mov	r7, r1
 8007f64:	4606      	mov	r6, r0
 8007f66:	f7f8 fd9b 	bl	8000aa0 <__aeabi_d2iz>
 8007f6a:	f7f8 fa7f 	bl	800046c <__aeabi_i2d>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4630      	mov	r0, r6
 8007f74:	4639      	mov	r1, r7
 8007f76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f7a:	f7f8 f929 	bl	80001d0 <__aeabi_dsub>
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	; (8007fe8 <__ieee754_rem_pio2+0x410>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	f7f8 fadd 	bl	8000540 <__aeabi_dmul>
 8007f86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f8a:	ad04      	add	r5, sp, #16
 8007f8c:	f04f 0803 	mov.w	r8, #3
 8007f90:	46a9      	mov	r9, r5
 8007f92:	2600      	movs	r6, #0
 8007f94:	2700      	movs	r7, #0
 8007f96:	4632      	mov	r2, r6
 8007f98:	463b      	mov	r3, r7
 8007f9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007f9e:	46c3      	mov	fp, r8
 8007fa0:	3d08      	subs	r5, #8
 8007fa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fa6:	f7f8 fd33 	bl	8000a10 <__aeabi_dcmpeq>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d1f3      	bne.n	8007f96 <__ieee754_rem_pio2+0x3be>
 8007fae:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <__ieee754_rem_pio2+0x414>)
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	465b      	mov	r3, fp
 8007fba:	4651      	mov	r1, sl
 8007fbc:	4648      	mov	r0, r9
 8007fbe:	f000 fb1b 	bl	80085f8 <__kernel_rem_pio2>
 8007fc2:	9b02      	ldr	r3, [sp, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	4683      	mov	fp, r0
 8007fc8:	f6bf ae46 	bge.w	8007c58 <__ieee754_rem_pio2+0x80>
 8007fcc:	e9da 2100 	ldrd	r2, r1, [sl]
 8007fd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fd4:	e9ca 2300 	strd	r2, r3, [sl]
 8007fd8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007fdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fe0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007fe4:	e73a      	b.n	8007e5c <__ieee754_rem_pio2+0x284>
 8007fe6:	bf00      	nop
 8007fe8:	41700000 	.word	0x41700000
 8007fec:	08009368 	.word	0x08009368

08007ff0 <__ieee754_sqrt>:
 8007ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff4:	ec55 4b10 	vmov	r4, r5, d0
 8007ff8:	4e55      	ldr	r6, [pc, #340]	; (8008150 <__ieee754_sqrt+0x160>)
 8007ffa:	43ae      	bics	r6, r5
 8007ffc:	ee10 0a10 	vmov	r0, s0
 8008000:	ee10 3a10 	vmov	r3, s0
 8008004:	462a      	mov	r2, r5
 8008006:	4629      	mov	r1, r5
 8008008:	d110      	bne.n	800802c <__ieee754_sqrt+0x3c>
 800800a:	ee10 2a10 	vmov	r2, s0
 800800e:	462b      	mov	r3, r5
 8008010:	f7f8 fa96 	bl	8000540 <__aeabi_dmul>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4620      	mov	r0, r4
 800801a:	4629      	mov	r1, r5
 800801c:	f7f8 f8da 	bl	80001d4 <__adddf3>
 8008020:	4604      	mov	r4, r0
 8008022:	460d      	mov	r5, r1
 8008024:	ec45 4b10 	vmov	d0, r4, r5
 8008028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800802c:	2d00      	cmp	r5, #0
 800802e:	dc10      	bgt.n	8008052 <__ieee754_sqrt+0x62>
 8008030:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008034:	4330      	orrs	r0, r6
 8008036:	d0f5      	beq.n	8008024 <__ieee754_sqrt+0x34>
 8008038:	b15d      	cbz	r5, 8008052 <__ieee754_sqrt+0x62>
 800803a:	ee10 2a10 	vmov	r2, s0
 800803e:	462b      	mov	r3, r5
 8008040:	ee10 0a10 	vmov	r0, s0
 8008044:	f7f8 f8c4 	bl	80001d0 <__aeabi_dsub>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	f7f8 fba2 	bl	8000794 <__aeabi_ddiv>
 8008050:	e7e6      	b.n	8008020 <__ieee754_sqrt+0x30>
 8008052:	1512      	asrs	r2, r2, #20
 8008054:	d074      	beq.n	8008140 <__ieee754_sqrt+0x150>
 8008056:	07d4      	lsls	r4, r2, #31
 8008058:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800805c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008060:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008064:	bf5e      	ittt	pl
 8008066:	0fda      	lsrpl	r2, r3, #31
 8008068:	005b      	lslpl	r3, r3, #1
 800806a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800806e:	2400      	movs	r4, #0
 8008070:	0fda      	lsrs	r2, r3, #31
 8008072:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008076:	107f      	asrs	r7, r7, #1
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	2516      	movs	r5, #22
 800807c:	4620      	mov	r0, r4
 800807e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008082:	1886      	adds	r6, r0, r2
 8008084:	428e      	cmp	r6, r1
 8008086:	bfde      	ittt	le
 8008088:	1b89      	suble	r1, r1, r6
 800808a:	18b0      	addle	r0, r6, r2
 800808c:	18a4      	addle	r4, r4, r2
 800808e:	0049      	lsls	r1, r1, #1
 8008090:	3d01      	subs	r5, #1
 8008092:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008096:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800809a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800809e:	d1f0      	bne.n	8008082 <__ieee754_sqrt+0x92>
 80080a0:	462a      	mov	r2, r5
 80080a2:	f04f 0e20 	mov.w	lr, #32
 80080a6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80080aa:	4281      	cmp	r1, r0
 80080ac:	eb06 0c05 	add.w	ip, r6, r5
 80080b0:	dc02      	bgt.n	80080b8 <__ieee754_sqrt+0xc8>
 80080b2:	d113      	bne.n	80080dc <__ieee754_sqrt+0xec>
 80080b4:	459c      	cmp	ip, r3
 80080b6:	d811      	bhi.n	80080dc <__ieee754_sqrt+0xec>
 80080b8:	f1bc 0f00 	cmp.w	ip, #0
 80080bc:	eb0c 0506 	add.w	r5, ip, r6
 80080c0:	da43      	bge.n	800814a <__ieee754_sqrt+0x15a>
 80080c2:	2d00      	cmp	r5, #0
 80080c4:	db41      	blt.n	800814a <__ieee754_sqrt+0x15a>
 80080c6:	f100 0801 	add.w	r8, r0, #1
 80080ca:	1a09      	subs	r1, r1, r0
 80080cc:	459c      	cmp	ip, r3
 80080ce:	bf88      	it	hi
 80080d0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80080d4:	eba3 030c 	sub.w	r3, r3, ip
 80080d8:	4432      	add	r2, r6
 80080da:	4640      	mov	r0, r8
 80080dc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80080e0:	f1be 0e01 	subs.w	lr, lr, #1
 80080e4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80080e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80080ec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80080f0:	d1db      	bne.n	80080aa <__ieee754_sqrt+0xba>
 80080f2:	430b      	orrs	r3, r1
 80080f4:	d006      	beq.n	8008104 <__ieee754_sqrt+0x114>
 80080f6:	1c50      	adds	r0, r2, #1
 80080f8:	bf13      	iteet	ne
 80080fa:	3201      	addne	r2, #1
 80080fc:	3401      	addeq	r4, #1
 80080fe:	4672      	moveq	r2, lr
 8008100:	f022 0201 	bicne.w	r2, r2, #1
 8008104:	1063      	asrs	r3, r4, #1
 8008106:	0852      	lsrs	r2, r2, #1
 8008108:	07e1      	lsls	r1, r4, #31
 800810a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800810e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008112:	bf48      	it	mi
 8008114:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008118:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800811c:	4614      	mov	r4, r2
 800811e:	e781      	b.n	8008024 <__ieee754_sqrt+0x34>
 8008120:	0ad9      	lsrs	r1, r3, #11
 8008122:	3815      	subs	r0, #21
 8008124:	055b      	lsls	r3, r3, #21
 8008126:	2900      	cmp	r1, #0
 8008128:	d0fa      	beq.n	8008120 <__ieee754_sqrt+0x130>
 800812a:	02cd      	lsls	r5, r1, #11
 800812c:	d50a      	bpl.n	8008144 <__ieee754_sqrt+0x154>
 800812e:	f1c2 0420 	rsb	r4, r2, #32
 8008132:	fa23 f404 	lsr.w	r4, r3, r4
 8008136:	1e55      	subs	r5, r2, #1
 8008138:	4093      	lsls	r3, r2
 800813a:	4321      	orrs	r1, r4
 800813c:	1b42      	subs	r2, r0, r5
 800813e:	e78a      	b.n	8008056 <__ieee754_sqrt+0x66>
 8008140:	4610      	mov	r0, r2
 8008142:	e7f0      	b.n	8008126 <__ieee754_sqrt+0x136>
 8008144:	0049      	lsls	r1, r1, #1
 8008146:	3201      	adds	r2, #1
 8008148:	e7ef      	b.n	800812a <__ieee754_sqrt+0x13a>
 800814a:	4680      	mov	r8, r0
 800814c:	e7bd      	b.n	80080ca <__ieee754_sqrt+0xda>
 800814e:	bf00      	nop
 8008150:	7ff00000 	.word	0x7ff00000

08008154 <__ieee754_asinf>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	ee10 5a10 	vmov	r5, s0
 800815a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800815e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008162:	ed2d 8b04 	vpush	{d8-d9}
 8008166:	d10c      	bne.n	8008182 <__ieee754_asinf+0x2e>
 8008168:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80082e0 <__ieee754_asinf+0x18c>
 800816c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80082e4 <__ieee754_asinf+0x190>
 8008170:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008174:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008178:	eeb0 0a67 	vmov.f32	s0, s15
 800817c:	ecbd 8b04 	vpop	{d8-d9}
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	dd04      	ble.n	800818e <__ieee754_asinf+0x3a>
 8008184:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008188:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800818c:	e7f6      	b.n	800817c <__ieee754_asinf+0x28>
 800818e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008192:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008196:	da0b      	bge.n	80081b0 <__ieee754_asinf+0x5c>
 8008198:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800819c:	da52      	bge.n	8008244 <__ieee754_asinf+0xf0>
 800819e:	eddf 7a52 	vldr	s15, [pc, #328]	; 80082e8 <__ieee754_asinf+0x194>
 80081a2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80081a6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80081aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ae:	dce5      	bgt.n	800817c <__ieee754_asinf+0x28>
 80081b0:	f001 f850 	bl	8009254 <fabsf>
 80081b4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80081b8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80081bc:	ee20 8a08 	vmul.f32	s16, s0, s16
 80081c0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80082ec <__ieee754_asinf+0x198>
 80081c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80082f0 <__ieee754_asinf+0x19c>
 80081c8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80082f4 <__ieee754_asinf+0x1a0>
 80081cc:	eea8 7a27 	vfma.f32	s14, s16, s15
 80081d0:	eddf 7a49 	vldr	s15, [pc, #292]	; 80082f8 <__ieee754_asinf+0x1a4>
 80081d4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80081d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80082fc <__ieee754_asinf+0x1a8>
 80081dc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80081e0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008300 <__ieee754_asinf+0x1ac>
 80081e4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80081e8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008304 <__ieee754_asinf+0x1b0>
 80081ec:	eea7 9a88 	vfma.f32	s18, s15, s16
 80081f0:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008308 <__ieee754_asinf+0x1b4>
 80081f4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80081f8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800830c <__ieee754_asinf+0x1b8>
 80081fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008200:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008310 <__ieee754_asinf+0x1bc>
 8008204:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008208:	eeb0 0a48 	vmov.f32	s0, s16
 800820c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008210:	f000 f926 	bl	8008460 <__ieee754_sqrtf>
 8008214:	4b3f      	ldr	r3, [pc, #252]	; (8008314 <__ieee754_asinf+0x1c0>)
 8008216:	ee29 9a08 	vmul.f32	s18, s18, s16
 800821a:	429c      	cmp	r4, r3
 800821c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008220:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008224:	dd3d      	ble.n	80082a2 <__ieee754_asinf+0x14e>
 8008226:	eea0 0a06 	vfma.f32	s0, s0, s12
 800822a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008318 <__ieee754_asinf+0x1c4>
 800822e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008232:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80082e4 <__ieee754_asinf+0x190>
 8008236:	ee30 0a67 	vsub.f32	s0, s0, s15
 800823a:	2d00      	cmp	r5, #0
 800823c:	bfd8      	it	le
 800823e:	eeb1 0a40 	vnegle.f32	s0, s0
 8008242:	e79b      	b.n	800817c <__ieee754_asinf+0x28>
 8008244:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008248:	eddf 6a28 	vldr	s13, [pc, #160]	; 80082ec <__ieee754_asinf+0x198>
 800824c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80082f0 <__ieee754_asinf+0x19c>
 8008250:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8008304 <__ieee754_asinf+0x1b0>
 8008254:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008258:	eddf 6a27 	vldr	s13, [pc, #156]	; 80082f8 <__ieee754_asinf+0x1a4>
 800825c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008260:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80082fc <__ieee754_asinf+0x1a8>
 8008264:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008268:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008300 <__ieee754_asinf+0x1ac>
 800826c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008270:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80082f4 <__ieee754_asinf+0x1a0>
 8008274:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008278:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008308 <__ieee754_asinf+0x1b4>
 800827c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8008280:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800830c <__ieee754_asinf+0x1b8>
 8008284:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008288:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008310 <__ieee754_asinf+0x1bc>
 800828c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008294:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008298:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800829c:	eea0 0a27 	vfma.f32	s0, s0, s15
 80082a0:	e76c      	b.n	800817c <__ieee754_asinf+0x28>
 80082a2:	ee10 3a10 	vmov	r3, s0
 80082a6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80082aa:	f023 030f 	bic.w	r3, r3, #15
 80082ae:	ee07 3a10 	vmov	s14, r3
 80082b2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80082b6:	ee70 7a07 	vadd.f32	s15, s0, s14
 80082ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 80082be:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80082c2:	eddf 7a07 	vldr	s15, [pc, #28]	; 80082e0 <__ieee754_asinf+0x18c>
 80082c6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80082ca:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80082ce:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800831c <__ieee754_asinf+0x1c8>
 80082d2:	eeb0 6a40 	vmov.f32	s12, s0
 80082d6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80082da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80082de:	e7aa      	b.n	8008236 <__ieee754_asinf+0xe2>
 80082e0:	b33bbd2e 	.word	0xb33bbd2e
 80082e4:	3fc90fdb 	.word	0x3fc90fdb
 80082e8:	7149f2ca 	.word	0x7149f2ca
 80082ec:	3811ef08 	.word	0x3811ef08
 80082f0:	3a4f7f04 	.word	0x3a4f7f04
 80082f4:	3e2aaaab 	.word	0x3e2aaaab
 80082f8:	bd241146 	.word	0xbd241146
 80082fc:	3e4e0aa8 	.word	0x3e4e0aa8
 8008300:	bea6b090 	.word	0xbea6b090
 8008304:	3d9dc62e 	.word	0x3d9dc62e
 8008308:	bf303361 	.word	0xbf303361
 800830c:	4001572d 	.word	0x4001572d
 8008310:	c019d139 	.word	0xc019d139
 8008314:	3f799999 	.word	0x3f799999
 8008318:	333bbd2e 	.word	0x333bbd2e
 800831c:	3f490fdb 	.word	0x3f490fdb

08008320 <__ieee754_atan2f>:
 8008320:	ee10 2a90 	vmov	r2, s1
 8008324:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008328:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800832c:	b510      	push	{r4, lr}
 800832e:	eef0 7a40 	vmov.f32	s15, s0
 8008332:	dc06      	bgt.n	8008342 <__ieee754_atan2f+0x22>
 8008334:	ee10 0a10 	vmov	r0, s0
 8008338:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800833c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008340:	dd04      	ble.n	800834c <__ieee754_atan2f+0x2c>
 8008342:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008346:	eeb0 0a67 	vmov.f32	s0, s15
 800834a:	bd10      	pop	{r4, pc}
 800834c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008350:	d103      	bne.n	800835a <__ieee754_atan2f+0x3a>
 8008352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008356:	f000 bea9 	b.w	80090ac <atanf>
 800835a:	1794      	asrs	r4, r2, #30
 800835c:	f004 0402 	and.w	r4, r4, #2
 8008360:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008364:	b943      	cbnz	r3, 8008378 <__ieee754_atan2f+0x58>
 8008366:	2c02      	cmp	r4, #2
 8008368:	d05e      	beq.n	8008428 <__ieee754_atan2f+0x108>
 800836a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800843c <__ieee754_atan2f+0x11c>
 800836e:	2c03      	cmp	r4, #3
 8008370:	bf08      	it	eq
 8008372:	eef0 7a47 	vmoveq.f32	s15, s14
 8008376:	e7e6      	b.n	8008346 <__ieee754_atan2f+0x26>
 8008378:	b941      	cbnz	r1, 800838c <__ieee754_atan2f+0x6c>
 800837a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008440 <__ieee754_atan2f+0x120>
 800837e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008444 <__ieee754_atan2f+0x124>
 8008382:	2800      	cmp	r0, #0
 8008384:	bfb8      	it	lt
 8008386:	eef0 7a40 	vmovlt.f32	s15, s0
 800838a:	e7dc      	b.n	8008346 <__ieee754_atan2f+0x26>
 800838c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008390:	d110      	bne.n	80083b4 <__ieee754_atan2f+0x94>
 8008392:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008396:	f104 34ff 	add.w	r4, r4, #4294967295
 800839a:	d107      	bne.n	80083ac <__ieee754_atan2f+0x8c>
 800839c:	2c02      	cmp	r4, #2
 800839e:	d846      	bhi.n	800842e <__ieee754_atan2f+0x10e>
 80083a0:	4b29      	ldr	r3, [pc, #164]	; (8008448 <__ieee754_atan2f+0x128>)
 80083a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083a6:	edd4 7a00 	vldr	s15, [r4]
 80083aa:	e7cc      	b.n	8008346 <__ieee754_atan2f+0x26>
 80083ac:	2c02      	cmp	r4, #2
 80083ae:	d841      	bhi.n	8008434 <__ieee754_atan2f+0x114>
 80083b0:	4b26      	ldr	r3, [pc, #152]	; (800844c <__ieee754_atan2f+0x12c>)
 80083b2:	e7f6      	b.n	80083a2 <__ieee754_atan2f+0x82>
 80083b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80083b8:	d0df      	beq.n	800837a <__ieee754_atan2f+0x5a>
 80083ba:	1a5b      	subs	r3, r3, r1
 80083bc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80083c0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80083c4:	da1a      	bge.n	80083fc <__ieee754_atan2f+0xdc>
 80083c6:	2a00      	cmp	r2, #0
 80083c8:	da01      	bge.n	80083ce <__ieee754_atan2f+0xae>
 80083ca:	313c      	adds	r1, #60	; 0x3c
 80083cc:	db19      	blt.n	8008402 <__ieee754_atan2f+0xe2>
 80083ce:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80083d2:	f000 ff3f 	bl	8009254 <fabsf>
 80083d6:	f000 fe69 	bl	80090ac <atanf>
 80083da:	eef0 7a40 	vmov.f32	s15, s0
 80083de:	2c01      	cmp	r4, #1
 80083e0:	d012      	beq.n	8008408 <__ieee754_atan2f+0xe8>
 80083e2:	2c02      	cmp	r4, #2
 80083e4:	d017      	beq.n	8008416 <__ieee754_atan2f+0xf6>
 80083e6:	2c00      	cmp	r4, #0
 80083e8:	d0ad      	beq.n	8008346 <__ieee754_atan2f+0x26>
 80083ea:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008450 <__ieee754_atan2f+0x130>
 80083ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80083f2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008454 <__ieee754_atan2f+0x134>
 80083f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80083fa:	e7a4      	b.n	8008346 <__ieee754_atan2f+0x26>
 80083fc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008440 <__ieee754_atan2f+0x120>
 8008400:	e7ed      	b.n	80083de <__ieee754_atan2f+0xbe>
 8008402:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008458 <__ieee754_atan2f+0x138>
 8008406:	e7ea      	b.n	80083de <__ieee754_atan2f+0xbe>
 8008408:	ee17 3a90 	vmov	r3, s15
 800840c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008410:	ee07 3a90 	vmov	s15, r3
 8008414:	e797      	b.n	8008346 <__ieee754_atan2f+0x26>
 8008416:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008450 <__ieee754_atan2f+0x130>
 800841a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800841e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008454 <__ieee754_atan2f+0x134>
 8008422:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008426:	e78e      	b.n	8008346 <__ieee754_atan2f+0x26>
 8008428:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008454 <__ieee754_atan2f+0x134>
 800842c:	e78b      	b.n	8008346 <__ieee754_atan2f+0x26>
 800842e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800845c <__ieee754_atan2f+0x13c>
 8008432:	e788      	b.n	8008346 <__ieee754_atan2f+0x26>
 8008434:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008458 <__ieee754_atan2f+0x138>
 8008438:	e785      	b.n	8008346 <__ieee754_atan2f+0x26>
 800843a:	bf00      	nop
 800843c:	c0490fdb 	.word	0xc0490fdb
 8008440:	3fc90fdb 	.word	0x3fc90fdb
 8008444:	bfc90fdb 	.word	0xbfc90fdb
 8008448:	08009470 	.word	0x08009470
 800844c:	0800947c 	.word	0x0800947c
 8008450:	33bbbd2e 	.word	0x33bbbd2e
 8008454:	40490fdb 	.word	0x40490fdb
 8008458:	00000000 	.word	0x00000000
 800845c:	3f490fdb 	.word	0x3f490fdb

08008460 <__ieee754_sqrtf>:
 8008460:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008464:	4770      	bx	lr
	...

08008468 <__kernel_cos>:
 8008468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	ec57 6b10 	vmov	r6, r7, d0
 8008470:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008474:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008478:	ed8d 1b00 	vstr	d1, [sp]
 800847c:	da07      	bge.n	800848e <__kernel_cos+0x26>
 800847e:	ee10 0a10 	vmov	r0, s0
 8008482:	4639      	mov	r1, r7
 8008484:	f7f8 fb0c 	bl	8000aa0 <__aeabi_d2iz>
 8008488:	2800      	cmp	r0, #0
 800848a:	f000 8088 	beq.w	800859e <__kernel_cos+0x136>
 800848e:	4632      	mov	r2, r6
 8008490:	463b      	mov	r3, r7
 8008492:	4630      	mov	r0, r6
 8008494:	4639      	mov	r1, r7
 8008496:	f7f8 f853 	bl	8000540 <__aeabi_dmul>
 800849a:	4b51      	ldr	r3, [pc, #324]	; (80085e0 <__kernel_cos+0x178>)
 800849c:	2200      	movs	r2, #0
 800849e:	4604      	mov	r4, r0
 80084a0:	460d      	mov	r5, r1
 80084a2:	f7f8 f84d 	bl	8000540 <__aeabi_dmul>
 80084a6:	a340      	add	r3, pc, #256	; (adr r3, 80085a8 <__kernel_cos+0x140>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	4682      	mov	sl, r0
 80084ae:	468b      	mov	fp, r1
 80084b0:	4620      	mov	r0, r4
 80084b2:	4629      	mov	r1, r5
 80084b4:	f7f8 f844 	bl	8000540 <__aeabi_dmul>
 80084b8:	a33d      	add	r3, pc, #244	; (adr r3, 80085b0 <__kernel_cos+0x148>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f7f7 fe89 	bl	80001d4 <__adddf3>
 80084c2:	4622      	mov	r2, r4
 80084c4:	462b      	mov	r3, r5
 80084c6:	f7f8 f83b 	bl	8000540 <__aeabi_dmul>
 80084ca:	a33b      	add	r3, pc, #236	; (adr r3, 80085b8 <__kernel_cos+0x150>)
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	f7f7 fe7e 	bl	80001d0 <__aeabi_dsub>
 80084d4:	4622      	mov	r2, r4
 80084d6:	462b      	mov	r3, r5
 80084d8:	f7f8 f832 	bl	8000540 <__aeabi_dmul>
 80084dc:	a338      	add	r3, pc, #224	; (adr r3, 80085c0 <__kernel_cos+0x158>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f7f7 fe77 	bl	80001d4 <__adddf3>
 80084e6:	4622      	mov	r2, r4
 80084e8:	462b      	mov	r3, r5
 80084ea:	f7f8 f829 	bl	8000540 <__aeabi_dmul>
 80084ee:	a336      	add	r3, pc, #216	; (adr r3, 80085c8 <__kernel_cos+0x160>)
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	f7f7 fe6c 	bl	80001d0 <__aeabi_dsub>
 80084f8:	4622      	mov	r2, r4
 80084fa:	462b      	mov	r3, r5
 80084fc:	f7f8 f820 	bl	8000540 <__aeabi_dmul>
 8008500:	a333      	add	r3, pc, #204	; (adr r3, 80085d0 <__kernel_cos+0x168>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f7 fe65 	bl	80001d4 <__adddf3>
 800850a:	4622      	mov	r2, r4
 800850c:	462b      	mov	r3, r5
 800850e:	f7f8 f817 	bl	8000540 <__aeabi_dmul>
 8008512:	4622      	mov	r2, r4
 8008514:	462b      	mov	r3, r5
 8008516:	f7f8 f813 	bl	8000540 <__aeabi_dmul>
 800851a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800851e:	4604      	mov	r4, r0
 8008520:	460d      	mov	r5, r1
 8008522:	4630      	mov	r0, r6
 8008524:	4639      	mov	r1, r7
 8008526:	f7f8 f80b 	bl	8000540 <__aeabi_dmul>
 800852a:	460b      	mov	r3, r1
 800852c:	4602      	mov	r2, r0
 800852e:	4629      	mov	r1, r5
 8008530:	4620      	mov	r0, r4
 8008532:	f7f7 fe4d 	bl	80001d0 <__aeabi_dsub>
 8008536:	4b2b      	ldr	r3, [pc, #172]	; (80085e4 <__kernel_cos+0x17c>)
 8008538:	4598      	cmp	r8, r3
 800853a:	4606      	mov	r6, r0
 800853c:	460f      	mov	r7, r1
 800853e:	dc10      	bgt.n	8008562 <__kernel_cos+0xfa>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	4650      	mov	r0, sl
 8008546:	4659      	mov	r1, fp
 8008548:	f7f7 fe42 	bl	80001d0 <__aeabi_dsub>
 800854c:	460b      	mov	r3, r1
 800854e:	4926      	ldr	r1, [pc, #152]	; (80085e8 <__kernel_cos+0x180>)
 8008550:	4602      	mov	r2, r0
 8008552:	2000      	movs	r0, #0
 8008554:	f7f7 fe3c 	bl	80001d0 <__aeabi_dsub>
 8008558:	ec41 0b10 	vmov	d0, r0, r1
 800855c:	b003      	add	sp, #12
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	4b22      	ldr	r3, [pc, #136]	; (80085ec <__kernel_cos+0x184>)
 8008564:	4920      	ldr	r1, [pc, #128]	; (80085e8 <__kernel_cos+0x180>)
 8008566:	4598      	cmp	r8, r3
 8008568:	bfcc      	ite	gt
 800856a:	4d21      	ldrgt	r5, [pc, #132]	; (80085f0 <__kernel_cos+0x188>)
 800856c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008570:	2400      	movs	r4, #0
 8008572:	4622      	mov	r2, r4
 8008574:	462b      	mov	r3, r5
 8008576:	2000      	movs	r0, #0
 8008578:	f7f7 fe2a 	bl	80001d0 <__aeabi_dsub>
 800857c:	4622      	mov	r2, r4
 800857e:	4680      	mov	r8, r0
 8008580:	4689      	mov	r9, r1
 8008582:	462b      	mov	r3, r5
 8008584:	4650      	mov	r0, sl
 8008586:	4659      	mov	r1, fp
 8008588:	f7f7 fe22 	bl	80001d0 <__aeabi_dsub>
 800858c:	4632      	mov	r2, r6
 800858e:	463b      	mov	r3, r7
 8008590:	f7f7 fe1e 	bl	80001d0 <__aeabi_dsub>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4640      	mov	r0, r8
 800859a:	4649      	mov	r1, r9
 800859c:	e7da      	b.n	8008554 <__kernel_cos+0xec>
 800859e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80085d8 <__kernel_cos+0x170>
 80085a2:	e7db      	b.n	800855c <__kernel_cos+0xf4>
 80085a4:	f3af 8000 	nop.w
 80085a8:	be8838d4 	.word	0xbe8838d4
 80085ac:	bda8fae9 	.word	0xbda8fae9
 80085b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80085b4:	3e21ee9e 	.word	0x3e21ee9e
 80085b8:	809c52ad 	.word	0x809c52ad
 80085bc:	3e927e4f 	.word	0x3e927e4f
 80085c0:	19cb1590 	.word	0x19cb1590
 80085c4:	3efa01a0 	.word	0x3efa01a0
 80085c8:	16c15177 	.word	0x16c15177
 80085cc:	3f56c16c 	.word	0x3f56c16c
 80085d0:	5555554c 	.word	0x5555554c
 80085d4:	3fa55555 	.word	0x3fa55555
 80085d8:	00000000 	.word	0x00000000
 80085dc:	3ff00000 	.word	0x3ff00000
 80085e0:	3fe00000 	.word	0x3fe00000
 80085e4:	3fd33332 	.word	0x3fd33332
 80085e8:	3ff00000 	.word	0x3ff00000
 80085ec:	3fe90000 	.word	0x3fe90000
 80085f0:	3fd20000 	.word	0x3fd20000
 80085f4:	00000000 	.word	0x00000000

080085f8 <__kernel_rem_pio2>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	ed2d 8b02 	vpush	{d8}
 8008600:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008604:	f112 0f14 	cmn.w	r2, #20
 8008608:	9308      	str	r3, [sp, #32]
 800860a:	9101      	str	r1, [sp, #4]
 800860c:	4bc4      	ldr	r3, [pc, #784]	; (8008920 <__kernel_rem_pio2+0x328>)
 800860e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008610:	900b      	str	r0, [sp, #44]	; 0x2c
 8008612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008616:	9302      	str	r3, [sp, #8]
 8008618:	9b08      	ldr	r3, [sp, #32]
 800861a:	f103 33ff 	add.w	r3, r3, #4294967295
 800861e:	bfa8      	it	ge
 8008620:	1ed4      	subge	r4, r2, #3
 8008622:	9306      	str	r3, [sp, #24]
 8008624:	bfb2      	itee	lt
 8008626:	2400      	movlt	r4, #0
 8008628:	2318      	movge	r3, #24
 800862a:	fb94 f4f3 	sdivge	r4, r4, r3
 800862e:	f06f 0317 	mvn.w	r3, #23
 8008632:	fb04 3303 	mla	r3, r4, r3, r3
 8008636:	eb03 0a02 	add.w	sl, r3, r2
 800863a:	9b02      	ldr	r3, [sp, #8]
 800863c:	9a06      	ldr	r2, [sp, #24]
 800863e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008910 <__kernel_rem_pio2+0x318>
 8008642:	eb03 0802 	add.w	r8, r3, r2
 8008646:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008648:	1aa7      	subs	r7, r4, r2
 800864a:	ae22      	add	r6, sp, #136	; 0x88
 800864c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008650:	2500      	movs	r5, #0
 8008652:	4545      	cmp	r5, r8
 8008654:	dd13      	ble.n	800867e <__kernel_rem_pio2+0x86>
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008910 <__kernel_rem_pio2+0x318>
 800865c:	aa22      	add	r2, sp, #136	; 0x88
 800865e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008662:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008666:	f04f 0800 	mov.w	r8, #0
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	4598      	cmp	r8, r3
 800866e:	dc2f      	bgt.n	80086d0 <__kernel_rem_pio2+0xd8>
 8008670:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008674:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008678:	462f      	mov	r7, r5
 800867a:	2600      	movs	r6, #0
 800867c:	e01b      	b.n	80086b6 <__kernel_rem_pio2+0xbe>
 800867e:	42ef      	cmn	r7, r5
 8008680:	d407      	bmi.n	8008692 <__kernel_rem_pio2+0x9a>
 8008682:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008686:	f7f7 fef1 	bl	800046c <__aeabi_i2d>
 800868a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800868e:	3501      	adds	r5, #1
 8008690:	e7df      	b.n	8008652 <__kernel_rem_pio2+0x5a>
 8008692:	ec51 0b18 	vmov	r0, r1, d8
 8008696:	e7f8      	b.n	800868a <__kernel_rem_pio2+0x92>
 8008698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800869c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80086a0:	f7f7 ff4e 	bl	8000540 <__aeabi_dmul>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ac:	f7f7 fd92 	bl	80001d4 <__adddf3>
 80086b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086b4:	3601      	adds	r6, #1
 80086b6:	9b06      	ldr	r3, [sp, #24]
 80086b8:	429e      	cmp	r6, r3
 80086ba:	f1a7 0708 	sub.w	r7, r7, #8
 80086be:	ddeb      	ble.n	8008698 <__kernel_rem_pio2+0xa0>
 80086c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80086c4:	f108 0801 	add.w	r8, r8, #1
 80086c8:	ecab 7b02 	vstmia	fp!, {d7}
 80086cc:	3508      	adds	r5, #8
 80086ce:	e7cc      	b.n	800866a <__kernel_rem_pio2+0x72>
 80086d0:	9b02      	ldr	r3, [sp, #8]
 80086d2:	aa0e      	add	r2, sp, #56	; 0x38
 80086d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80086d8:	930d      	str	r3, [sp, #52]	; 0x34
 80086da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80086dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80086e0:	9c02      	ldr	r4, [sp, #8]
 80086e2:	930c      	str	r3, [sp, #48]	; 0x30
 80086e4:	00e3      	lsls	r3, r4, #3
 80086e6:	930a      	str	r3, [sp, #40]	; 0x28
 80086e8:	ab9a      	add	r3, sp, #616	; 0x268
 80086ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80086f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80086f6:	ab72      	add	r3, sp, #456	; 0x1c8
 80086f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80086fc:	46c3      	mov	fp, r8
 80086fe:	46a1      	mov	r9, r4
 8008700:	f1b9 0f00 	cmp.w	r9, #0
 8008704:	f1a5 0508 	sub.w	r5, r5, #8
 8008708:	dc77      	bgt.n	80087fa <__kernel_rem_pio2+0x202>
 800870a:	ec47 6b10 	vmov	d0, r6, r7
 800870e:	4650      	mov	r0, sl
 8008710:	f000 fc46 	bl	8008fa0 <scalbn>
 8008714:	ec57 6b10 	vmov	r6, r7, d0
 8008718:	2200      	movs	r2, #0
 800871a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800871e:	ee10 0a10 	vmov	r0, s0
 8008722:	4639      	mov	r1, r7
 8008724:	f7f7 ff0c 	bl	8000540 <__aeabi_dmul>
 8008728:	ec41 0b10 	vmov	d0, r0, r1
 800872c:	f000 fbb8 	bl	8008ea0 <floor>
 8008730:	4b7c      	ldr	r3, [pc, #496]	; (8008924 <__kernel_rem_pio2+0x32c>)
 8008732:	ec51 0b10 	vmov	r0, r1, d0
 8008736:	2200      	movs	r2, #0
 8008738:	f7f7 ff02 	bl	8000540 <__aeabi_dmul>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f7 fd44 	bl	80001d0 <__aeabi_dsub>
 8008748:	460f      	mov	r7, r1
 800874a:	4606      	mov	r6, r0
 800874c:	f7f8 f9a8 	bl	8000aa0 <__aeabi_d2iz>
 8008750:	9004      	str	r0, [sp, #16]
 8008752:	f7f7 fe8b 	bl	800046c <__aeabi_i2d>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4630      	mov	r0, r6
 800875c:	4639      	mov	r1, r7
 800875e:	f7f7 fd37 	bl	80001d0 <__aeabi_dsub>
 8008762:	f1ba 0f00 	cmp.w	sl, #0
 8008766:	4606      	mov	r6, r0
 8008768:	460f      	mov	r7, r1
 800876a:	dd6d      	ble.n	8008848 <__kernel_rem_pio2+0x250>
 800876c:	1e62      	subs	r2, r4, #1
 800876e:	ab0e      	add	r3, sp, #56	; 0x38
 8008770:	9d04      	ldr	r5, [sp, #16]
 8008772:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008776:	f1ca 0118 	rsb	r1, sl, #24
 800877a:	fa40 f301 	asr.w	r3, r0, r1
 800877e:	441d      	add	r5, r3
 8008780:	408b      	lsls	r3, r1
 8008782:	1ac0      	subs	r0, r0, r3
 8008784:	ab0e      	add	r3, sp, #56	; 0x38
 8008786:	9504      	str	r5, [sp, #16]
 8008788:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800878c:	f1ca 0317 	rsb	r3, sl, #23
 8008790:	fa40 fb03 	asr.w	fp, r0, r3
 8008794:	f1bb 0f00 	cmp.w	fp, #0
 8008798:	dd65      	ble.n	8008866 <__kernel_rem_pio2+0x26e>
 800879a:	9b04      	ldr	r3, [sp, #16]
 800879c:	2200      	movs	r2, #0
 800879e:	3301      	adds	r3, #1
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	4615      	mov	r5, r2
 80087a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80087a8:	4294      	cmp	r4, r2
 80087aa:	f300 809c 	bgt.w	80088e6 <__kernel_rem_pio2+0x2ee>
 80087ae:	f1ba 0f00 	cmp.w	sl, #0
 80087b2:	dd07      	ble.n	80087c4 <__kernel_rem_pio2+0x1cc>
 80087b4:	f1ba 0f01 	cmp.w	sl, #1
 80087b8:	f000 80c0 	beq.w	800893c <__kernel_rem_pio2+0x344>
 80087bc:	f1ba 0f02 	cmp.w	sl, #2
 80087c0:	f000 80c6 	beq.w	8008950 <__kernel_rem_pio2+0x358>
 80087c4:	f1bb 0f02 	cmp.w	fp, #2
 80087c8:	d14d      	bne.n	8008866 <__kernel_rem_pio2+0x26e>
 80087ca:	4632      	mov	r2, r6
 80087cc:	463b      	mov	r3, r7
 80087ce:	4956      	ldr	r1, [pc, #344]	; (8008928 <__kernel_rem_pio2+0x330>)
 80087d0:	2000      	movs	r0, #0
 80087d2:	f7f7 fcfd 	bl	80001d0 <__aeabi_dsub>
 80087d6:	4606      	mov	r6, r0
 80087d8:	460f      	mov	r7, r1
 80087da:	2d00      	cmp	r5, #0
 80087dc:	d043      	beq.n	8008866 <__kernel_rem_pio2+0x26e>
 80087de:	4650      	mov	r0, sl
 80087e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008918 <__kernel_rem_pio2+0x320>
 80087e4:	f000 fbdc 	bl	8008fa0 <scalbn>
 80087e8:	4630      	mov	r0, r6
 80087ea:	4639      	mov	r1, r7
 80087ec:	ec53 2b10 	vmov	r2, r3, d0
 80087f0:	f7f7 fcee 	bl	80001d0 <__aeabi_dsub>
 80087f4:	4606      	mov	r6, r0
 80087f6:	460f      	mov	r7, r1
 80087f8:	e035      	b.n	8008866 <__kernel_rem_pio2+0x26e>
 80087fa:	4b4c      	ldr	r3, [pc, #304]	; (800892c <__kernel_rem_pio2+0x334>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	4630      	mov	r0, r6
 8008800:	4639      	mov	r1, r7
 8008802:	f7f7 fe9d 	bl	8000540 <__aeabi_dmul>
 8008806:	f7f8 f94b 	bl	8000aa0 <__aeabi_d2iz>
 800880a:	f7f7 fe2f 	bl	800046c <__aeabi_i2d>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	ec43 2b18 	vmov	d8, r2, r3
 8008816:	4b46      	ldr	r3, [pc, #280]	; (8008930 <__kernel_rem_pio2+0x338>)
 8008818:	2200      	movs	r2, #0
 800881a:	f7f7 fe91 	bl	8000540 <__aeabi_dmul>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	4630      	mov	r0, r6
 8008824:	4639      	mov	r1, r7
 8008826:	f7f7 fcd3 	bl	80001d0 <__aeabi_dsub>
 800882a:	f7f8 f939 	bl	8000aa0 <__aeabi_d2iz>
 800882e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008832:	f84b 0b04 	str.w	r0, [fp], #4
 8008836:	ec51 0b18 	vmov	r0, r1, d8
 800883a:	f7f7 fccb 	bl	80001d4 <__adddf3>
 800883e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008842:	4606      	mov	r6, r0
 8008844:	460f      	mov	r7, r1
 8008846:	e75b      	b.n	8008700 <__kernel_rem_pio2+0x108>
 8008848:	d106      	bne.n	8008858 <__kernel_rem_pio2+0x260>
 800884a:	1e63      	subs	r3, r4, #1
 800884c:	aa0e      	add	r2, sp, #56	; 0x38
 800884e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008852:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008856:	e79d      	b.n	8008794 <__kernel_rem_pio2+0x19c>
 8008858:	4b36      	ldr	r3, [pc, #216]	; (8008934 <__kernel_rem_pio2+0x33c>)
 800885a:	2200      	movs	r2, #0
 800885c:	f7f8 f8f6 	bl	8000a4c <__aeabi_dcmpge>
 8008860:	2800      	cmp	r0, #0
 8008862:	d13d      	bne.n	80088e0 <__kernel_rem_pio2+0x2e8>
 8008864:	4683      	mov	fp, r0
 8008866:	2200      	movs	r2, #0
 8008868:	2300      	movs	r3, #0
 800886a:	4630      	mov	r0, r6
 800886c:	4639      	mov	r1, r7
 800886e:	f7f8 f8cf 	bl	8000a10 <__aeabi_dcmpeq>
 8008872:	2800      	cmp	r0, #0
 8008874:	f000 80c0 	beq.w	80089f8 <__kernel_rem_pio2+0x400>
 8008878:	1e65      	subs	r5, r4, #1
 800887a:	462b      	mov	r3, r5
 800887c:	2200      	movs	r2, #0
 800887e:	9902      	ldr	r1, [sp, #8]
 8008880:	428b      	cmp	r3, r1
 8008882:	da6c      	bge.n	800895e <__kernel_rem_pio2+0x366>
 8008884:	2a00      	cmp	r2, #0
 8008886:	f000 8089 	beq.w	800899c <__kernel_rem_pio2+0x3a4>
 800888a:	ab0e      	add	r3, sp, #56	; 0x38
 800888c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008890:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 80ad 	beq.w	80089f4 <__kernel_rem_pio2+0x3fc>
 800889a:	4650      	mov	r0, sl
 800889c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008918 <__kernel_rem_pio2+0x320>
 80088a0:	f000 fb7e 	bl	8008fa0 <scalbn>
 80088a4:	ab9a      	add	r3, sp, #616	; 0x268
 80088a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80088aa:	ec57 6b10 	vmov	r6, r7, d0
 80088ae:	00ec      	lsls	r4, r5, #3
 80088b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80088b4:	46aa      	mov	sl, r5
 80088b6:	f1ba 0f00 	cmp.w	sl, #0
 80088ba:	f280 80d6 	bge.w	8008a6a <__kernel_rem_pio2+0x472>
 80088be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008910 <__kernel_rem_pio2+0x318>
 80088c2:	462e      	mov	r6, r5
 80088c4:	2e00      	cmp	r6, #0
 80088c6:	f2c0 8104 	blt.w	8008ad2 <__kernel_rem_pio2+0x4da>
 80088ca:	ab72      	add	r3, sp, #456	; 0x1c8
 80088cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80088d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008938 <__kernel_rem_pio2+0x340>
 80088d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80088d8:	f04f 0800 	mov.w	r8, #0
 80088dc:	1baf      	subs	r7, r5, r6
 80088de:	e0ea      	b.n	8008ab6 <__kernel_rem_pio2+0x4be>
 80088e0:	f04f 0b02 	mov.w	fp, #2
 80088e4:	e759      	b.n	800879a <__kernel_rem_pio2+0x1a2>
 80088e6:	f8d8 3000 	ldr.w	r3, [r8]
 80088ea:	b955      	cbnz	r5, 8008902 <__kernel_rem_pio2+0x30a>
 80088ec:	b123      	cbz	r3, 80088f8 <__kernel_rem_pio2+0x300>
 80088ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80088f2:	f8c8 3000 	str.w	r3, [r8]
 80088f6:	2301      	movs	r3, #1
 80088f8:	3201      	adds	r2, #1
 80088fa:	f108 0804 	add.w	r8, r8, #4
 80088fe:	461d      	mov	r5, r3
 8008900:	e752      	b.n	80087a8 <__kernel_rem_pio2+0x1b0>
 8008902:	1acb      	subs	r3, r1, r3
 8008904:	f8c8 3000 	str.w	r3, [r8]
 8008908:	462b      	mov	r3, r5
 800890a:	e7f5      	b.n	80088f8 <__kernel_rem_pio2+0x300>
 800890c:	f3af 8000 	nop.w
	...
 800891c:	3ff00000 	.word	0x3ff00000
 8008920:	080094c8 	.word	0x080094c8
 8008924:	40200000 	.word	0x40200000
 8008928:	3ff00000 	.word	0x3ff00000
 800892c:	3e700000 	.word	0x3e700000
 8008930:	41700000 	.word	0x41700000
 8008934:	3fe00000 	.word	0x3fe00000
 8008938:	08009488 	.word	0x08009488
 800893c:	1e62      	subs	r2, r4, #1
 800893e:	ab0e      	add	r3, sp, #56	; 0x38
 8008940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008944:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008948:	a90e      	add	r1, sp, #56	; 0x38
 800894a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800894e:	e739      	b.n	80087c4 <__kernel_rem_pio2+0x1cc>
 8008950:	1e62      	subs	r2, r4, #1
 8008952:	ab0e      	add	r3, sp, #56	; 0x38
 8008954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008958:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800895c:	e7f4      	b.n	8008948 <__kernel_rem_pio2+0x350>
 800895e:	a90e      	add	r1, sp, #56	; 0x38
 8008960:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008964:	3b01      	subs	r3, #1
 8008966:	430a      	orrs	r2, r1
 8008968:	e789      	b.n	800887e <__kernel_rem_pio2+0x286>
 800896a:	3301      	adds	r3, #1
 800896c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008970:	2900      	cmp	r1, #0
 8008972:	d0fa      	beq.n	800896a <__kernel_rem_pio2+0x372>
 8008974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008976:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800897a:	446a      	add	r2, sp
 800897c:	3a98      	subs	r2, #152	; 0x98
 800897e:	920a      	str	r2, [sp, #40]	; 0x28
 8008980:	9a08      	ldr	r2, [sp, #32]
 8008982:	18e3      	adds	r3, r4, r3
 8008984:	18a5      	adds	r5, r4, r2
 8008986:	aa22      	add	r2, sp, #136	; 0x88
 8008988:	f104 0801 	add.w	r8, r4, #1
 800898c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008990:	9304      	str	r3, [sp, #16]
 8008992:	9b04      	ldr	r3, [sp, #16]
 8008994:	4543      	cmp	r3, r8
 8008996:	da04      	bge.n	80089a2 <__kernel_rem_pio2+0x3aa>
 8008998:	461c      	mov	r4, r3
 800899a:	e6a3      	b.n	80086e4 <__kernel_rem_pio2+0xec>
 800899c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800899e:	2301      	movs	r3, #1
 80089a0:	e7e4      	b.n	800896c <__kernel_rem_pio2+0x374>
 80089a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80089a8:	f7f7 fd60 	bl	800046c <__aeabi_i2d>
 80089ac:	e8e5 0102 	strd	r0, r1, [r5], #8
 80089b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089b2:	46ab      	mov	fp, r5
 80089b4:	461c      	mov	r4, r3
 80089b6:	f04f 0900 	mov.w	r9, #0
 80089ba:	2600      	movs	r6, #0
 80089bc:	2700      	movs	r7, #0
 80089be:	9b06      	ldr	r3, [sp, #24]
 80089c0:	4599      	cmp	r9, r3
 80089c2:	dd06      	ble.n	80089d2 <__kernel_rem_pio2+0x3da>
 80089c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089c6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80089ca:	f108 0801 	add.w	r8, r8, #1
 80089ce:	930a      	str	r3, [sp, #40]	; 0x28
 80089d0:	e7df      	b.n	8008992 <__kernel_rem_pio2+0x39a>
 80089d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80089d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80089da:	f7f7 fdb1 	bl	8000540 <__aeabi_dmul>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4630      	mov	r0, r6
 80089e4:	4639      	mov	r1, r7
 80089e6:	f7f7 fbf5 	bl	80001d4 <__adddf3>
 80089ea:	f109 0901 	add.w	r9, r9, #1
 80089ee:	4606      	mov	r6, r0
 80089f0:	460f      	mov	r7, r1
 80089f2:	e7e4      	b.n	80089be <__kernel_rem_pio2+0x3c6>
 80089f4:	3d01      	subs	r5, #1
 80089f6:	e748      	b.n	800888a <__kernel_rem_pio2+0x292>
 80089f8:	ec47 6b10 	vmov	d0, r6, r7
 80089fc:	f1ca 0000 	rsb	r0, sl, #0
 8008a00:	f000 face 	bl	8008fa0 <scalbn>
 8008a04:	ec57 6b10 	vmov	r6, r7, d0
 8008a08:	4ba0      	ldr	r3, [pc, #640]	; (8008c8c <__kernel_rem_pio2+0x694>)
 8008a0a:	ee10 0a10 	vmov	r0, s0
 8008a0e:	2200      	movs	r2, #0
 8008a10:	4639      	mov	r1, r7
 8008a12:	f7f8 f81b 	bl	8000a4c <__aeabi_dcmpge>
 8008a16:	b1f8      	cbz	r0, 8008a58 <__kernel_rem_pio2+0x460>
 8008a18:	4b9d      	ldr	r3, [pc, #628]	; (8008c90 <__kernel_rem_pio2+0x698>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	4639      	mov	r1, r7
 8008a20:	f7f7 fd8e 	bl	8000540 <__aeabi_dmul>
 8008a24:	f7f8 f83c 	bl	8000aa0 <__aeabi_d2iz>
 8008a28:	4680      	mov	r8, r0
 8008a2a:	f7f7 fd1f 	bl	800046c <__aeabi_i2d>
 8008a2e:	4b97      	ldr	r3, [pc, #604]	; (8008c8c <__kernel_rem_pio2+0x694>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	f7f7 fd85 	bl	8000540 <__aeabi_dmul>
 8008a36:	460b      	mov	r3, r1
 8008a38:	4602      	mov	r2, r0
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7f7 fbc7 	bl	80001d0 <__aeabi_dsub>
 8008a42:	f7f8 f82d 	bl	8000aa0 <__aeabi_d2iz>
 8008a46:	1c65      	adds	r5, r4, #1
 8008a48:	ab0e      	add	r3, sp, #56	; 0x38
 8008a4a:	f10a 0a18 	add.w	sl, sl, #24
 8008a4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008a52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008a56:	e720      	b.n	800889a <__kernel_rem_pio2+0x2a2>
 8008a58:	4630      	mov	r0, r6
 8008a5a:	4639      	mov	r1, r7
 8008a5c:	f7f8 f820 	bl	8000aa0 <__aeabi_d2iz>
 8008a60:	ab0e      	add	r3, sp, #56	; 0x38
 8008a62:	4625      	mov	r5, r4
 8008a64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008a68:	e717      	b.n	800889a <__kernel_rem_pio2+0x2a2>
 8008a6a:	ab0e      	add	r3, sp, #56	; 0x38
 8008a6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008a70:	f7f7 fcfc 	bl	800046c <__aeabi_i2d>
 8008a74:	4632      	mov	r2, r6
 8008a76:	463b      	mov	r3, r7
 8008a78:	f7f7 fd62 	bl	8000540 <__aeabi_dmul>
 8008a7c:	4b84      	ldr	r3, [pc, #528]	; (8008c90 <__kernel_rem_pio2+0x698>)
 8008a7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008a82:	2200      	movs	r2, #0
 8008a84:	4630      	mov	r0, r6
 8008a86:	4639      	mov	r1, r7
 8008a88:	f7f7 fd5a 	bl	8000540 <__aeabi_dmul>
 8008a8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a90:	4606      	mov	r6, r0
 8008a92:	460f      	mov	r7, r1
 8008a94:	e70f      	b.n	80088b6 <__kernel_rem_pio2+0x2be>
 8008a96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008a9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008a9e:	f7f7 fd4f 	bl	8000540 <__aeabi_dmul>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008aaa:	f7f7 fb93 	bl	80001d4 <__adddf3>
 8008aae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ab2:	f108 0801 	add.w	r8, r8, #1
 8008ab6:	9b02      	ldr	r3, [sp, #8]
 8008ab8:	4598      	cmp	r8, r3
 8008aba:	dc01      	bgt.n	8008ac0 <__kernel_rem_pio2+0x4c8>
 8008abc:	45b8      	cmp	r8, r7
 8008abe:	ddea      	ble.n	8008a96 <__kernel_rem_pio2+0x49e>
 8008ac0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008ac4:	ab4a      	add	r3, sp, #296	; 0x128
 8008ac6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008aca:	ed87 7b00 	vstr	d7, [r7]
 8008ace:	3e01      	subs	r6, #1
 8008ad0:	e6f8      	b.n	80088c4 <__kernel_rem_pio2+0x2cc>
 8008ad2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	dc0b      	bgt.n	8008af0 <__kernel_rem_pio2+0x4f8>
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dc35      	bgt.n	8008b48 <__kernel_rem_pio2+0x550>
 8008adc:	d059      	beq.n	8008b92 <__kernel_rem_pio2+0x59a>
 8008ade:	9b04      	ldr	r3, [sp, #16]
 8008ae0:	f003 0007 	and.w	r0, r3, #7
 8008ae4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008ae8:	ecbd 8b02 	vpop	{d8}
 8008aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d1f3      	bne.n	8008ade <__kernel_rem_pio2+0x4e6>
 8008af6:	ab4a      	add	r3, sp, #296	; 0x128
 8008af8:	4423      	add	r3, r4
 8008afa:	9306      	str	r3, [sp, #24]
 8008afc:	461c      	mov	r4, r3
 8008afe:	469a      	mov	sl, r3
 8008b00:	9502      	str	r5, [sp, #8]
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f1aa 0a08 	sub.w	sl, sl, #8
 8008b0a:	dc6b      	bgt.n	8008be4 <__kernel_rem_pio2+0x5ec>
 8008b0c:	46aa      	mov	sl, r5
 8008b0e:	f1ba 0f01 	cmp.w	sl, #1
 8008b12:	f1a4 0408 	sub.w	r4, r4, #8
 8008b16:	f300 8085 	bgt.w	8008c24 <__kernel_rem_pio2+0x62c>
 8008b1a:	9c06      	ldr	r4, [sp, #24]
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	3408      	adds	r4, #8
 8008b20:	2100      	movs	r1, #0
 8008b22:	2d01      	cmp	r5, #1
 8008b24:	f300 809d 	bgt.w	8008c62 <__kernel_rem_pio2+0x66a>
 8008b28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008b2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008b30:	f1bb 0f00 	cmp.w	fp, #0
 8008b34:	f040 809b 	bne.w	8008c6e <__kernel_rem_pio2+0x676>
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	e9c3 5600 	strd	r5, r6, [r3]
 8008b3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008b42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008b46:	e7ca      	b.n	8008ade <__kernel_rem_pio2+0x4e6>
 8008b48:	3408      	adds	r4, #8
 8008b4a:	ab4a      	add	r3, sp, #296	; 0x128
 8008b4c:	441c      	add	r4, r3
 8008b4e:	462e      	mov	r6, r5
 8008b50:	2000      	movs	r0, #0
 8008b52:	2100      	movs	r1, #0
 8008b54:	2e00      	cmp	r6, #0
 8008b56:	da36      	bge.n	8008bc6 <__kernel_rem_pio2+0x5ce>
 8008b58:	f1bb 0f00 	cmp.w	fp, #0
 8008b5c:	d039      	beq.n	8008bd2 <__kernel_rem_pio2+0x5da>
 8008b5e:	4602      	mov	r2, r0
 8008b60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b64:	9c01      	ldr	r4, [sp, #4]
 8008b66:	e9c4 2300 	strd	r2, r3, [r4]
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008b72:	f7f7 fb2d 	bl	80001d0 <__aeabi_dsub>
 8008b76:	ae4c      	add	r6, sp, #304	; 0x130
 8008b78:	2401      	movs	r4, #1
 8008b7a:	42a5      	cmp	r5, r4
 8008b7c:	da2c      	bge.n	8008bd8 <__kernel_rem_pio2+0x5e0>
 8008b7e:	f1bb 0f00 	cmp.w	fp, #0
 8008b82:	d002      	beq.n	8008b8a <__kernel_rem_pio2+0x592>
 8008b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b88:	4619      	mov	r1, r3
 8008b8a:	9b01      	ldr	r3, [sp, #4]
 8008b8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008b90:	e7a5      	b.n	8008ade <__kernel_rem_pio2+0x4e6>
 8008b92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008b96:	eb0d 0403 	add.w	r4, sp, r3
 8008b9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	2d00      	cmp	r5, #0
 8008ba4:	da09      	bge.n	8008bba <__kernel_rem_pio2+0x5c2>
 8008ba6:	f1bb 0f00 	cmp.w	fp, #0
 8008baa:	d002      	beq.n	8008bb2 <__kernel_rem_pio2+0x5ba>
 8008bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	9b01      	ldr	r3, [sp, #4]
 8008bb4:	e9c3 0100 	strd	r0, r1, [r3]
 8008bb8:	e791      	b.n	8008ade <__kernel_rem_pio2+0x4e6>
 8008bba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008bbe:	f7f7 fb09 	bl	80001d4 <__adddf3>
 8008bc2:	3d01      	subs	r5, #1
 8008bc4:	e7ed      	b.n	8008ba2 <__kernel_rem_pio2+0x5aa>
 8008bc6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008bca:	f7f7 fb03 	bl	80001d4 <__adddf3>
 8008bce:	3e01      	subs	r6, #1
 8008bd0:	e7c0      	b.n	8008b54 <__kernel_rem_pio2+0x55c>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	e7c5      	b.n	8008b64 <__kernel_rem_pio2+0x56c>
 8008bd8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008bdc:	f7f7 fafa 	bl	80001d4 <__adddf3>
 8008be0:	3401      	adds	r4, #1
 8008be2:	e7ca      	b.n	8008b7a <__kernel_rem_pio2+0x582>
 8008be4:	e9da 8900 	ldrd	r8, r9, [sl]
 8008be8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	9302      	str	r3, [sp, #8]
 8008bf2:	4632      	mov	r2, r6
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	f7f7 faeb 	bl	80001d4 <__adddf3>
 8008bfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4640      	mov	r0, r8
 8008c08:	4649      	mov	r1, r9
 8008c0a:	f7f7 fae1 	bl	80001d0 <__aeabi_dsub>
 8008c0e:	4632      	mov	r2, r6
 8008c10:	463b      	mov	r3, r7
 8008c12:	f7f7 fadf 	bl	80001d4 <__adddf3>
 8008c16:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008c1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c1e:	ed8a 7b00 	vstr	d7, [sl]
 8008c22:	e76e      	b.n	8008b02 <__kernel_rem_pio2+0x50a>
 8008c24:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008c28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008c2c:	4640      	mov	r0, r8
 8008c2e:	4632      	mov	r2, r6
 8008c30:	463b      	mov	r3, r7
 8008c32:	4649      	mov	r1, r9
 8008c34:	f7f7 face 	bl	80001d4 <__adddf3>
 8008c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4640      	mov	r0, r8
 8008c42:	4649      	mov	r1, r9
 8008c44:	f7f7 fac4 	bl	80001d0 <__aeabi_dsub>
 8008c48:	4632      	mov	r2, r6
 8008c4a:	463b      	mov	r3, r7
 8008c4c:	f7f7 fac2 	bl	80001d4 <__adddf3>
 8008c50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c58:	ed84 7b00 	vstr	d7, [r4]
 8008c5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c60:	e755      	b.n	8008b0e <__kernel_rem_pio2+0x516>
 8008c62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008c66:	f7f7 fab5 	bl	80001d4 <__adddf3>
 8008c6a:	3d01      	subs	r5, #1
 8008c6c:	e759      	b.n	8008b22 <__kernel_rem_pio2+0x52a>
 8008c6e:	9b01      	ldr	r3, [sp, #4]
 8008c70:	9a01      	ldr	r2, [sp, #4]
 8008c72:	601d      	str	r5, [r3, #0]
 8008c74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008c78:	605c      	str	r4, [r3, #4]
 8008c7a:	609f      	str	r7, [r3, #8]
 8008c7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008c80:	60d3      	str	r3, [r2, #12]
 8008c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c86:	6110      	str	r0, [r2, #16]
 8008c88:	6153      	str	r3, [r2, #20]
 8008c8a:	e728      	b.n	8008ade <__kernel_rem_pio2+0x4e6>
 8008c8c:	41700000 	.word	0x41700000
 8008c90:	3e700000 	.word	0x3e700000
 8008c94:	00000000 	.word	0x00000000

08008c98 <__kernel_sin>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	ed2d 8b04 	vpush	{d8-d9}
 8008ca0:	eeb0 8a41 	vmov.f32	s16, s2
 8008ca4:	eef0 8a61 	vmov.f32	s17, s3
 8008ca8:	ec55 4b10 	vmov	r4, r5, d0
 8008cac:	b083      	sub	sp, #12
 8008cae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008cb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008cb6:	9001      	str	r0, [sp, #4]
 8008cb8:	da06      	bge.n	8008cc8 <__kernel_sin+0x30>
 8008cba:	ee10 0a10 	vmov	r0, s0
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	f7f7 feee 	bl	8000aa0 <__aeabi_d2iz>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d051      	beq.n	8008d6c <__kernel_sin+0xd4>
 8008cc8:	4622      	mov	r2, r4
 8008cca:	462b      	mov	r3, r5
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f7f7 fc36 	bl	8000540 <__aeabi_dmul>
 8008cd4:	4682      	mov	sl, r0
 8008cd6:	468b      	mov	fp, r1
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4620      	mov	r0, r4
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f7f7 fc2e 	bl	8000540 <__aeabi_dmul>
 8008ce4:	a341      	add	r3, pc, #260	; (adr r3, 8008dec <__kernel_sin+0x154>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	4680      	mov	r8, r0
 8008cec:	4689      	mov	r9, r1
 8008cee:	4650      	mov	r0, sl
 8008cf0:	4659      	mov	r1, fp
 8008cf2:	f7f7 fc25 	bl	8000540 <__aeabi_dmul>
 8008cf6:	a33f      	add	r3, pc, #252	; (adr r3, 8008df4 <__kernel_sin+0x15c>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	f7f7 fa68 	bl	80001d0 <__aeabi_dsub>
 8008d00:	4652      	mov	r2, sl
 8008d02:	465b      	mov	r3, fp
 8008d04:	f7f7 fc1c 	bl	8000540 <__aeabi_dmul>
 8008d08:	a33c      	add	r3, pc, #240	; (adr r3, 8008dfc <__kernel_sin+0x164>)
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f7f7 fa61 	bl	80001d4 <__adddf3>
 8008d12:	4652      	mov	r2, sl
 8008d14:	465b      	mov	r3, fp
 8008d16:	f7f7 fc13 	bl	8000540 <__aeabi_dmul>
 8008d1a:	a33a      	add	r3, pc, #232	; (adr r3, 8008e04 <__kernel_sin+0x16c>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f7f7 fa56 	bl	80001d0 <__aeabi_dsub>
 8008d24:	4652      	mov	r2, sl
 8008d26:	465b      	mov	r3, fp
 8008d28:	f7f7 fc0a 	bl	8000540 <__aeabi_dmul>
 8008d2c:	a337      	add	r3, pc, #220	; (adr r3, 8008e0c <__kernel_sin+0x174>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	f7f7 fa4f 	bl	80001d4 <__adddf3>
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	4606      	mov	r6, r0
 8008d3a:	460f      	mov	r7, r1
 8008d3c:	b9eb      	cbnz	r3, 8008d7a <__kernel_sin+0xe2>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4650      	mov	r0, sl
 8008d44:	4659      	mov	r1, fp
 8008d46:	f7f7 fbfb 	bl	8000540 <__aeabi_dmul>
 8008d4a:	a325      	add	r3, pc, #148	; (adr r3, 8008de0 <__kernel_sin+0x148>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	f7f7 fa3e 	bl	80001d0 <__aeabi_dsub>
 8008d54:	4642      	mov	r2, r8
 8008d56:	464b      	mov	r3, r9
 8008d58:	f7f7 fbf2 	bl	8000540 <__aeabi_dmul>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4620      	mov	r0, r4
 8008d62:	4629      	mov	r1, r5
 8008d64:	f7f7 fa36 	bl	80001d4 <__adddf3>
 8008d68:	4604      	mov	r4, r0
 8008d6a:	460d      	mov	r5, r1
 8008d6c:	ec45 4b10 	vmov	d0, r4, r5
 8008d70:	b003      	add	sp, #12
 8008d72:	ecbd 8b04 	vpop	{d8-d9}
 8008d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7a:	4b1b      	ldr	r3, [pc, #108]	; (8008de8 <__kernel_sin+0x150>)
 8008d7c:	ec51 0b18 	vmov	r0, r1, d8
 8008d80:	2200      	movs	r2, #0
 8008d82:	f7f7 fbdd 	bl	8000540 <__aeabi_dmul>
 8008d86:	4632      	mov	r2, r6
 8008d88:	ec41 0b19 	vmov	d9, r0, r1
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	4640      	mov	r0, r8
 8008d90:	4649      	mov	r1, r9
 8008d92:	f7f7 fbd5 	bl	8000540 <__aeabi_dmul>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	ec51 0b19 	vmov	r0, r1, d9
 8008d9e:	f7f7 fa17 	bl	80001d0 <__aeabi_dsub>
 8008da2:	4652      	mov	r2, sl
 8008da4:	465b      	mov	r3, fp
 8008da6:	f7f7 fbcb 	bl	8000540 <__aeabi_dmul>
 8008daa:	ec53 2b18 	vmov	r2, r3, d8
 8008dae:	f7f7 fa0f 	bl	80001d0 <__aeabi_dsub>
 8008db2:	a30b      	add	r3, pc, #44	; (adr r3, 8008de0 <__kernel_sin+0x148>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	4606      	mov	r6, r0
 8008dba:	460f      	mov	r7, r1
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	f7f7 fbbe 	bl	8000540 <__aeabi_dmul>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fa02 	bl	80001d4 <__adddf3>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7f7 f9fa 	bl	80001d0 <__aeabi_dsub>
 8008ddc:	e7c4      	b.n	8008d68 <__kernel_sin+0xd0>
 8008dde:	bf00      	nop
 8008de0:	55555549 	.word	0x55555549
 8008de4:	3fc55555 	.word	0x3fc55555
 8008de8:	3fe00000 	.word	0x3fe00000
 8008dec:	5acfd57c 	.word	0x5acfd57c
 8008df0:	3de5d93a 	.word	0x3de5d93a
 8008df4:	8a2b9ceb 	.word	0x8a2b9ceb
 8008df8:	3e5ae5e6 	.word	0x3e5ae5e6
 8008dfc:	57b1fe7d 	.word	0x57b1fe7d
 8008e00:	3ec71de3 	.word	0x3ec71de3
 8008e04:	19c161d5 	.word	0x19c161d5
 8008e08:	3f2a01a0 	.word	0x3f2a01a0
 8008e0c:	1110f8a6 	.word	0x1110f8a6
 8008e10:	3f811111 	.word	0x3f811111

08008e14 <with_errno>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	4616      	mov	r6, r2
 8008e1c:	f7fe f82e 	bl	8006e7c <__errno>
 8008e20:	4629      	mov	r1, r5
 8008e22:	6006      	str	r6, [r0, #0]
 8008e24:	4620      	mov	r0, r4
 8008e26:	bd70      	pop	{r4, r5, r6, pc}

08008e28 <xflow>:
 8008e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e2a:	4614      	mov	r4, r2
 8008e2c:	461d      	mov	r5, r3
 8008e2e:	b108      	cbz	r0, 8008e34 <xflow+0xc>
 8008e30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e34:	e9cd 2300 	strd	r2, r3, [sp]
 8008e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f7f7 fb7e 	bl	8000540 <__aeabi_dmul>
 8008e44:	2222      	movs	r2, #34	; 0x22
 8008e46:	b003      	add	sp, #12
 8008e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e4c:	f7ff bfe2 	b.w	8008e14 <with_errno>

08008e50 <__math_uflow>:
 8008e50:	b508      	push	{r3, lr}
 8008e52:	2200      	movs	r2, #0
 8008e54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e58:	f7ff ffe6 	bl	8008e28 <xflow>
 8008e5c:	ec41 0b10 	vmov	d0, r0, r1
 8008e60:	bd08      	pop	{r3, pc}

08008e62 <__math_oflow>:
 8008e62:	b508      	push	{r3, lr}
 8008e64:	2200      	movs	r2, #0
 8008e66:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008e6a:	f7ff ffdd 	bl	8008e28 <xflow>
 8008e6e:	ec41 0b10 	vmov	d0, r0, r1
 8008e72:	bd08      	pop	{r3, pc}

08008e74 <fabs>:
 8008e74:	ec51 0b10 	vmov	r0, r1, d0
 8008e78:	ee10 2a10 	vmov	r2, s0
 8008e7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e80:	ec43 2b10 	vmov	d0, r2, r3
 8008e84:	4770      	bx	lr

08008e86 <finite>:
 8008e86:	b082      	sub	sp, #8
 8008e88:	ed8d 0b00 	vstr	d0, [sp]
 8008e8c:	9801      	ldr	r0, [sp, #4]
 8008e8e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008e92:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008e96:	0fc0      	lsrs	r0, r0, #31
 8008e98:	b002      	add	sp, #8
 8008e9a:	4770      	bx	lr
 8008e9c:	0000      	movs	r0, r0
	...

08008ea0 <floor>:
 8008ea0:	ec51 0b10 	vmov	r0, r1, d0
 8008ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008eac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008eb0:	2e13      	cmp	r6, #19
 8008eb2:	ee10 5a10 	vmov	r5, s0
 8008eb6:	ee10 8a10 	vmov	r8, s0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	dc32      	bgt.n	8008f24 <floor+0x84>
 8008ebe:	2e00      	cmp	r6, #0
 8008ec0:	da14      	bge.n	8008eec <floor+0x4c>
 8008ec2:	a333      	add	r3, pc, #204	; (adr r3, 8008f90 <floor+0xf0>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 f984 	bl	80001d4 <__adddf3>
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f7f7 fdc6 	bl	8000a60 <__aeabi_dcmpgt>
 8008ed4:	b138      	cbz	r0, 8008ee6 <floor+0x46>
 8008ed6:	2c00      	cmp	r4, #0
 8008ed8:	da57      	bge.n	8008f8a <floor+0xea>
 8008eda:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008ede:	431d      	orrs	r5, r3
 8008ee0:	d001      	beq.n	8008ee6 <floor+0x46>
 8008ee2:	4c2d      	ldr	r4, [pc, #180]	; (8008f98 <floor+0xf8>)
 8008ee4:	2500      	movs	r5, #0
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	e025      	b.n	8008f38 <floor+0x98>
 8008eec:	4f2b      	ldr	r7, [pc, #172]	; (8008f9c <floor+0xfc>)
 8008eee:	4137      	asrs	r7, r6
 8008ef0:	ea01 0307 	and.w	r3, r1, r7
 8008ef4:	4303      	orrs	r3, r0
 8008ef6:	d01f      	beq.n	8008f38 <floor+0x98>
 8008ef8:	a325      	add	r3, pc, #148	; (adr r3, 8008f90 <floor+0xf0>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f7f7 f969 	bl	80001d4 <__adddf3>
 8008f02:	2200      	movs	r2, #0
 8008f04:	2300      	movs	r3, #0
 8008f06:	f7f7 fdab 	bl	8000a60 <__aeabi_dcmpgt>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d0eb      	beq.n	8008ee6 <floor+0x46>
 8008f0e:	2c00      	cmp	r4, #0
 8008f10:	bfbe      	ittt	lt
 8008f12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008f16:	fa43 f606 	asrlt.w	r6, r3, r6
 8008f1a:	19a4      	addlt	r4, r4, r6
 8008f1c:	ea24 0407 	bic.w	r4, r4, r7
 8008f20:	2500      	movs	r5, #0
 8008f22:	e7e0      	b.n	8008ee6 <floor+0x46>
 8008f24:	2e33      	cmp	r6, #51	; 0x33
 8008f26:	dd0b      	ble.n	8008f40 <floor+0xa0>
 8008f28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008f2c:	d104      	bne.n	8008f38 <floor+0x98>
 8008f2e:	ee10 2a10 	vmov	r2, s0
 8008f32:	460b      	mov	r3, r1
 8008f34:	f7f7 f94e 	bl	80001d4 <__adddf3>
 8008f38:	ec41 0b10 	vmov	d0, r0, r1
 8008f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f40:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	fa23 f707 	lsr.w	r7, r3, r7
 8008f4c:	4207      	tst	r7, r0
 8008f4e:	d0f3      	beq.n	8008f38 <floor+0x98>
 8008f50:	a30f      	add	r3, pc, #60	; (adr r3, 8008f90 <floor+0xf0>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 f93d 	bl	80001d4 <__adddf3>
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f7f7 fd7f 	bl	8000a60 <__aeabi_dcmpgt>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d0bf      	beq.n	8008ee6 <floor+0x46>
 8008f66:	2c00      	cmp	r4, #0
 8008f68:	da02      	bge.n	8008f70 <floor+0xd0>
 8008f6a:	2e14      	cmp	r6, #20
 8008f6c:	d103      	bne.n	8008f76 <floor+0xd6>
 8008f6e:	3401      	adds	r4, #1
 8008f70:	ea25 0507 	bic.w	r5, r5, r7
 8008f74:	e7b7      	b.n	8008ee6 <floor+0x46>
 8008f76:	2301      	movs	r3, #1
 8008f78:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008f7c:	fa03 f606 	lsl.w	r6, r3, r6
 8008f80:	4435      	add	r5, r6
 8008f82:	4545      	cmp	r5, r8
 8008f84:	bf38      	it	cc
 8008f86:	18e4      	addcc	r4, r4, r3
 8008f88:	e7f2      	b.n	8008f70 <floor+0xd0>
 8008f8a:	2500      	movs	r5, #0
 8008f8c:	462c      	mov	r4, r5
 8008f8e:	e7aa      	b.n	8008ee6 <floor+0x46>
 8008f90:	8800759c 	.word	0x8800759c
 8008f94:	7e37e43c 	.word	0x7e37e43c
 8008f98:	bff00000 	.word	0xbff00000
 8008f9c:	000fffff 	.word	0x000fffff

08008fa0 <scalbn>:
 8008fa0:	b570      	push	{r4, r5, r6, lr}
 8008fa2:	ec55 4b10 	vmov	r4, r5, d0
 8008fa6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008faa:	4606      	mov	r6, r0
 8008fac:	462b      	mov	r3, r5
 8008fae:	b99a      	cbnz	r2, 8008fd8 <scalbn+0x38>
 8008fb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008fb4:	4323      	orrs	r3, r4
 8008fb6:	d036      	beq.n	8009026 <scalbn+0x86>
 8008fb8:	4b39      	ldr	r3, [pc, #228]	; (80090a0 <scalbn+0x100>)
 8008fba:	4629      	mov	r1, r5
 8008fbc:	ee10 0a10 	vmov	r0, s0
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f7f7 fabd 	bl	8000540 <__aeabi_dmul>
 8008fc6:	4b37      	ldr	r3, [pc, #220]	; (80090a4 <scalbn+0x104>)
 8008fc8:	429e      	cmp	r6, r3
 8008fca:	4604      	mov	r4, r0
 8008fcc:	460d      	mov	r5, r1
 8008fce:	da10      	bge.n	8008ff2 <scalbn+0x52>
 8008fd0:	a32b      	add	r3, pc, #172	; (adr r3, 8009080 <scalbn+0xe0>)
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	e03a      	b.n	800904e <scalbn+0xae>
 8008fd8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008fdc:	428a      	cmp	r2, r1
 8008fde:	d10c      	bne.n	8008ffa <scalbn+0x5a>
 8008fe0:	ee10 2a10 	vmov	r2, s0
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	f7f7 f8f4 	bl	80001d4 <__adddf3>
 8008fec:	4604      	mov	r4, r0
 8008fee:	460d      	mov	r5, r1
 8008ff0:	e019      	b.n	8009026 <scalbn+0x86>
 8008ff2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	3a36      	subs	r2, #54	; 0x36
 8008ffa:	4432      	add	r2, r6
 8008ffc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009000:	428a      	cmp	r2, r1
 8009002:	dd08      	ble.n	8009016 <scalbn+0x76>
 8009004:	2d00      	cmp	r5, #0
 8009006:	a120      	add	r1, pc, #128	; (adr r1, 8009088 <scalbn+0xe8>)
 8009008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800900c:	da1c      	bge.n	8009048 <scalbn+0xa8>
 800900e:	a120      	add	r1, pc, #128	; (adr r1, 8009090 <scalbn+0xf0>)
 8009010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009014:	e018      	b.n	8009048 <scalbn+0xa8>
 8009016:	2a00      	cmp	r2, #0
 8009018:	dd08      	ble.n	800902c <scalbn+0x8c>
 800901a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800901e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009022:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009026:	ec45 4b10 	vmov	d0, r4, r5
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009030:	da19      	bge.n	8009066 <scalbn+0xc6>
 8009032:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009036:	429e      	cmp	r6, r3
 8009038:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800903c:	dd0a      	ble.n	8009054 <scalbn+0xb4>
 800903e:	a112      	add	r1, pc, #72	; (adr r1, 8009088 <scalbn+0xe8>)
 8009040:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e2      	bne.n	800900e <scalbn+0x6e>
 8009048:	a30f      	add	r3, pc, #60	; (adr r3, 8009088 <scalbn+0xe8>)
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	f7f7 fa77 	bl	8000540 <__aeabi_dmul>
 8009052:	e7cb      	b.n	8008fec <scalbn+0x4c>
 8009054:	a10a      	add	r1, pc, #40	; (adr r1, 8009080 <scalbn+0xe0>)
 8009056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0b8      	beq.n	8008fd0 <scalbn+0x30>
 800905e:	a10e      	add	r1, pc, #56	; (adr r1, 8009098 <scalbn+0xf8>)
 8009060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009064:	e7b4      	b.n	8008fd0 <scalbn+0x30>
 8009066:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800906a:	3236      	adds	r2, #54	; 0x36
 800906c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009070:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009074:	4620      	mov	r0, r4
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <scalbn+0x108>)
 8009078:	2200      	movs	r2, #0
 800907a:	e7e8      	b.n	800904e <scalbn+0xae>
 800907c:	f3af 8000 	nop.w
 8009080:	c2f8f359 	.word	0xc2f8f359
 8009084:	01a56e1f 	.word	0x01a56e1f
 8009088:	8800759c 	.word	0x8800759c
 800908c:	7e37e43c 	.word	0x7e37e43c
 8009090:	8800759c 	.word	0x8800759c
 8009094:	fe37e43c 	.word	0xfe37e43c
 8009098:	c2f8f359 	.word	0xc2f8f359
 800909c:	81a56e1f 	.word	0x81a56e1f
 80090a0:	43500000 	.word	0x43500000
 80090a4:	ffff3cb0 	.word	0xffff3cb0
 80090a8:	3c900000 	.word	0x3c900000

080090ac <atanf>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	ee10 5a10 	vmov	r5, s0
 80090b2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80090b6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80090ba:	eef0 7a40 	vmov.f32	s15, s0
 80090be:	db10      	blt.n	80090e2 <atanf+0x36>
 80090c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80090c4:	dd04      	ble.n	80090d0 <atanf+0x24>
 80090c6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80090ca:	eeb0 0a67 	vmov.f32	s0, s15
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009208 <atanf+0x15c>
 80090d4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800920c <atanf+0x160>
 80090d8:	2d00      	cmp	r5, #0
 80090da:	bfd8      	it	le
 80090dc:	eef0 7a40 	vmovle.f32	s15, s0
 80090e0:	e7f3      	b.n	80090ca <atanf+0x1e>
 80090e2:	4b4b      	ldr	r3, [pc, #300]	; (8009210 <atanf+0x164>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	dc10      	bgt.n	800910a <atanf+0x5e>
 80090e8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80090ec:	da0a      	bge.n	8009104 <atanf+0x58>
 80090ee:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009214 <atanf+0x168>
 80090f2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80090f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090fa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80090fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009102:	dce2      	bgt.n	80090ca <atanf+0x1e>
 8009104:	f04f 33ff 	mov.w	r3, #4294967295
 8009108:	e013      	b.n	8009132 <atanf+0x86>
 800910a:	f000 f8a3 	bl	8009254 <fabsf>
 800910e:	4b42      	ldr	r3, [pc, #264]	; (8009218 <atanf+0x16c>)
 8009110:	429c      	cmp	r4, r3
 8009112:	dc4f      	bgt.n	80091b4 <atanf+0x108>
 8009114:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009118:	429c      	cmp	r4, r3
 800911a:	dc41      	bgt.n	80091a0 <atanf+0xf4>
 800911c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009120:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009124:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009128:	2300      	movs	r3, #0
 800912a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800912e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009138:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800921c <atanf+0x170>
 800913c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009220 <atanf+0x174>
 8009140:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009224 <atanf+0x178>
 8009144:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009148:	eee6 5a87 	vfma.f32	s11, s13, s14
 800914c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009228 <atanf+0x17c>
 8009150:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009154:	eddf 5a35 	vldr	s11, [pc, #212]	; 800922c <atanf+0x180>
 8009158:	eee7 5a26 	vfma.f32	s11, s14, s13
 800915c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009230 <atanf+0x184>
 8009160:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009164:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009234 <atanf+0x188>
 8009168:	eee7 5a26 	vfma.f32	s11, s14, s13
 800916c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009238 <atanf+0x18c>
 8009170:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009174:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800923c <atanf+0x190>
 8009178:	eea5 7a26 	vfma.f32	s14, s10, s13
 800917c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009240 <atanf+0x194>
 8009180:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009184:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009244 <atanf+0x198>
 8009188:	eea5 7a26 	vfma.f32	s14, s10, s13
 800918c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009190:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009194:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009198:	d121      	bne.n	80091de <atanf+0x132>
 800919a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800919e:	e794      	b.n	80090ca <atanf+0x1e>
 80091a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80091a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80091a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80091ac:	2301      	movs	r3, #1
 80091ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80091b2:	e7be      	b.n	8009132 <atanf+0x86>
 80091b4:	4b24      	ldr	r3, [pc, #144]	; (8009248 <atanf+0x19c>)
 80091b6:	429c      	cmp	r4, r3
 80091b8:	dc0b      	bgt.n	80091d2 <atanf+0x126>
 80091ba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80091be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80091c6:	2302      	movs	r3, #2
 80091c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80091cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d0:	e7af      	b.n	8009132 <atanf+0x86>
 80091d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80091d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80091da:	2303      	movs	r3, #3
 80091dc:	e7a9      	b.n	8009132 <atanf+0x86>
 80091de:	4a1b      	ldr	r2, [pc, #108]	; (800924c <atanf+0x1a0>)
 80091e0:	491b      	ldr	r1, [pc, #108]	; (8009250 <atanf+0x1a4>)
 80091e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80091e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80091ea:	ed93 0a00 	vldr	s0, [r3]
 80091ee:	ee37 7a40 	vsub.f32	s14, s14, s0
 80091f2:	ed92 0a00 	vldr	s0, [r2]
 80091f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091fa:	2d00      	cmp	r5, #0
 80091fc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009200:	bfb8      	it	lt
 8009202:	eef1 7a67 	vneglt.f32	s15, s15
 8009206:	e760      	b.n	80090ca <atanf+0x1e>
 8009208:	3fc90fdb 	.word	0x3fc90fdb
 800920c:	bfc90fdb 	.word	0xbfc90fdb
 8009210:	3edfffff 	.word	0x3edfffff
 8009214:	7149f2ca 	.word	0x7149f2ca
 8009218:	3f97ffff 	.word	0x3f97ffff
 800921c:	3c8569d7 	.word	0x3c8569d7
 8009220:	3d4bda59 	.word	0x3d4bda59
 8009224:	bd6ef16b 	.word	0xbd6ef16b
 8009228:	3d886b35 	.word	0x3d886b35
 800922c:	3dba2e6e 	.word	0x3dba2e6e
 8009230:	3e124925 	.word	0x3e124925
 8009234:	3eaaaaab 	.word	0x3eaaaaab
 8009238:	bd15a221 	.word	0xbd15a221
 800923c:	bd9d8795 	.word	0xbd9d8795
 8009240:	bde38e38 	.word	0xbde38e38
 8009244:	be4ccccd 	.word	0xbe4ccccd
 8009248:	401bffff 	.word	0x401bffff
 800924c:	080094d8 	.word	0x080094d8
 8009250:	080094e8 	.word	0x080094e8

08009254 <fabsf>:
 8009254:	ee10 3a10 	vmov	r3, s0
 8009258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800925c:	ee00 3a10 	vmov	s0, r3
 8009260:	4770      	bx	lr
	...

08009264 <nanf>:
 8009264:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800926c <nanf+0x8>
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	7fc00000 	.word	0x7fc00000

08009270 <_init>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr

0800927c <_fini>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	bf00      	nop
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr
