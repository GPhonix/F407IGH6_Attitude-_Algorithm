
F407IGH6_Attitude_Algorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009728  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080098b0  080098b0  000198b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b20  08009b20  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b28  08009b28  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b28  08009b28  00019b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b2c  08009b2c  00019b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08009b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020154  2**0
                  CONTENTS
 10 .bss          000001c8  20000154  20000154  00020154  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000031c  2000031c  00020154  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015db5  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003070  00000000  00000000  00035f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00038fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  0003a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002378c  00000000  00000000  0003b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001999a  00000000  00000000  0005ebec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d101a  00000000  00000000  00078586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001495a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005718  00000000  00000000  001495f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000154 	.word	0x20000154
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009898 	.word	0x08009898

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000158 	.word	0x20000158
 80001c4:	08009898 	.word	0x08009898

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b6c      	ldr	r3, [pc, #432]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a6b      	ldr	r2, [pc, #428]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b69      	ldr	r3, [pc, #420]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b65      	ldr	r3, [pc, #404]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a64      	ldr	r2, [pc, #400]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b62      	ldr	r3, [pc, #392]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b5e      	ldr	r3, [pc, #376]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a5d      	ldr	r2, [pc, #372]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b54      	ldr	r3, [pc, #336]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b50      	ldr	r3, [pc, #320]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b49      	ldr	r3, [pc, #292]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a48      	ldr	r2, [pc, #288]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b46      	ldr	r3, [pc, #280]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OLED_SDA_Pin|OLED_SCL_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2103      	movs	r1, #3
 8000f56:	4843      	ldr	r0, [pc, #268]	; (8001064 <MX_GPIO_Init+0x1d0>)
 8000f58:	f001 f83a 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST8310_RST_GPIO_Port, IST8310_RST_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4841      	ldr	r0, [pc, #260]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000f62:	f001 f835 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f6c:	483f      	ldr	r0, [pc, #252]	; (800106c <MX_GPIO_Init+0x1d8>)
 8000f6e:	f001 f82f 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Accel_GPIO_Port, CS1_Accel_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2110      	movs	r1, #16
 8000f76:	483e      	ldr	r0, [pc, #248]	; (8001070 <MX_GPIO_Init+0x1dc>)
 8000f78:	f001 f82a 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Gyro_GPIO_Port, CS1_Gyro_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	483c      	ldr	r0, [pc, #240]	; (8001074 <MX_GPIO_Init+0x1e0>)
 8000f82:	f001 f825 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OLED_SDA_Pin|OLED_SCL_Pin;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4831      	ldr	r0, [pc, #196]	; (8001064 <MX_GPIO_Init+0x1d0>)
 8000f9e:	f000 fe7b 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST8310_RST_Pin;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IST8310_RST_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000fba:	f000 fe6d 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000fbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_GPIO_Init+0x1d8>)
 8000fd8:	f000 fe5e 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST8310_DRDY_Pin;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST8310_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000ff2:	f000 fe51 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001000:	2301      	movs	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4819      	ldr	r0, [pc, #100]	; (8001070 <MX_GPIO_Init+0x1dc>)
 800100c:	f000 fe44 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Accel_Pin;
 8001010:	2310      	movs	r3, #16
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS1_Accel_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4812      	ldr	r0, [pc, #72]	; (8001070 <MX_GPIO_Init+0x1dc>)
 8001028:	f000 fe36 	bl	8001c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Gyro_Pin;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS1_Gyro_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x1e0>)
 8001044:	f000 fe28 	bl	8001c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2006      	movs	r0, #6
 800104e:	f000 fdec 	bl	8001c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001052:	2006      	movs	r0, #6
 8001054:	f000 fe05 	bl	8001c62 <HAL_NVIC_EnableIRQ>

}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	; 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400

08001078 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C3_Init+0x50>)
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <MX_I2C3_Init+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_I2C3_Init+0x58>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C3_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_I2C3_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010b6:	f000 ffe3 	bl	8002080 <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 f97c 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000170 	.word	0x20000170
 80010cc:	40005c00 	.word	0x40005c00
 80010d0:	00061a80 	.word	0x00061a80

080010d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_I2C_MspInit+0xc4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d14b      	bne.n	800118e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_I2C_MspInit+0xc8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a20      	ldr	r2, [pc, #128]	; (800119c <HAL_I2C_MspInit+0xc8>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001140:	2304      	movs	r3, #4
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <HAL_I2C_MspInit+0xcc>)
 800114c:	f000 fda4 	bl	8001c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001156:	2312      	movs	r3, #18
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001162:	2304      	movs	r3, #4
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 800116e:	f000 fd93 	bl	8001c98 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_I2C_MspInit+0xc8>)
 800117c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005c00 	.word	0x40005c00
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_WWDG_Refresh(&hwwdg);
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	static uint16_t count = 0;
	if (htim->Instance == TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d155      	bne.n	8001266 <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		count++;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011c4:	801a      	strh	r2, [r3, #0]
		count %= 1000;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	4a2a      	ldr	r2, [pc, #168]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80011cc:	fba2 1203 	umull	r1, r2, r2, r3
 80011d0:	0992      	lsrs	r2, r2, #6
 80011d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d6:	fb01 f202 	mul.w	r2, r1, r2
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011e0:	801a      	strh	r2, [r3, #0]
		if(count % 10 == 0)
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80011e8:	fba3 1302 	umull	r1, r3, r3, r2
 80011ec:	08d9      	lsrs	r1, r3, #3
 80011ee:	460b      	mov	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d120      	bne.n	8001240 <HAL_TIM_PeriodElapsedCallback+0x98>
		{
//			HAL_WWDG_Refresh(&hwwdg);
			IMU_Data_Fusion_Mahony(0.005, &g_roll, &g_pitch, &g_yaw);
 80011fe:	4a1f      	ldr	r2, [pc, #124]	; (800127c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001200:	491f      	ldr	r1, [pc, #124]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001202:	4820      	ldr	r0, [pc, #128]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001204:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001288 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8001208:	f004 feda 	bl	8005fc0 <IMU_Data_Fusion_Mahony>
			g_filter_yaw = low_pass_filter(&g_filter_yaw_struct, g_yaw);
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	eeb0 0a67 	vmov.f32	s0, s15
 8001216:	481d      	ldr	r0, [pc, #116]	; (800128c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001218:	f004 fbf0 	bl	80059fc <low_pass_filter>
 800121c:	eef0 7a40 	vmov.f32	s15, s0
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
			g_kalman_yaw = KalmanFilter(&g_kalman_yaw_struct, g_yaw);
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	eeb0 0a67 	vmov.f32	s0, s15
 8001230:	4818      	ldr	r0, [pc, #96]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001232:	f005 fee5 	bl	8007000 <KalmanFilter>
 8001236:	eef0 7a40 	vmov.f32	s15, s0
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800123c:	edc3 7a00 	vstr	s15, [r3]
//			g_temperature = BMI088_Get_Temperature();
		}
		if(count % 500 == 0)
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001246:	fba2 1203 	umull	r1, r2, r2, r3
 800124a:	0952      	lsrs	r2, r2, #5
 800124c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001250:	fb01 f202 	mul.w	r2, r1, r2
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	b29b      	uxth	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d104      	bne.n	8001266 <HAL_TIM_PeriodElapsedCallback+0xbe>
		{
			LED_TOG(LED_R);
 800125c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001260:	480e      	ldr	r0, [pc, #56]	; (800129c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001262:	f000 fece 	bl	8002002 <HAL_GPIO_TogglePin>
		}
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200001d8 	.word	0x200001d8
 8001274:	10624dd3 	.word	0x10624dd3
 8001278:	cccccccd 	.word	0xcccccccd
 800127c:	200001cc 	.word	0x200001cc
 8001280:	200001c8 	.word	0x200001c8
 8001284:	200001c4 	.word	0x200001c4
 8001288:	3ba3d70a 	.word	0x3ba3d70a
 800128c:	20000000 	.word	0x20000000
 8001290:	200001d0 	.word	0x200001d0
 8001294:	2000000c 	.word	0x2000000c
 8001298:	200001d4 	.word	0x200001d4
 800129c:	40021c00 	.word	0x40021c00

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a4:	f000 fb50 	bl	8001948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a8:	f000 f81e 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ac:	f7ff fdf2 	bl	8000e94 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012b0:	f000 f99e 	bl	80015f0 <MX_TIM2_Init>
  MX_I2C3_Init();
 80012b4:	f7ff fee0 	bl	8001078 <MX_I2C3_Init>
  MX_SPI1_Init();
 80012b8:	f000 f886 	bl	80013c8 <MX_SPI1_Init>
  MX_TIM10_Init();
 80012bc:	f000 f9e4 	bl	8001688 <MX_TIM10_Init>
  MX_USART6_UART_Init();
 80012c0:	f000 faa6 	bl	8001810 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t IMU_error = 0;
  OLED_Init();
 80012c4:	f005 ffe0 	bl	8007288 <OLED_Init>
//  IMU_error = IMU_Init();
  IMU_Init();
 80012c8:	f004 fe54 	bl	8005f74 <IMU_Init>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80012cc:	2100      	movs	r1, #0
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <main+0x40>)
 80012d0:	f003 f9b0 	bl	8004634 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <main+0x44>)
 80012d6:	f003 f8e3 	bl	80044a0 <HAL_TIM_Base_Start_IT>

  IMU_Start();
 80012da:	f004 fe63 	bl	8005fa4 <IMU_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012de:	e7fe      	b.n	80012de <main+0x3e>
 80012e0:	2000027c 	.word	0x2000027c
 80012e4:	20000234 	.word	0x20000234

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	; 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	; 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f006 f8fe 	bl	80074f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <SystemClock_Config+0xcc>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <SystemClock_Config+0xcc>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	; 0x40
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <SystemClock_Config+0xcc>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <SystemClock_Config+0xd0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <SystemClock_Config+0xd0>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <SystemClock_Config+0xd0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001348:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134e:	2302      	movs	r3, #2
 8001350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001356:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001358:	2306      	movs	r3, #6
 800135a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800135c:	23a8      	movs	r3, #168	; 0xa8
 800135e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001360:	2302      	movs	r3, #2
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001364:	2304      	movs	r3, #4
 8001366:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0320 	add.w	r3, r7, #32
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fe47 	bl	8003000 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001378:	f000 f820 	bl	80013bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001380:	2302      	movs	r3, #2
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001388:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800138c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2105      	movs	r1, #5
 800139a:	4618      	mov	r0, r3
 800139c:	f002 f8a8 	bl	80034f0 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013a6:	f000 f809 	bl	80013bc <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3750      	adds	r7, #80	; 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c0:	b672      	cpsid	i
}
 80013c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <Error_Handler+0x8>
	...

080013c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_SPI1_Init+0x64>)
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <MX_SPI1_Init+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_SPI1_Init+0x64>)
 80013d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_SPI1_Init+0x64>)
 80013e8:	2202      	movs	r2, #2
 80013ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_SPI1_Init+0x64>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_SPI1_Init+0x64>)
 80013f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_SPI1_Init+0x64>)
 80013fc:	2218      	movs	r2, #24
 80013fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_SPI1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_SPI1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_SPI1_Init+0x64>)
 8001414:	220a      	movs	r2, #10
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_SPI1_Init+0x64>)
 800141a:	f002 fa49 	bl	80038b0 <HAL_SPI_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001424:	f7ff ffca 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200001dc 	.word	0x200001dc
 8001430:	40013000 	.word	0x40013000

08001434 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a28      	ldr	r2, [pc, #160]	; (80014f4 <HAL_SPI_MspInit+0xc0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d149      	bne.n	80014ea <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_SPI_MspInit+0xc4>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_SPI_MspInit+0xc4>)
 8001460:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_SPI_MspInit+0xc4>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <HAL_SPI_MspInit+0xc4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_SPI_MspInit+0xc4>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <HAL_SPI_MspInit+0xc4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_SPI_MspInit+0xc4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_SPI_MspInit+0xc4>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <HAL_SPI_MspInit+0xc4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80014aa:	2318      	movs	r3, #24
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ba:	2305      	movs	r3, #5
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	480d      	ldr	r0, [pc, #52]	; (80014fc <HAL_SPI_MspInit+0xc8>)
 80014c6:	f000 fbe7 	bl	8001c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014da:	2305      	movs	r3, #5
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <HAL_SPI_MspInit+0xcc>)
 80014e6:	f000 fbd7 	bl	8001c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013000 	.word	0x40013000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020000 	.word	0x40020000

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_MspInit+0x4c>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_MspInit+0x4c>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_MspInit+0x4c>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_MspInit+0x4c>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <NMI_Handler+0x4>

0800155a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler+0x4>

08001566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <UsageFault_Handler+0x4>

08001572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 fa24 	bl	80019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f000 fd43 	bl	8002038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <TIM2_IRQHandler+0x10>)
 80015be:	f003 f901 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000234 	.word	0x20000234

080015cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <SystemInit+0x20>)
 80015d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <SystemInit+0x20>)
 80015d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	463b      	mov	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800160c:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_TIM2_Init+0x94>)
 800160e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_TIM2_Init+0x94>)
 8001616:	2253      	movs	r2, #83	; 0x53
 8001618:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_TIM2_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_TIM2_Init+0x94>)
 8001622:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001626:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_TIM2_Init+0x94>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_TIM2_Init+0x94>)
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001634:	4813      	ldr	r0, [pc, #76]	; (8001684 <MX_TIM2_Init+0x94>)
 8001636:	f002 fee3 	bl	8004400 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001640:	f7ff febc 	bl	80013bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001648:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4619      	mov	r1, r3
 8001650:	480c      	ldr	r0, [pc, #48]	; (8001684 <MX_TIM2_Init+0x94>)
 8001652:	f003 fa81 	bl	8004b58 <HAL_TIM_ConfigClockSource>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800165c:	f7ff feae 	bl	80013bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001668:	463b      	mov	r3, r7
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_TIM2_Init+0x94>)
 800166e:	f003 fe73 	bl	8005358 <HAL_TIMEx_MasterConfigSynchronization>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001678:	f7ff fea0 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000234 	.word	0x20000234

08001688 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	615a      	str	r2, [r3, #20]
 800169e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80016a0:	4b1e      	ldr	r3, [pc, #120]	; (800171c <MX_TIM10_Init+0x94>)
 80016a2:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <MX_TIM10_Init+0x98>)
 80016a4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_TIM10_Init+0x94>)
 80016a8:	22a7      	movs	r2, #167	; 0xa7
 80016aa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MX_TIM10_Init+0x94>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_TIM10_Init+0x94>)
 80016b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016b8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <MX_TIM10_Init+0x94>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_TIM10_Init+0x94>)
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80016c6:	4815      	ldr	r0, [pc, #84]	; (800171c <MX_TIM10_Init+0x94>)
 80016c8:	f002 fe9a 	bl	8004400 <HAL_TIM_Base_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80016d2:	f7ff fe73 	bl	80013bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_TIM10_Init+0x94>)
 80016d8:	f002 ff52 	bl	8004580 <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80016e2:	f7ff fe6b 	bl	80013bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	; 0x60
 80016e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM10_Init+0x94>)
 80016fe:	f003 f969 	bl	80049d4 <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001708:	f7ff fe58 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM10_Init+0x94>)
 800170e:	f000 f845 	bl	800179c <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000027c 	.word	0x2000027c
 8001720:	40014400 	.word	0x40014400

08001724 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001734:	d116      	bne.n	8001764 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b16      	ldr	r3, [pc, #88]	; (8001794 <HAL_TIM_Base_MspInit+0x70>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <HAL_TIM_Base_MspInit+0x70>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_TIM_Base_MspInit+0x70>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	201c      	movs	r0, #28
 8001758:	f000 fa67 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800175c:	201c      	movs	r0, #28
 800175e:	f000 fa80 	bl	8001c62 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001762:	e012      	b.n	800178a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <HAL_TIM_Base_MspInit+0x74>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10d      	bne.n	800178a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_TIM_Base_MspInit+0x70>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_TIM_Base_MspInit+0x70>)
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_TIM_Base_MspInit+0x70>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800
 8001798:	40014400 	.word	0x40014400

0800179c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_TIM_MspPostInit+0x68>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d11d      	bne.n	80017fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_TIM_MspPostInit+0x6c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_TIM_MspPostInit+0x6c>)
 80017c8:	f043 0320 	orr.w	r3, r3, #32
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_TIM_MspPostInit+0x6c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0320 	and.w	r3, r3, #32
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PF6     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017da:	2340      	movs	r3, #64	; 0x40
 80017dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80017ea:	2303      	movs	r3, #3
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_TIM_MspPostInit+0x70>)
 80017f6:	f000 fa4f 	bl	8001c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40014400 	.word	0x40014400
 8001808:	40023800 	.word	0x40023800
 800180c:	40021400 	.word	0x40021400

08001810 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <MX_USART6_UART_Init+0x50>)
 8001818:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <MX_USART6_UART_Init+0x4c>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_USART6_UART_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <MX_USART6_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_USART6_UART_Init+0x4c>)
 8001848:	f003 fe16 	bl	8005478 <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001852:	f7ff fdb3 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200002c4 	.word	0x200002c4
 8001860:	40011400 	.word	0x40011400

08001864 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08a      	sub	sp, #40	; 0x28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_UART_MspInit+0x84>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d12c      	bne.n	80018e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_UART_MspInit+0x88>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_UART_MspInit+0x88>)
 8001890:	f043 0320 	orr.w	r3, r3, #32
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_UART_MspInit+0x88>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f003 0320 	and.w	r3, r3, #32
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_UART_MspInit+0x88>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_UART_MspInit+0x88>)
 80018ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_UART_MspInit+0x88>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG14     ------> USART6_TX
    PG9     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80018be:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80018c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018d0:	2308      	movs	r3, #8
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <HAL_UART_MspInit+0x8c>)
 80018dc:	f000 f9dc 	bl	8001c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80018e0:	bf00      	nop
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40011400 	.word	0x40011400
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40021800 	.word	0x40021800

080018f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800192c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018fa:	490e      	ldr	r1, [pc, #56]	; (8001934 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018fc:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001910:	4c0b      	ldr	r4, [pc, #44]	; (8001940 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800191e:	f7ff fe55 	bl	80015cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001922:	f005 fdc5 	bl	80074b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001926:	f7ff fcbb 	bl	80012a0 <main>
  bx  lr    
 800192a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800192c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8001938:	08009b30 	.word	0x08009b30
  ldr r2, =_sbss
 800193c:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8001940:	2000031c 	.word	0x2000031c

08001944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <HAL_Init+0x40>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001958:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_Init+0x40>)
 800195e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_Init+0x40>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 f94f 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	200f      	movs	r0, #15
 8001978:	f000 f808 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff fdc2 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023c00 	.word	0x40023c00

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f967 	bl	8001c7e <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 f92f 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000038 	.word	0x20000038
 80019e4:	20000040 	.word	0x20000040
 80019e8:	2000003c 	.word	0x2000003c

080019ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_IncTick+0x20>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_IncTick+0x24>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <HAL_IncTick+0x24>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000040 	.word	0x20000040
 8001a10:	20000308 	.word	0x20000308

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_GetTick+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000308 	.word	0x20000308

08001a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff ffee 	bl	8001a14 <HAL_GetTick>
 8001a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d005      	beq.n	8001a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_Delay+0x44>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a52:	bf00      	nop
 8001a54:	f7ff ffde 	bl	8001a14 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d8f7      	bhi.n	8001a54 <HAL_Delay+0x28>
  {
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000040 	.word	0x20000040

08001a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <__NVIC_EnableIRQ+0x38>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff29 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff3e 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff31 	bl	8001ad8 <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa2 	bl	8001bd0 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
 8001cb2:	e16b      	b.n	8001f8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 815a 	bne.w	8001f86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d005      	beq.n	8001cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d130      	bne.n	8001d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 0201 	and.w	r2, r3, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d017      	beq.n	8001d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d123      	bne.n	8001ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	08da      	lsrs	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691a      	ldr	r2, [r3, #16]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	08da      	lsrs	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3208      	adds	r2, #8
 8001dd6:	69b9      	ldr	r1, [r7, #24]
 8001dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0203 	and.w	r2, r3, #3
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 80b4 	beq.w	8001f86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b60      	ldr	r3, [pc, #384]	; (8001fa4 <HAL_GPIO_Init+0x30c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a5f      	ldr	r2, [pc, #380]	; (8001fa4 <HAL_GPIO_Init+0x30c>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_GPIO_Init+0x30c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e3a:	4a5b      	ldr	r2, [pc, #364]	; (8001fa8 <HAL_GPIO_Init+0x310>)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	089b      	lsrs	r3, r3, #2
 8001e40:	3302      	adds	r3, #2
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	220f      	movs	r2, #15
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a52      	ldr	r2, [pc, #328]	; (8001fac <HAL_GPIO_Init+0x314>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02b      	beq.n	8001ebe <HAL_GPIO_Init+0x226>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a51      	ldr	r2, [pc, #324]	; (8001fb0 <HAL_GPIO_Init+0x318>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d025      	beq.n	8001eba <HAL_GPIO_Init+0x222>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a50      	ldr	r2, [pc, #320]	; (8001fb4 <HAL_GPIO_Init+0x31c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01f      	beq.n	8001eb6 <HAL_GPIO_Init+0x21e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4f      	ldr	r2, [pc, #316]	; (8001fb8 <HAL_GPIO_Init+0x320>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d019      	beq.n	8001eb2 <HAL_GPIO_Init+0x21a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4e      	ldr	r2, [pc, #312]	; (8001fbc <HAL_GPIO_Init+0x324>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_GPIO_Init+0x216>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4d      	ldr	r2, [pc, #308]	; (8001fc0 <HAL_GPIO_Init+0x328>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00d      	beq.n	8001eaa <HAL_GPIO_Init+0x212>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4c      	ldr	r2, [pc, #304]	; (8001fc4 <HAL_GPIO_Init+0x32c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d007      	beq.n	8001ea6 <HAL_GPIO_Init+0x20e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4b      	ldr	r2, [pc, #300]	; (8001fc8 <HAL_GPIO_Init+0x330>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GPIO_Init+0x20a>
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	e00e      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	e00c      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	e00a      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e008      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e006      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e004      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e002      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_GPIO_Init+0x228>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	f002 0203 	and.w	r2, r2, #3
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	4093      	lsls	r3, r2
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed0:	4935      	ldr	r1, [pc, #212]	; (8001fa8 <HAL_GPIO_Init+0x310>)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <HAL_GPIO_Init+0x334>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f02:	4a32      	ldr	r2, [pc, #200]	; (8001fcc <HAL_GPIO_Init+0x334>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_GPIO_Init+0x334>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f2c:	4a27      	ldr	r2, [pc, #156]	; (8001fcc <HAL_GPIO_Init+0x334>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <HAL_GPIO_Init+0x334>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_GPIO_Init+0x334>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_GPIO_Init+0x334>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f80:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_GPIO_Init+0x334>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	2b0f      	cmp	r3, #15
 8001f90:	f67f ae90 	bls.w	8001cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40013800 	.word	0x40013800
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	40020c00 	.word	0x40020c00
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40021400 	.word	0x40021400
 8001fc4:	40021800 	.word	0x40021800
 8001fc8:	40021c00 	.word	0x40021c00
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002014:	887a      	ldrh	r2, [r7, #2]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	041a      	lsls	r2, r3, #16
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43d9      	mvns	r1, r3
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	400b      	ands	r3, r1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4013      	ands	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f806 	bl	8002068 <HAL_GPIO_EXTI_Callback>
  }
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40013c00 	.word	0x40013c00

08002068 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e12b      	b.n	80022ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff f814 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2224      	movs	r2, #36	; 0x24
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020e4:	f001 fbbc 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 80020e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a81      	ldr	r2, [pc, #516]	; (80022f4 <HAL_I2C_Init+0x274>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d807      	bhi.n	8002104 <HAL_I2C_Init+0x84>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4a80      	ldr	r2, [pc, #512]	; (80022f8 <HAL_I2C_Init+0x278>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	bf94      	ite	ls
 80020fc:	2301      	movls	r3, #1
 80020fe:	2300      	movhi	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e006      	b.n	8002112 <HAL_I2C_Init+0x92>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4a7d      	ldr	r2, [pc, #500]	; (80022fc <HAL_I2C_Init+0x27c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0e7      	b.n	80022ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a78      	ldr	r2, [pc, #480]	; (8002300 <HAL_I2C_Init+0x280>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0c9b      	lsrs	r3, r3, #18
 8002124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a6a      	ldr	r2, [pc, #424]	; (80022f4 <HAL_I2C_Init+0x274>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d802      	bhi.n	8002154 <HAL_I2C_Init+0xd4>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3301      	adds	r3, #1
 8002152:	e009      	b.n	8002168 <HAL_I2C_Init+0xe8>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	4a69      	ldr	r2, [pc, #420]	; (8002304 <HAL_I2C_Init+0x284>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	3301      	adds	r3, #1
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800217a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	495c      	ldr	r1, [pc, #368]	; (80022f4 <HAL_I2C_Init+0x274>)
 8002184:	428b      	cmp	r3, r1
 8002186:	d819      	bhi.n	80021bc <HAL_I2C_Init+0x13c>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1e59      	subs	r1, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fbb1 f3f3 	udiv	r3, r1, r3
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	f640 73fc 	movw	r3, #4092	; 0xffc
 800219c:	400b      	ands	r3, r1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_I2C_Init+0x138>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1e59      	subs	r1, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b6:	e051      	b.n	800225c <HAL_I2C_Init+0x1dc>
 80021b8:	2304      	movs	r3, #4
 80021ba:	e04f      	b.n	800225c <HAL_I2C_Init+0x1dc>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d111      	bne.n	80021e8 <HAL_I2C_Init+0x168>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e58      	subs	r0, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	440b      	add	r3, r1
 80021d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e012      	b.n	800220e <HAL_I2C_Init+0x18e>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e58      	subs	r0, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	0099      	lsls	r1, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_Init+0x196>
 8002212:	2301      	movs	r3, #1
 8002214:	e022      	b.n	800225c <HAL_I2C_Init+0x1dc>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10e      	bne.n	800223c <HAL_I2C_Init+0x1bc>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1e58      	subs	r0, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	440b      	add	r3, r1
 800222c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800223a:	e00f      	b.n	800225c <HAL_I2C_Init+0x1dc>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e58      	subs	r0, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	0099      	lsls	r1, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	6809      	ldr	r1, [r1, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800228a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6911      	ldr	r1, [r2, #16]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	430b      	orrs	r3, r1
 800229e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	000186a0 	.word	0x000186a0
 80022f8:	001e847f 	.word	0x001e847f
 80022fc:	003d08ff 	.word	0x003d08ff
 8002300:	431bde83 	.word	0x431bde83
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	460b      	mov	r3, r1
 800231c:	813b      	strh	r3, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002322:	f7ff fb77 	bl	8001a14 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b20      	cmp	r3, #32
 8002332:	f040 80d9 	bne.w	80024e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2319      	movs	r3, #25
 800233c:	2201      	movs	r2, #1
 800233e:	496d      	ldr	r1, [pc, #436]	; (80024f4 <HAL_I2C_Mem_Write+0x1ec>)
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fc7f 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
 800234e:	e0cc      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <HAL_I2C_Mem_Write+0x56>
 800235a:	2302      	movs	r3, #2
 800235c:	e0c5      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	d007      	beq.n	8002384 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002392:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2221      	movs	r2, #33	; 0x21
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a3a      	ldr	r2, [r7, #32]
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4a4d      	ldr	r2, [pc, #308]	; (80024f8 <HAL_I2C_Mem_Write+0x1f0>)
 80023c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023c6:	88f8      	ldrh	r0, [r7, #6]
 80023c8:	893a      	ldrh	r2, [r7, #8]
 80023ca:	8979      	ldrh	r1, [r7, #10]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4603      	mov	r3, r0
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fab6 	bl	8002948 <I2C_RequestMemoryWrite>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d052      	beq.n	8002488 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e081      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fd00 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00d      	beq.n	8002412 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d107      	bne.n	800240e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06b      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d11b      	bne.n	8002488 <HAL_I2C_Mem_Write+0x180>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	2b00      	cmp	r3, #0
 8002456:	d017      	beq.n	8002488 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1aa      	bne.n	80023e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fcec 	bl	8002e72 <I2C_WaitOnBTFFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d107      	bne.n	80024b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e016      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	00100002 	.word	0x00100002
 80024f8:	ffff0000 	.word	0xffff0000

080024fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08c      	sub	sp, #48	; 0x30
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	817b      	strh	r3, [r7, #10]
 800250e:	460b      	mov	r3, r1
 8002510:	813b      	strh	r3, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002516:	f7ff fa7d 	bl	8001a14 <HAL_GetTick>
 800251a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b20      	cmp	r3, #32
 8002526:	f040 8208 	bne.w	800293a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2319      	movs	r3, #25
 8002530:	2201      	movs	r2, #1
 8002532:	497b      	ldr	r1, [pc, #492]	; (8002720 <HAL_I2C_Mem_Read+0x224>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fb85 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
 8002542:	e1fb      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Mem_Read+0x56>
 800254e:	2302      	movs	r3, #2
 8002550:	e1f4      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d007      	beq.n	8002578 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2222      	movs	r2, #34	; 0x22
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2240      	movs	r2, #64	; 0x40
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4a5b      	ldr	r2, [pc, #364]	; (8002724 <HAL_I2C_Mem_Read+0x228>)
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025ba:	88f8      	ldrh	r0, [r7, #6]
 80025bc:	893a      	ldrh	r2, [r7, #8]
 80025be:	8979      	ldrh	r1, [r7, #10]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	4603      	mov	r3, r0
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fa52 	bl	8002a74 <I2C_RequestMemoryRead>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e1b0      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d113      	bne.n	800260a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	623b      	str	r3, [r7, #32]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	623b      	str	r3, [r7, #32]
 80025f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e184      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b01      	cmp	r3, #1
 8002610:	d11b      	bne.n	800264a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	e164      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264e:	2b02      	cmp	r3, #2
 8002650:	d11b      	bne.n	800268a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002660:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002670:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	e144      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026a0:	e138      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	f200 80f1 	bhi.w	800288e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d123      	bne.n	80026fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fc1b 	bl	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e139      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026fa:	e10b      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002700:	2b02      	cmp	r3, #2
 8002702:	d14e      	bne.n	80027a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270a:	2200      	movs	r2, #0
 800270c:	4906      	ldr	r1, [pc, #24]	; (8002728 <HAL_I2C_Mem_Read+0x22c>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa98 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e10e      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
 800271e:	bf00      	nop
 8002720:	00100002 	.word	0x00100002
 8002724:	ffff0000 	.word	0xffff0000
 8002728:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027a0:	e0b8      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	2200      	movs	r2, #0
 80027aa:	4966      	ldr	r1, [pc, #408]	; (8002944 <HAL_I2C_Mem_Read+0x448>)
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fa49 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0bf      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	2200      	movs	r2, #0
 8002806:	494f      	ldr	r1, [pc, #316]	; (8002944 <HAL_I2C_Mem_Read+0x448>)
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 fa1b 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e091      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800288c:	e042      	b.n	8002914 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002890:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fb2e 	bl	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e04c      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d118      	bne.n	8002914 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	f47f aec2 	bne.w	80026a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	e000      	b.n	800293c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
  }
}
 800293c:	4618      	mov	r0, r3
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	00010004 	.word	0x00010004

08002948 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	4608      	mov	r0, r1
 8002952:	4611      	mov	r1, r2
 8002954:	461a      	mov	r2, r3
 8002956:	4603      	mov	r3, r0
 8002958:	817b      	strh	r3, [r7, #10]
 800295a:	460b      	mov	r3, r1
 800295c:	813b      	strh	r3, [r7, #8]
 800295e:	4613      	mov	r3, r2
 8002960:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002970:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	2200      	movs	r2, #0
 800297a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f960 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002998:	d103      	bne.n	80029a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e05f      	b.n	8002a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029a6:	897b      	ldrh	r3, [r7, #10]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	6a3a      	ldr	r2, [r7, #32]
 80029ba:	492d      	ldr	r1, [pc, #180]	; (8002a70 <I2C_RequestMemoryWrite+0x128>)
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f998 	bl	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e04c      	b.n	8002a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e4:	6a39      	ldr	r1, [r7, #32]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fa02 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d107      	bne.n	8002a0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e02b      	b.n	8002a66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a14:	893b      	ldrh	r3, [r7, #8]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	611a      	str	r2, [r3, #16]
 8002a1e:	e021      	b.n	8002a64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a20:	893b      	ldrh	r3, [r7, #8]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a30:	6a39      	ldr	r1, [r7, #32]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f9dc 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d107      	bne.n	8002a56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e005      	b.n	8002a66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5a:	893b      	ldrh	r3, [r7, #8]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	00010002 	.word	0x00010002

08002a74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	460b      	mov	r3, r1
 8002a88:	813b      	strh	r3, [r7, #8]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f8c2 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad4:	d103      	bne.n	8002ade <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e0aa      	b.n	8002c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	4952      	ldr	r1, [pc, #328]	; (8002c40 <I2C_RequestMemoryRead+0x1cc>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f8fa 	bl	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e097      	b.n	8002c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b20:	6a39      	ldr	r1, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f964 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d107      	bne.n	8002b46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e076      	b.n	8002c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	e021      	b.n	8002ba0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	6a39      	ldr	r1, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f93e 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d107      	bne.n	8002b92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e050      	b.n	8002c38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b96:	893b      	ldrh	r3, [r7, #8]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba2:	6a39      	ldr	r1, [r7, #32]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f923 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00d      	beq.n	8002bcc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d107      	bne.n	8002bc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e035      	b.n	8002c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f82b 	bl	8002c44 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c02:	d103      	bne.n	8002c0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e013      	b.n	8002c38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c10:	897b      	ldrh	r3, [r7, #10]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	6a3a      	ldr	r2, [r7, #32]
 8002c24:	4906      	ldr	r1, [pc, #24]	; (8002c40 <I2C_RequestMemoryRead+0x1cc>)
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f863 	bl	8002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	00010002 	.word	0x00010002

08002c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c54:	e025      	b.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d021      	beq.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7fe fed9 	bl	8001a14 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d116      	bne.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e023      	b.n	8002cea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d10d      	bne.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	e00c      	b.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf0c      	ite	eq
 8002cda:	2301      	moveq	r3, #1
 8002cdc:	2300      	movne	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d0b6      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	607a      	str	r2, [r7, #4]
 8002cfe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d00:	e051      	b.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d10:	d123      	bne.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2220      	movs	r2, #32
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f043 0204 	orr.w	r2, r3, #4
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e046      	b.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d60:	d021      	beq.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	f7fe fe57 	bl	8001a14 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d302      	bcc.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d116      	bne.n	8002da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f043 0220 	orr.w	r2, r3, #32
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e020      	b.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	0c1b      	lsrs	r3, r3, #16
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d10c      	bne.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	bf14      	ite	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	2300      	moveq	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	e00b      	b.n	8002de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d18d      	bne.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dfc:	e02d      	b.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f8ce 	bl	8002fa0 <I2C_IsAcknowledgeFailed>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e02d      	b.n	8002e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d021      	beq.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fe fdfd 	bl	8001a14 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d116      	bne.n	8002e5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d1ca      	bne.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e7e:	e02d      	b.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f88d 	bl	8002fa0 <I2C_IsAcknowledgeFailed>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e02d      	b.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d021      	beq.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e98:	f7fe fdbc 	bl	8001a14 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d302      	bcc.n	8002eae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d116      	bne.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d1ca      	bne.n	8002e80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f00:	e042      	b.n	8002f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d119      	bne.n	8002f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0210 	mvn.w	r2, #16
 8002f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e029      	b.n	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f44:	f7fe fd66 	bl	8001a14 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d302      	bcc.n	8002f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d116      	bne.n	8002f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e007      	b.n	8002f98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f92:	2b40      	cmp	r3, #64	; 0x40
 8002f94:	d1b5      	bne.n	8002f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb6:	d11b      	bne.n	8002ff0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fc0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f043 0204 	orr.w	r2, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e267      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d075      	beq.n	800310a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800301e:	4b88      	ldr	r3, [pc, #544]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d00c      	beq.n	8003044 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800302a:	4b85      	ldr	r3, [pc, #532]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003032:	2b08      	cmp	r3, #8
 8003034:	d112      	bne.n	800305c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b82      	ldr	r3, [pc, #520]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003042:	d10b      	bne.n	800305c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	4b7e      	ldr	r3, [pc, #504]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05b      	beq.n	8003108 <HAL_RCC_OscConfig+0x108>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d157      	bne.n	8003108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e242      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003064:	d106      	bne.n	8003074 <HAL_RCC_OscConfig+0x74>
 8003066:	4b76      	ldr	r3, [pc, #472]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a75      	ldr	r2, [pc, #468]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e01d      	b.n	80030b0 <HAL_RCC_OscConfig+0xb0>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x98>
 800307e:	4b70      	ldr	r3, [pc, #448]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a6f      	ldr	r2, [pc, #444]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b6d      	ldr	r3, [pc, #436]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6c      	ldr	r2, [pc, #432]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e00b      	b.n	80030b0 <HAL_RCC_OscConfig+0xb0>
 8003098:	4b69      	ldr	r3, [pc, #420]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a68      	ldr	r2, [pc, #416]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b66      	ldr	r3, [pc, #408]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a65      	ldr	r2, [pc, #404]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fe fcac 	bl	8001a14 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe fca8 	bl	8001a14 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e207      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d2:	4b5b      	ldr	r3, [pc, #364]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xc0>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fc98 	bl	8001a14 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe fc94 	bl	8001a14 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	; 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1f3      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fa:	4b51      	ldr	r3, [pc, #324]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0xe8>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d063      	beq.n	80031de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003116:	4b4a      	ldr	r3, [pc, #296]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003122:	4b47      	ldr	r3, [pc, #284]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800312a:	2b08      	cmp	r3, #8
 800312c:	d11c      	bne.n	8003168 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b44      	ldr	r3, [pc, #272]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d116      	bne.n	8003168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_RCC_OscConfig+0x152>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d001      	beq.n	8003152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e1c7      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4937      	ldr	r1, [pc, #220]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003166:	e03a      	b.n	80031de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003170:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_RCC_OscConfig+0x244>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fe fc4d 	bl	8001a14 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800317e:	f7fe fc49 	bl	8001a14 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e1a8      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319c:	4b28      	ldr	r3, [pc, #160]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	4925      	ldr	r1, [pc, #148]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	e015      	b.n	80031de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_OscConfig+0x244>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fc2c 	bl	8001a14 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c0:	f7fe fc28 	bl	8001a14 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e187      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d2:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d036      	beq.n	8003258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d016      	beq.n	8003220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <HAL_RCC_OscConfig+0x248>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fe fc0c 	bl	8001a14 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003200:	f7fe fc08 	bl	8001a14 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e167      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_OscConfig+0x240>)
 8003214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x200>
 800321e:	e01b      	b.n	8003258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_RCC_OscConfig+0x248>)
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003226:	f7fe fbf5 	bl	8001a14 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322c:	e00e      	b.n	800324c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800322e:	f7fe fbf1 	bl	8001a14 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d907      	bls.n	800324c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e150      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
 8003240:	40023800 	.word	0x40023800
 8003244:	42470000 	.word	0x42470000
 8003248:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800324e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ea      	bne.n	800322e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8097 	beq.w	8003394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b81      	ldr	r3, [pc, #516]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b7d      	ldr	r3, [pc, #500]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	4a7c      	ldr	r2, [pc, #496]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	; 0x40
 8003286:	4b7a      	ldr	r3, [pc, #488]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b77      	ldr	r3, [pc, #476]	; (8003474 <HAL_RCC_OscConfig+0x474>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d118      	bne.n	80032d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b74      	ldr	r3, [pc, #464]	; (8003474 <HAL_RCC_OscConfig+0x474>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a73      	ldr	r2, [pc, #460]	; (8003474 <HAL_RCC_OscConfig+0x474>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fe fbb1 	bl	8001a14 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b6:	f7fe fbad 	bl	8001a14 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e10c      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	4b6a      	ldr	r3, [pc, #424]	; (8003474 <HAL_RCC_OscConfig+0x474>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x2ea>
 80032dc:	4b64      	ldr	r3, [pc, #400]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	4a63      	ldr	r2, [pc, #396]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6713      	str	r3, [r2, #112]	; 0x70
 80032e8:	e01c      	b.n	8003324 <HAL_RCC_OscConfig+0x324>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b05      	cmp	r3, #5
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x30c>
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a5e      	ldr	r2, [pc, #376]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	4b5c      	ldr	r3, [pc, #368]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a5b      	ldr	r2, [pc, #364]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
 800330a:	e00b      	b.n	8003324 <HAL_RCC_OscConfig+0x324>
 800330c:	4b58      	ldr	r3, [pc, #352]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	4a57      	ldr	r2, [pc, #348]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6713      	str	r3, [r2, #112]	; 0x70
 8003318:	4b55      	ldr	r3, [pc, #340]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	4a54      	ldr	r2, [pc, #336]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 0304 	bic.w	r3, r3, #4
 8003322:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d015      	beq.n	8003358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fe fb72 	bl	8001a14 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fe fb6e 	bl	8001a14 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0cb      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	4b49      	ldr	r3, [pc, #292]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0ee      	beq.n	8003334 <HAL_RCC_OscConfig+0x334>
 8003356:	e014      	b.n	8003382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003358:	f7fe fb5c 	bl	8001a14 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003360:	f7fe fb58 	bl	8001a14 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	; 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e0b5      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003376:	4b3e      	ldr	r3, [pc, #248]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ee      	bne.n	8003360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d105      	bne.n	8003394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003388:	4b39      	ldr	r3, [pc, #228]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	4a38      	ldr	r2, [pc, #224]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800338e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003392:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80a1 	beq.w	80034e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800339e:	4b34      	ldr	r3, [pc, #208]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d05c      	beq.n	8003464 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d141      	bne.n	8003436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b2:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_RCC_OscConfig+0x478>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe fb2c 	bl	8001a14 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fe fb28 	bl	8001a14 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e087      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d2:	4b27      	ldr	r3, [pc, #156]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	019b      	lsls	r3, r3, #6
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	085b      	lsrs	r3, r3, #1
 80033f6:	3b01      	subs	r3, #1
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	061b      	lsls	r3, r3, #24
 8003402:	491b      	ldr	r1, [pc, #108]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003408:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x478>)
 800340a:	2201      	movs	r2, #1
 800340c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340e:	f7fe fb01 	bl	8001a14 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003416:	f7fe fafd 	bl	8001a14 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e05c      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x416>
 8003434:	e054      	b.n	80034e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_RCC_OscConfig+0x478>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343c:	f7fe faea 	bl	8001a14 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003444:	f7fe fae6 	bl	8001a14 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e045      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_OscConfig+0x470>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x444>
 8003462:	e03d      	b.n	80034e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d107      	bne.n	800347c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e038      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
 8003470:	40023800 	.word	0x40023800
 8003474:	40007000 	.word	0x40007000
 8003478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_RCC_OscConfig+0x4ec>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d028      	beq.n	80034dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d121      	bne.n	80034dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d11a      	bne.n	80034dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d111      	bne.n	80034dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	3b01      	subs	r3, #1
 80034c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d107      	bne.n	80034dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d8:	429a      	cmp	r2, r3
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800

080034f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0cc      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003504:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d90c      	bls.n	800352c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b63      	ldr	r3, [pc, #396]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0b8      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d020      	beq.n	800357a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a58      	ldr	r2, [pc, #352]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800354e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a52      	ldr	r2, [pc, #328]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003568:	4b50      	ldr	r3, [pc, #320]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	494d      	ldr	r1, [pc, #308]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d044      	beq.n	8003610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d119      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e07f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ae:	4b3f      	ldr	r3, [pc, #252]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e06f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035be:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e067      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4934      	ldr	r1, [pc, #208]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e0:	f7fe fa18 	bl	8001a14 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fe fa14 	bl	8001a14 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e04f      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b2b      	ldr	r3, [pc, #172]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d20c      	bcs.n	8003638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e032      	b.n	800369e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003644:	4b19      	ldr	r3, [pc, #100]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	4916      	ldr	r1, [pc, #88]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003662:	4b12      	ldr	r3, [pc, #72]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	490e      	ldr	r1, [pc, #56]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003676:	f000 f821 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800367a:	4602      	mov	r2, r0
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	490a      	ldr	r1, [pc, #40]	; (80036b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	5ccb      	ldrb	r3, [r1, r3]
 800368a:	fa22 f303 	lsr.w	r3, r2, r3
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7fe f978 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023c00 	.word	0x40023c00
 80036ac:	40023800 	.word	0x40023800
 80036b0:	080098c4 	.word	0x080098c4
 80036b4:	20000038 	.word	0x20000038
 80036b8:	2000003c 	.word	0x2000003c

080036bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c0:	b090      	sub	sp, #64	; 0x40
 80036c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	637b      	str	r3, [r7, #52]	; 0x34
 80036c8:	2300      	movs	r3, #0
 80036ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036cc:	2300      	movs	r3, #0
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d4:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_RCC_GetSysClockFreq+0x180>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b08      	cmp	r3, #8
 80036de:	d00d      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x40>
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	f200 80a1 	bhi.w	8003828 <HAL_RCC_GetSysClockFreq+0x16c>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ee:	e09b      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_GetSysClockFreq+0x184>)
 80036f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036f4:	e09b      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036f6:	4b53      	ldr	r3, [pc, #332]	; (8003844 <HAL_RCC_GetSysClockFreq+0x188>)
 80036f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036fa:	e098      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036fc:	4b4f      	ldr	r3, [pc, #316]	; (800383c <HAL_RCC_GetSysClockFreq+0x180>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003704:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003706:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_RCC_GetSysClockFreq+0x180>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d028      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003712:	4b4a      	ldr	r3, [pc, #296]	; (800383c <HAL_RCC_GetSysClockFreq+0x180>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	2200      	movs	r2, #0
 800371a:	623b      	str	r3, [r7, #32]
 800371c:	627a      	str	r2, [r7, #36]	; 0x24
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003724:	2100      	movs	r1, #0
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_GetSysClockFreq+0x188>)
 8003728:	fb03 f201 	mul.w	r2, r3, r1
 800372c:	2300      	movs	r3, #0
 800372e:	fb00 f303 	mul.w	r3, r0, r3
 8003732:	4413      	add	r3, r2
 8003734:	4a43      	ldr	r2, [pc, #268]	; (8003844 <HAL_RCC_GetSysClockFreq+0x188>)
 8003736:	fba0 1202 	umull	r1, r2, r0, r2
 800373a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800373c:	460a      	mov	r2, r1
 800373e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003742:	4413      	add	r3, r2
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003748:	2200      	movs	r2, #0
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	61fa      	str	r2, [r7, #28]
 800374e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003752:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003756:	f7fd fa1b 	bl	8000b90 <__aeabi_uldivmod>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4613      	mov	r3, r2
 8003760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003762:	e053      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003764:	4b35      	ldr	r3, [pc, #212]	; (800383c <HAL_RCC_GetSysClockFreq+0x180>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	2200      	movs	r2, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	617a      	str	r2, [r7, #20]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003776:	f04f 0b00 	mov.w	fp, #0
 800377a:	4652      	mov	r2, sl
 800377c:	465b      	mov	r3, fp
 800377e:	f04f 0000 	mov.w	r0, #0
 8003782:	f04f 0100 	mov.w	r1, #0
 8003786:	0159      	lsls	r1, r3, #5
 8003788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800378c:	0150      	lsls	r0, r2, #5
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	ebb2 080a 	subs.w	r8, r2, sl
 8003796:	eb63 090b 	sbc.w	r9, r3, fp
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037ae:	ebb2 0408 	subs.w	r4, r2, r8
 80037b2:	eb63 0509 	sbc.w	r5, r3, r9
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	00eb      	lsls	r3, r5, #3
 80037c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037c4:	00e2      	lsls	r2, r4, #3
 80037c6:	4614      	mov	r4, r2
 80037c8:	461d      	mov	r5, r3
 80037ca:	eb14 030a 	adds.w	r3, r4, sl
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	eb45 030b 	adc.w	r3, r5, fp
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037e2:	4629      	mov	r1, r5
 80037e4:	028b      	lsls	r3, r1, #10
 80037e6:	4621      	mov	r1, r4
 80037e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ec:	4621      	mov	r1, r4
 80037ee:	028a      	lsls	r2, r1, #10
 80037f0:	4610      	mov	r0, r2
 80037f2:	4619      	mov	r1, r3
 80037f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f6:	2200      	movs	r2, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	60fa      	str	r2, [r7, #12]
 80037fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003800:	f7fd f9c6 	bl	8000b90 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4613      	mov	r3, r2
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_GetSysClockFreq+0x180>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	3301      	adds	r3, #1
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800381c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003826:	e002      	b.n	800382e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <HAL_RCC_GetSysClockFreq+0x184>)
 800382a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800382c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003830:	4618      	mov	r0, r3
 8003832:	3740      	adds	r7, #64	; 0x40
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
 8003840:	00f42400 	.word	0x00f42400
 8003844:	00b71b00 	.word	0x00b71b00

08003848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800384c:	4b03      	ldr	r3, [pc, #12]	; (800385c <HAL_RCC_GetHCLKFreq+0x14>)
 800384e:	681b      	ldr	r3, [r3, #0]
}
 8003850:	4618      	mov	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000038 	.word	0x20000038

08003860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003864:	f7ff fff0 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	0a9b      	lsrs	r3, r3, #10
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	4903      	ldr	r1, [pc, #12]	; (8003884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800387c:	4618      	mov	r0, r3
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40023800 	.word	0x40023800
 8003884:	080098d4 	.word	0x080098d4

08003888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800388c:	f7ff ffdc 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0b5b      	lsrs	r3, r3, #13
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4903      	ldr	r1, [pc, #12]	; (80038ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40023800 	.word	0x40023800
 80038ac:	080098d4 	.word	0x080098d4

080038b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07b      	b.n	80039ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d108      	bne.n	80038dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038d2:	d009      	beq.n	80038e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	61da      	str	r2, [r3, #28]
 80038da:	e005      	b.n	80038e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd fd96 	bl	8001434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003958:	431a      	orrs	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	ea42 0103 	orr.w	r1, r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	f003 0104 	and.w	r1, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f003 0210 	and.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69da      	ldr	r2, [r3, #28]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b088      	sub	sp, #32
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	603b      	str	r3, [r7, #0]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_SPI_Transmit+0x22>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e126      	b.n	8003c32 <HAL_SPI_Transmit+0x270>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039ec:	f7fe f812 	bl	8001a14 <HAL_GetTick>
 80039f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
 8003a04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a06:	e10b      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_SPI_Transmit+0x52>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a18:	e102      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a60:	d10f      	bne.n	8003a82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d007      	beq.n	8003aa0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa8:	d14b      	bne.n	8003b42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_Transmit+0xf6>
 8003ab2:	8afb      	ldrh	r3, [r7, #22]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d13e      	bne.n	8003b36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	881a      	ldrh	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	1c9a      	adds	r2, r3, #2
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003adc:	e02b      	b.n	8003b36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d112      	bne.n	8003b12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af0:	881a      	ldrh	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	1c9a      	adds	r2, r3, #2
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b10:	e011      	b.n	8003b36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b12:	f7fd ff7f 	bl	8001a14 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d803      	bhi.n	8003b2a <HAL_SPI_Transmit+0x168>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d102      	bne.n	8003b30 <HAL_SPI_Transmit+0x16e>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b34:	e074      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ce      	bne.n	8003ade <HAL_SPI_Transmit+0x11c>
 8003b40:	e04c      	b.n	8003bdc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_SPI_Transmit+0x18e>
 8003b4a:	8afb      	ldrh	r3, [r7, #22]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d140      	bne.n	8003bd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b76:	e02c      	b.n	8003bd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d113      	bne.n	8003bae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	7812      	ldrb	r2, [r2, #0]
 8003b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bac:	e011      	b.n	8003bd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bae:	f7fd ff31 	bl	8001a14 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d803      	bhi.n	8003bc6 <HAL_SPI_Transmit+0x204>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_Transmit+0x20a>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bd0:	e026      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1cd      	bne.n	8003b78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	6839      	ldr	r1, [r7, #0]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fbcb 	bl	800437c <SPI_EndRxTxTransaction>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e000      	b.n	8003c20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b088      	sub	sp, #32
 8003c3e:	af02      	add	r7, sp, #8
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c56:	d112      	bne.n	8003c7e <HAL_SPI_Receive+0x44>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10e      	bne.n	8003c7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2204      	movs	r2, #4
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f8f1 	bl	8003e5c <HAL_SPI_TransmitReceive>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	e0ea      	b.n	8003e54 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_SPI_Receive+0x52>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e0e3      	b.n	8003e54 <HAL_SPI_Receive+0x21a>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c94:	f7fd febe 	bl	8001a14 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d002      	beq.n	8003cac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003caa:	e0ca      	b.n	8003e42 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Receive+0x7e>
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cbc:	e0c1      	b.n	8003e42 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d04:	d10f      	bne.n	8003d26 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	d007      	beq.n	8003d44 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d162      	bne.n	8003e12 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d4c:	e02e      	b.n	8003dac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d115      	bne.n	8003d88 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f103 020c 	add.w	r2, r3, #12
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d68:	7812      	ldrb	r2, [r2, #0]
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d86:	e011      	b.n	8003dac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d88:	f7fd fe44 	bl	8001a14 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d803      	bhi.n	8003da0 <HAL_SPI_Receive+0x166>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	d102      	bne.n	8003da6 <HAL_SPI_Receive+0x16c>
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003daa:	e04a      	b.n	8003e42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1cb      	bne.n	8003d4e <HAL_SPI_Receive+0x114>
 8003db6:	e031      	b.n	8003e1c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d113      	bne.n	8003dee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dec:	e011      	b.n	8003e12 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dee:	f7fd fe11 	bl	8001a14 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d803      	bhi.n	8003e06 <HAL_SPI_Receive+0x1cc>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d102      	bne.n	8003e0c <HAL_SPI_Receive+0x1d2>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e10:	e017      	b.n	8003e42 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1cd      	bne.n	8003db8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	6839      	ldr	r1, [r7, #0]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fa45 	bl	80042b0 <SPI_EndRxTransaction>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
 8003e3e:	e000      	b.n	8003e42 <HAL_SPI_Receive+0x208>
  }

error :
 8003e40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08c      	sub	sp, #48	; 0x30
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x26>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e18a      	b.n	8004198 <HAL_SPI_TransmitReceive+0x33c>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e8a:	f7fd fdc3 	bl	8001a14 <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ea0:	887b      	ldrh	r3, [r7, #2]
 8003ea2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d00f      	beq.n	8003ecc <HAL_SPI_TransmitReceive+0x70>
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eb2:	d107      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x68>
 8003ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d003      	beq.n	8003ecc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003eca:	e15b      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_SPI_TransmitReceive+0x82>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SPI_TransmitReceive+0x82>
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d103      	bne.n	8003ee6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ee4:	e14e      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d003      	beq.n	8003efa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2205      	movs	r2, #5
 8003ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	887a      	ldrh	r2, [r7, #2]
 8003f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	887a      	ldrh	r2, [r7, #2]
 8003f10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	887a      	ldrh	r2, [r7, #2]
 8003f1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	887a      	ldrh	r2, [r7, #2]
 8003f22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d007      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f56:	d178      	bne.n	800404a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <HAL_SPI_TransmitReceive+0x10a>
 8003f60:	8b7b      	ldrh	r3, [r7, #26]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d166      	bne.n	8004034 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	881a      	ldrh	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	1c9a      	adds	r2, r3, #2
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	3b01      	subs	r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f8a:	e053      	b.n	8004034 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d11b      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x176>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <HAL_SPI_TransmitReceive+0x176>
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d113      	bne.n	8003fd2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	881a      	ldrh	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	1c9a      	adds	r2, r3, #2
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d119      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x1b8>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d014      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004010:	2301      	movs	r3, #1
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004014:	f7fd fcfe 	bl	8001a14 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004020:	429a      	cmp	r2, r3
 8004022:	d807      	bhi.n	8004034 <HAL_SPI_TransmitReceive+0x1d8>
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d003      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004032:	e0a7      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1a6      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x130>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1a1      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x130>
 8004048:	e07c      	b.n	8004144 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x1fc>
 8004052:	8b7b      	ldrh	r3, [r7, #26]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d16b      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	330c      	adds	r3, #12
 8004062:	7812      	ldrb	r2, [r2, #0]
 8004064:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407e:	e057      	b.n	8004130 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b02      	cmp	r3, #2
 800408c:	d11c      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x26c>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d017      	beq.n	80040c8 <HAL_SPI_TransmitReceive+0x26c>
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d114      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	7812      	ldrb	r2, [r2, #0]
 80040aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d119      	bne.n	800410a <HAL_SPI_TransmitReceive+0x2ae>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d014      	beq.n	800410a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004106:	2301      	movs	r3, #1
 8004108:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800410a:	f7fd fc83 	bl	8001a14 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004116:	429a      	cmp	r2, r3
 8004118:	d803      	bhi.n	8004122 <HAL_SPI_TransmitReceive+0x2c6>
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d102      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x2cc>
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d103      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800412e:	e029      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1a2      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x224>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d19d      	bne.n	8004080 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f917 	bl	800437c <SPI_EndRxTxTransaction>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2220      	movs	r2, #32
 800415e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004160:	e010      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800416a:	2300      	movs	r3, #0
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	e000      	b.n	8004184 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004182:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004198:	4618      	mov	r0, r3
 800419a:	3730      	adds	r7, #48	; 0x30
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041b0:	f7fd fc30 	bl	8001a14 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	4413      	add	r3, r2
 80041be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041c0:	f7fd fc28 	bl	8001a14 <HAL_GetTick>
 80041c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041c6:	4b39      	ldr	r3, [pc, #228]	; (80042ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	015b      	lsls	r3, r3, #5
 80041cc:	0d1b      	lsrs	r3, r3, #20
 80041ce:	69fa      	ldr	r2, [r7, #28]
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d6:	e054      	b.n	8004282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041de:	d050      	beq.n	8004282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041e0:	f7fd fc18 	bl	8001a14 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d902      	bls.n	80041f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d13d      	bne.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420e:	d111      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004218:	d004      	beq.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004222:	d107      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423c:	d10f      	bne.n	800425e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800425c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e017      	b.n	80042a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	3b01      	subs	r3, #1
 8004280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	429a      	cmp	r2, r3
 800429e:	d19b      	bne.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000038 	.word	0x20000038

080042b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c4:	d111      	bne.n	80042ea <SPI_EndRxTransaction+0x3a>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ce:	d004      	beq.n	80042da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d8:	d107      	bne.n	80042ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042f2:	d12a      	bne.n	800434a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fc:	d012      	beq.n	8004324 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2200      	movs	r2, #0
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff ff49 	bl	80041a0 <SPI_WaitFlagStateUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d02d      	beq.n	8004370 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e026      	b.n	8004372 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2200      	movs	r2, #0
 800432c:	2101      	movs	r1, #1
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff ff36 	bl	80041a0 <SPI_WaitFlagStateUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01a      	beq.n	8004370 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f043 0220 	orr.w	r2, r3, #32
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e013      	b.n	8004372 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	2101      	movs	r1, #1
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff ff23 	bl	80041a0 <SPI_WaitFlagStateUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e000      	b.n	8004372 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <SPI_EndRxTxTransaction+0x7c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <SPI_EndRxTxTransaction+0x80>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	0d5b      	lsrs	r3, r3, #21
 8004394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a6:	d112      	bne.n	80043ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2200      	movs	r2, #0
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff fef4 	bl	80041a0 <SPI_WaitFlagStateUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e00f      	b.n	80043ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b80      	cmp	r3, #128	; 0x80
 80043e6:	d0f2      	beq.n	80043ce <SPI_EndRxTxTransaction+0x52>
 80043e8:	e000      	b.n	80043ec <SPI_EndRxTxTransaction+0x70>
        break;
 80043ea:	bf00      	nop
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000038 	.word	0x20000038
 80043fc:	165e9f81 	.word	0x165e9f81

08004400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e041      	b.n	8004496 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd f97c 	bl	8001724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f000 fc7a 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d001      	beq.n	80044b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e04e      	b.n	8004556 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a23      	ldr	r2, [pc, #140]	; (8004564 <HAL_TIM_Base_Start_IT+0xc4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d022      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x80>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d01d      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x80>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <HAL_TIM_Base_Start_IT+0xc8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d018      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x80>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1e      	ldr	r2, [pc, #120]	; (800456c <HAL_TIM_Base_Start_IT+0xcc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x80>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_TIM_Base_Start_IT+0xd0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00e      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x80>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_TIM_Base_Start_IT+0xd4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x80>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <HAL_TIM_Base_Start_IT+0xd8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_TIM_Base_Start_IT+0x80>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a18      	ldr	r2, [pc, #96]	; (800457c <HAL_TIM_Base_Start_IT+0xdc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d111      	bne.n	8004544 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b06      	cmp	r3, #6
 8004530:	d010      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	e007      	b.n	8004554 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40010000 	.word	0x40010000
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800
 8004570:	40000c00 	.word	0x40000c00
 8004574:	40010400 	.word	0x40010400
 8004578:	40014000 	.word	0x40014000
 800457c:	40001800 	.word	0x40001800

08004580 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e041      	b.n	8004616 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f839 	bl	800461e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 fbba 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_TIM_PWM_Start+0x24>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	bf14      	ite	ne
 8004650:	2301      	movne	r3, #1
 8004652:	2300      	moveq	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	e022      	b.n	800469e <HAL_TIM_PWM_Start+0x6a>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b04      	cmp	r3, #4
 800465c:	d109      	bne.n	8004672 <HAL_TIM_PWM_Start+0x3e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b01      	cmp	r3, #1
 8004668:	bf14      	ite	ne
 800466a:	2301      	movne	r3, #1
 800466c:	2300      	moveq	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	e015      	b.n	800469e <HAL_TIM_PWM_Start+0x6a>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b08      	cmp	r3, #8
 8004676:	d109      	bne.n	800468c <HAL_TIM_PWM_Start+0x58>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b01      	cmp	r3, #1
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e008      	b.n	800469e <HAL_TIM_PWM_Start+0x6a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e07c      	b.n	80047a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_PWM_Start+0x82>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b4:	e013      	b.n	80046de <HAL_TIM_PWM_Start+0xaa>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_PWM_Start+0x92>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c4:	e00b      	b.n	80046de <HAL_TIM_PWM_Start+0xaa>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start+0xa2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d4:	e003      	b.n	80046de <HAL_TIM_PWM_Start+0xaa>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fe10 	bl	800530c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a2d      	ldr	r2, [pc, #180]	; (80047a8 <HAL_TIM_PWM_Start+0x174>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_TIM_PWM_Start+0xcc>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a2c      	ldr	r2, [pc, #176]	; (80047ac <HAL_TIM_PWM_Start+0x178>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_TIM_PWM_Start+0xd0>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <HAL_TIM_PWM_Start+0xd2>
 8004704:	2300      	movs	r3, #0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004718:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <HAL_TIM_PWM_Start+0x174>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d022      	beq.n	800476a <HAL_TIM_PWM_Start+0x136>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472c:	d01d      	beq.n	800476a <HAL_TIM_PWM_Start+0x136>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <HAL_TIM_PWM_Start+0x17c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d018      	beq.n	800476a <HAL_TIM_PWM_Start+0x136>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_TIM_PWM_Start+0x180>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d013      	beq.n	800476a <HAL_TIM_PWM_Start+0x136>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <HAL_TIM_PWM_Start+0x184>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_TIM_PWM_Start+0x136>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a16      	ldr	r2, [pc, #88]	; (80047ac <HAL_TIM_PWM_Start+0x178>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_TIM_PWM_Start+0x136>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a18      	ldr	r2, [pc, #96]	; (80047bc <HAL_TIM_PWM_Start+0x188>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_TIM_PWM_Start+0x136>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <HAL_TIM_PWM_Start+0x18c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d111      	bne.n	800478e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b06      	cmp	r3, #6
 800477a:	d010      	beq.n	800479e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	e007      	b.n	800479e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40010400 	.word	0x40010400
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40001800 	.word	0x40001800

080047c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0202 	mvn.w	r2, #2
 80047f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa77 	bl	8004cfa <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa69 	bl	8004ce6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fa7a 	bl	8004d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b04      	cmp	r3, #4
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0204 	mvn.w	r2, #4
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa4d 	bl	8004cfa <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa3f 	bl	8004ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fa50 	bl	8004d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b08      	cmp	r3, #8
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b08      	cmp	r3, #8
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0208 	mvn.w	r2, #8
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2204      	movs	r2, #4
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa23 	bl	8004cfa <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa15 	bl	8004ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fa26 	bl	8004d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0210 	mvn.w	r2, #16
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2208      	movs	r2, #8
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f9f9 	bl	8004cfa <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9eb 	bl	8004ce6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f9fc 	bl	8004d0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d10e      	bne.n	8004948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d107      	bne.n	8004948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0201 	mvn.w	r2, #1
 8004940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fc fc30 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004952:	2b80      	cmp	r3, #128	; 0x80
 8004954:	d10e      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	2b80      	cmp	r3, #128	; 0x80
 8004962:	d107      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800496c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fd78 	bl	8005464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497e:	2b40      	cmp	r3, #64	; 0x40
 8004980:	d10e      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d107      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f9c1 	bl	8004d22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b20      	cmp	r3, #32
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0220 	mvn.w	r2, #32
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fd42 	bl	8005450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e0:	2300      	movs	r3, #0
 80049e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e0ae      	b.n	8004b50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b0c      	cmp	r3, #12
 80049fe:	f200 809f 	bhi.w	8004b40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a02:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a3d 	.word	0x08004a3d
 8004a0c:	08004b41 	.word	0x08004b41
 8004a10:	08004b41 	.word	0x08004b41
 8004a14:	08004b41 	.word	0x08004b41
 8004a18:	08004a7d 	.word	0x08004a7d
 8004a1c:	08004b41 	.word	0x08004b41
 8004a20:	08004b41 	.word	0x08004b41
 8004a24:	08004b41 	.word	0x08004b41
 8004a28:	08004abf 	.word	0x08004abf
 8004a2c:	08004b41 	.word	0x08004b41
 8004a30:	08004b41 	.word	0x08004b41
 8004a34:	08004b41 	.word	0x08004b41
 8004a38:	08004aff 	.word	0x08004aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fa18 	bl	8004e78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699a      	ldr	r2, [r3, #24]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0208 	orr.w	r2, r2, #8
 8004a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0204 	bic.w	r2, r2, #4
 8004a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6999      	ldr	r1, [r3, #24]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	619a      	str	r2, [r3, #24]
      break;
 8004a7a:	e064      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fa68 	bl	8004f58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6999      	ldr	r1, [r3, #24]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	021a      	lsls	r2, r3, #8
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	619a      	str	r2, [r3, #24]
      break;
 8004abc:	e043      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fabd 	bl	8005044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0208 	orr.w	r2, r2, #8
 8004ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0204 	bic.w	r2, r2, #4
 8004ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69d9      	ldr	r1, [r3, #28]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	61da      	str	r2, [r3, #28]
      break;
 8004afc:	e023      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fb11 	bl	800512c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69d9      	ldr	r1, [r3, #28]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	021a      	lsls	r2, r3, #8
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	61da      	str	r2, [r3, #28]
      break;
 8004b3e:	e002      	b.n	8004b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	75fb      	strb	r3, [r7, #23]
      break;
 8004b44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIM_ConfigClockSource+0x1c>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0b4      	b.n	8004cde <HAL_TIM_ConfigClockSource+0x186>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bac:	d03e      	beq.n	8004c2c <HAL_TIM_ConfigClockSource+0xd4>
 8004bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb2:	f200 8087 	bhi.w	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	f000 8086 	beq.w	8004cca <HAL_TIM_ConfigClockSource+0x172>
 8004bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc2:	d87f      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc4:	2b70      	cmp	r3, #112	; 0x70
 8004bc6:	d01a      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0xa6>
 8004bc8:	2b70      	cmp	r3, #112	; 0x70
 8004bca:	d87b      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bcc:	2b60      	cmp	r3, #96	; 0x60
 8004bce:	d050      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x11a>
 8004bd0:	2b60      	cmp	r3, #96	; 0x60
 8004bd2:	d877      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd4:	2b50      	cmp	r3, #80	; 0x50
 8004bd6:	d03c      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0xfa>
 8004bd8:	2b50      	cmp	r3, #80	; 0x50
 8004bda:	d873      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	d058      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x13a>
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d86f      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b30      	cmp	r3, #48	; 0x30
 8004be6:	d064      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004be8:	2b30      	cmp	r3, #48	; 0x30
 8004bea:	d86b      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d060      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d867      	bhi.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d05c      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bf8:	2b10      	cmp	r3, #16
 8004bfa:	d05a      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004bfc:	e062      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6899      	ldr	r1, [r3, #8]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f000 fb5d 	bl	80052cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	609a      	str	r2, [r3, #8]
      break;
 8004c2a:	e04f      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	6899      	ldr	r1, [r3, #8]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f000 fb46 	bl	80052cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c4e:	609a      	str	r2, [r3, #8]
      break;
 8004c50:	e03c      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6859      	ldr	r1, [r3, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f000 faba 	bl	80051d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2150      	movs	r1, #80	; 0x50
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fb13 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004c70:	e02c      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f000 fad9 	bl	8005236 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2160      	movs	r1, #96	; 0x60
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fb03 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004c90:	e01c      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f000 fa9a 	bl	80051d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2140      	movs	r1, #64	; 0x40
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 faf3 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004cb0:	e00c      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f000 faea 	bl	8005296 <TIM_ITRx_SetConfig>
      break;
 8004cc2:	e003      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc8:	e000      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a40      	ldr	r2, [pc, #256]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d00f      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3d      	ldr	r2, [pc, #244]	; (8004e50 <TIM_Base_SetConfig+0x118>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3c      	ldr	r2, [pc, #240]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3b      	ldr	r2, [pc, #236]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3a      	ldr	r2, [pc, #232]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2f      	ldr	r2, [pc, #188]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d02b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d027      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2c      	ldr	r2, [pc, #176]	; (8004e50 <TIM_Base_SetConfig+0x118>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d023      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2b      	ldr	r2, [pc, #172]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2a      	ldr	r2, [pc, #168]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a29      	ldr	r2, [pc, #164]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d017      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <TIM_Base_SetConfig+0x128>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a27      	ldr	r2, [pc, #156]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00f      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a26      	ldr	r2, [pc, #152]	; (8004e68 <TIM_Base_SetConfig+0x130>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00b      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a25      	ldr	r2, [pc, #148]	; (8004e6c <TIM_Base_SetConfig+0x134>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <TIM_Base_SetConfig+0x138>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_Base_SetConfig+0xb2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a23      	ldr	r2, [pc, #140]	; (8004e74 <TIM_Base_SetConfig+0x13c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d108      	bne.n	8004dfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a0a      	ldr	r2, [pc, #40]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	615a      	str	r2, [r3, #20]
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40010400 	.word	0x40010400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800
 8004e6c:	40001800 	.word	0x40001800
 8004e70:	40001c00 	.word	0x40001c00
 8004e74:	40002000 	.word	0x40002000

08004e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0302 	bic.w	r3, r3, #2
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a20      	ldr	r2, [pc, #128]	; (8004f50 <TIM_OC1_SetConfig+0xd8>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d003      	beq.n	8004edc <TIM_OC1_SetConfig+0x64>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <TIM_OC1_SetConfig+0xdc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d10c      	bne.n	8004ef6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0308 	bic.w	r3, r3, #8
 8004ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 0304 	bic.w	r3, r3, #4
 8004ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a15      	ldr	r2, [pc, #84]	; (8004f50 <TIM_OC1_SetConfig+0xd8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC1_SetConfig+0x8e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a14      	ldr	r2, [pc, #80]	; (8004f54 <TIM_OC1_SetConfig+0xdc>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d111      	bne.n	8004f2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	40010000 	.word	0x40010000
 8004f54:	40010400 	.word	0x40010400

08004f58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0210 	bic.w	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0320 	bic.w	r3, r3, #32
 8004fa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a22      	ldr	r2, [pc, #136]	; (800503c <TIM_OC2_SetConfig+0xe4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC2_SetConfig+0x68>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a21      	ldr	r2, [pc, #132]	; (8005040 <TIM_OC2_SetConfig+0xe8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10d      	bne.n	8004fdc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a17      	ldr	r2, [pc, #92]	; (800503c <TIM_OC2_SetConfig+0xe4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_OC2_SetConfig+0x94>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <TIM_OC2_SetConfig+0xe8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d113      	bne.n	8005014 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000
 8005040:	40010400 	.word	0x40010400

08005044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005044:	b480      	push	{r7}
 8005046:	b087      	sub	sp, #28
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0303 	bic.w	r3, r3, #3
 800507a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800508c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a21      	ldr	r2, [pc, #132]	; (8005124 <TIM_OC3_SetConfig+0xe0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_OC3_SetConfig+0x66>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a20      	ldr	r2, [pc, #128]	; (8005128 <TIM_OC3_SetConfig+0xe4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10d      	bne.n	80050c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a16      	ldr	r2, [pc, #88]	; (8005124 <TIM_OC3_SetConfig+0xe0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_OC3_SetConfig+0x92>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <TIM_OC3_SetConfig+0xe4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d113      	bne.n	80050fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	621a      	str	r2, [r3, #32]
}
 8005118:	bf00      	nop
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40010000 	.word	0x40010000
 8005128:	40010400 	.word	0x40010400

0800512c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005162:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	031b      	lsls	r3, r3, #12
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a12      	ldr	r2, [pc, #72]	; (80051d0 <TIM_OC4_SetConfig+0xa4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC4_SetConfig+0x68>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a11      	ldr	r2, [pc, #68]	; (80051d4 <TIM_OC4_SetConfig+0xa8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d109      	bne.n	80051a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	019b      	lsls	r3, r3, #6
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40010000 	.word	0x40010000
 80051d4:	40010400 	.word	0x40010400

080051d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f023 0201 	bic.w	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 030a 	bic.w	r3, r3, #10
 8005214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005236:	b480      	push	{r7}
 8005238:	b087      	sub	sp, #28
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0210 	bic.w	r2, r3, #16
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	031b      	lsls	r3, r3, #12
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
 800529e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f043 0307 	orr.w	r3, r3, #7
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	609a      	str	r2, [r3, #8]
}
 80052c0:	bf00      	nop
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	021a      	lsls	r2, r3, #8
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	609a      	str	r2, [r3, #8]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2201      	movs	r2, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a1a      	ldr	r2, [r3, #32]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	fa01 f303 	lsl.w	r3, r1, r3
 8005344:	431a      	orrs	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
	...

08005358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800536c:	2302      	movs	r3, #2
 800536e:	e05a      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a21      	ldr	r2, [pc, #132]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d022      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d01d      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a17      	ldr	r2, [pc, #92]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a15      	ldr	r2, [pc, #84]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40010400 	.word	0x40010400
 8005448:	40014000 	.word	0x40014000
 800544c:	40001800 	.word	0x40001800

08005450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e03f      	b.n	800550a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fc f9e0 	bl	8001864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2224      	movs	r2, #36	; 0x24
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f829 	bl	8005514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695a      	ldr	r2, [r3, #20]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005518:	b0c0      	sub	sp, #256	; 0x100
 800551a:	af00      	add	r7, sp, #0
 800551c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005530:	68d9      	ldr	r1, [r3, #12]
 8005532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	ea40 0301 	orr.w	r3, r0, r1
 800553c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800553e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	431a      	orrs	r2, r3
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	431a      	orrs	r2, r3
 8005554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800556c:	f021 010c 	bic.w	r1, r1, #12
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800557a:	430b      	orrs	r3, r1
 800557c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	6999      	ldr	r1, [r3, #24]
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	ea40 0301 	orr.w	r3, r0, r1
 800559a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b8f      	ldr	r3, [pc, #572]	; (80057e0 <UART_SetConfig+0x2cc>)
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d005      	beq.n	80055b4 <UART_SetConfig+0xa0>
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b8d      	ldr	r3, [pc, #564]	; (80057e4 <UART_SetConfig+0x2d0>)
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d104      	bne.n	80055be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055b4:	f7fe f968 	bl	8003888 <HAL_RCC_GetPCLK2Freq>
 80055b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055bc:	e003      	b.n	80055c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055be:	f7fe f94f 	bl	8003860 <HAL_RCC_GetPCLK1Freq>
 80055c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d0:	f040 810c 	bne.w	80057ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	1891      	adds	r1, r2, r2
 80055ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80055ee:	415b      	adcs	r3, r3
 80055f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055f6:	4621      	mov	r1, r4
 80055f8:	eb12 0801 	adds.w	r8, r2, r1
 80055fc:	4629      	mov	r1, r5
 80055fe:	eb43 0901 	adc.w	r9, r3, r1
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800560e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005616:	4690      	mov	r8, r2
 8005618:	4699      	mov	r9, r3
 800561a:	4623      	mov	r3, r4
 800561c:	eb18 0303 	adds.w	r3, r8, r3
 8005620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005624:	462b      	mov	r3, r5
 8005626:	eb49 0303 	adc.w	r3, r9, r3
 800562a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800563a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800563e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005642:	460b      	mov	r3, r1
 8005644:	18db      	adds	r3, r3, r3
 8005646:	653b      	str	r3, [r7, #80]	; 0x50
 8005648:	4613      	mov	r3, r2
 800564a:	eb42 0303 	adc.w	r3, r2, r3
 800564e:	657b      	str	r3, [r7, #84]	; 0x54
 8005650:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005654:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005658:	f7fb fa9a 	bl	8000b90 <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4b61      	ldr	r3, [pc, #388]	; (80057e8 <UART_SetConfig+0x2d4>)
 8005662:	fba3 2302 	umull	r2, r3, r3, r2
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	011c      	lsls	r4, r3, #4
 800566a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005674:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005678:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800567c:	4642      	mov	r2, r8
 800567e:	464b      	mov	r3, r9
 8005680:	1891      	adds	r1, r2, r2
 8005682:	64b9      	str	r1, [r7, #72]	; 0x48
 8005684:	415b      	adcs	r3, r3
 8005686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005688:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800568c:	4641      	mov	r1, r8
 800568e:	eb12 0a01 	adds.w	sl, r2, r1
 8005692:	4649      	mov	r1, r9
 8005694:	eb43 0b01 	adc.w	fp, r3, r1
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056ac:	4692      	mov	sl, r2
 80056ae:	469b      	mov	fp, r3
 80056b0:	4643      	mov	r3, r8
 80056b2:	eb1a 0303 	adds.w	r3, sl, r3
 80056b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056ba:	464b      	mov	r3, r9
 80056bc:	eb4b 0303 	adc.w	r3, fp, r3
 80056c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056d8:	460b      	mov	r3, r1
 80056da:	18db      	adds	r3, r3, r3
 80056dc:	643b      	str	r3, [r7, #64]	; 0x40
 80056de:	4613      	mov	r3, r2
 80056e0:	eb42 0303 	adc.w	r3, r2, r3
 80056e4:	647b      	str	r3, [r7, #68]	; 0x44
 80056e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056ee:	f7fb fa4f 	bl	8000b90 <__aeabi_uldivmod>
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	4b3b      	ldr	r3, [pc, #236]	; (80057e8 <UART_SetConfig+0x2d4>)
 80056fa:	fba3 2301 	umull	r2, r3, r3, r1
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	2264      	movs	r2, #100	; 0x64
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	1acb      	subs	r3, r1, r3
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800570e:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <UART_SetConfig+0x2d4>)
 8005710:	fba3 2302 	umull	r2, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800571c:	441c      	add	r4, r3
 800571e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005722:	2200      	movs	r2, #0
 8005724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005728:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800572c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005730:	4642      	mov	r2, r8
 8005732:	464b      	mov	r3, r9
 8005734:	1891      	adds	r1, r2, r2
 8005736:	63b9      	str	r1, [r7, #56]	; 0x38
 8005738:	415b      	adcs	r3, r3
 800573a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005740:	4641      	mov	r1, r8
 8005742:	1851      	adds	r1, r2, r1
 8005744:	6339      	str	r1, [r7, #48]	; 0x30
 8005746:	4649      	mov	r1, r9
 8005748:	414b      	adcs	r3, r1
 800574a:	637b      	str	r3, [r7, #52]	; 0x34
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	f04f 0300 	mov.w	r3, #0
 8005754:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005758:	4659      	mov	r1, fp
 800575a:	00cb      	lsls	r3, r1, #3
 800575c:	4651      	mov	r1, sl
 800575e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005762:	4651      	mov	r1, sl
 8005764:	00ca      	lsls	r2, r1, #3
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	4603      	mov	r3, r0
 800576c:	4642      	mov	r2, r8
 800576e:	189b      	adds	r3, r3, r2
 8005770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005774:	464b      	mov	r3, r9
 8005776:	460a      	mov	r2, r1
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800578c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005790:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005794:	460b      	mov	r3, r1
 8005796:	18db      	adds	r3, r3, r3
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
 800579a:	4613      	mov	r3, r2
 800579c:	eb42 0303 	adc.w	r3, r2, r3
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057aa:	f7fb f9f1 	bl	8000b90 <__aeabi_uldivmod>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <UART_SetConfig+0x2d4>)
 80057b4:	fba3 1302 	umull	r1, r3, r3, r2
 80057b8:	095b      	lsrs	r3, r3, #5
 80057ba:	2164      	movs	r1, #100	; 0x64
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	3332      	adds	r3, #50	; 0x32
 80057c6:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <UART_SetConfig+0x2d4>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	f003 0207 	and.w	r2, r3, #7
 80057d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4422      	add	r2, r4
 80057da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057dc:	e105      	b.n	80059ea <UART_SetConfig+0x4d6>
 80057de:	bf00      	nop
 80057e0:	40011000 	.word	0x40011000
 80057e4:	40011400 	.word	0x40011400
 80057e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057fe:	4642      	mov	r2, r8
 8005800:	464b      	mov	r3, r9
 8005802:	1891      	adds	r1, r2, r2
 8005804:	6239      	str	r1, [r7, #32]
 8005806:	415b      	adcs	r3, r3
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
 800580a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800580e:	4641      	mov	r1, r8
 8005810:	1854      	adds	r4, r2, r1
 8005812:	4649      	mov	r1, r9
 8005814:	eb43 0501 	adc.w	r5, r3, r1
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	00eb      	lsls	r3, r5, #3
 8005822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005826:	00e2      	lsls	r2, r4, #3
 8005828:	4614      	mov	r4, r2
 800582a:	461d      	mov	r5, r3
 800582c:	4643      	mov	r3, r8
 800582e:	18e3      	adds	r3, r4, r3
 8005830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005834:	464b      	mov	r3, r9
 8005836:	eb45 0303 	adc.w	r3, r5, r3
 800583a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800584a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800584e:	f04f 0200 	mov.w	r2, #0
 8005852:	f04f 0300 	mov.w	r3, #0
 8005856:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800585a:	4629      	mov	r1, r5
 800585c:	008b      	lsls	r3, r1, #2
 800585e:	4621      	mov	r1, r4
 8005860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005864:	4621      	mov	r1, r4
 8005866:	008a      	lsls	r2, r1, #2
 8005868:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800586c:	f7fb f990 	bl	8000b90 <__aeabi_uldivmod>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4b60      	ldr	r3, [pc, #384]	; (80059f8 <UART_SetConfig+0x4e4>)
 8005876:	fba3 2302 	umull	r2, r3, r3, r2
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	011c      	lsls	r4, r3, #4
 800587e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005882:	2200      	movs	r2, #0
 8005884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005888:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800588c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005890:	4642      	mov	r2, r8
 8005892:	464b      	mov	r3, r9
 8005894:	1891      	adds	r1, r2, r2
 8005896:	61b9      	str	r1, [r7, #24]
 8005898:	415b      	adcs	r3, r3
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058a0:	4641      	mov	r1, r8
 80058a2:	1851      	adds	r1, r2, r1
 80058a4:	6139      	str	r1, [r7, #16]
 80058a6:	4649      	mov	r1, r9
 80058a8:	414b      	adcs	r3, r1
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b8:	4659      	mov	r1, fp
 80058ba:	00cb      	lsls	r3, r1, #3
 80058bc:	4651      	mov	r1, sl
 80058be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c2:	4651      	mov	r1, sl
 80058c4:	00ca      	lsls	r2, r1, #3
 80058c6:	4610      	mov	r0, r2
 80058c8:	4619      	mov	r1, r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	4642      	mov	r2, r8
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058d4:	464b      	mov	r3, r9
 80058d6:	460a      	mov	r2, r1
 80058d8:	eb42 0303 	adc.w	r3, r2, r3
 80058dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80058ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058f8:	4649      	mov	r1, r9
 80058fa:	008b      	lsls	r3, r1, #2
 80058fc:	4641      	mov	r1, r8
 80058fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005902:	4641      	mov	r1, r8
 8005904:	008a      	lsls	r2, r1, #2
 8005906:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800590a:	f7fb f941 	bl	8000b90 <__aeabi_uldivmod>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <UART_SetConfig+0x4e4>)
 8005914:	fba3 1302 	umull	r1, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	2164      	movs	r1, #100	; 0x64
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	3332      	adds	r3, #50	; 0x32
 8005926:	4a34      	ldr	r2, [pc, #208]	; (80059f8 <UART_SetConfig+0x4e4>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005932:	441c      	add	r4, r3
 8005934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005938:	2200      	movs	r2, #0
 800593a:	673b      	str	r3, [r7, #112]	; 0x70
 800593c:	677a      	str	r2, [r7, #116]	; 0x74
 800593e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005942:	4642      	mov	r2, r8
 8005944:	464b      	mov	r3, r9
 8005946:	1891      	adds	r1, r2, r2
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	415b      	adcs	r3, r3
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005952:	4641      	mov	r1, r8
 8005954:	1851      	adds	r1, r2, r1
 8005956:	6039      	str	r1, [r7, #0]
 8005958:	4649      	mov	r1, r9
 800595a:	414b      	adcs	r3, r1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800596a:	4659      	mov	r1, fp
 800596c:	00cb      	lsls	r3, r1, #3
 800596e:	4651      	mov	r1, sl
 8005970:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005974:	4651      	mov	r1, sl
 8005976:	00ca      	lsls	r2, r1, #3
 8005978:	4610      	mov	r0, r2
 800597a:	4619      	mov	r1, r3
 800597c:	4603      	mov	r3, r0
 800597e:	4642      	mov	r2, r8
 8005980:	189b      	adds	r3, r3, r2
 8005982:	66bb      	str	r3, [r7, #104]	; 0x68
 8005984:	464b      	mov	r3, r9
 8005986:	460a      	mov	r2, r1
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800598e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	663b      	str	r3, [r7, #96]	; 0x60
 8005998:	667a      	str	r2, [r7, #100]	; 0x64
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059a6:	4649      	mov	r1, r9
 80059a8:	008b      	lsls	r3, r1, #2
 80059aa:	4641      	mov	r1, r8
 80059ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b0:	4641      	mov	r1, r8
 80059b2:	008a      	lsls	r2, r1, #2
 80059b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059b8:	f7fb f8ea 	bl	8000b90 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <UART_SetConfig+0x4e4>)
 80059c2:	fba3 1302 	umull	r1, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2164      	movs	r1, #100	; 0x64
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	3332      	adds	r3, #50	; 0x32
 80059d4:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <UART_SetConfig+0x4e4>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	095b      	lsrs	r3, r3, #5
 80059dc:	f003 020f 	and.w	r2, r3, #15
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4422      	add	r2, r4
 80059e8:	609a      	str	r2, [r3, #8]
}
 80059ea:	bf00      	nop
 80059ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059f0:	46bd      	mov	sp, r7
 80059f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059f6:	bf00      	nop
 80059f8:	51eb851f 	.word	0x51eb851f

080059fc <low_pass_filter>:
  * @param[in]      一阶低通滤波结构体
  * @param[in]    	输入
  * @retval         滤波后数据
  */
float low_pass_filter(LOW_PASS_FILTER_Typedef *filter_type, float input)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	ed87 0a00 	vstr	s0, [r7]
	filter_type->output =
			input * filter_type->frame_period / (filter_type->filter_factor + filter_type->frame_period)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8005a0e:	edd7 7a00 	vldr	s15, [r7]
 8005a12:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	ed93 7a01 	vldr	s14, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		+	filter_type->output * filter_type->filter_factor / (filter_type->filter_factor + filter_type->frame_period);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	edd3 6a00 	vldr	s13, [r3]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a36:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005a4a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
	filter_type->output =
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	edc3 7a00 	vstr	s15, [r3]
	return filter_type->output;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	ee07 3a90 	vmov	s15, r3

}
 8005a60:	eeb0 0a67 	vmov.f32	s0, s15
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <invSqrt>:
  * @author         Guo_Hui_Lin
  * @param[in]      输入
  * @retval         输入值开方的倒数
  */
float invSqrt(float num)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfnum = 0.5f * num;
 8005a7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005a82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a86:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = num;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 8005a8e:	f107 0310 	add.w	r3, r7, #16
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i >> 1);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	105a      	asrs	r2, r3, #1
 8005a9a:	4b12      	ldr	r3, [pc, #72]	; (8005ae4 <invSqrt+0x74>)
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 8005aa0:	f107 030c 	add.w	r3, r7, #12
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfnum * y * y));
 8005aa8:	ed97 7a04 	vldr	s14, [r7, #16]
 8005aac:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ab4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005ac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005acc:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	ee07 3a90 	vmov	s15, r3
}
 8005ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	5f3759df 	.word	0x5f3759df

08005ae8 <limit_control>:
  * @param	需要限幅的变量
  * @param	限幅值
  * @retval 限幅值之内的值
  */
float limit_control(float input, float limit)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	ed87 0a01 	vstr	s0, [r7, #4]
 8005af2:	edc7 0a00 	vstr	s1, [r7]
	float limit_output = input;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60fb      	str	r3, [r7, #12]
	if(input > limit) limit_output = limit;
 8005afa:	ed97 7a01 	vldr	s14, [r7, #4]
 8005afe:	edd7 7a00 	vldr	s15, [r7]
 8005b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	dd02      	ble.n	8005b12 <limit_control+0x2a>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e010      	b.n	8005b34 <limit_control+0x4c>
	else if(input < (-1 * limit)) limit_output = (-1 * limit);
 8005b12:	edd7 7a00 	vldr	s15, [r7]
 8005b16:	eef1 7a67 	vneg.f32	s15, s15
 8005b1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b26:	d505      	bpl.n	8005b34 <limit_control+0x4c>
 8005b28:	edd7 7a00 	vldr	s15, [r7]
 8005b2c:	eef1 7a67 	vneg.f32	s15, s15
 8005b30:	edc7 7a03 	vstr	s15, [r7, #12]

	return limit_output;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	ee07 3a90 	vmov	s15, r3
}
 8005b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <BMI088_Acc_WriteReg>:
  * @param :data :要写入的数据
  * @note  :此函数是基于HAL库的HAL_SPI_Transmit()函数，使用SPI1，请确定是否已经配置完成
  * @retval:无
  */
void BMI088_Acc_WriteReg(uint8_t reg_addrr, uint8_t data)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	4603      	mov	r3, r0
 8005b50:	460a      	mov	r2, r1
 8005b52:	71fb      	strb	r3, [r7, #7]
 8005b54:	4613      	mov	r3, r2
 8005b56:	71bb      	strb	r3, [r7, #6]
	SPI_ACC_ENABLE();
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2110      	movs	r1, #16
 8005b5c:	4811      	ldr	r0, [pc, #68]	; (8005ba4 <BMI088_Acc_WriteReg+0x5c>)
 8005b5e:	f7fc fa37 	bl	8001fd0 <HAL_GPIO_WritePin>

	uint8_t pTxData = (reg_addrr & BMI088_SPI_WRITE_CODE);
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8005b6c:	f107 010f 	add.w	r1, r7, #15
 8005b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b74:	2201      	movs	r2, #1
 8005b76:	480c      	ldr	r0, [pc, #48]	; (8005ba8 <BMI088_Acc_WriteReg+0x60>)
 8005b78:	f7fd ff23 	bl	80039c2 <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005b7c:	1db9      	adds	r1, r7, #6
 8005b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b82:	2201      	movs	r2, #1
 8005b84:	4808      	ldr	r0, [pc, #32]	; (8005ba8 <BMI088_Acc_WriteReg+0x60>)
 8005b86:	f7fd ff1c 	bl	80039c2 <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_Delay(1);
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	f7fb ff4e 	bl	8001a2c <HAL_Delay>

	SPI_ACC_DISABLE();
 8005b90:	2201      	movs	r2, #1
 8005b92:	2110      	movs	r1, #16
 8005b94:	4803      	ldr	r0, [pc, #12]	; (8005ba4 <BMI088_Acc_WriteReg+0x5c>)
 8005b96:	f7fc fa1b 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40020000 	.word	0x40020000
 8005ba8:	200001dc 	.word	0x200001dc

08005bac <BMI088_Gyro_WriteReg>:
  * @param :data :要写入的数据
  * @note  :此函数是基于HAL库的HAL_SPI_Transmit()函数，使用SPI1，请确定是否已经配置完成
  * @retval:无
  */
void BMI088_Gyro_WriteReg(uint8_t reg_addrr, uint8_t data)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	460a      	mov	r2, r1
 8005bb6:	71fb      	strb	r3, [r7, #7]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	71bb      	strb	r3, [r7, #6]
	SPI_GYRO_ENABLE();
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	480f      	ldr	r0, [pc, #60]	; (8005c00 <BMI088_Gyro_WriteReg+0x54>)
 8005bc2:	f7fc fa05 	bl	8001fd0 <HAL_GPIO_WritePin>

	uint8_t pTxData = (reg_addrr & BMI088_SPI_WRITE_CODE);
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8005bd0:	f107 010f 	add.w	r1, r7, #15
 8005bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bd8:	2201      	movs	r2, #1
 8005bda:	480a      	ldr	r0, [pc, #40]	; (8005c04 <BMI088_Gyro_WriteReg+0x58>)
 8005bdc:	f7fd fef1 	bl	80039c2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005be0:	1db9      	adds	r1, r7, #6
 8005be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005be6:	2201      	movs	r2, #1
 8005be8:	4806      	ldr	r0, [pc, #24]	; (8005c04 <BMI088_Gyro_WriteReg+0x58>)
 8005bea:	f7fd feea 	bl	80039c2 <HAL_SPI_Transmit>

	SPI_GYRO_DISABLE();
 8005bee:	2201      	movs	r2, #1
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	4803      	ldr	r0, [pc, #12]	; (8005c00 <BMI088_Gyro_WriteReg+0x54>)
 8005bf4:	f7fc f9ec 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40020400 	.word	0x40020400
 8005c04:	200001dc 	.word	0x200001dc

08005c08 <BMI088_Acc_ReadReg>:
  * @param :len :读取数据的字节数
  * @note  :此函数是基于HAL库的HAL_SPI_Receive()函数，使用SPI1，请确定是否已经配置完成
  * @retval:无
  */
void BMI088_Acc_ReadReg(uint8_t reg_addrr, uint8_t *pdata, uint8_t len)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	6039      	str	r1, [r7, #0]
 8005c12:	71fb      	strb	r3, [r7, #7]
 8005c14:	4613      	mov	r3, r2
 8005c16:	71bb      	strb	r3, [r7, #6]
	SPI_ACC_ENABLE();
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2110      	movs	r1, #16
 8005c1c:	4814      	ldr	r0, [pc, #80]	; (8005c70 <BMI088_Acc_ReadReg+0x68>)
 8005c1e:	f7fc f9d7 	bl	8001fd0 <HAL_GPIO_WritePin>

	uint8_t pTxData = (reg_addrr | BMI088_SPI_READ_CODE);
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8005c2c:	f107 010f 	add.w	r1, r7, #15
 8005c30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c34:	2201      	movs	r2, #1
 8005c36:	480f      	ldr	r0, [pc, #60]	; (8005c74 <BMI088_Acc_ReadReg+0x6c>)
 8005c38:	f7fd fec3 	bl	80039c2 <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_SPI_Receive(&hspi1, &pTxData, 1, 1000);
 8005c3c:	f107 010f 	add.w	r1, r7, #15
 8005c40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c44:	2201      	movs	r2, #1
 8005c46:	480b      	ldr	r0, [pc, #44]	; (8005c74 <BMI088_Acc_ReadReg+0x6c>)
 8005c48:	f7fd fff7 	bl	8003c3a <HAL_SPI_Receive>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_RX);
	HAL_SPI_Receive(&hspi1, pdata, len, 0XFFFF);
 8005c4c:	79bb      	ldrb	r3, [r7, #6]
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	4807      	ldr	r0, [pc, #28]	; (8005c74 <BMI088_Acc_ReadReg+0x6c>)
 8005c58:	f7fd ffef 	bl	8003c3a <HAL_SPI_Receive>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_RX);

	SPI_ACC_DISABLE();
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	2110      	movs	r1, #16
 8005c60:	4803      	ldr	r0, [pc, #12]	; (8005c70 <BMI088_Acc_ReadReg+0x68>)
 8005c62:	f7fc f9b5 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40020000 	.word	0x40020000
 8005c74:	200001dc 	.word	0x200001dc

08005c78 <BMI088_Gyro_ReadReg>:
  * @param :len :读取数据的字节数
  * @note  :此函数是基于HAL库的HAL_SPI_Receive()函数，使用SPI1，请确定是否已经配置完成
  * @retval:无
  */
void BMI088_Gyro_ReadReg(uint8_t reg_addrr, uint8_t *pdata, uint8_t len)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	4603      	mov	r3, r0
 8005c80:	6039      	str	r1, [r7, #0]
 8005c82:	71fb      	strb	r3, [r7, #7]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71bb      	strb	r3, [r7, #6]
	SPI_GYRO_ENABLE();
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	4810      	ldr	r0, [pc, #64]	; (8005cd0 <BMI088_Gyro_ReadReg+0x58>)
 8005c8e:	f7fc f99f 	bl	8001fd0 <HAL_GPIO_WritePin>

	uint8_t pTxData = (reg_addrr | BMI088_SPI_READ_CODE);
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8005c9c:	f107 010f 	add.w	r1, r7, #15
 8005ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	480b      	ldr	r0, [pc, #44]	; (8005cd4 <BMI088_Gyro_ReadReg+0x5c>)
 8005ca8:	f7fd fe8b 	bl	80039c2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pdata, len, 1000);
 8005cac:	79bb      	ldrb	r3, [r7, #6]
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	4807      	ldr	r0, [pc, #28]	; (8005cd4 <BMI088_Gyro_ReadReg+0x5c>)
 8005cb8:	f7fd ffbf 	bl	8003c3a <HAL_SPI_Receive>

	SPI_GYRO_DISABLE();
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	4803      	ldr	r0, [pc, #12]	; (8005cd0 <BMI088_Gyro_ReadReg+0x58>)
 8005cc2:	f7fc f985 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40020400 	.word	0x40020400
 8005cd4:	200001dc 	.word	0x200001dc

08005cd8 <BMI088_Acc_ReadID>:
  * @param :无
  * @note  :此函数使用了宏定义的寄存器地址，请确保已有BMI088_reg.h文件并已包含在此C文件中
  * @retval:BMI088加速度计的ID值
  */
uint8_t BMI088_Acc_ReadID(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
	uint8_t ID;
	BMI088_Acc_ReadReg(BMI088_ACC_CHIP_ID, &ID, 1);
 8005cde:	1dfb      	adds	r3, r7, #7
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	2000      	movs	r0, #0
 8005ce6:	f7ff ff8f 	bl	8005c08 <BMI088_Acc_ReadReg>

	return ID;
 8005cea:	79fb      	ldrb	r3, [r7, #7]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <BMI088_Gyro_ReadID>:
  * @param :无
  * @note  :此函数使用了宏定义的寄存器地址，请确保已有BMI088_reg.h文件并已包含在此C文件中
  * @retval:BMI088陀螺仪的ID值
  */
uint8_t BMI088_Gyro_ReadID(void)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
	uint8_t ID;
	BMI088_Gyro_ReadReg(BMI088_GYRO_CHIP_ID, &ID, 1);
 8005cfa:	1dfb      	adds	r3, r7, #7
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	4619      	mov	r1, r3
 8005d00:	2000      	movs	r0, #0
 8005d02:	f7ff ffb9 	bl	8005c78 <BMI088_Gyro_ReadReg>

	return ID;
 8005d06:	79fb      	ldrb	r3, [r7, #7]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <BMI088_Get_Temperature>:
  * @param :无
  * @note  :此函数使用前需初始化BMI088加速度计,否则读取的温度值将不会变
  * @retval:BMI088芯片环境温度，单位摄氏度(°C),精度0.125°C,此值每1.28秒更新一次
  */
float BMI088_Get_Temperature(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
	uint8_t buff[2];
	uint16_t temp_uint11;
	int16_t temp_int11;

	BMI088_Acc_ReadReg(BMI088_TEMP_M, buff, 2);
 8005d16:	463b      	mov	r3, r7
 8005d18:	2202      	movs	r2, #2
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	2022      	movs	r0, #34	; 0x22
 8005d1e:	f7ff ff73 	bl	8005c08 <BMI088_Acc_ReadReg>
	temp_uint11 = (buff[0] << 3) + (buff[1] >> 5);
 8005d22:	783b      	ldrb	r3, [r7, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	787b      	ldrb	r3, [r7, #1]
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	4413      	add	r3, r2
 8005d34:	80bb      	strh	r3, [r7, #4]
	if (temp_uint11 > 1023)
 8005d36:	88bb      	ldrh	r3, [r7, #4]
 8005d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3c:	d305      	bcc.n	8005d4a <BMI088_Get_Temperature+0x3a>
	{
		temp_int11 = temp_uint11 - 2048;
 8005d3e:	88bb      	ldrh	r3, [r7, #4]
 8005d40:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	80fb      	strh	r3, [r7, #6]
 8005d48:	e001      	b.n	8005d4e <BMI088_Get_Temperature+0x3e>
	}
	else
	{
		temp_int11 = temp_uint11;
 8005d4a:	88bb      	ldrh	r3, [r7, #4]
 8005d4c:	80fb      	strh	r3, [r7, #6]
	}

	return (temp_int11 * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET);
 8005d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d5a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8005d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d62:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8005d66:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8005d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <BMI088_Getdata_Acc_raw>:
  * @note  :1、此函数使用前需初始化BMI088加速度计，否则读取的加速度将不会变
  * 		2、accdata[]数组中数据依次为X轴加速度，Y轴加速度,Z轴加速度
  * @retval:无
  */
void BMI088_Getdata_Acc_raw(int16_t *accdata)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	BMI088_Acc_ReadReg(BMI088_ACCEL_XOUT_L, buff, 6);
 8005d7c:	f107 0308 	add.w	r3, r7, #8
 8005d80:	2206      	movs	r2, #6
 8005d82:	4619      	mov	r1, r3
 8005d84:	2012      	movs	r0, #18
 8005d86:	f7ff ff3f 	bl	8005c08 <BMI088_Acc_ReadReg>
	accdata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 8005d8a:	7a7b      	ldrb	r3, [r7, #9]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	b21a      	sxth	r2, r3
 8005d90:	7a3b      	ldrb	r3, [r7, #8]
 8005d92:	b21b      	sxth	r3, r3
 8005d94:	4313      	orrs	r3, r2
 8005d96:	b21a      	sxth	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	801a      	strh	r2, [r3, #0]
	accdata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 8005d9c:	7afb      	ldrb	r3, [r7, #11]
 8005d9e:	021b      	lsls	r3, r3, #8
 8005da0:	b219      	sxth	r1, r3
 8005da2:	7abb      	ldrb	r3, [r7, #10]
 8005da4:	b21a      	sxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3302      	adds	r3, #2
 8005daa:	430a      	orrs	r2, r1
 8005dac:	b212      	sxth	r2, r2
 8005dae:	801a      	strh	r2, [r3, #0]
	accdata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 8005db0:	7b7b      	ldrb	r3, [r7, #13]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	b219      	sxth	r1, r3
 8005db6:	7b3b      	ldrb	r3, [r7, #12]
 8005db8:	b21a      	sxth	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	3304      	adds	r3, #4
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	b212      	sxth	r2, r2
 8005dc2:	801a      	strh	r2, [r3, #0]
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <BMI088_Getdata_Gyro_raw>:
  * @note  :1、此函数使用前需初始化BMI088陀螺仪，否则读取的加速度将不会变
  * 		2、accdata[]数组中数据依次为X轴角速度，Y轴角速度,Z轴角速度
  * @retval:无
  */
void BMI088_Getdata_Gyro_raw(int16_t *gyrodata)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	BMI088_Gyro_ReadReg(BMI088_GYRO_X_L, buff, 6);
 8005dd4:	f107 0308 	add.w	r3, r7, #8
 8005dd8:	2206      	movs	r2, #6
 8005dda:	4619      	mov	r1, r3
 8005ddc:	2002      	movs	r0, #2
 8005dde:	f7ff ff4b 	bl	8005c78 <BMI088_Gyro_ReadReg>
	gyrodata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 8005de2:	7a7b      	ldrb	r3, [r7, #9]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	b21a      	sxth	r2, r3
 8005de8:	7a3b      	ldrb	r3, [r7, #8]
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	4313      	orrs	r3, r2
 8005dee:	b21a      	sxth	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	801a      	strh	r2, [r3, #0]
	gyrodata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 8005df4:	7afb      	ldrb	r3, [r7, #11]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	b219      	sxth	r1, r3
 8005dfa:	7abb      	ldrb	r3, [r7, #10]
 8005dfc:	b21a      	sxth	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3302      	adds	r3, #2
 8005e02:	430a      	orrs	r2, r1
 8005e04:	b212      	sxth	r2, r2
 8005e06:	801a      	strh	r2, [r3, #0]
	gyrodata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 8005e08:	7b7b      	ldrb	r3, [r7, #13]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	b219      	sxth	r1, r3
 8005e0e:	7b3b      	ldrb	r3, [r7, #12]
 8005e10:	b21a      	sxth	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3304      	adds	r3, #4
 8005e16:	430a      	orrs	r2, r1
 8005e18:	b212      	sxth	r2, r2
 8005e1a:	801a      	strh	r2, [r3, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <BMI088_Acc_Init>:
  * @param :无
  * @note  :IMU_ERROR_Typedef 类型在Algorithms_Lib.h中被定义
  * @retval:IMU_ERROR_Typedef 类型变量，根据此变量可确定加速度计初始化是否成功
  */
IMU_ERROR_Typedef BMI088_Acc_Init(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t ID;
	uint8_t BMI088_Acc_Init_Data[6][2] = {
 8005e2a:	4a21      	ldr	r2, [pc, #132]	; (8005eb0 <BMI088_Acc_Init+0x8c>)
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			{BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE},//加速度正常工作模式
			{BMI088_ACC_RANGE, BMI088_ACC_RANGE_3G},//设置范围为+-3G
			{BMI088_ACC_CONF, BMI088_ACC_NORMAL | BMI088_ACC_800_HZ | BMI088_ACC_CONF_MUST_Set},//设置采样， 输出频率1600HZ
			{BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_OFF},
	};
    ID = BMI088_Acc_ReadID();
 8005e34:	f7ff ff50 	bl	8005cd8 <BMI088_Acc_ReadID>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	73bb      	strb	r3, [r7, #14]
    if (ID != BMI088_ACC_CHIP_ID_VALUE)
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	2b1e      	cmp	r3, #30
 8005e40:	d006      	beq.n	8005e50 <BMI088_Acc_Init+0x2c>
    {
    	HAL_Delay(100);
 8005e42:	2064      	movs	r0, #100	; 0x64
 8005e44:	f7fb fdf2 	bl	8001a2c <HAL_Delay>
    	ID = BMI088_Acc_ReadID();
 8005e48:	f7ff ff46 	bl	8005cd8 <BMI088_Acc_ReadID>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	73bb      	strb	r3, [r7, #14]
    }

    if (ID == BMI088_ACC_CHIP_ID_VALUE)
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	2b1e      	cmp	r3, #30
 8005e54:	d126      	bne.n	8005ea4 <BMI088_Acc_Init+0x80>
    {
    	BMI088_Acc_WriteReg(BMI088_Acc_Init_Data[0][0], BMI088_Acc_Init_Data[0][1]);
 8005e56:	783b      	ldrb	r3, [r7, #0]
 8005e58:	787a      	ldrb	r2, [r7, #1]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fe73 	bl	8005b48 <BMI088_Acc_WriteReg>
    	HAL_Delay(50);
 8005e62:	2032      	movs	r0, #50	; 0x32
 8005e64:	f7fb fde2 	bl	8001a2c <HAL_Delay>


    	for(i = 1; i < 5; i++)
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
 8005e6c:	e015      	b.n	8005e9a <BMI088_Acc_Init+0x76>
    	{
    		BMI088_Acc_WriteReg(BMI088_Acc_Init_Data[i][0], BMI088_Acc_Init_Data[i][1]);
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	3310      	adds	r3, #16
 8005e74:	443b      	add	r3, r7
 8005e76:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	3310      	adds	r3, #16
 8005e80:	443b      	add	r3, r7
 8005e82:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7ff fe5d 	bl	8005b48 <BMI088_Acc_WriteReg>
    		HAL_Delay(5);
 8005e8e:	2005      	movs	r0, #5
 8005e90:	f7fb fdcc 	bl	8001a2c <HAL_Delay>
    	for(i = 1; i < 5; i++)
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	3301      	adds	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d9e6      	bls.n	8005e6e <BMI088_Acc_Init+0x4a>
    	}


    	return IMU_NO_ERROR;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e000      	b.n	8005ea6 <BMI088_Acc_Init+0x82>
    }
    else
    {
    	return IMU_ACC_ERROR;
 8005ea4:	2301      	movs	r3, #1
    }

}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	080098b0 	.word	0x080098b0

08005eb4 <BMI088_Gyro_Init>:
  * @param :无
  * @note  :IMU_ERROR_Typedef 类型在Algorithms_Lib.h中被定义
  * @retval:IMU_ERROR_Typedef 类型变量，根据此变量可确定陀螺仪初始化是否成功
  */
IMU_ERROR_Typedef BMI088_Gyro_Init(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t ID;
	uint8_t BMI088_Gyro_Init_Data[4][2] = {
 8005eba:	4a21      	ldr	r2, [pc, #132]	; (8005f40 <BMI088_Gyro_Init+0x8c>)
 8005ebc:	1d3b      	adds	r3, r7, #4
 8005ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ec2:	e883 0003 	stmia.w	r3, {r0, r1}
			{BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE},//软件复位，清空所用寄存器
			{BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE},//陀螺仪正常工作模式
			{BMI088_GYRO_RANGE, BMI088_GYRO_2000},//设置范围为+-2000°/s
			{BMI088_GYRO_BANDWIDTH, BMI088_GYRO_2000_532_HZ},//2000Hz输出频率，532Hz滤波器带宽
	};
    ID = BMI088_Gyro_ReadID();
 8005ec6:	f7ff ff15 	bl	8005cf4 <BMI088_Gyro_ReadID>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73bb      	strb	r3, [r7, #14]
    if (ID != BMI088_GYRO_CHIP_ID_VALUE)
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	2b0f      	cmp	r3, #15
 8005ed2:	d006      	beq.n	8005ee2 <BMI088_Gyro_Init+0x2e>
    {
    	HAL_Delay(100);
 8005ed4:	2064      	movs	r0, #100	; 0x64
 8005ed6:	f7fb fda9 	bl	8001a2c <HAL_Delay>
    	ID = BMI088_Gyro_ReadID();
 8005eda:	f7ff ff0b 	bl	8005cf4 <BMI088_Gyro_ReadID>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	73bb      	strb	r3, [r7, #14]
    }

    if (ID == BMI088_GYRO_CHIP_ID_VALUE)
 8005ee2:	7bbb      	ldrb	r3, [r7, #14]
 8005ee4:	2b0f      	cmp	r3, #15
 8005ee6:	d126      	bne.n	8005f36 <BMI088_Gyro_Init+0x82>
    {
    	BMI088_Gyro_WriteReg(BMI088_Gyro_Init_Data[0][0], BMI088_Gyro_Init_Data[0][1]);
 8005ee8:	793b      	ldrb	r3, [r7, #4]
 8005eea:	797a      	ldrb	r2, [r7, #5]
 8005eec:	4611      	mov	r1, r2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff fe5c 	bl	8005bac <BMI088_Gyro_WriteReg>
    	HAL_Delay(50);
 8005ef4:	2032      	movs	r0, #50	; 0x32
 8005ef6:	f7fb fd99 	bl	8001a2c <HAL_Delay>
    	for(i = 1; i < 4; i++)
 8005efa:	2301      	movs	r3, #1
 8005efc:	73fb      	strb	r3, [r7, #15]
 8005efe:	e015      	b.n	8005f2c <BMI088_Gyro_Init+0x78>
    	{
    		BMI088_Gyro_WriteReg(BMI088_Gyro_Init_Data[i][0], BMI088_Gyro_Init_Data[i][1]);
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	3310      	adds	r3, #16
 8005f06:	443b      	add	r3, r7
 8005f08:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	3310      	adds	r3, #16
 8005f12:	443b      	add	r3, r7
 8005f14:	f813 3c0b 	ldrb.w	r3, [r3, #-11]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	4610      	mov	r0, r2
 8005f1c:	f7ff fe46 	bl	8005bac <BMI088_Gyro_WriteReg>
    		HAL_Delay(5);
 8005f20:	2005      	movs	r0, #5
 8005f22:	f7fb fd83 	bl	8001a2c <HAL_Delay>
    	for(i = 1; i < 4; i++)
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d9e6      	bls.n	8005f00 <BMI088_Gyro_Init+0x4c>
    	}

    	return IMU_NO_ERROR;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e000      	b.n	8005f38 <BMI088_Gyro_Init+0x84>
    }
    else
    {
    	return IMU_GYRO_ERROR;
 8005f36:	2302      	movs	r3, #2
    }
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	080098bc 	.word	0x080098bc

08005f44 <BMI088_Init>:
  * @param :无
  * @note  :IMU_ERROR_Typedef 类型在Algorithms_Lib.h中被定义
  * @retval:IMU_ERROR_Typedef 类型变量，根据此变量可确定陀螺仪和加速度计初始化是否成功
  */
IMU_ERROR_Typedef BMI088_Init(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
	IMU_ERROR_Typedef bmi088_error = IMU_NO_ERROR;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	71fb      	strb	r3, [r7, #7]
	bmi088_error |= BMI088_Gyro_Init();
 8005f4e:	f7ff ffb1 	bl	8005eb4 <BMI088_Gyro_Init>
 8005f52:	4603      	mov	r3, r0
 8005f54:	461a      	mov	r2, r3
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	71fb      	strb	r3, [r7, #7]
	bmi088_error |= BMI088_Acc_Init();
 8005f5c:	f7ff ff62 	bl	8005e24 <BMI088_Acc_Init>
 8005f60:	4603      	mov	r3, r0
 8005f62:	461a      	mov	r2, r3
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]

	return bmi088_error;
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <IMU_Init>:
  * @param :无
  * @note  :无
  * @retval:IMU_ERROR_Typedef类型数据，可用于定位发生错误位置
  */
IMU_ERROR_Typedef IMU_Init(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
	IMU_ERROR_Typedef imu_error = IMU_NO_ERROR;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	71fb      	strb	r3, [r7, #7]
	imu_error |= BMI088_Init();
 8005f7e:	f7ff ffe1 	bl	8005f44 <BMI088_Init>
 8005f82:	4603      	mov	r3, r0
 8005f84:	461a      	mov	r2, r3
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	71fb      	strb	r3, [r7, #7]
	imu_error |= IST8310_Init();
 8005f8c:	f001 f804 	bl	8006f98 <IST8310_Init>
 8005f90:	4603      	mov	r3, r0
 8005f92:	461a      	mov	r2, r3
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	71fb      	strb	r3, [r7, #7]

	return imu_error;
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <IMU_Start>:
  * @param :无
  * @note  :此函数会在温度达到稳定状态后，完成陀螺仪漂移计算和四元数初始化，并开启姿态解算标志位
  * @retval:无
  */
void IMU_Start(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
#ifdef DEBUG_IMU

	Get_Gyro_StaticError();
 8005fa8:	f000 fbbc 	bl	8006724 <Get_Gyro_StaticError>
	Init_Quaternions();
 8005fac:	f000 fcae 	bl	800690c <Init_Quaternions>
	IMU_START_STATUS = Status_OK;
 8005fb0:	4b02      	ldr	r3, [pc, #8]	; (8005fbc <IMU_Start+0x18>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
			IMU_START_STATUS = Status_OK;
		}
	}
#endif

}
 8005fb6:	bf00      	nop
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	2000030c 	.word	0x2000030c

08005fc0 <IMU_Data_Fusion_Mahony>:
  * @note  :此函数包括陀螺仪的温度补偿和姿态解算两部分，
  *         IMU_START_STATUS标志位开启前姿态解算部分不会运作
  * @retval:无
  */
void IMU_Data_Fusion_Mahony(float dt, float *roll, float *pitch, float *yaw)
{
 8005fc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005fc4:	b09a      	sub	sp, #104	; 0x68
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	ed87 0a03 	vstr	s0, [r7, #12]
 8005fcc:	60b8      	str	r0, [r7, #8]
 8005fce:	6079      	str	r1, [r7, #4]
 8005fd0:	603a      	str	r2, [r7, #0]
	//更新数据
	IMU_GetData();
 8005fd2:	f000 ff17 	bl	8006e04 <IMU_GetData>
	IMU_Temperature_Compensate();
 8005fd6:	f000 ff47 	bl	8006e68 <IMU_Temperature_Compensate>
	//IMU软件初始化未完成，跳过姿态解算部分
	if (IMU_START_STATUS == Status_ERROR)
 8005fda:	4be6      	ldr	r3, [pc, #920]	; (8006374 <IMU_Data_Fusion_Mahony+0x3b4>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 838a 	beq.w	80066f8 <IMU_Data_Fusion_Mahony+0x738>
	float gx_rad, gy_rad, gz_rad;

	//四元数转余弦矩阵中间变量
	float g1, g2, g3, g4, g5;

	float ax = g_imu_struct.ax_raw;
 8005fe4:	4be4      	ldr	r3, [pc, #912]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8005fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float ay = g_imu_struct.ay_raw;
 8005ff6:	4be0      	ldr	r3, [pc, #896]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8005ff8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005ffc:	ee07 3a90 	vmov	s15, r3
 8006000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006004:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float az = g_imu_struct.az_raw;
 8006008:	4bdb      	ldr	r3, [pc, #876]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 800600a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006016:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	float q0 = g_imu_struct.quat.q0;
 800601a:	4bd7      	ldr	r3, [pc, #860]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601e:	65bb      	str	r3, [r7, #88]	; 0x58
	float q1 = g_imu_struct.quat.q1;
 8006020:	4bd5      	ldr	r3, [pc, #852]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8006022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006024:	657b      	str	r3, [r7, #84]	; 0x54
	float q2 = g_imu_struct.quat.q2;
 8006026:	4bd4      	ldr	r3, [pc, #848]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8006028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602a:	653b      	str	r3, [r7, #80]	; 0x50
	float q3 = g_imu_struct.quat.q3;
 800602c:	4bd2      	ldr	r3, [pc, #840]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	64fb      	str	r3, [r7, #76]	; 0x4c

	//零漂补偿并弧度制陀螺仪数据
	gx_rad = (g_imu_struct.gx_raw - g_imu_struct.gx_offset) * BMI088_GYRO_2000_SEN;
 8006032:	4bd1      	ldr	r3, [pc, #836]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8006034:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006038:	ee07 3a90 	vmov	s15, r3
 800603c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006040:	4bcd      	ldr	r3, [pc, #820]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8006042:	edd3 7a05 	vldr	s15, [r3, #20]
 8006046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800604a:	ed9f 7acc 	vldr	s14, [pc, #816]	; 800637c <IMU_Data_Fusion_Mahony+0x3bc>
 800604e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006052:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	gy_rad = (g_imu_struct.gy_raw - g_imu_struct.gy_offset) * BMI088_GYRO_2000_SEN;
 8006056:	4bc8      	ldr	r3, [pc, #800]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8006058:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800605c:	ee07 3a90 	vmov	s15, r3
 8006060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006064:	4bc4      	ldr	r3, [pc, #784]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8006066:	edd3 7a06 	vldr	s15, [r3, #24]
 800606a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800606e:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 800637c <IMU_Data_Fusion_Mahony+0x3bc>
 8006072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006076:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	gz_rad = (g_imu_struct.gz_raw - g_imu_struct.gz_offset) * BMI088_GYRO_2000_SEN;
 800607a:	4bbf      	ldr	r3, [pc, #764]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 800607c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006088:	4bbb      	ldr	r3, [pc, #748]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 800608a:	edd3 7a07 	vldr	s15, [r3, #28]
 800608e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006092:	ed9f 7aba 	vldr	s14, [pc, #744]	; 800637c <IMU_Data_Fusion_Mahony+0x3bc>
 8006096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800609a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	//加速度归一化
	norm_temp = invSqrt(ax * ax + ay * ay + az * az);
 800609e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80060a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80060a6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80060aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80060ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060b2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80060b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80060ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060be:	eeb0 0a67 	vmov.f32	s0, s15
 80060c2:	f7ff fcd5 	bl	8005a70 <invSqrt>
 80060c6:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	ax = ax * norm_temp;
 80060ca:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80060ce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	ay = ay * norm_temp;
 80060da:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80060de:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80060e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	az = az * norm_temp;
 80060ea:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80060ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80060f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060f6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	//用陀螺仪的数据计算物体坐标系重力分量
    vx = 2.0f * (q1 * q3 - q0 * q2);
 80060fa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80060fe:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006106:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800610a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800610e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006112:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006116:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800611a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    vy = 2.0f * (q0 * q1 + q2 * q3);
 800611e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006122:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800612a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800612e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800613a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800613e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    vz = q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3;
 8006142:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006146:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800614a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800614e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006156:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800615a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800615e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006162:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006166:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800616a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800616e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);

#endif

    //求姿态误差
	ex = (ay * vz - az * vy);
 8006172:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8006176:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800617a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800617e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8006182:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800618a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800618e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	ey = (az * vx - ax * vz);
 8006192:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8006196:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800619a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800619e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80061a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80061a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	ez = (ax * vy - ay * vx);
 80061b2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80061b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80061ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061be:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80061c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80061c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	//误差积分
	ex_sum += g_imu_struct.Ki * dt * ex;
 80061d2:	4b69      	ldr	r3, [pc, #420]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 80061d4:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80061d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80061dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80061e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061e8:	4b65      	ldr	r3, [pc, #404]	; (8006380 <IMU_Data_Fusion_Mahony+0x3c0>)
 80061ea:	edd3 7a00 	vldr	s15, [r3]
 80061ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061f2:	4b63      	ldr	r3, [pc, #396]	; (8006380 <IMU_Data_Fusion_Mahony+0x3c0>)
 80061f4:	edc3 7a00 	vstr	s15, [r3]
	ey_sum += g_imu_struct.Ki * dt * ey;
 80061f8:	4b5f      	ldr	r3, [pc, #380]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 80061fa:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80061fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8006202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006206:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800620a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800620e:	4b5d      	ldr	r3, [pc, #372]	; (8006384 <IMU_Data_Fusion_Mahony+0x3c4>)
 8006210:	edd3 7a00 	vldr	s15, [r3]
 8006214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006218:	4b5a      	ldr	r3, [pc, #360]	; (8006384 <IMU_Data_Fusion_Mahony+0x3c4>)
 800621a:	edc3 7a00 	vstr	s15, [r3]
	ez_sum += g_imu_struct.Ki * dt * ez;
 800621e:	4b56      	ldr	r3, [pc, #344]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8006220:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8006224:	edd7 7a03 	vldr	s15, [r7, #12]
 8006228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800622c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006234:	4b54      	ldr	r3, [pc, #336]	; (8006388 <IMU_Data_Fusion_Mahony+0x3c8>)
 8006236:	edd3 7a00 	vldr	s15, [r3]
 800623a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800623e:	4b52      	ldr	r3, [pc, #328]	; (8006388 <IMU_Data_Fusion_Mahony+0x3c8>)
 8006240:	edc3 7a00 	vstr	s15, [r3]

	//互补滤波
	gx_rad = gx_rad + g_imu_struct.Kp * ex + ex_sum;
 8006244:	4b4c      	ldr	r3, [pc, #304]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 8006246:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800624a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800624e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006252:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800625a:	4b49      	ldr	r3, [pc, #292]	; (8006380 <IMU_Data_Fusion_Mahony+0x3c0>)
 800625c:	edd3 7a00 	vldr	s15, [r3]
 8006260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006264:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	gy_rad = gy_rad + g_imu_struct.Kp * ey + ey_sum;
 8006268:	4b43      	ldr	r3, [pc, #268]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 800626a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800626e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006276:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800627a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800627e:	4b41      	ldr	r3, [pc, #260]	; (8006384 <IMU_Data_Fusion_Mahony+0x3c4>)
 8006280:	edd3 7a00 	vldr	s15, [r3]
 8006284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006288:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	gz_rad = gz_rad + g_imu_struct.Kp * ez + ez_sum;
 800628c:	4b3a      	ldr	r3, [pc, #232]	; (8006378 <IMU_Data_Fusion_Mahony+0x3b8>)
 800628e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8006292:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800629a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800629e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062a2:	4b39      	ldr	r3, [pc, #228]	; (8006388 <IMU_Data_Fusion_Mahony+0x3c8>)
 80062a4:	edd3 7a00 	vldr	s15, [r3]
 80062a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
//    now_update = HAL_GetTick(); //ms
//    halfperiod = ((float)(now_update - last_update) / 2000.0f);
//    last_update = now_update;

	//解四元数微分方程更新四元数
	q0 = q0 +  0.5 * dt *(-gx_rad * q1 - gy_rad * q2 - gz_rad * q3);
 80062b0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80062b2:	f7fa f8ed 	bl	8000490 <__aeabi_f2d>
 80062b6:	4604      	mov	r4, r0
 80062b8:	460d      	mov	r5, r1
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f7fa f8e8 	bl	8000490 <__aeabi_f2d>
 80062c0:	f04f 0200 	mov.w	r2, #0
 80062c4:	4b31      	ldr	r3, [pc, #196]	; (800638c <IMU_Data_Fusion_Mahony+0x3cc>)
 80062c6:	f7fa f93b 	bl	8000540 <__aeabi_dmul>
 80062ca:	4602      	mov	r2, r0
 80062cc:	460b      	mov	r3, r1
 80062ce:	4690      	mov	r8, r2
 80062d0:	4699      	mov	r9, r3
 80062d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80062d6:	eeb1 7a67 	vneg.f32	s14, s15
 80062da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80062de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062e2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80062e6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80062ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062f2:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80062f6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80062fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006302:	ee17 0a90 	vmov	r0, s15
 8006306:	f7fa f8c3 	bl	8000490 <__aeabi_f2d>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4640      	mov	r0, r8
 8006310:	4649      	mov	r1, r9
 8006312:	f7fa f915 	bl	8000540 <__aeabi_dmul>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7f9 ff59 	bl	80001d4 <__adddf3>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	f7fa fbe1 	bl	8000af0 <__aeabi_d2f>
 800632e:	4603      	mov	r3, r0
 8006330:	65bb      	str	r3, [r7, #88]	; 0x58
	q1 = q1 +  0.5 * dt *( gx_rad * q0 - gy_rad * q3 + gz_rad * q2);
 8006332:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006334:	f7fa f8ac 	bl	8000490 <__aeabi_f2d>
 8006338:	4604      	mov	r4, r0
 800633a:	460d      	mov	r5, r1
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7fa f8a7 	bl	8000490 <__aeabi_f2d>
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	4b11      	ldr	r3, [pc, #68]	; (800638c <IMU_Data_Fusion_Mahony+0x3cc>)
 8006348:	f7fa f8fa 	bl	8000540 <__aeabi_dmul>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4690      	mov	r8, r2
 8006352:	4699      	mov	r9, r3
 8006354:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8006358:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800635c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006360:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8006364:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800636c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006370:	e00e      	b.n	8006390 <IMU_Data_Fusion_Mahony+0x3d0>
 8006372:	bf00      	nop
 8006374:	2000030c 	.word	0x2000030c
 8006378:	20000044 	.word	0x20000044
 800637c:	3a8ba058 	.word	0x3a8ba058
 8006380:	20000310 	.word	0x20000310
 8006384:	20000314 	.word	0x20000314
 8006388:	20000318 	.word	0x20000318
 800638c:	3fe00000 	.word	0x3fe00000
 8006390:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8006394:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800639c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a0:	ee17 0a90 	vmov	r0, s15
 80063a4:	f7fa f874 	bl	8000490 <__aeabi_f2d>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4640      	mov	r0, r8
 80063ae:	4649      	mov	r1, r9
 80063b0:	f7fa f8c6 	bl	8000540 <__aeabi_dmul>
 80063b4:	4602      	mov	r2, r0
 80063b6:	460b      	mov	r3, r1
 80063b8:	4620      	mov	r0, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	f7f9 ff0a 	bl	80001d4 <__adddf3>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4610      	mov	r0, r2
 80063c6:	4619      	mov	r1, r3
 80063c8:	f7fa fb92 	bl	8000af0 <__aeabi_d2f>
 80063cc:	4603      	mov	r3, r0
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
	q2 = q2 +  0.5 * dt *( gx_rad * q3 + gy_rad * q0 - gz_rad * q1);
 80063d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80063d2:	f7fa f85d 	bl	8000490 <__aeabi_f2d>
 80063d6:	4604      	mov	r4, r0
 80063d8:	460d      	mov	r5, r1
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f7fa f858 	bl	8000490 <__aeabi_f2d>
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	4bca      	ldr	r3, [pc, #808]	; (8006710 <IMU_Data_Fusion_Mahony+0x750>)
 80063e6:	f7fa f8ab 	bl	8000540 <__aeabi_dmul>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4690      	mov	r8, r2
 80063f0:	4699      	mov	r9, r3
 80063f2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80063f6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80063fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063fe:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8006402:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800640a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800640e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8006412:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800641a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800641e:	ee17 0a90 	vmov	r0, s15
 8006422:	f7fa f835 	bl	8000490 <__aeabi_f2d>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4640      	mov	r0, r8
 800642c:	4649      	mov	r1, r9
 800642e:	f7fa f887 	bl	8000540 <__aeabi_dmul>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4620      	mov	r0, r4
 8006438:	4629      	mov	r1, r5
 800643a:	f7f9 fecb 	bl	80001d4 <__adddf3>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4610      	mov	r0, r2
 8006444:	4619      	mov	r1, r3
 8006446:	f7fa fb53 	bl	8000af0 <__aeabi_d2f>
 800644a:	4603      	mov	r3, r0
 800644c:	653b      	str	r3, [r7, #80]	; 0x50
	q3 = q3 +  0.5 * dt *(-gx_rad * q2 + gy_rad * q1 + gz_rad * q0);
 800644e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006450:	f7fa f81e 	bl	8000490 <__aeabi_f2d>
 8006454:	4604      	mov	r4, r0
 8006456:	460d      	mov	r5, r1
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f7fa f819 	bl	8000490 <__aeabi_f2d>
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	4bab      	ldr	r3, [pc, #684]	; (8006710 <IMU_Data_Fusion_Mahony+0x750>)
 8006464:	f7fa f86c 	bl	8000540 <__aeabi_dmul>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4690      	mov	r8, r2
 800646e:	4699      	mov	r9, r3
 8006470:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8006474:	eeb1 7a67 	vneg.f32	s14, s15
 8006478:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800647c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006480:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8006484:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006488:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800648c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006490:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8006494:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800649c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064a0:	ee17 0a90 	vmov	r0, s15
 80064a4:	f7f9 fff4 	bl	8000490 <__aeabi_f2d>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4640      	mov	r0, r8
 80064ae:	4649      	mov	r1, r9
 80064b0:	f7fa f846 	bl	8000540 <__aeabi_dmul>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4620      	mov	r0, r4
 80064ba:	4629      	mov	r1, r5
 80064bc:	f7f9 fe8a 	bl	80001d4 <__adddf3>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	f7fa fb12 	bl	8000af0 <__aeabi_d2f>
 80064cc:	4603      	mov	r3, r0
 80064ce:	64fb      	str	r3, [r7, #76]	; 0x4c

	//四元数归一化
	norm_temp = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80064d0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80064d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80064d8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80064dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80064e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064f0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80064f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006500:	f7ff fab6 	bl	8005a70 <invSqrt>
 8006504:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	q0 = q0 * norm_temp;
 8006508:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800650c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006514:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	q1 = q1 * norm_temp;
 8006518:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800651c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006524:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	q2 = q2 * norm_temp;
 8006528:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800652c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006534:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	q3 = q3 * norm_temp;
 8006538:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800653c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006544:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

	//将更新后的四元数存到到g_imu_struct中
	g_imu_struct.quat.q0 = q0;
 8006548:	4a72      	ldr	r2, [pc, #456]	; (8006714 <IMU_Data_Fusion_Mahony+0x754>)
 800654a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800654c:	6353      	str	r3, [r2, #52]	; 0x34
	g_imu_struct.quat.q1 = q1;
 800654e:	4a71      	ldr	r2, [pc, #452]	; (8006714 <IMU_Data_Fusion_Mahony+0x754>)
 8006550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006552:	6393      	str	r3, [r2, #56]	; 0x38
	g_imu_struct.quat.q2 = q2;
 8006554:	4a6f      	ldr	r2, [pc, #444]	; (8006714 <IMU_Data_Fusion_Mahony+0x754>)
 8006556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006558:	63d3      	str	r3, [r2, #60]	; 0x3c
	g_imu_struct.quat.q3 = q3;
 800655a:	4a6e      	ldr	r2, [pc, #440]	; (8006714 <IMU_Data_Fusion_Mahony+0x754>)
 800655c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655e:	6413      	str	r3, [r2, #64]	; 0x40

	//四元数转旋转矩阵
	g1 = 2.0f * (q1 * q3 - q0 * q2);
 8006560:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8006564:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800656c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8006570:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800657c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006580:	edc7 7a08 	vstr	s15, [r7, #32]
	g2 = 2.0f * (q0 * q1 + q2 * q3);
 8006584:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8006588:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800658c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006590:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8006594:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800659c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80065a4:	edc7 7a07 	vstr	s15, [r7, #28]
	g3 = q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3;
 80065a8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80065ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80065b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80065b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80065c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065c8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80065cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065d4:	edc7 7a06 	vstr	s15, [r7, #24]
	g4 = 2.0f * (q1 * q2 + q0 * q3);
 80065d8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80065dc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80065e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065e4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80065e8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80065ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80065f8:	edc7 7a05 	vstr	s15, [r7, #20]
	g5 = q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3;
 80065fc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006600:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006604:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006608:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800660c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006610:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006614:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800661c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8006620:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006628:	edc7 7a04 	vstr	s15, [r7, #16]

	*roll = low_pass_filter(&s_lpf_struct[0], atan2f(g2,g3) * 57.29578);
 800662c:	edd7 0a06 	vldr	s1, [r7, #24]
 8006630:	ed97 0a07 	vldr	s0, [r7, #28]
 8006634:	f001 f8b0 	bl	8007798 <atan2f>
 8006638:	ee10 3a10 	vmov	r3, s0
 800663c:	4618      	mov	r0, r3
 800663e:	f7f9 ff27 	bl	8000490 <__aeabi_f2d>
 8006642:	a331      	add	r3, pc, #196	; (adr r3, 8006708 <IMU_Data_Fusion_Mahony+0x748>)
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f7f9 ff7a 	bl	8000540 <__aeabi_dmul>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	f7fa fa4c 	bl	8000af0 <__aeabi_d2f>
 8006658:	4603      	mov	r3, r0
 800665a:	ee00 3a10 	vmov	s0, r3
 800665e:	482e      	ldr	r0, [pc, #184]	; (8006718 <IMU_Data_Fusion_Mahony+0x758>)
 8006660:	f7ff f9cc 	bl	80059fc <low_pass_filter>
 8006664:	eef0 7a40 	vmov.f32	s15, s0
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	edc3 7a00 	vstr	s15, [r3]
	*pitch = low_pass_filter(&s_lpf_struct[1], -asinf(g1) * 57.29578);
 800666e:	ed97 0a08 	vldr	s0, [r7, #32]
 8006672:	f001 f865 	bl	8007740 <asinf>
 8006676:	eef0 7a40 	vmov.f32	s15, s0
 800667a:	eef1 7a67 	vneg.f32	s15, s15
 800667e:	ee17 3a90 	vmov	r3, s15
 8006682:	4618      	mov	r0, r3
 8006684:	f7f9 ff04 	bl	8000490 <__aeabi_f2d>
 8006688:	a31f      	add	r3, pc, #124	; (adr r3, 8006708 <IMU_Data_Fusion_Mahony+0x748>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f7f9 ff57 	bl	8000540 <__aeabi_dmul>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	4610      	mov	r0, r2
 8006698:	4619      	mov	r1, r3
 800669a:	f7fa fa29 	bl	8000af0 <__aeabi_d2f>
 800669e:	4603      	mov	r3, r0
 80066a0:	ee00 3a10 	vmov	s0, r3
 80066a4:	481d      	ldr	r0, [pc, #116]	; (800671c <IMU_Data_Fusion_Mahony+0x75c>)
 80066a6:	f7ff f9a9 	bl	80059fc <low_pass_filter>
 80066aa:	eef0 7a40 	vmov.f32	s15, s0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	edc3 7a00 	vstr	s15, [r3]
	*yaw = low_pass_filter(&s_lpf_struct[2], atan2f(g4, g5) * 57.29578);
 80066b4:	edd7 0a04 	vldr	s1, [r7, #16]
 80066b8:	ed97 0a05 	vldr	s0, [r7, #20]
 80066bc:	f001 f86c 	bl	8007798 <atan2f>
 80066c0:	ee10 3a10 	vmov	r3, s0
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7f9 fee3 	bl	8000490 <__aeabi_f2d>
 80066ca:	a30f      	add	r3, pc, #60	; (adr r3, 8006708 <IMU_Data_Fusion_Mahony+0x748>)
 80066cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d0:	f7f9 ff36 	bl	8000540 <__aeabi_dmul>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	4610      	mov	r0, r2
 80066da:	4619      	mov	r1, r3
 80066dc:	f7fa fa08 	bl	8000af0 <__aeabi_d2f>
 80066e0:	4603      	mov	r3, r0
 80066e2:	ee00 3a10 	vmov	s0, r3
 80066e6:	480e      	ldr	r0, [pc, #56]	; (8006720 <IMU_Data_Fusion_Mahony+0x760>)
 80066e8:	f7ff f988 	bl	80059fc <low_pass_filter>
 80066ec:	eef0 7a40 	vmov.f32	s15, s0
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	edc3 7a00 	vstr	s15, [r3]
 80066f6:	e000      	b.n	80066fa <IMU_Data_Fusion_Mahony+0x73a>
		return;
 80066f8:	bf00      	nop
}
 80066fa:	3768      	adds	r7, #104	; 0x68
 80066fc:	46bd      	mov	sp, r7
 80066fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006702:	bf00      	nop
 8006704:	f3af 8000 	nop.w
 8006708:	1e7967cb 	.word	0x1e7967cb
 800670c:	404ca5dc 	.word	0x404ca5dc
 8006710:	3fe00000 	.word	0x3fe00000
 8006714:	20000044 	.word	0x20000044
 8006718:	20000090 	.word	0x20000090
 800671c:	2000009c 	.word	0x2000009c
 8006720:	200000a8 	.word	0x200000a8

08006724 <Get_Gyro_StaticError>:
  * @param :无
  * @note  :无
  * @retval:无
  */
static void Get_Gyro_StaticError(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
	const uint16_t SAMPLES_COUNT = 2000;
 800672a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800672e:	81bb      	strh	r3, [r7, #12]
	int16_t gyro_error_data[3];
	uint16_t i;
	for (i = 0; i < SAMPLES_COUNT; i++)
 8006730:	2300      	movs	r3, #0
 8006732:	81fb      	strh	r3, [r7, #14]
 8006734:	e033      	b.n	800679e <Get_Gyro_StaticError+0x7a>
	{
		BMI088_Getdata_Gyro_raw(gyro_error_data);
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fb47 	bl	8005dcc <BMI088_Getdata_Gyro_raw>
		g_imu_struct.gx_offset += gyro_error_data[0];
 800673e:	4b2f      	ldr	r3, [pc, #188]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 8006740:	ed93 7a05 	vldr	s14, [r3, #20]
 8006744:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006748:	ee07 3a90 	vmov	s15, r3
 800674c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006754:	4b29      	ldr	r3, [pc, #164]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 8006756:	edc3 7a05 	vstr	s15, [r3, #20]
		g_imu_struct.gy_offset += gyro_error_data[1];
 800675a:	4b28      	ldr	r3, [pc, #160]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 800675c:	ed93 7a06 	vldr	s14, [r3, #24]
 8006760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800676c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006770:	4b22      	ldr	r3, [pc, #136]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 8006772:	edc3 7a06 	vstr	s15, [r3, #24]
		g_imu_struct.gz_offset += gyro_error_data[2];
 8006776:	4b21      	ldr	r3, [pc, #132]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 8006778:	ed93 7a07 	vldr	s14, [r3, #28]
 800677c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006780:	ee07 3a90 	vmov	s15, r3
 8006784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800678c:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 800678e:	edc3 7a07 	vstr	s15, [r3, #28]
		HAL_Delay(1);
 8006792:	2001      	movs	r0, #1
 8006794:	f7fb f94a 	bl	8001a2c <HAL_Delay>
	for (i = 0; i < SAMPLES_COUNT; i++)
 8006798:	89fb      	ldrh	r3, [r7, #14]
 800679a:	3301      	adds	r3, #1
 800679c:	81fb      	strh	r3, [r7, #14]
 800679e:	89fa      	ldrh	r2, [r7, #14]
 80067a0:	89bb      	ldrh	r3, [r7, #12]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d3c7      	bcc.n	8006736 <Get_Gyro_StaticError+0x12>
	}
	 g_imu_struct.gx_offset /=  SAMPLES_COUNT;
 80067a6:	4b15      	ldr	r3, [pc, #84]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 80067a8:	edd3 6a05 	vldr	s13, [r3, #20]
 80067ac:	89bb      	ldrh	r3, [r7, #12]
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 80067bc:	edc3 7a05 	vstr	s15, [r3, #20]
	 g_imu_struct.gy_offset /=  SAMPLES_COUNT;
 80067c0:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 80067c2:	edd3 6a06 	vldr	s13, [r3, #24]
 80067c6:	89bb      	ldrh	r3, [r7, #12]
 80067c8:	ee07 3a90 	vmov	s15, r3
 80067cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 80067d6:	edc3 7a06 	vstr	s15, [r3, #24]
	 g_imu_struct.gz_offset /=  SAMPLES_COUNT;
 80067da:	4b08      	ldr	r3, [pc, #32]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 80067dc:	edd3 6a07 	vldr	s13, [r3, #28]
 80067e0:	89bb      	ldrh	r3, [r7, #12]
 80067e2:	ee07 3a90 	vmov	s15, r3
 80067e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ee:	4b03      	ldr	r3, [pc, #12]	; (80067fc <Get_Gyro_StaticError+0xd8>)
 80067f0:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80067f4:	bf00      	nop
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000044 	.word	0x20000044

08006800 <IMU_GetInit_Angle>:
  * @param :无
  * @note  :无
  * @retval:无
  */
static void IMU_GetInit_Angle(void)
{
 8006800:	b5b0      	push	{r4, r5, r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0

	float temp = 0;
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	61fb      	str	r3, [r7, #28]

	float roll = 0;
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
	float pitch = 0;
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	617b      	str	r3, [r7, #20]
	float yaw = 0;
 8006818:	f04f 0300 	mov.w	r3, #0
 800681c:	613b      	str	r3, [r7, #16]

	IMU_GetData();
 800681e:	f000 faf1 	bl	8006e04 <IMU_GetData>

	float ax = g_imu_struct.ax_raw;
 8006822:	4b39      	ldr	r3, [pc, #228]	; (8006908 <IMU_GetInit_Angle+0x108>)
 8006824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006828:	ee07 3a90 	vmov	s15, r3
 800682c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006830:	edc7 7a03 	vstr	s15, [r7, #12]
	float ay = g_imu_struct.ay_raw;
 8006834:	4b34      	ldr	r3, [pc, #208]	; (8006908 <IMU_GetInit_Angle+0x108>)
 8006836:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006842:	edc7 7a02 	vstr	s15, [r7, #8]
	float az = g_imu_struct.az_raw;
 8006846:	4b30      	ldr	r3, [pc, #192]	; (8006908 <IMU_GetInit_Angle+0x108>)
 8006848:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800684c:	ee07 3a90 	vmov	s15, r3
 8006850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006854:	edc7 7a01 	vstr	s15, [r7, #4]


	temp = 1 / invSqrt( pow(ay, 2) + pow(az, 2));
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	f7f9 fe19 	bl	8000490 <__aeabi_f2d>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8006900 <IMU_GetInit_Angle+0x100>
 8006866:	ec43 2b10 	vmov	d0, r2, r3
 800686a:	f000 fef9 	bl	8007660 <pow>
 800686e:	ec55 4b10 	vmov	r4, r5, d0
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7f9 fe0c 	bl	8000490 <__aeabi_f2d>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8006900 <IMU_GetInit_Angle+0x100>
 8006880:	ec43 2b10 	vmov	d0, r2, r3
 8006884:	f000 feec 	bl	8007660 <pow>
 8006888:	ec53 2b10 	vmov	r2, r3, d0
 800688c:	4620      	mov	r0, r4
 800688e:	4629      	mov	r1, r5
 8006890:	f7f9 fca0 	bl	80001d4 <__adddf3>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4610      	mov	r0, r2
 800689a:	4619      	mov	r1, r3
 800689c:	f7fa f928 	bl	8000af0 <__aeabi_d2f>
 80068a0:	4603      	mov	r3, r0
 80068a2:	ee00 3a10 	vmov	s0, r3
 80068a6:	f7ff f8e3 	bl	8005a70 <invSqrt>
 80068aa:	eeb0 7a40 	vmov.f32	s14, s0
 80068ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b6:	edc7 7a07 	vstr	s15, [r7, #28]
	roll = atan2f(ay, az);
 80068ba:	edd7 0a01 	vldr	s1, [r7, #4]
 80068be:	ed97 0a02 	vldr	s0, [r7, #8]
 80068c2:	f000 ff69 	bl	8007798 <atan2f>
 80068c6:	ed87 0a06 	vstr	s0, [r7, #24]
	pitch = -atan2f(ax, temp);
 80068ca:	edd7 0a07 	vldr	s1, [r7, #28]
 80068ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80068d2:	f000 ff61 	bl	8007798 <atan2f>
 80068d6:	eef0 7a40 	vmov.f32	s15, s0
 80068da:	eef1 7a67 	vneg.f32	s15, s15
 80068de:	edc7 7a05 	vstr	s15, [r7, #20]

	mx = mx * cos(roll) + my * sin(roll) * sin(pitch) + mz * sin(roll) * cos(pitch);
	my = my * cos(pitch) - mz * sin(pitch);
	yaw = -atan2f(my, mx);//此处为负结果才是正确的
#endif
	g_imu_struct.roll = roll;
 80068e2:	4a09      	ldr	r2, [pc, #36]	; (8006908 <IMU_GetInit_Angle+0x108>)
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	6293      	str	r3, [r2, #40]	; 0x28
    g_imu_struct.pitch = pitch;
 80068e8:	4a07      	ldr	r2, [pc, #28]	; (8006908 <IMU_GetInit_Angle+0x108>)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    g_imu_struct.yaw = yaw;
 80068ee:	4a06      	ldr	r2, [pc, #24]	; (8006908 <IMU_GetInit_Angle+0x108>)
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80068f4:	bf00      	nop
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bdb0      	pop	{r4, r5, r7, pc}
 80068fc:	f3af 8000 	nop.w
 8006900:	00000000 	.word	0x00000000
 8006904:	40000000 	.word	0x40000000
 8006908:	20000044 	.word	0x20000044

0800690c <Init_Quaternions>:
  * @param :无
  * @note  :无
  * @retval:无
  */
static void Init_Quaternions(void)
{
 800690c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006910:	b084      	sub	sp, #16
 8006912:	af00      	add	r7, sp, #0
	float roll = 0;
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
	float pitch = 0;
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	60bb      	str	r3, [r7, #8]
	float yaw = 0;
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	607b      	str	r3, [r7, #4]

	IMU_GetInit_Angle();
 8006926:	f7ff ff6b 	bl	8006800 <IMU_GetInit_Angle>

	roll = g_imu_struct.roll;
 800692a:	4bf7      	ldr	r3, [pc, #988]	; (8006d08 <Init_Quaternions+0x3fc>)
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	60fb      	str	r3, [r7, #12]
	pitch = g_imu_struct.pitch;
 8006930:	4bf5      	ldr	r3, [pc, #980]	; (8006d08 <Init_Quaternions+0x3fc>)
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	60bb      	str	r3, [r7, #8]
#ifdef IST8310_IN_WORK
	yaw = g_imu_struct.yaw;
#endif

	g_imu_struct.quat.q0 = cos(roll / 2)*cos(pitch / 2)*cos(yaw / 2) + sin(roll / 2)*sin(pitch / 2)*sin(yaw / 2);
 8006936:	edd7 7a03 	vldr	s15, [r7, #12]
 800693a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800693e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006942:	ee16 0a90 	vmov	r0, s13
 8006946:	f7f9 fda3 	bl	8000490 <__aeabi_f2d>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	ec43 2b10 	vmov	d0, r2, r3
 8006952:	f000 fdd9 	bl	8007508 <cos>
 8006956:	ec55 4b10 	vmov	r4, r5, d0
 800695a:	edd7 7a02 	vldr	s15, [r7, #8]
 800695e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006962:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006966:	ee16 0a90 	vmov	r0, s13
 800696a:	f7f9 fd91 	bl	8000490 <__aeabi_f2d>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	ec43 2b10 	vmov	d0, r2, r3
 8006976:	f000 fdc7 	bl	8007508 <cos>
 800697a:	ec53 2b10 	vmov	r2, r3, d0
 800697e:	4620      	mov	r0, r4
 8006980:	4629      	mov	r1, r5
 8006982:	f7f9 fddd 	bl	8000540 <__aeabi_dmul>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	4614      	mov	r4, r2
 800698c:	461d      	mov	r5, r3
 800698e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006992:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006996:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800699a:	ee16 0a90 	vmov	r0, s13
 800699e:	f7f9 fd77 	bl	8000490 <__aeabi_f2d>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	ec43 2b10 	vmov	d0, r2, r3
 80069aa:	f000 fdad 	bl	8007508 <cos>
 80069ae:	ec53 2b10 	vmov	r2, r3, d0
 80069b2:	4620      	mov	r0, r4
 80069b4:	4629      	mov	r1, r5
 80069b6:	f7f9 fdc3 	bl	8000540 <__aeabi_dmul>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4614      	mov	r4, r2
 80069c0:	461d      	mov	r5, r3
 80069c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80069c6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80069ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069ce:	ee16 0a90 	vmov	r0, s13
 80069d2:	f7f9 fd5d 	bl	8000490 <__aeabi_f2d>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	ec43 2b10 	vmov	d0, r2, r3
 80069de:	f000 fde7 	bl	80075b0 <sin>
 80069e2:	ec59 8b10 	vmov	r8, r9, d0
 80069e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80069ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80069ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069f2:	ee16 0a90 	vmov	r0, s13
 80069f6:	f7f9 fd4b 	bl	8000490 <__aeabi_f2d>
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	ec43 2b10 	vmov	d0, r2, r3
 8006a02:	f000 fdd5 	bl	80075b0 <sin>
 8006a06:	ec53 2b10 	vmov	r2, r3, d0
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	f7f9 fd97 	bl	8000540 <__aeabi_dmul>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	4690      	mov	r8, r2
 8006a18:	4699      	mov	r9, r3
 8006a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a1e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a26:	ee16 0a90 	vmov	r0, s13
 8006a2a:	f7f9 fd31 	bl	8000490 <__aeabi_f2d>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	ec43 2b10 	vmov	d0, r2, r3
 8006a36:	f000 fdbb 	bl	80075b0 <sin>
 8006a3a:	ec53 2b10 	vmov	r2, r3, d0
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	f7f9 fd7d 	bl	8000540 <__aeabi_dmul>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f7f9 fbc1 	bl	80001d4 <__adddf3>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f7fa f849 	bl	8000af0 <__aeabi_d2f>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	4aa9      	ldr	r2, [pc, #676]	; (8006d08 <Init_Quaternions+0x3fc>)
 8006a62:	6353      	str	r3, [r2, #52]	; 0x34
	g_imu_struct.quat.q1 = sin(roll / 2)*cos(pitch / 2)*cos(yaw / 2) - cos(roll / 2)*sin(pitch / 2)*sin(yaw / 2);
 8006a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a70:	ee16 0a90 	vmov	r0, s13
 8006a74:	f7f9 fd0c 	bl	8000490 <__aeabi_f2d>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	ec43 2b10 	vmov	d0, r2, r3
 8006a80:	f000 fd96 	bl	80075b0 <sin>
 8006a84:	ec55 4b10 	vmov	r4, r5, d0
 8006a88:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a94:	ee16 0a90 	vmov	r0, s13
 8006a98:	f7f9 fcfa 	bl	8000490 <__aeabi_f2d>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	ec43 2b10 	vmov	d0, r2, r3
 8006aa4:	f000 fd30 	bl	8007508 <cos>
 8006aa8:	ec53 2b10 	vmov	r2, r3, d0
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	f7f9 fd46 	bl	8000540 <__aeabi_dmul>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	461d      	mov	r5, r3
 8006abc:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ac0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006ac4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ac8:	ee16 0a90 	vmov	r0, s13
 8006acc:	f7f9 fce0 	bl	8000490 <__aeabi_f2d>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	ec43 2b10 	vmov	d0, r2, r3
 8006ad8:	f000 fd16 	bl	8007508 <cos>
 8006adc:	ec53 2b10 	vmov	r2, r3, d0
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	f7f9 fd2c 	bl	8000540 <__aeabi_dmul>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	460b      	mov	r3, r1
 8006aec:	4614      	mov	r4, r2
 8006aee:	461d      	mov	r5, r3
 8006af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006af4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006af8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006afc:	ee16 0a90 	vmov	r0, s13
 8006b00:	f7f9 fcc6 	bl	8000490 <__aeabi_f2d>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	ec43 2b10 	vmov	d0, r2, r3
 8006b0c:	f000 fcfc 	bl	8007508 <cos>
 8006b10:	ec59 8b10 	vmov	r8, r9, d0
 8006b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b18:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b20:	ee16 0a90 	vmov	r0, s13
 8006b24:	f7f9 fcb4 	bl	8000490 <__aeabi_f2d>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	ec43 2b10 	vmov	d0, r2, r3
 8006b30:	f000 fd3e 	bl	80075b0 <sin>
 8006b34:	ec53 2b10 	vmov	r2, r3, d0
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f7f9 fd00 	bl	8000540 <__aeabi_dmul>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4690      	mov	r8, r2
 8006b46:	4699      	mov	r9, r3
 8006b48:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b54:	ee16 0a90 	vmov	r0, s13
 8006b58:	f7f9 fc9a 	bl	8000490 <__aeabi_f2d>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	ec43 2b10 	vmov	d0, r2, r3
 8006b64:	f000 fd24 	bl	80075b0 <sin>
 8006b68:	ec53 2b10 	vmov	r2, r3, d0
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	4649      	mov	r1, r9
 8006b70:	f7f9 fce6 	bl	8000540 <__aeabi_dmul>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f7f9 fb28 	bl	80001d0 <__aeabi_dsub>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4610      	mov	r0, r2
 8006b86:	4619      	mov	r1, r3
 8006b88:	f7f9 ffb2 	bl	8000af0 <__aeabi_d2f>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	4a5e      	ldr	r2, [pc, #376]	; (8006d08 <Init_Quaternions+0x3fc>)
 8006b90:	6393      	str	r3, [r2, #56]	; 0x38
	g_imu_struct.quat.q2 = cos(roll / 2)*sin(pitch / 2)*cos(yaw / 2) + sin(roll / 2)*cos(pitch / 2)*sin(yaw / 2);
 8006b92:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b9e:	ee16 0a90 	vmov	r0, s13
 8006ba2:	f7f9 fc75 	bl	8000490 <__aeabi_f2d>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	ec43 2b10 	vmov	d0, r2, r3
 8006bae:	f000 fcab 	bl	8007508 <cos>
 8006bb2:	ec55 4b10 	vmov	r4, r5, d0
 8006bb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006bba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006bbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006bc2:	ee16 0a90 	vmov	r0, s13
 8006bc6:	f7f9 fc63 	bl	8000490 <__aeabi_f2d>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	ec43 2b10 	vmov	d0, r2, r3
 8006bd2:	f000 fced 	bl	80075b0 <sin>
 8006bd6:	ec53 2b10 	vmov	r2, r3, d0
 8006bda:	4620      	mov	r0, r4
 8006bdc:	4629      	mov	r1, r5
 8006bde:	f7f9 fcaf 	bl	8000540 <__aeabi_dmul>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4614      	mov	r4, r2
 8006be8:	461d      	mov	r5, r3
 8006bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006bf2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006bf6:	ee16 0a90 	vmov	r0, s13
 8006bfa:	f7f9 fc49 	bl	8000490 <__aeabi_f2d>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	ec43 2b10 	vmov	d0, r2, r3
 8006c06:	f000 fc7f 	bl	8007508 <cos>
 8006c0a:	ec53 2b10 	vmov	r2, r3, d0
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4629      	mov	r1, r5
 8006c12:	f7f9 fc95 	bl	8000540 <__aeabi_dmul>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	461d      	mov	r5, r3
 8006c1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c22:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c26:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c2a:	ee16 0a90 	vmov	r0, s13
 8006c2e:	f7f9 fc2f 	bl	8000490 <__aeabi_f2d>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	ec43 2b10 	vmov	d0, r2, r3
 8006c3a:	f000 fcb9 	bl	80075b0 <sin>
 8006c3e:	ec59 8b10 	vmov	r8, r9, d0
 8006c42:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c46:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c4e:	ee16 0a90 	vmov	r0, s13
 8006c52:	f7f9 fc1d 	bl	8000490 <__aeabi_f2d>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	ec43 2b10 	vmov	d0, r2, r3
 8006c5e:	f000 fc53 	bl	8007508 <cos>
 8006c62:	ec53 2b10 	vmov	r2, r3, d0
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 fc69 	bl	8000540 <__aeabi_dmul>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4690      	mov	r8, r2
 8006c74:	4699      	mov	r9, r3
 8006c76:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c7a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c82:	ee16 0a90 	vmov	r0, s13
 8006c86:	f7f9 fc03 	bl	8000490 <__aeabi_f2d>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	ec43 2b10 	vmov	d0, r2, r3
 8006c92:	f000 fc8d 	bl	80075b0 <sin>
 8006c96:	ec53 2b10 	vmov	r2, r3, d0
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f7f9 fc4f 	bl	8000540 <__aeabi_dmul>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f7f9 fa93 	bl	80001d4 <__adddf3>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4610      	mov	r0, r2
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	f7f9 ff1b 	bl	8000af0 <__aeabi_d2f>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4a12      	ldr	r2, [pc, #72]	; (8006d08 <Init_Quaternions+0x3fc>)
 8006cbe:	63d3      	str	r3, [r2, #60]	; 0x3c
	g_imu_struct.quat.q3 = cos(roll / 2)*cos(pitch / 2)*sin(yaw / 2) + sin(roll / 2)*sin(pitch / 2)*cos(yaw / 2);
 8006cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cc4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006cc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ccc:	ee16 0a90 	vmov	r0, s13
 8006cd0:	f7f9 fbde 	bl	8000490 <__aeabi_f2d>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	ec43 2b10 	vmov	d0, r2, r3
 8006cdc:	f000 fc14 	bl	8007508 <cos>
 8006ce0:	ec55 4b10 	vmov	r4, r5, d0
 8006ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ce8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006cec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006cf0:	ee16 0a90 	vmov	r0, s13
 8006cf4:	f7f9 fbcc 	bl	8000490 <__aeabi_f2d>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	ec43 2b10 	vmov	d0, r2, r3
 8006d00:	f000 fc02 	bl	8007508 <cos>
 8006d04:	e002      	b.n	8006d0c <Init_Quaternions+0x400>
 8006d06:	bf00      	nop
 8006d08:	20000044 	.word	0x20000044
 8006d0c:	ec53 2b10 	vmov	r2, r3, d0
 8006d10:	4620      	mov	r0, r4
 8006d12:	4629      	mov	r1, r5
 8006d14:	f7f9 fc14 	bl	8000540 <__aeabi_dmul>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4614      	mov	r4, r2
 8006d1e:	461d      	mov	r5, r3
 8006d20:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d24:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006d28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d2c:	ee16 0a90 	vmov	r0, s13
 8006d30:	f7f9 fbae 	bl	8000490 <__aeabi_f2d>
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	ec43 2b10 	vmov	d0, r2, r3
 8006d3c:	f000 fc38 	bl	80075b0 <sin>
 8006d40:	ec53 2b10 	vmov	r2, r3, d0
 8006d44:	4620      	mov	r0, r4
 8006d46:	4629      	mov	r1, r5
 8006d48:	f7f9 fbfa 	bl	8000540 <__aeabi_dmul>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4614      	mov	r4, r2
 8006d52:	461d      	mov	r5, r3
 8006d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d58:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006d5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d60:	ee16 0a90 	vmov	r0, s13
 8006d64:	f7f9 fb94 	bl	8000490 <__aeabi_f2d>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	ec43 2b10 	vmov	d0, r2, r3
 8006d70:	f000 fc1e 	bl	80075b0 <sin>
 8006d74:	ec59 8b10 	vmov	r8, r9, d0
 8006d78:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d7c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006d80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d84:	ee16 0a90 	vmov	r0, s13
 8006d88:	f7f9 fb82 	bl	8000490 <__aeabi_f2d>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	ec43 2b10 	vmov	d0, r2, r3
 8006d94:	f000 fc0c 	bl	80075b0 <sin>
 8006d98:	ec53 2b10 	vmov	r2, r3, d0
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	4649      	mov	r1, r9
 8006da0:	f7f9 fbce 	bl	8000540 <__aeabi_dmul>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4690      	mov	r8, r2
 8006daa:	4699      	mov	r9, r3
 8006dac:	edd7 7a01 	vldr	s15, [r7, #4]
 8006db0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006db4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006db8:	ee16 0a90 	vmov	r0, s13
 8006dbc:	f7f9 fb68 	bl	8000490 <__aeabi_f2d>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	ec43 2b10 	vmov	d0, r2, r3
 8006dc8:	f000 fb9e 	bl	8007508 <cos>
 8006dcc:	ec53 2b10 	vmov	r2, r3, d0
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	f7f9 fbb4 	bl	8000540 <__aeabi_dmul>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	f7f9 f9f8 	bl	80001d4 <__adddf3>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4610      	mov	r0, r2
 8006dea:	4619      	mov	r1, r3
 8006dec:	f7f9 fe80 	bl	8000af0 <__aeabi_d2f>
 8006df0:	4603      	mov	r3, r0
 8006df2:	4a03      	ldr	r2, [pc, #12]	; (8006e00 <Init_Quaternions+0x4f4>)
 8006df4:	6413      	str	r3, [r2, #64]	; 0x40

}
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e00:	20000044 	.word	0x20000044

08006e04 <IMU_GetData>:
  * @param :无
  * @note  :无
  * @retval:无
  */
static void IMU_GetData(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
	int16_t accdata[3];
	int16_t gyrodata[3];

	BMI088_Getdata_Acc_raw(accdata);
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fe ffb0 	bl	8005d74 <BMI088_Getdata_Acc_raw>
	BMI088_Getdata_Gyro_raw(gyrodata);
 8006e14:	463b      	mov	r3, r7
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fe ffd8 	bl	8005dcc <BMI088_Getdata_Gyro_raw>
	g_imu_struct.temperature =  BMI088_Get_Temperature();
 8006e1c:	f7fe ff78 	bl	8005d10 <BMI088_Get_Temperature>
 8006e20:	eef0 7a40 	vmov.f32	s15, s0
 8006e24:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <IMU_GetData+0x60>)
 8006e26:	edc3 7a08 	vstr	s15, [r3, #32]
	g_imu_struct.ax_raw = accdata[0];
 8006e2a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <IMU_GetData+0x60>)
 8006e30:	801a      	strh	r2, [r3, #0]
	g_imu_struct.ay_raw = accdata[1];
 8006e32:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <IMU_GetData+0x60>)
 8006e38:	805a      	strh	r2, [r3, #2]
	g_imu_struct.az_raw = accdata[2];
 8006e3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e3e:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <IMU_GetData+0x60>)
 8006e40:	809a      	strh	r2, [r3, #4]
	g_imu_struct.gx_raw = gyrodata[0];
 8006e42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006e46:	4b07      	ldr	r3, [pc, #28]	; (8006e64 <IMU_GetData+0x60>)
 8006e48:	80da      	strh	r2, [r3, #6]
	g_imu_struct.gy_raw = gyrodata[1];
 8006e4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <IMU_GetData+0x60>)
 8006e50:	811a      	strh	r2, [r3, #8]
	g_imu_struct.gz_raw = gyrodata[2];
 8006e52:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006e56:	4b03      	ldr	r3, [pc, #12]	; (8006e64 <IMU_GetData+0x60>)
 8006e58:	815a      	strh	r2, [r3, #10]
	g_imu_struct.mx_raw = magdata[0];
	g_imu_struct.my_raw = magdata[1];
	g_imu_struct.mz_raw = magdata[2];

#endif
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000044 	.word	0x20000044

08006e68 <IMU_Temperature_Compensate>:
  * @param :无
  * @note  :无
  * @retval:无
  */
static void IMU_Temperature_Compensate(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
			.limit.max_i_out = IMU_TEMP_PWM_MAX - 500,
			.output.i_out = 200,
			.limit.max_total_out = IMU_TEMP_PWM_MAX
	};

	real_temp = g_imu_struct.temperature;
 8006e6e:	4b21      	ldr	r3, [pc, #132]	; (8006ef4 <IMU_Temperature_Compensate+0x8c>)
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	60bb      	str	r3, [r7, #8]

	if (real_temp < 38.5f)
 8006e74:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e78:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006ef8 <IMU_Temperature_Compensate+0x90>
 8006e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e84:	d514      	bpl.n	8006eb0 <IMU_Temperature_Compensate+0x48>
	{
		//温度低于36度，满功率加热
		if (real_temp<36)
 8006e86:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e8a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006efc <IMU_Temperature_Compensate+0x94>
 8006e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e96:	d505      	bpl.n	8006ea4 <IMU_Temperature_Compensate+0x3c>
		{
			__HAL_TIM_SetCompare(&htim10, TIM_CHANNEL_1, IMU_TEMP_PWM_MAX);
 8006e98:	4b19      	ldr	r3, [pc, #100]	; (8006f00 <IMU_Temperature_Compensate+0x98>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006ea0:	635a      	str	r2, [r3, #52]	; 0x34
			return ;
 8006ea2:	e023      	b.n	8006eec <IMU_Temperature_Compensate+0x84>
		}
		//温度高于36度但低于38.5度，半功率加热
		__HAL_TIM_SetCompare(&htim10, TIM_CHANNEL_1, IMU_TEMP_PWM_MAX / 2);
 8006ea4:	4b16      	ldr	r3, [pc, #88]	; (8006f00 <IMU_Temperature_Compensate+0x98>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006eac:	635a      	str	r2, [r3, #52]	; 0x34
		return ;
 8006eae:	e01d      	b.n	8006eec <IMU_Temperature_Compensate+0x84>
	}

	//温度高于38.5度，用pid控制温度
	temp_pid_out = Pid_Calculate(&s_temp_pidstruct, real_temp, IMU_MAX_TEMP_SET);
 8006eb0:	eddf 0a14 	vldr	s1, [pc, #80]	; 8006f04 <IMU_Temperature_Compensate+0x9c>
 8006eb4:	ed97 0a02 	vldr	s0, [r7, #8]
 8006eb8:	4813      	ldr	r0, [pc, #76]	; (8006f08 <IMU_Temperature_Compensate+0xa0>)
 8006eba:	f000 fa53 	bl	8007364 <Pid_Calculate>
 8006ebe:	ed87 0a01 	vstr	s0, [r7, #4]
	if (temp_pid_out < 0)
 8006ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ec6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ece:	d502      	bpl.n	8006ed6 <IMU_Temperature_Compensate+0x6e>
	{
		temp_pwm = 0;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	81fb      	strh	r3, [r7, #14]
 8006ed4:	e006      	b.n	8006ee4 <IMU_Temperature_Compensate+0x7c>
	}
	else
	{
		temp_pwm =  (uint16_t)temp_pid_out;
 8006ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ede:	ee17 3a90 	vmov	r3, s15
 8006ee2:	81fb      	strh	r3, [r7, #14]
	}
	__HAL_TIM_SetCompare(&htim10, TIM_CHANNEL_1, temp_pwm);
 8006ee4:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <IMU_Temperature_Compensate+0x98>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	89fa      	ldrh	r2, [r7, #14]
 8006eea:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000044 	.word	0x20000044
 8006ef8:	421a0000 	.word	0x421a0000
 8006efc:	42100000 	.word	0x42100000
 8006f00:	2000027c 	.word	0x2000027c
 8006f04:	42200000 	.word	0x42200000
 8006f08:	200000b4 	.word	0x200000b4

08006f0c <IST8310_WriteReg>:
  * @param :reg_dataa :要写入的数据
  * @note  :此函数是基于HAL库的HAL_I2C_Mem_Write函数，使用I2C3外设，请确定是否已经配置完成
  * @retval:无
  */
void IST8310_WriteReg(uint8_t reg_addr,uint8_t reg_data)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af04      	add	r7, sp, #16
 8006f12:	4603      	mov	r3, r0
 8006f14:	460a      	mov	r2, r1
 8006f16:	71fb      	strb	r3, [r7, #7]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, &reg_data, 1, 0xff);
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	23ff      	movs	r3, #255	; 0xff
 8006f22:	9302      	str	r3, [sp, #8]
 8006f24:	2301      	movs	r3, #1
 8006f26:	9301      	str	r3, [sp, #4]
 8006f28:	1dbb      	adds	r3, r7, #6
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	211c      	movs	r1, #28
 8006f30:	4803      	ldr	r0, [pc, #12]	; (8006f40 <IST8310_WriteReg+0x34>)
 8006f32:	f7fb f9e9 	bl	8002308 <HAL_I2C_Mem_Write>
}
 8006f36:	bf00      	nop
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000170 	.word	0x20000170

08006f44 <IST8310_ReadData>:
  * @param :len :要读取的数据量
  * @note  :此函数是基于HAL库的HAL_I2C_Mem_Write函数，使用I2C3外设，请确定是否已经配置完成
  * @retval:无
  */
void IST8310_ReadData(uint8_t reg_addr,uint8_t *pdata,uint8_t len)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af04      	add	r7, sp, #16
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6039      	str	r1, [r7, #0]
 8006f4e:	71fb      	strb	r3, [r7, #7]
 8006f50:	4613      	mov	r3, r2
 8006f52:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, pdata, len, 0xff);
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	79bb      	ldrb	r3, [r7, #6]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	21ff      	movs	r1, #255	; 0xff
 8006f5e:	9102      	str	r1, [sp, #8]
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2301      	movs	r3, #1
 8006f68:	211c      	movs	r1, #28
 8006f6a:	4803      	ldr	r0, [pc, #12]	; (8006f78 <IST8310_ReadData+0x34>)
 8006f6c:	f7fb fac6 	bl	80024fc <HAL_I2C_Mem_Read>
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000170 	.word	0x20000170

08006f7c <IST8310_ReadID>:
  * @param :无
  * @note  :此函数使用了宏定义的寄存器地址，请确保已有IST8310_reg.h文件并已包含在此C文件中
  * @retval:IST8310磁力计的ID值
  */
uint8_t IST8310_ReadID(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
	uint8_t ID;
	IST8310_ReadData(IST8310_WHO_AM_I, &ID, 1);
 8006f82:	1dfb      	adds	r3, r7, #7
 8006f84:	2201      	movs	r2, #1
 8006f86:	4619      	mov	r1, r3
 8006f88:	2000      	movs	r0, #0
 8006f8a:	f7ff ffdb 	bl	8006f44 <IST8310_ReadData>
	return ID;
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <IST8310_Init>:
  * @note  :1、IMU_ERROR_Typedef 类型在Algorithms_Lib.h中被定义
  *         2、初始化C板IST8310会用到GPIOG的GPIO_PIN_6引脚，请提前配置好
  * @retval:IMU_ERROR_Typedef 类型变量，根据此变量可确定磁力计初始化是否成功
  */
IMU_ERROR_Typedef IST8310_Init(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
	if(IST8310_ReadID() == IST8310_WHO_AM_I_VALUE)
 8006f9c:	f7ff ffee 	bl	8006f7c <IST8310_ReadID>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d126      	bne.n	8006ff4 <IST8310_Init+0x5c>
	{
		//重启IST8310
		HAL_GPIO_WritePin(GPIOG, IST8310_RST_PIN, GPIO_PIN_RESET);
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2140      	movs	r1, #64	; 0x40
 8006faa:	4814      	ldr	r0, [pc, #80]	; (8006ffc <IST8310_Init+0x64>)
 8006fac:	f7fb f810 	bl	8001fd0 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8006fb0:	2032      	movs	r0, #50	; 0x32
 8006fb2:	f7fa fd3b 	bl	8001a2c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, IST8310_RST_PIN, GPIO_PIN_SET);
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	2140      	movs	r1, #64	; 0x40
 8006fba:	4810      	ldr	r0, [pc, #64]	; (8006ffc <IST8310_Init+0x64>)
 8006fbc:	f7fb f808 	bl	8001fd0 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8006fc0:	2032      	movs	r0, #50	; 0x32
 8006fc2:	f7fa fd33 	bl	8001a2c <HAL_Delay>
		//不开启中断
		IST8310_WriteReg(IST8310_CNTL2_ADDR, 0x00);
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	200b      	movs	r0, #11
 8006fca:	f7ff ff9f 	bl	8006f0c <IST8310_WriteReg>
		HAL_Delay(150);
 8006fce:	2096      	movs	r0, #150	; 0x96
 8006fd0:	f7fa fd2c 	bl	8001a2c <HAL_Delay>
		//四次采样平均
		IST8310_WriteReg(IST8310_AVGCNTL_ADDR, IST8310_AVGCNTL_FOURTH);
 8006fd4:	2112      	movs	r1, #18
 8006fd6:	2041      	movs	r0, #65	; 0x41
 8006fd8:	f7ff ff98 	bl	8006f0c <IST8310_WriteReg>
		HAL_Delay(150);
 8006fdc:	2096      	movs	r0, #150	; 0x96
 8006fde:	f7fa fd25 	bl	8001a2c <HAL_Delay>
		//连续采样，200HZ输出模式
		IST8310_WriteReg(IST8310_CNTL1_ADDR, IST8310_CNTL1_CONTINUE);
 8006fe2:	210b      	movs	r1, #11
 8006fe4:	200a      	movs	r0, #10
 8006fe6:	f7ff ff91 	bl	8006f0c <IST8310_WriteReg>
		HAL_Delay(150);
 8006fea:	2096      	movs	r0, #150	; 0x96
 8006fec:	f7fa fd1e 	bl	8001a2c <HAL_Delay>

    	return IMU_NO_ERROR;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e000      	b.n	8006ff6 <IST8310_Init+0x5e>
	}
	else
	{
		return IMU_MAG_ERROR;
 8006ff4:	2304      	movs	r3, #4
	}
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40021800 	.word	0x40021800

08007000 <KalmanFilter>:
  *         dat:待滤波数据
  * @retval 滤波后的数据
  */

float KalmanFilter(kalman* p,float dat)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	ed87 0a00 	vstr	s0, [r7]
    p->X_mid =p->A*p->X_last;                     //x(k|k-1) = AX(k-1|k-1)+BU(k)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	ed93 7a07 	vldr	s14, [r3, #28]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	edd3 7a00 	vldr	s15, [r3]
 8007018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	edc3 7a01 	vstr	s15, [r3, #4]
    p->P_mid = p->A*p->P_last+p->Q;               //p(k|k-1) = Ap(k-1|k-1)A'+Q
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	ed93 7a07 	vldr	s14, [r3, #28]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	edd3 7a05 	vldr	s15, [r3, #20]
 800702e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	edd3 7a08 	vldr	s15, [r3, #32]
 8007038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	edc3 7a03 	vstr	s15, [r3, #12]
    p->kg = p->P_mid/(p->P_mid+p->R);             //kg(k) = p(k|k-1)H'/(Hp(k|k-1)'+R)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	edd3 6a03 	vldr	s13, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	ed93 7a03 	vldr	s14, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	edc3 7a06 	vstr	s15, [r3, #24]
    p->X_now = p->X_mid+p->kg*(dat-p->X_mid);     //x(k|k) = X(k|k-1)+kg(k)(Z(k)-HX(k|k-1))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	ed93 7a01 	vldr	s14, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	edd3 6a06 	vldr	s13, [r3, #24]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	edd3 7a01 	vldr	s15, [r3, #4]
 8007074:	ed97 6a00 	vldr	s12, [r7]
 8007078:	ee76 7a67 	vsub.f32	s15, s12, s15
 800707c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	edc3 7a02 	vstr	s15, [r3, #8]
    p->P_now = (1-p->kg)*p->P_mid;                //p(k|k) = (I-kg(k)H)P(k|k-1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007094:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	edd3 7a03 	vldr	s15, [r3, #12]
 800709e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	edc3 7a04 	vstr	s15, [r3, #16]
    p->P_last = p->P_now;                         //状态更新
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	615a      	str	r2, [r3, #20]
    p->X_last = p->X_now;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
    return p->X_now;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	ee07 3a90 	vmov	s15, r3
}
 80070c0:	eeb0 0a67 	vmov.f32	s0, s15
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
	...

080070d0 <OLED_I2C_Start>:
  * @brief  I2C开始
  * @param  无
  * @retval 无
  */
void OLED_I2C_Start(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 80070d4:	2201      	movs	r2, #1
 80070d6:	2101      	movs	r1, #1
 80070d8:	4809      	ldr	r0, [pc, #36]	; (8007100 <OLED_I2C_Start+0x30>)
 80070da:	f7fa ff79 	bl	8001fd0 <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 80070de:	2201      	movs	r2, #1
 80070e0:	2102      	movs	r1, #2
 80070e2:	4807      	ldr	r0, [pc, #28]	; (8007100 <OLED_I2C_Start+0x30>)
 80070e4:	f7fa ff74 	bl	8001fd0 <HAL_GPIO_WritePin>
	OLED_W_SDA(0);
 80070e8:	2200      	movs	r2, #0
 80070ea:	2101      	movs	r1, #1
 80070ec:	4804      	ldr	r0, [pc, #16]	; (8007100 <OLED_I2C_Start+0x30>)
 80070ee:	f7fa ff6f 	bl	8001fd0 <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 80070f2:	2200      	movs	r2, #0
 80070f4:	2102      	movs	r1, #2
 80070f6:	4802      	ldr	r0, [pc, #8]	; (8007100 <OLED_I2C_Start+0x30>)
 80070f8:	f7fa ff6a 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 80070fc:	bf00      	nop
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40021400 	.word	0x40021400

08007104 <OLED_I2C_Stop>:
  * @brief  I2C停止
  * @param  无
  * @retval 无
  */
void OLED_I2C_Stop(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8007108:	2200      	movs	r2, #0
 800710a:	2101      	movs	r1, #1
 800710c:	4807      	ldr	r0, [pc, #28]	; (800712c <OLED_I2C_Stop+0x28>)
 800710e:	f7fa ff5f 	bl	8001fd0 <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8007112:	2201      	movs	r2, #1
 8007114:	2102      	movs	r1, #2
 8007116:	4805      	ldr	r0, [pc, #20]	; (800712c <OLED_I2C_Stop+0x28>)
 8007118:	f7fa ff5a 	bl	8001fd0 <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 800711c:	2201      	movs	r2, #1
 800711e:	2101      	movs	r1, #1
 8007120:	4802      	ldr	r0, [pc, #8]	; (800712c <OLED_I2C_Stop+0x28>)
 8007122:	f7fa ff55 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 8007126:	bf00      	nop
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40021400 	.word	0x40021400

08007130 <OLED_I2C_SendByte>:
  * @brief  I2C发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	e01b      	b.n	8007178 <OLED_I2C_SendByte+0x48>
	{
		OLED_W_SDA(Byte & (0x80 >> i));
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2280      	movs	r2, #128	; 0x80
 8007144:	fa42 f303 	asr.w	r3, r2, r3
 8007148:	b25a      	sxtb	r2, r3
 800714a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714e:	4013      	ands	r3, r2
 8007150:	b25b      	sxtb	r3, r3
 8007152:	b2db      	uxtb	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	2101      	movs	r1, #1
 8007158:	4810      	ldr	r0, [pc, #64]	; (800719c <OLED_I2C_SendByte+0x6c>)
 800715a:	f7fa ff39 	bl	8001fd0 <HAL_GPIO_WritePin>
		OLED_W_SCL(1);
 800715e:	2201      	movs	r2, #1
 8007160:	2102      	movs	r1, #2
 8007162:	480e      	ldr	r0, [pc, #56]	; (800719c <OLED_I2C_SendByte+0x6c>)
 8007164:	f7fa ff34 	bl	8001fd0 <HAL_GPIO_WritePin>
		OLED_W_SCL(0);
 8007168:	2200      	movs	r2, #0
 800716a:	2102      	movs	r1, #2
 800716c:	480b      	ldr	r0, [pc, #44]	; (800719c <OLED_I2C_SendByte+0x6c>)
 800716e:	f7fa ff2f 	bl	8001fd0 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	3301      	adds	r3, #1
 8007176:	73fb      	strb	r3, [r7, #15]
 8007178:	7bfb      	ldrb	r3, [r7, #15]
 800717a:	2b07      	cmp	r3, #7
 800717c:	d9e0      	bls.n	8007140 <OLED_I2C_SendByte+0x10>
	}
	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 800717e:	2201      	movs	r2, #1
 8007180:	2102      	movs	r1, #2
 8007182:	4806      	ldr	r0, [pc, #24]	; (800719c <OLED_I2C_SendByte+0x6c>)
 8007184:	f7fa ff24 	bl	8001fd0 <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8007188:	2200      	movs	r2, #0
 800718a:	2102      	movs	r1, #2
 800718c:	4803      	ldr	r0, [pc, #12]	; (800719c <OLED_I2C_SendByte+0x6c>)
 800718e:	f7fa ff1f 	bl	8001fd0 <HAL_GPIO_WritePin>
}
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40021400 	.word	0x40021400

080071a0 <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 80071aa:	f7ff ff91 	bl	80070d0 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 80071ae:	2078      	movs	r0, #120	; 0x78
 80071b0:	f7ff ffbe 	bl	8007130 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//写命令
 80071b4:	2000      	movs	r0, #0
 80071b6:	f7ff ffbb 	bl	8007130 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command); 
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7ff ffb7 	bl	8007130 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 80071c2:	f7ff ff9f 	bl	8007104 <OLED_I2C_Stop>
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	4603      	mov	r3, r0
 80071d6:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 80071d8:	f7ff ff7a 	bl	80070d0 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 80071dc:	2078      	movs	r0, #120	; 0x78
 80071de:	f7ff ffa7 	bl	8007130 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//写数据
 80071e2:	2040      	movs	r0, #64	; 0x40
 80071e4:	f7ff ffa4 	bl	8007130 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff ffa0 	bl	8007130 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 80071f0:	f7ff ff88 	bl	8007104 <OLED_I2C_Stop>
}
 80071f4:	bf00      	nop
 80071f6:	3708      	adds	r7, #8
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	460a      	mov	r2, r1
 8007206:	71fb      	strb	r3, [r7, #7]
 8007208:	4613      	mov	r3, r2
 800720a:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8007212:	b2db      	uxtb	r3, r3
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff ffc3 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置低4位
 800721a:	79bb      	ldrb	r3, [r7, #6]
 800721c:	091b      	lsrs	r3, r3, #4
 800721e:	b2db      	uxtb	r3, r3
 8007220:	f043 0310 	orr.w	r3, r3, #16
 8007224:	b2db      	uxtb	r3, r3
 8007226:	4618      	mov	r0, r3
 8007228:	f7ff ffba 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置高4位
 800722c:	79bb      	ldrb	r3, [r7, #6]
 800722e:	f003 030f 	and.w	r3, r3, #15
 8007232:	b2db      	uxtb	r3, r3
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff ffb3 	bl	80071a0 <OLED_WriteCommand>
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 8007242:	b580      	push	{r7, lr}
 8007244:	b082      	sub	sp, #8
 8007246:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8007248:	2300      	movs	r3, #0
 800724a:	71bb      	strb	r3, [r7, #6]
 800724c:	e014      	b.n	8007278 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 800724e:	79bb      	ldrb	r3, [r7, #6]
 8007250:	2100      	movs	r1, #0
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff ffd2 	bl	80071fc <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8007258:	2300      	movs	r3, #0
 800725a:	71fb      	strb	r3, [r7, #7]
 800725c:	e005      	b.n	800726a <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 800725e:	2000      	movs	r0, #0
 8007260:	f7ff ffb5 	bl	80071ce <OLED_WriteData>
		for(i = 0; i < 128; i++)
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	3301      	adds	r3, #1
 8007268:	71fb      	strb	r3, [r7, #7]
 800726a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726e:	2b00      	cmp	r3, #0
 8007270:	daf5      	bge.n	800725e <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8007272:	79bb      	ldrb	r3, [r7, #6]
 8007274:	3301      	adds	r3, #1
 8007276:	71bb      	strb	r3, [r7, #6]
 8007278:	79bb      	ldrb	r3, [r7, #6]
 800727a:	2b07      	cmp	r3, #7
 800727c:	d9e7      	bls.n	800724e <OLED_Clear+0xc>
		}
	}
}
 800727e:	bf00      	nop
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 800728e:	2300      	movs	r3, #0
 8007290:	607b      	str	r3, [r7, #4]
 8007292:	e00c      	b.n	80072ae <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 8007294:	2300      	movs	r3, #0
 8007296:	603b      	str	r3, [r7, #0]
 8007298:	e002      	b.n	80072a0 <OLED_Init+0x18>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	3301      	adds	r3, #1
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072a6:	d3f8      	bcc.n	800729a <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3301      	adds	r3, #1
 80072ac:	607b      	str	r3, [r7, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072b4:	d3ee      	bcc.n	8007294 <OLED_Init+0xc>
	}
	OLED_W_SCL(1);
 80072b6:	2201      	movs	r2, #1
 80072b8:	2102      	movs	r1, #2
 80072ba:	4829      	ldr	r0, [pc, #164]	; (8007360 <OLED_Init+0xd8>)
 80072bc:	f7fa fe88 	bl	8001fd0 <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 80072c0:	2201      	movs	r2, #1
 80072c2:	2101      	movs	r1, #1
 80072c4:	4826      	ldr	r0, [pc, #152]	; (8007360 <OLED_Init+0xd8>)
 80072c6:	f7fa fe83 	bl	8001fd0 <HAL_GPIO_WritePin>
	//OLED_I2C_Init();			//端口初始化
	
	OLED_WriteCommand(0xAE);	//关闭显示
 80072ca:	20ae      	movs	r0, #174	; 0xae
 80072cc:	f7ff ff68 	bl	80071a0 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80072d0:	20d5      	movs	r0, #213	; 0xd5
 80072d2:	f7ff ff65 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80072d6:	2080      	movs	r0, #128	; 0x80
 80072d8:	f7ff ff62 	bl	80071a0 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80072dc:	20a8      	movs	r0, #168	; 0xa8
 80072de:	f7ff ff5f 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80072e2:	203f      	movs	r0, #63	; 0x3f
 80072e4:	f7ff ff5c 	bl	80071a0 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 80072e8:	20d3      	movs	r0, #211	; 0xd3
 80072ea:	f7ff ff59 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7ff ff56 	bl	80071a0 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 80072f4:	2040      	movs	r0, #64	; 0x40
 80072f6:	f7ff ff53 	bl	80071a0 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 80072fa:	20a1      	movs	r0, #161	; 0xa1
 80072fc:	f7ff ff50 	bl	80071a0 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 8007300:	20c8      	movs	r0, #200	; 0xc8
 8007302:	f7ff ff4d 	bl	80071a0 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8007306:	20da      	movs	r0, #218	; 0xda
 8007308:	f7ff ff4a 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 800730c:	2012      	movs	r0, #18
 800730e:	f7ff ff47 	bl	80071a0 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 8007312:	2081      	movs	r0, #129	; 0x81
 8007314:	f7ff ff44 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8007318:	20cf      	movs	r0, #207	; 0xcf
 800731a:	f7ff ff41 	bl	80071a0 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 800731e:	20d9      	movs	r0, #217	; 0xd9
 8007320:	f7ff ff3e 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8007324:	20f1      	movs	r0, #241	; 0xf1
 8007326:	f7ff ff3b 	bl	80071a0 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 800732a:	20db      	movs	r0, #219	; 0xdb
 800732c:	f7ff ff38 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8007330:	2030      	movs	r0, #48	; 0x30
 8007332:	f7ff ff35 	bl	80071a0 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8007336:	20a4      	movs	r0, #164	; 0xa4
 8007338:	f7ff ff32 	bl	80071a0 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 800733c:	20a6      	movs	r0, #166	; 0xa6
 800733e:	f7ff ff2f 	bl	80071a0 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8007342:	208d      	movs	r0, #141	; 0x8d
 8007344:	f7ff ff2c 	bl	80071a0 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8007348:	2014      	movs	r0, #20
 800734a:	f7ff ff29 	bl	80071a0 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800734e:	20af      	movs	r0, #175	; 0xaf
 8007350:	f7ff ff26 	bl	80071a0 <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8007354:	f7ff ff75 	bl	8007242 <OLED_Clear>
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40021400 	.word	0x40021400

08007364 <Pid_Calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output
  */
float Pid_Calculate(PID_Typedef *pid, float get, float set)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007370:	edc7 0a01 	vstr	s1, [r7, #4]
//	uint8_t flag = 0;
	//get input
	pid->input.get = get;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	605a      	str	r2, [r3, #4]
	pid->input.set = set;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	601a      	str	r2, [r3, #0]
	pid->input.last_err = pid->input.err;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	60da      	str	r2, [r3, #12]
	pid->input.err = set - get;
 8007388:	ed97 7a01 	vldr	s14, [r7, #4]
 800738c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	edc3 7a02 	vstr	s15, [r3, #8]

	//input limit

	if ((pid->limit.max_err_input != 0) && (fabs(pid->input.err) > pid->limit.max_err_input))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80073a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80073a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a8:	d00f      	beq.n	80073ca <Pid_Calculate+0x66>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80073b0:	eeb0 7ae7 	vabs.f32	s14, s15
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80073ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80073be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c2:	dd02      	ble.n	80073ca <Pid_Calculate+0x66>
		return 0;
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	e062      	b.n	8007490 <Pid_Calculate+0x12c>

	//output calculate
	pid->output.p_out  = pid->param.Kp * pid->input.err;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	ed93 7a05 	vldr	s14, [r3, #20]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80073d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->output.i_out += pid->param.Ki * pid->input.err;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	edd3 6a06 	vldr	s13, [r3, #24]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80073f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80073f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pid->output.d_out  = pid->param.Kd * (pid->input.err - pid->input.last_err) * 1000;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	ed93 7a07 	vldr	s14, [r3, #28]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	edd3 6a02 	vldr	s13, [r3, #8]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007412:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80074a0 <Pid_Calculate+0x13c>
 800741e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	//output limit
	pid->output.i_out	  = limit_control(pid->output.i_out, pid->limit.max_i_out);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8007434:	eef0 0a47 	vmov.f32	s1, s14
 8007438:	eeb0 0a67 	vmov.f32	s0, s15
 800743c:	f7fe fb54 	bl	8005ae8 <limit_control>
 8007440:	eef0 7a40 	vmov.f32	s15, s0
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pid->output.total_out = pid->output.p_out + pid->output.i_out + pid->output.d_out;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	ed93 7a08 	vldr	s14, [r3, #32]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid->output.total_out = limit_control(pid->output.total_out, pid->limit.max_total_out);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8007476:	eef0 0a47 	vmov.f32	s1, s14
 800747a:	eeb0 0a67 	vmov.f32	s0, s15
 800747e:	f7fe fb33 	bl	8005ae8 <limit_control>
 8007482:	eef0 7a40 	vmov.f32	s15, s0
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	return pid->output.total_out;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8007490:	ee07 3a90 	vmov	s15, r3
 8007494:	eeb0 0a67 	vmov.f32	s0, s15
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	447a0000 	.word	0x447a0000

080074a4 <__errno>:
 80074a4:	4b01      	ldr	r3, [pc, #4]	; (80074ac <__errno+0x8>)
 80074a6:	6818      	ldr	r0, [r3, #0]
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	200000f0 	.word	0x200000f0

080074b0 <__libc_init_array>:
 80074b0:	b570      	push	{r4, r5, r6, lr}
 80074b2:	4d0d      	ldr	r5, [pc, #52]	; (80074e8 <__libc_init_array+0x38>)
 80074b4:	4c0d      	ldr	r4, [pc, #52]	; (80074ec <__libc_init_array+0x3c>)
 80074b6:	1b64      	subs	r4, r4, r5
 80074b8:	10a4      	asrs	r4, r4, #2
 80074ba:	2600      	movs	r6, #0
 80074bc:	42a6      	cmp	r6, r4
 80074be:	d109      	bne.n	80074d4 <__libc_init_array+0x24>
 80074c0:	4d0b      	ldr	r5, [pc, #44]	; (80074f0 <__libc_init_array+0x40>)
 80074c2:	4c0c      	ldr	r4, [pc, #48]	; (80074f4 <__libc_init_array+0x44>)
 80074c4:	f002 f9e8 	bl	8009898 <_init>
 80074c8:	1b64      	subs	r4, r4, r5
 80074ca:	10a4      	asrs	r4, r4, #2
 80074cc:	2600      	movs	r6, #0
 80074ce:	42a6      	cmp	r6, r4
 80074d0:	d105      	bne.n	80074de <__libc_init_array+0x2e>
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074d8:	4798      	blx	r3
 80074da:	3601      	adds	r6, #1
 80074dc:	e7ee      	b.n	80074bc <__libc_init_array+0xc>
 80074de:	f855 3b04 	ldr.w	r3, [r5], #4
 80074e2:	4798      	blx	r3
 80074e4:	3601      	adds	r6, #1
 80074e6:	e7f2      	b.n	80074ce <__libc_init_array+0x1e>
 80074e8:	08009b28 	.word	0x08009b28
 80074ec:	08009b28 	.word	0x08009b28
 80074f0:	08009b28 	.word	0x08009b28
 80074f4:	08009b2c 	.word	0x08009b2c

080074f8 <memset>:
 80074f8:	4402      	add	r2, r0
 80074fa:	4603      	mov	r3, r0
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d100      	bne.n	8007502 <memset+0xa>
 8007500:	4770      	bx	lr
 8007502:	f803 1b01 	strb.w	r1, [r3], #1
 8007506:	e7f9      	b.n	80074fc <memset+0x4>

08007508 <cos>:
 8007508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800750a:	ec53 2b10 	vmov	r2, r3, d0
 800750e:	4826      	ldr	r0, [pc, #152]	; (80075a8 <cos+0xa0>)
 8007510:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007514:	4281      	cmp	r1, r0
 8007516:	dc06      	bgt.n	8007526 <cos+0x1e>
 8007518:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80075a0 <cos+0x98>
 800751c:	b005      	add	sp, #20
 800751e:	f85d eb04 	ldr.w	lr, [sp], #4
 8007522:	f001 bab5 	b.w	8008a90 <__kernel_cos>
 8007526:	4821      	ldr	r0, [pc, #132]	; (80075ac <cos+0xa4>)
 8007528:	4281      	cmp	r1, r0
 800752a:	dd09      	ble.n	8007540 <cos+0x38>
 800752c:	ee10 0a10 	vmov	r0, s0
 8007530:	4619      	mov	r1, r3
 8007532:	f7f8 fe4d 	bl	80001d0 <__aeabi_dsub>
 8007536:	ec41 0b10 	vmov	d0, r0, r1
 800753a:	b005      	add	sp, #20
 800753c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007540:	4668      	mov	r0, sp
 8007542:	f000 fe5d 	bl	8008200 <__ieee754_rem_pio2>
 8007546:	f000 0003 	and.w	r0, r0, #3
 800754a:	2801      	cmp	r0, #1
 800754c:	d00b      	beq.n	8007566 <cos+0x5e>
 800754e:	2802      	cmp	r0, #2
 8007550:	d016      	beq.n	8007580 <cos+0x78>
 8007552:	b9e0      	cbnz	r0, 800758e <cos+0x86>
 8007554:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007558:	ed9d 0b00 	vldr	d0, [sp]
 800755c:	f001 fa98 	bl	8008a90 <__kernel_cos>
 8007560:	ec51 0b10 	vmov	r0, r1, d0
 8007564:	e7e7      	b.n	8007536 <cos+0x2e>
 8007566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800756a:	ed9d 0b00 	vldr	d0, [sp]
 800756e:	f001 fea7 	bl	80092c0 <__kernel_sin>
 8007572:	ec53 2b10 	vmov	r2, r3, d0
 8007576:	ee10 0a10 	vmov	r0, s0
 800757a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800757e:	e7da      	b.n	8007536 <cos+0x2e>
 8007580:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007584:	ed9d 0b00 	vldr	d0, [sp]
 8007588:	f001 fa82 	bl	8008a90 <__kernel_cos>
 800758c:	e7f1      	b.n	8007572 <cos+0x6a>
 800758e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007592:	ed9d 0b00 	vldr	d0, [sp]
 8007596:	2001      	movs	r0, #1
 8007598:	f001 fe92 	bl	80092c0 <__kernel_sin>
 800759c:	e7e0      	b.n	8007560 <cos+0x58>
 800759e:	bf00      	nop
	...
 80075a8:	3fe921fb 	.word	0x3fe921fb
 80075ac:	7fefffff 	.word	0x7fefffff

080075b0 <sin>:
 80075b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075b2:	ec53 2b10 	vmov	r2, r3, d0
 80075b6:	4828      	ldr	r0, [pc, #160]	; (8007658 <sin+0xa8>)
 80075b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80075bc:	4281      	cmp	r1, r0
 80075be:	dc07      	bgt.n	80075d0 <sin+0x20>
 80075c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007650 <sin+0xa0>
 80075c4:	2000      	movs	r0, #0
 80075c6:	b005      	add	sp, #20
 80075c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80075cc:	f001 be78 	b.w	80092c0 <__kernel_sin>
 80075d0:	4822      	ldr	r0, [pc, #136]	; (800765c <sin+0xac>)
 80075d2:	4281      	cmp	r1, r0
 80075d4:	dd09      	ble.n	80075ea <sin+0x3a>
 80075d6:	ee10 0a10 	vmov	r0, s0
 80075da:	4619      	mov	r1, r3
 80075dc:	f7f8 fdf8 	bl	80001d0 <__aeabi_dsub>
 80075e0:	ec41 0b10 	vmov	d0, r0, r1
 80075e4:	b005      	add	sp, #20
 80075e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80075ea:	4668      	mov	r0, sp
 80075ec:	f000 fe08 	bl	8008200 <__ieee754_rem_pio2>
 80075f0:	f000 0003 	and.w	r0, r0, #3
 80075f4:	2801      	cmp	r0, #1
 80075f6:	d00c      	beq.n	8007612 <sin+0x62>
 80075f8:	2802      	cmp	r0, #2
 80075fa:	d011      	beq.n	8007620 <sin+0x70>
 80075fc:	b9f0      	cbnz	r0, 800763c <sin+0x8c>
 80075fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007602:	ed9d 0b00 	vldr	d0, [sp]
 8007606:	2001      	movs	r0, #1
 8007608:	f001 fe5a 	bl	80092c0 <__kernel_sin>
 800760c:	ec51 0b10 	vmov	r0, r1, d0
 8007610:	e7e6      	b.n	80075e0 <sin+0x30>
 8007612:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007616:	ed9d 0b00 	vldr	d0, [sp]
 800761a:	f001 fa39 	bl	8008a90 <__kernel_cos>
 800761e:	e7f5      	b.n	800760c <sin+0x5c>
 8007620:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007624:	ed9d 0b00 	vldr	d0, [sp]
 8007628:	2001      	movs	r0, #1
 800762a:	f001 fe49 	bl	80092c0 <__kernel_sin>
 800762e:	ec53 2b10 	vmov	r2, r3, d0
 8007632:	ee10 0a10 	vmov	r0, s0
 8007636:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800763a:	e7d1      	b.n	80075e0 <sin+0x30>
 800763c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007640:	ed9d 0b00 	vldr	d0, [sp]
 8007644:	f001 fa24 	bl	8008a90 <__kernel_cos>
 8007648:	e7f1      	b.n	800762e <sin+0x7e>
 800764a:	bf00      	nop
 800764c:	f3af 8000 	nop.w
	...
 8007658:	3fe921fb 	.word	0x3fe921fb
 800765c:	7fefffff 	.word	0x7fefffff

08007660 <pow>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	ed2d 8b02 	vpush	{d8}
 8007666:	eeb0 8a40 	vmov.f32	s16, s0
 800766a:	eef0 8a60 	vmov.f32	s17, s1
 800766e:	ec55 4b11 	vmov	r4, r5, d1
 8007672:	f000 f895 	bl	80077a0 <__ieee754_pow>
 8007676:	4622      	mov	r2, r4
 8007678:	462b      	mov	r3, r5
 800767a:	4620      	mov	r0, r4
 800767c:	4629      	mov	r1, r5
 800767e:	ec57 6b10 	vmov	r6, r7, d0
 8007682:	f7f9 f9f7 	bl	8000a74 <__aeabi_dcmpun>
 8007686:	2800      	cmp	r0, #0
 8007688:	d13b      	bne.n	8007702 <pow+0xa2>
 800768a:	ec51 0b18 	vmov	r0, r1, d8
 800768e:	2200      	movs	r2, #0
 8007690:	2300      	movs	r3, #0
 8007692:	f7f9 f9bd 	bl	8000a10 <__aeabi_dcmpeq>
 8007696:	b1b8      	cbz	r0, 80076c8 <pow+0x68>
 8007698:	2200      	movs	r2, #0
 800769a:	2300      	movs	r3, #0
 800769c:	4620      	mov	r0, r4
 800769e:	4629      	mov	r1, r5
 80076a0:	f7f9 f9b6 	bl	8000a10 <__aeabi_dcmpeq>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	d146      	bne.n	8007736 <pow+0xd6>
 80076a8:	ec45 4b10 	vmov	d0, r4, r5
 80076ac:	f001 feff 	bl	80094ae <finite>
 80076b0:	b338      	cbz	r0, 8007702 <pow+0xa2>
 80076b2:	2200      	movs	r2, #0
 80076b4:	2300      	movs	r3, #0
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7f9 f9b3 	bl	8000a24 <__aeabi_dcmplt>
 80076be:	b300      	cbz	r0, 8007702 <pow+0xa2>
 80076c0:	f7ff fef0 	bl	80074a4 <__errno>
 80076c4:	2322      	movs	r3, #34	; 0x22
 80076c6:	e01b      	b.n	8007700 <pow+0xa0>
 80076c8:	ec47 6b10 	vmov	d0, r6, r7
 80076cc:	f001 feef 	bl	80094ae <finite>
 80076d0:	b9e0      	cbnz	r0, 800770c <pow+0xac>
 80076d2:	eeb0 0a48 	vmov.f32	s0, s16
 80076d6:	eef0 0a68 	vmov.f32	s1, s17
 80076da:	f001 fee8 	bl	80094ae <finite>
 80076de:	b1a8      	cbz	r0, 800770c <pow+0xac>
 80076e0:	ec45 4b10 	vmov	d0, r4, r5
 80076e4:	f001 fee3 	bl	80094ae <finite>
 80076e8:	b180      	cbz	r0, 800770c <pow+0xac>
 80076ea:	4632      	mov	r2, r6
 80076ec:	463b      	mov	r3, r7
 80076ee:	4630      	mov	r0, r6
 80076f0:	4639      	mov	r1, r7
 80076f2:	f7f9 f9bf 	bl	8000a74 <__aeabi_dcmpun>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d0e2      	beq.n	80076c0 <pow+0x60>
 80076fa:	f7ff fed3 	bl	80074a4 <__errno>
 80076fe:	2321      	movs	r3, #33	; 0x21
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	ecbd 8b02 	vpop	{d8}
 8007706:	ec47 6b10 	vmov	d0, r6, r7
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800770c:	2200      	movs	r2, #0
 800770e:	2300      	movs	r3, #0
 8007710:	4630      	mov	r0, r6
 8007712:	4639      	mov	r1, r7
 8007714:	f7f9 f97c 	bl	8000a10 <__aeabi_dcmpeq>
 8007718:	2800      	cmp	r0, #0
 800771a:	d0f2      	beq.n	8007702 <pow+0xa2>
 800771c:	eeb0 0a48 	vmov.f32	s0, s16
 8007720:	eef0 0a68 	vmov.f32	s1, s17
 8007724:	f001 fec3 	bl	80094ae <finite>
 8007728:	2800      	cmp	r0, #0
 800772a:	d0ea      	beq.n	8007702 <pow+0xa2>
 800772c:	ec45 4b10 	vmov	d0, r4, r5
 8007730:	f001 febd 	bl	80094ae <finite>
 8007734:	e7c3      	b.n	80076be <pow+0x5e>
 8007736:	4f01      	ldr	r7, [pc, #4]	; (800773c <pow+0xdc>)
 8007738:	2600      	movs	r6, #0
 800773a:	e7e2      	b.n	8007702 <pow+0xa2>
 800773c:	3ff00000 	.word	0x3ff00000

08007740 <asinf>:
 8007740:	b508      	push	{r3, lr}
 8007742:	ed2d 8b02 	vpush	{d8}
 8007746:	eeb0 8a40 	vmov.f32	s16, s0
 800774a:	f001 f817 	bl	800877c <__ieee754_asinf>
 800774e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007756:	eef0 8a40 	vmov.f32	s17, s0
 800775a:	d615      	bvs.n	8007788 <asinf+0x48>
 800775c:	eeb0 0a48 	vmov.f32	s0, s16
 8007760:	f002 f88c 	bl	800987c <fabsf>
 8007764:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007768:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800776c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007770:	dd0a      	ble.n	8007788 <asinf+0x48>
 8007772:	f7ff fe97 	bl	80074a4 <__errno>
 8007776:	ecbd 8b02 	vpop	{d8}
 800777a:	2321      	movs	r3, #33	; 0x21
 800777c:	6003      	str	r3, [r0, #0]
 800777e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007782:	4804      	ldr	r0, [pc, #16]	; (8007794 <asinf+0x54>)
 8007784:	f002 b882 	b.w	800988c <nanf>
 8007788:	eeb0 0a68 	vmov.f32	s0, s17
 800778c:	ecbd 8b02 	vpop	{d8}
 8007790:	bd08      	pop	{r3, pc}
 8007792:	bf00      	nop
 8007794:	080098dc 	.word	0x080098dc

08007798 <atan2f>:
 8007798:	f001 b8d6 	b.w	8008948 <__ieee754_atan2f>
 800779c:	0000      	movs	r0, r0
	...

080077a0 <__ieee754_pow>:
 80077a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a4:	ed2d 8b06 	vpush	{d8-d10}
 80077a8:	b089      	sub	sp, #36	; 0x24
 80077aa:	ed8d 1b00 	vstr	d1, [sp]
 80077ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80077b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80077b6:	ea58 0102 	orrs.w	r1, r8, r2
 80077ba:	ec57 6b10 	vmov	r6, r7, d0
 80077be:	d115      	bne.n	80077ec <__ieee754_pow+0x4c>
 80077c0:	19b3      	adds	r3, r6, r6
 80077c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80077c6:	4152      	adcs	r2, r2
 80077c8:	4299      	cmp	r1, r3
 80077ca:	4b89      	ldr	r3, [pc, #548]	; (80079f0 <__ieee754_pow+0x250>)
 80077cc:	4193      	sbcs	r3, r2
 80077ce:	f080 84d2 	bcs.w	8008176 <__ieee754_pow+0x9d6>
 80077d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077d6:	4630      	mov	r0, r6
 80077d8:	4639      	mov	r1, r7
 80077da:	f7f8 fcfb 	bl	80001d4 <__adddf3>
 80077de:	ec41 0b10 	vmov	d0, r0, r1
 80077e2:	b009      	add	sp, #36	; 0x24
 80077e4:	ecbd 8b06 	vpop	{d8-d10}
 80077e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ec:	4b81      	ldr	r3, [pc, #516]	; (80079f4 <__ieee754_pow+0x254>)
 80077ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80077f2:	429c      	cmp	r4, r3
 80077f4:	ee10 aa10 	vmov	sl, s0
 80077f8:	463d      	mov	r5, r7
 80077fa:	dc06      	bgt.n	800780a <__ieee754_pow+0x6a>
 80077fc:	d101      	bne.n	8007802 <__ieee754_pow+0x62>
 80077fe:	2e00      	cmp	r6, #0
 8007800:	d1e7      	bne.n	80077d2 <__ieee754_pow+0x32>
 8007802:	4598      	cmp	r8, r3
 8007804:	dc01      	bgt.n	800780a <__ieee754_pow+0x6a>
 8007806:	d10f      	bne.n	8007828 <__ieee754_pow+0x88>
 8007808:	b172      	cbz	r2, 8007828 <__ieee754_pow+0x88>
 800780a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800780e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007812:	ea55 050a 	orrs.w	r5, r5, sl
 8007816:	d1dc      	bne.n	80077d2 <__ieee754_pow+0x32>
 8007818:	e9dd 3200 	ldrd	r3, r2, [sp]
 800781c:	18db      	adds	r3, r3, r3
 800781e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007822:	4152      	adcs	r2, r2
 8007824:	429d      	cmp	r5, r3
 8007826:	e7d0      	b.n	80077ca <__ieee754_pow+0x2a>
 8007828:	2d00      	cmp	r5, #0
 800782a:	da3b      	bge.n	80078a4 <__ieee754_pow+0x104>
 800782c:	4b72      	ldr	r3, [pc, #456]	; (80079f8 <__ieee754_pow+0x258>)
 800782e:	4598      	cmp	r8, r3
 8007830:	dc51      	bgt.n	80078d6 <__ieee754_pow+0x136>
 8007832:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007836:	4598      	cmp	r8, r3
 8007838:	f340 84ac 	ble.w	8008194 <__ieee754_pow+0x9f4>
 800783c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007840:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007844:	2b14      	cmp	r3, #20
 8007846:	dd0f      	ble.n	8007868 <__ieee754_pow+0xc8>
 8007848:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800784c:	fa22 f103 	lsr.w	r1, r2, r3
 8007850:	fa01 f303 	lsl.w	r3, r1, r3
 8007854:	4293      	cmp	r3, r2
 8007856:	f040 849d 	bne.w	8008194 <__ieee754_pow+0x9f4>
 800785a:	f001 0101 	and.w	r1, r1, #1
 800785e:	f1c1 0302 	rsb	r3, r1, #2
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	b182      	cbz	r2, 8007888 <__ieee754_pow+0xe8>
 8007866:	e05f      	b.n	8007928 <__ieee754_pow+0x188>
 8007868:	2a00      	cmp	r2, #0
 800786a:	d15b      	bne.n	8007924 <__ieee754_pow+0x184>
 800786c:	f1c3 0314 	rsb	r3, r3, #20
 8007870:	fa48 f103 	asr.w	r1, r8, r3
 8007874:	fa01 f303 	lsl.w	r3, r1, r3
 8007878:	4543      	cmp	r3, r8
 800787a:	f040 8488 	bne.w	800818e <__ieee754_pow+0x9ee>
 800787e:	f001 0101 	and.w	r1, r1, #1
 8007882:	f1c1 0302 	rsb	r3, r1, #2
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	4b5c      	ldr	r3, [pc, #368]	; (80079fc <__ieee754_pow+0x25c>)
 800788a:	4598      	cmp	r8, r3
 800788c:	d132      	bne.n	80078f4 <__ieee754_pow+0x154>
 800788e:	f1b9 0f00 	cmp.w	r9, #0
 8007892:	f280 8478 	bge.w	8008186 <__ieee754_pow+0x9e6>
 8007896:	4959      	ldr	r1, [pc, #356]	; (80079fc <__ieee754_pow+0x25c>)
 8007898:	4632      	mov	r2, r6
 800789a:	463b      	mov	r3, r7
 800789c:	2000      	movs	r0, #0
 800789e:	f7f8 ff79 	bl	8000794 <__aeabi_ddiv>
 80078a2:	e79c      	b.n	80077de <__ieee754_pow+0x3e>
 80078a4:	2300      	movs	r3, #0
 80078a6:	9304      	str	r3, [sp, #16]
 80078a8:	2a00      	cmp	r2, #0
 80078aa:	d13d      	bne.n	8007928 <__ieee754_pow+0x188>
 80078ac:	4b51      	ldr	r3, [pc, #324]	; (80079f4 <__ieee754_pow+0x254>)
 80078ae:	4598      	cmp	r8, r3
 80078b0:	d1ea      	bne.n	8007888 <__ieee754_pow+0xe8>
 80078b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80078b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80078ba:	ea53 030a 	orrs.w	r3, r3, sl
 80078be:	f000 845a 	beq.w	8008176 <__ieee754_pow+0x9d6>
 80078c2:	4b4f      	ldr	r3, [pc, #316]	; (8007a00 <__ieee754_pow+0x260>)
 80078c4:	429c      	cmp	r4, r3
 80078c6:	dd08      	ble.n	80078da <__ieee754_pow+0x13a>
 80078c8:	f1b9 0f00 	cmp.w	r9, #0
 80078cc:	f2c0 8457 	blt.w	800817e <__ieee754_pow+0x9de>
 80078d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078d4:	e783      	b.n	80077de <__ieee754_pow+0x3e>
 80078d6:	2302      	movs	r3, #2
 80078d8:	e7e5      	b.n	80078a6 <__ieee754_pow+0x106>
 80078da:	f1b9 0f00 	cmp.w	r9, #0
 80078de:	f04f 0000 	mov.w	r0, #0
 80078e2:	f04f 0100 	mov.w	r1, #0
 80078e6:	f6bf af7a 	bge.w	80077de <__ieee754_pow+0x3e>
 80078ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80078ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80078f2:	e774      	b.n	80077de <__ieee754_pow+0x3e>
 80078f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80078f8:	d106      	bne.n	8007908 <__ieee754_pow+0x168>
 80078fa:	4632      	mov	r2, r6
 80078fc:	463b      	mov	r3, r7
 80078fe:	4630      	mov	r0, r6
 8007900:	4639      	mov	r1, r7
 8007902:	f7f8 fe1d 	bl	8000540 <__aeabi_dmul>
 8007906:	e76a      	b.n	80077de <__ieee754_pow+0x3e>
 8007908:	4b3e      	ldr	r3, [pc, #248]	; (8007a04 <__ieee754_pow+0x264>)
 800790a:	4599      	cmp	r9, r3
 800790c:	d10c      	bne.n	8007928 <__ieee754_pow+0x188>
 800790e:	2d00      	cmp	r5, #0
 8007910:	db0a      	blt.n	8007928 <__ieee754_pow+0x188>
 8007912:	ec47 6b10 	vmov	d0, r6, r7
 8007916:	b009      	add	sp, #36	; 0x24
 8007918:	ecbd 8b06 	vpop	{d8-d10}
 800791c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007920:	f000 be7a 	b.w	8008618 <__ieee754_sqrt>
 8007924:	2300      	movs	r3, #0
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	ec47 6b10 	vmov	d0, r6, r7
 800792c:	f001 fdb6 	bl	800949c <fabs>
 8007930:	ec51 0b10 	vmov	r0, r1, d0
 8007934:	f1ba 0f00 	cmp.w	sl, #0
 8007938:	d129      	bne.n	800798e <__ieee754_pow+0x1ee>
 800793a:	b124      	cbz	r4, 8007946 <__ieee754_pow+0x1a6>
 800793c:	4b2f      	ldr	r3, [pc, #188]	; (80079fc <__ieee754_pow+0x25c>)
 800793e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007942:	429a      	cmp	r2, r3
 8007944:	d123      	bne.n	800798e <__ieee754_pow+0x1ee>
 8007946:	f1b9 0f00 	cmp.w	r9, #0
 800794a:	da05      	bge.n	8007958 <__ieee754_pow+0x1b8>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	2000      	movs	r0, #0
 8007952:	492a      	ldr	r1, [pc, #168]	; (80079fc <__ieee754_pow+0x25c>)
 8007954:	f7f8 ff1e 	bl	8000794 <__aeabi_ddiv>
 8007958:	2d00      	cmp	r5, #0
 800795a:	f6bf af40 	bge.w	80077de <__ieee754_pow+0x3e>
 800795e:	9b04      	ldr	r3, [sp, #16]
 8007960:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007964:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007968:	4323      	orrs	r3, r4
 800796a:	d108      	bne.n	800797e <__ieee754_pow+0x1de>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	4610      	mov	r0, r2
 8007972:	4619      	mov	r1, r3
 8007974:	f7f8 fc2c 	bl	80001d0 <__aeabi_dsub>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	e78f      	b.n	800789e <__ieee754_pow+0xfe>
 800797e:	9b04      	ldr	r3, [sp, #16]
 8007980:	2b01      	cmp	r3, #1
 8007982:	f47f af2c 	bne.w	80077de <__ieee754_pow+0x3e>
 8007986:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800798a:	4619      	mov	r1, r3
 800798c:	e727      	b.n	80077de <__ieee754_pow+0x3e>
 800798e:	0feb      	lsrs	r3, r5, #31
 8007990:	3b01      	subs	r3, #1
 8007992:	9306      	str	r3, [sp, #24]
 8007994:	9a06      	ldr	r2, [sp, #24]
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	4313      	orrs	r3, r2
 800799a:	d102      	bne.n	80079a2 <__ieee754_pow+0x202>
 800799c:	4632      	mov	r2, r6
 800799e:	463b      	mov	r3, r7
 80079a0:	e7e6      	b.n	8007970 <__ieee754_pow+0x1d0>
 80079a2:	4b19      	ldr	r3, [pc, #100]	; (8007a08 <__ieee754_pow+0x268>)
 80079a4:	4598      	cmp	r8, r3
 80079a6:	f340 80fb 	ble.w	8007ba0 <__ieee754_pow+0x400>
 80079aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80079ae:	4598      	cmp	r8, r3
 80079b0:	4b13      	ldr	r3, [pc, #76]	; (8007a00 <__ieee754_pow+0x260>)
 80079b2:	dd0c      	ble.n	80079ce <__ieee754_pow+0x22e>
 80079b4:	429c      	cmp	r4, r3
 80079b6:	dc0f      	bgt.n	80079d8 <__ieee754_pow+0x238>
 80079b8:	f1b9 0f00 	cmp.w	r9, #0
 80079bc:	da0f      	bge.n	80079de <__ieee754_pow+0x23e>
 80079be:	2000      	movs	r0, #0
 80079c0:	b009      	add	sp, #36	; 0x24
 80079c2:	ecbd 8b06 	vpop	{d8-d10}
 80079c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ca:	f001 bd5e 	b.w	800948a <__math_oflow>
 80079ce:	429c      	cmp	r4, r3
 80079d0:	dbf2      	blt.n	80079b8 <__ieee754_pow+0x218>
 80079d2:	4b0a      	ldr	r3, [pc, #40]	; (80079fc <__ieee754_pow+0x25c>)
 80079d4:	429c      	cmp	r4, r3
 80079d6:	dd19      	ble.n	8007a0c <__ieee754_pow+0x26c>
 80079d8:	f1b9 0f00 	cmp.w	r9, #0
 80079dc:	dcef      	bgt.n	80079be <__ieee754_pow+0x21e>
 80079de:	2000      	movs	r0, #0
 80079e0:	b009      	add	sp, #36	; 0x24
 80079e2:	ecbd 8b06 	vpop	{d8-d10}
 80079e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ea:	f001 bd45 	b.w	8009478 <__math_uflow>
 80079ee:	bf00      	nop
 80079f0:	fff00000 	.word	0xfff00000
 80079f4:	7ff00000 	.word	0x7ff00000
 80079f8:	433fffff 	.word	0x433fffff
 80079fc:	3ff00000 	.word	0x3ff00000
 8007a00:	3fefffff 	.word	0x3fefffff
 8007a04:	3fe00000 	.word	0x3fe00000
 8007a08:	41e00000 	.word	0x41e00000
 8007a0c:	4b60      	ldr	r3, [pc, #384]	; (8007b90 <__ieee754_pow+0x3f0>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f7f8 fbde 	bl	80001d0 <__aeabi_dsub>
 8007a14:	a354      	add	r3, pc, #336	; (adr r3, 8007b68 <__ieee754_pow+0x3c8>)
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	f7f8 fd8f 	bl	8000540 <__aeabi_dmul>
 8007a22:	a353      	add	r3, pc, #332	; (adr r3, 8007b70 <__ieee754_pow+0x3d0>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	4606      	mov	r6, r0
 8007a2a:	460f      	mov	r7, r1
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f7f8 fd86 	bl	8000540 <__aeabi_dmul>
 8007a34:	4b57      	ldr	r3, [pc, #348]	; (8007b94 <__ieee754_pow+0x3f4>)
 8007a36:	4682      	mov	sl, r0
 8007a38:	468b      	mov	fp, r1
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f7f8 fd7e 	bl	8000540 <__aeabi_dmul>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	a14b      	add	r1, pc, #300	; (adr r1, 8007b78 <__ieee754_pow+0x3d8>)
 8007a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a4e:	f7f8 fbbf 	bl	80001d0 <__aeabi_dsub>
 8007a52:	4622      	mov	r2, r4
 8007a54:	462b      	mov	r3, r5
 8007a56:	f7f8 fd73 	bl	8000540 <__aeabi_dmul>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	2000      	movs	r0, #0
 8007a60:	494d      	ldr	r1, [pc, #308]	; (8007b98 <__ieee754_pow+0x3f8>)
 8007a62:	f7f8 fbb5 	bl	80001d0 <__aeabi_dsub>
 8007a66:	4622      	mov	r2, r4
 8007a68:	4680      	mov	r8, r0
 8007a6a:	4689      	mov	r9, r1
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	4620      	mov	r0, r4
 8007a70:	4629      	mov	r1, r5
 8007a72:	f7f8 fd65 	bl	8000540 <__aeabi_dmul>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	f7f8 fd5f 	bl	8000540 <__aeabi_dmul>
 8007a82:	a33f      	add	r3, pc, #252	; (adr r3, 8007b80 <__ieee754_pow+0x3e0>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f7f8 fd5a 	bl	8000540 <__aeabi_dmul>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4650      	mov	r0, sl
 8007a92:	4659      	mov	r1, fp
 8007a94:	f7f8 fb9c 	bl	80001d0 <__aeabi_dsub>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	4689      	mov	r9, r1
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	4639      	mov	r1, r7
 8007aa4:	f7f8 fb96 	bl	80001d4 <__adddf3>
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	4632      	mov	r2, r6
 8007aac:	463b      	mov	r3, r7
 8007aae:	4604      	mov	r4, r0
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	f7f8 fb8d 	bl	80001d0 <__aeabi_dsub>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4640      	mov	r0, r8
 8007abc:	4649      	mov	r1, r9
 8007abe:	f7f8 fb87 	bl	80001d0 <__aeabi_dsub>
 8007ac2:	9b04      	ldr	r3, [sp, #16]
 8007ac4:	9a06      	ldr	r2, [sp, #24]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	4682      	mov	sl, r0
 8007acc:	468b      	mov	fp, r1
 8007ace:	f040 81e7 	bne.w	8007ea0 <__ieee754_pow+0x700>
 8007ad2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007b88 <__ieee754_pow+0x3e8>
 8007ad6:	eeb0 8a47 	vmov.f32	s16, s14
 8007ada:	eef0 8a67 	vmov.f32	s17, s15
 8007ade:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aec:	f7f8 fb70 	bl	80001d0 <__aeabi_dsub>
 8007af0:	4622      	mov	r2, r4
 8007af2:	462b      	mov	r3, r5
 8007af4:	f7f8 fd24 	bl	8000540 <__aeabi_dmul>
 8007af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007afc:	4680      	mov	r8, r0
 8007afe:	4689      	mov	r9, r1
 8007b00:	4650      	mov	r0, sl
 8007b02:	4659      	mov	r1, fp
 8007b04:	f7f8 fd1c 	bl	8000540 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4640      	mov	r0, r8
 8007b0e:	4649      	mov	r1, r9
 8007b10:	f7f8 fb60 	bl	80001d4 <__adddf3>
 8007b14:	4632      	mov	r2, r6
 8007b16:	463b      	mov	r3, r7
 8007b18:	4680      	mov	r8, r0
 8007b1a:	4689      	mov	r9, r1
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 fd0e 	bl	8000540 <__aeabi_dmul>
 8007b24:	460b      	mov	r3, r1
 8007b26:	4604      	mov	r4, r0
 8007b28:	460d      	mov	r5, r1
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	4640      	mov	r0, r8
 8007b30:	f7f8 fb50 	bl	80001d4 <__adddf3>
 8007b34:	4b19      	ldr	r3, [pc, #100]	; (8007b9c <__ieee754_pow+0x3fc>)
 8007b36:	4299      	cmp	r1, r3
 8007b38:	ec45 4b19 	vmov	d9, r4, r5
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	460f      	mov	r7, r1
 8007b40:	468b      	mov	fp, r1
 8007b42:	f340 82f1 	ble.w	8008128 <__ieee754_pow+0x988>
 8007b46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007b4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007b4e:	4303      	orrs	r3, r0
 8007b50:	f000 81e4 	beq.w	8007f1c <__ieee754_pow+0x77c>
 8007b54:	ec51 0b18 	vmov	r0, r1, d8
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f7f8 ff62 	bl	8000a24 <__aeabi_dcmplt>
 8007b60:	3800      	subs	r0, #0
 8007b62:	bf18      	it	ne
 8007b64:	2001      	movne	r0, #1
 8007b66:	e72b      	b.n	80079c0 <__ieee754_pow+0x220>
 8007b68:	60000000 	.word	0x60000000
 8007b6c:	3ff71547 	.word	0x3ff71547
 8007b70:	f85ddf44 	.word	0xf85ddf44
 8007b74:	3e54ae0b 	.word	0x3e54ae0b
 8007b78:	55555555 	.word	0x55555555
 8007b7c:	3fd55555 	.word	0x3fd55555
 8007b80:	652b82fe 	.word	0x652b82fe
 8007b84:	3ff71547 	.word	0x3ff71547
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	bff00000 	.word	0xbff00000
 8007b90:	3ff00000 	.word	0x3ff00000
 8007b94:	3fd00000 	.word	0x3fd00000
 8007b98:	3fe00000 	.word	0x3fe00000
 8007b9c:	408fffff 	.word	0x408fffff
 8007ba0:	4bd5      	ldr	r3, [pc, #852]	; (8007ef8 <__ieee754_pow+0x758>)
 8007ba2:	402b      	ands	r3, r5
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	b92b      	cbnz	r3, 8007bb4 <__ieee754_pow+0x414>
 8007ba8:	4bd4      	ldr	r3, [pc, #848]	; (8007efc <__ieee754_pow+0x75c>)
 8007baa:	f7f8 fcc9 	bl	8000540 <__aeabi_dmul>
 8007bae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	1523      	asrs	r3, r4, #20
 8007bb6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007bba:	4413      	add	r3, r2
 8007bbc:	9305      	str	r3, [sp, #20]
 8007bbe:	4bd0      	ldr	r3, [pc, #832]	; (8007f00 <__ieee754_pow+0x760>)
 8007bc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007bc4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007bce:	dd08      	ble.n	8007be2 <__ieee754_pow+0x442>
 8007bd0:	4bcc      	ldr	r3, [pc, #816]	; (8007f04 <__ieee754_pow+0x764>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	f340 8162 	ble.w	8007e9c <__ieee754_pow+0x6fc>
 8007bd8:	9b05      	ldr	r3, [sp, #20]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	9305      	str	r3, [sp, #20]
 8007bde:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007be2:	2400      	movs	r4, #0
 8007be4:	00e3      	lsls	r3, r4, #3
 8007be6:	9307      	str	r3, [sp, #28]
 8007be8:	4bc7      	ldr	r3, [pc, #796]	; (8007f08 <__ieee754_pow+0x768>)
 8007bea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bee:	ed93 7b00 	vldr	d7, [r3]
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	ec53 2b17 	vmov	r2, r3, d7
 8007bf8:	eeb0 9a47 	vmov.f32	s18, s14
 8007bfc:	eef0 9a67 	vmov.f32	s19, s15
 8007c00:	4682      	mov	sl, r0
 8007c02:	f7f8 fae5 	bl	80001d0 <__aeabi_dsub>
 8007c06:	4652      	mov	r2, sl
 8007c08:	4606      	mov	r6, r0
 8007c0a:	460f      	mov	r7, r1
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	ec51 0b19 	vmov	r0, r1, d9
 8007c12:	f7f8 fadf 	bl	80001d4 <__adddf3>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	49bb      	ldr	r1, [pc, #748]	; (8007f0c <__ieee754_pow+0x76c>)
 8007c1e:	f7f8 fdb9 	bl	8000794 <__aeabi_ddiv>
 8007c22:	ec41 0b1a 	vmov	d10, r0, r1
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	f7f8 fc87 	bl	8000540 <__aeabi_dmul>
 8007c32:	2300      	movs	r3, #0
 8007c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c38:	9302      	str	r3, [sp, #8]
 8007c3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c3e:	46ab      	mov	fp, r5
 8007c40:	106d      	asrs	r5, r5, #1
 8007c42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007c46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007c4a:	ec41 0b18 	vmov	d8, r0, r1
 8007c4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007c52:	2200      	movs	r2, #0
 8007c54:	4640      	mov	r0, r8
 8007c56:	4649      	mov	r1, r9
 8007c58:	4614      	mov	r4, r2
 8007c5a:	461d      	mov	r5, r3
 8007c5c:	f7f8 fc70 	bl	8000540 <__aeabi_dmul>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 fab2 	bl	80001d0 <__aeabi_dsub>
 8007c6c:	ec53 2b19 	vmov	r2, r3, d9
 8007c70:	4606      	mov	r6, r0
 8007c72:	460f      	mov	r7, r1
 8007c74:	4620      	mov	r0, r4
 8007c76:	4629      	mov	r1, r5
 8007c78:	f7f8 faaa 	bl	80001d0 <__aeabi_dsub>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4650      	mov	r0, sl
 8007c82:	4659      	mov	r1, fp
 8007c84:	f7f8 faa4 	bl	80001d0 <__aeabi_dsub>
 8007c88:	4642      	mov	r2, r8
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	f7f8 fc58 	bl	8000540 <__aeabi_dmul>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f7f8 fa9a 	bl	80001d0 <__aeabi_dsub>
 8007c9c:	ec53 2b1a 	vmov	r2, r3, d10
 8007ca0:	f7f8 fc4e 	bl	8000540 <__aeabi_dmul>
 8007ca4:	ec53 2b18 	vmov	r2, r3, d8
 8007ca8:	ec41 0b19 	vmov	d9, r0, r1
 8007cac:	ec51 0b18 	vmov	r0, r1, d8
 8007cb0:	f7f8 fc46 	bl	8000540 <__aeabi_dmul>
 8007cb4:	a37c      	add	r3, pc, #496	; (adr r3, 8007ea8 <__ieee754_pow+0x708>)
 8007cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cba:	4604      	mov	r4, r0
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	f7f8 fc3f 	bl	8000540 <__aeabi_dmul>
 8007cc2:	a37b      	add	r3, pc, #492	; (adr r3, 8007eb0 <__ieee754_pow+0x710>)
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	f7f8 fa84 	bl	80001d4 <__adddf3>
 8007ccc:	4622      	mov	r2, r4
 8007cce:	462b      	mov	r3, r5
 8007cd0:	f7f8 fc36 	bl	8000540 <__aeabi_dmul>
 8007cd4:	a378      	add	r3, pc, #480	; (adr r3, 8007eb8 <__ieee754_pow+0x718>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f7f8 fa7b 	bl	80001d4 <__adddf3>
 8007cde:	4622      	mov	r2, r4
 8007ce0:	462b      	mov	r3, r5
 8007ce2:	f7f8 fc2d 	bl	8000540 <__aeabi_dmul>
 8007ce6:	a376      	add	r3, pc, #472	; (adr r3, 8007ec0 <__ieee754_pow+0x720>)
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	f7f8 fa72 	bl	80001d4 <__adddf3>
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	462b      	mov	r3, r5
 8007cf4:	f7f8 fc24 	bl	8000540 <__aeabi_dmul>
 8007cf8:	a373      	add	r3, pc, #460	; (adr r3, 8007ec8 <__ieee754_pow+0x728>)
 8007cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfe:	f7f8 fa69 	bl	80001d4 <__adddf3>
 8007d02:	4622      	mov	r2, r4
 8007d04:	462b      	mov	r3, r5
 8007d06:	f7f8 fc1b 	bl	8000540 <__aeabi_dmul>
 8007d0a:	a371      	add	r3, pc, #452	; (adr r3, 8007ed0 <__ieee754_pow+0x730>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	f7f8 fa60 	bl	80001d4 <__adddf3>
 8007d14:	4622      	mov	r2, r4
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	462b      	mov	r3, r5
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f7f8 fc0e 	bl	8000540 <__aeabi_dmul>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4630      	mov	r0, r6
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	f7f8 fc08 	bl	8000540 <__aeabi_dmul>
 8007d30:	4642      	mov	r2, r8
 8007d32:	4604      	mov	r4, r0
 8007d34:	460d      	mov	r5, r1
 8007d36:	464b      	mov	r3, r9
 8007d38:	ec51 0b18 	vmov	r0, r1, d8
 8007d3c:	f7f8 fa4a 	bl	80001d4 <__adddf3>
 8007d40:	ec53 2b19 	vmov	r2, r3, d9
 8007d44:	f7f8 fbfc 	bl	8000540 <__aeabi_dmul>
 8007d48:	4622      	mov	r2, r4
 8007d4a:	462b      	mov	r3, r5
 8007d4c:	f7f8 fa42 	bl	80001d4 <__adddf3>
 8007d50:	4642      	mov	r2, r8
 8007d52:	4682      	mov	sl, r0
 8007d54:	468b      	mov	fp, r1
 8007d56:	464b      	mov	r3, r9
 8007d58:	4640      	mov	r0, r8
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	f7f8 fbf0 	bl	8000540 <__aeabi_dmul>
 8007d60:	4b6b      	ldr	r3, [pc, #428]	; (8007f10 <__ieee754_pow+0x770>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	4606      	mov	r6, r0
 8007d66:	460f      	mov	r7, r1
 8007d68:	f7f8 fa34 	bl	80001d4 <__adddf3>
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	465b      	mov	r3, fp
 8007d70:	f7f8 fa30 	bl	80001d4 <__adddf3>
 8007d74:	2000      	movs	r0, #0
 8007d76:	4604      	mov	r4, r0
 8007d78:	460d      	mov	r5, r1
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4640      	mov	r0, r8
 8007d80:	4649      	mov	r1, r9
 8007d82:	f7f8 fbdd 	bl	8000540 <__aeabi_dmul>
 8007d86:	4b62      	ldr	r3, [pc, #392]	; (8007f10 <__ieee754_pow+0x770>)
 8007d88:	4680      	mov	r8, r0
 8007d8a:	4689      	mov	r9, r1
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4620      	mov	r0, r4
 8007d90:	4629      	mov	r1, r5
 8007d92:	f7f8 fa1d 	bl	80001d0 <__aeabi_dsub>
 8007d96:	4632      	mov	r2, r6
 8007d98:	463b      	mov	r3, r7
 8007d9a:	f7f8 fa19 	bl	80001d0 <__aeabi_dsub>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4650      	mov	r0, sl
 8007da4:	4659      	mov	r1, fp
 8007da6:	f7f8 fa13 	bl	80001d0 <__aeabi_dsub>
 8007daa:	ec53 2b18 	vmov	r2, r3, d8
 8007dae:	f7f8 fbc7 	bl	8000540 <__aeabi_dmul>
 8007db2:	4622      	mov	r2, r4
 8007db4:	4606      	mov	r6, r0
 8007db6:	460f      	mov	r7, r1
 8007db8:	462b      	mov	r3, r5
 8007dba:	ec51 0b19 	vmov	r0, r1, d9
 8007dbe:	f7f8 fbbf 	bl	8000540 <__aeabi_dmul>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	f7f8 fa03 	bl	80001d4 <__adddf3>
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460f      	mov	r7, r1
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	4649      	mov	r1, r9
 8007dda:	f7f8 f9fb 	bl	80001d4 <__adddf3>
 8007dde:	a33e      	add	r3, pc, #248	; (adr r3, 8007ed8 <__ieee754_pow+0x738>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	2000      	movs	r0, #0
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	f7f8 fba9 	bl	8000540 <__aeabi_dmul>
 8007dee:	4642      	mov	r2, r8
 8007df0:	ec41 0b18 	vmov	d8, r0, r1
 8007df4:	464b      	mov	r3, r9
 8007df6:	4620      	mov	r0, r4
 8007df8:	4629      	mov	r1, r5
 8007dfa:	f7f8 f9e9 	bl	80001d0 <__aeabi_dsub>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	4630      	mov	r0, r6
 8007e04:	4639      	mov	r1, r7
 8007e06:	f7f8 f9e3 	bl	80001d0 <__aeabi_dsub>
 8007e0a:	a335      	add	r3, pc, #212	; (adr r3, 8007ee0 <__ieee754_pow+0x740>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	f7f8 fb96 	bl	8000540 <__aeabi_dmul>
 8007e14:	a334      	add	r3, pc, #208	; (adr r3, 8007ee8 <__ieee754_pow+0x748>)
 8007e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	460f      	mov	r7, r1
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f7f8 fb8d 	bl	8000540 <__aeabi_dmul>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	f7f8 f9d1 	bl	80001d4 <__adddf3>
 8007e32:	9a07      	ldr	r2, [sp, #28]
 8007e34:	4b37      	ldr	r3, [pc, #220]	; (8007f14 <__ieee754_pow+0x774>)
 8007e36:	4413      	add	r3, r2
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f7f8 f9ca 	bl	80001d4 <__adddf3>
 8007e40:	4682      	mov	sl, r0
 8007e42:	9805      	ldr	r0, [sp, #20]
 8007e44:	468b      	mov	fp, r1
 8007e46:	f7f8 fb11 	bl	800046c <__aeabi_i2d>
 8007e4a:	9a07      	ldr	r2, [sp, #28]
 8007e4c:	4b32      	ldr	r3, [pc, #200]	; (8007f18 <__ieee754_pow+0x778>)
 8007e4e:	4413      	add	r3, r2
 8007e50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e54:	4606      	mov	r6, r0
 8007e56:	460f      	mov	r7, r1
 8007e58:	4652      	mov	r2, sl
 8007e5a:	465b      	mov	r3, fp
 8007e5c:	ec51 0b18 	vmov	r0, r1, d8
 8007e60:	f7f8 f9b8 	bl	80001d4 <__adddf3>
 8007e64:	4642      	mov	r2, r8
 8007e66:	464b      	mov	r3, r9
 8007e68:	f7f8 f9b4 	bl	80001d4 <__adddf3>
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	463b      	mov	r3, r7
 8007e70:	f7f8 f9b0 	bl	80001d4 <__adddf3>
 8007e74:	2000      	movs	r0, #0
 8007e76:	4632      	mov	r2, r6
 8007e78:	463b      	mov	r3, r7
 8007e7a:	4604      	mov	r4, r0
 8007e7c:	460d      	mov	r5, r1
 8007e7e:	f7f8 f9a7 	bl	80001d0 <__aeabi_dsub>
 8007e82:	4642      	mov	r2, r8
 8007e84:	464b      	mov	r3, r9
 8007e86:	f7f8 f9a3 	bl	80001d0 <__aeabi_dsub>
 8007e8a:	ec53 2b18 	vmov	r2, r3, d8
 8007e8e:	f7f8 f99f 	bl	80001d0 <__aeabi_dsub>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4650      	mov	r0, sl
 8007e98:	4659      	mov	r1, fp
 8007e9a:	e610      	b.n	8007abe <__ieee754_pow+0x31e>
 8007e9c:	2401      	movs	r4, #1
 8007e9e:	e6a1      	b.n	8007be4 <__ieee754_pow+0x444>
 8007ea0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007ef0 <__ieee754_pow+0x750>
 8007ea4:	e617      	b.n	8007ad6 <__ieee754_pow+0x336>
 8007ea6:	bf00      	nop
 8007ea8:	4a454eef 	.word	0x4a454eef
 8007eac:	3fca7e28 	.word	0x3fca7e28
 8007eb0:	93c9db65 	.word	0x93c9db65
 8007eb4:	3fcd864a 	.word	0x3fcd864a
 8007eb8:	a91d4101 	.word	0xa91d4101
 8007ebc:	3fd17460 	.word	0x3fd17460
 8007ec0:	518f264d 	.word	0x518f264d
 8007ec4:	3fd55555 	.word	0x3fd55555
 8007ec8:	db6fabff 	.word	0xdb6fabff
 8007ecc:	3fdb6db6 	.word	0x3fdb6db6
 8007ed0:	33333303 	.word	0x33333303
 8007ed4:	3fe33333 	.word	0x3fe33333
 8007ed8:	e0000000 	.word	0xe0000000
 8007edc:	3feec709 	.word	0x3feec709
 8007ee0:	dc3a03fd 	.word	0xdc3a03fd
 8007ee4:	3feec709 	.word	0x3feec709
 8007ee8:	145b01f5 	.word	0x145b01f5
 8007eec:	be3e2fe0 	.word	0xbe3e2fe0
 8007ef0:	00000000 	.word	0x00000000
 8007ef4:	3ff00000 	.word	0x3ff00000
 8007ef8:	7ff00000 	.word	0x7ff00000
 8007efc:	43400000 	.word	0x43400000
 8007f00:	0003988e 	.word	0x0003988e
 8007f04:	000bb679 	.word	0x000bb679
 8007f08:	080098e0 	.word	0x080098e0
 8007f0c:	3ff00000 	.word	0x3ff00000
 8007f10:	40080000 	.word	0x40080000
 8007f14:	08009900 	.word	0x08009900
 8007f18:	080098f0 	.word	0x080098f0
 8007f1c:	a3b5      	add	r3, pc, #724	; (adr r3, 80081f4 <__ieee754_pow+0xa54>)
 8007f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f22:	4640      	mov	r0, r8
 8007f24:	4649      	mov	r1, r9
 8007f26:	f7f8 f955 	bl	80001d4 <__adddf3>
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	ec41 0b1a 	vmov	d10, r0, r1
 8007f30:	462b      	mov	r3, r5
 8007f32:	4630      	mov	r0, r6
 8007f34:	4639      	mov	r1, r7
 8007f36:	f7f8 f94b 	bl	80001d0 <__aeabi_dsub>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	ec51 0b1a 	vmov	r0, r1, d10
 8007f42:	f7f8 fd8d 	bl	8000a60 <__aeabi_dcmpgt>
 8007f46:	2800      	cmp	r0, #0
 8007f48:	f47f ae04 	bne.w	8007b54 <__ieee754_pow+0x3b4>
 8007f4c:	4aa4      	ldr	r2, [pc, #656]	; (80081e0 <__ieee754_pow+0xa40>)
 8007f4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f52:	4293      	cmp	r3, r2
 8007f54:	f340 8108 	ble.w	8008168 <__ieee754_pow+0x9c8>
 8007f58:	151b      	asrs	r3, r3, #20
 8007f5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007f5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007f62:	fa4a f303 	asr.w	r3, sl, r3
 8007f66:	445b      	add	r3, fp
 8007f68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007f6c:	4e9d      	ldr	r6, [pc, #628]	; (80081e4 <__ieee754_pow+0xa44>)
 8007f6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007f72:	4116      	asrs	r6, r2
 8007f74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007f78:	2000      	movs	r0, #0
 8007f7a:	ea23 0106 	bic.w	r1, r3, r6
 8007f7e:	f1c2 0214 	rsb	r2, r2, #20
 8007f82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007f86:	fa4a fa02 	asr.w	sl, sl, r2
 8007f8a:	f1bb 0f00 	cmp.w	fp, #0
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	4620      	mov	r0, r4
 8007f94:	4629      	mov	r1, r5
 8007f96:	bfb8      	it	lt
 8007f98:	f1ca 0a00 	rsblt	sl, sl, #0
 8007f9c:	f7f8 f918 	bl	80001d0 <__aeabi_dsub>
 8007fa0:	ec41 0b19 	vmov	d9, r0, r1
 8007fa4:	4642      	mov	r2, r8
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	ec51 0b19 	vmov	r0, r1, d9
 8007fac:	f7f8 f912 	bl	80001d4 <__adddf3>
 8007fb0:	a37b      	add	r3, pc, #492	; (adr r3, 80081a0 <__ieee754_pow+0xa00>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	4604      	mov	r4, r0
 8007fba:	460d      	mov	r5, r1
 8007fbc:	f7f8 fac0 	bl	8000540 <__aeabi_dmul>
 8007fc0:	ec53 2b19 	vmov	r2, r3, d9
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	460f      	mov	r7, r1
 8007fc8:	4620      	mov	r0, r4
 8007fca:	4629      	mov	r1, r5
 8007fcc:	f7f8 f900 	bl	80001d0 <__aeabi_dsub>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7f8 f8fa 	bl	80001d0 <__aeabi_dsub>
 8007fdc:	a372      	add	r3, pc, #456	; (adr r3, 80081a8 <__ieee754_pow+0xa08>)
 8007fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe2:	f7f8 faad 	bl	8000540 <__aeabi_dmul>
 8007fe6:	a372      	add	r3, pc, #456	; (adr r3, 80081b0 <__ieee754_pow+0xa10>)
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	4680      	mov	r8, r0
 8007fee:	4689      	mov	r9, r1
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	f7f8 faa4 	bl	8000540 <__aeabi_dmul>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	4649      	mov	r1, r9
 8008000:	f7f8 f8e8 	bl	80001d4 <__adddf3>
 8008004:	4604      	mov	r4, r0
 8008006:	460d      	mov	r5, r1
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4630      	mov	r0, r6
 800800e:	4639      	mov	r1, r7
 8008010:	f7f8 f8e0 	bl	80001d4 <__adddf3>
 8008014:	4632      	mov	r2, r6
 8008016:	463b      	mov	r3, r7
 8008018:	4680      	mov	r8, r0
 800801a:	4689      	mov	r9, r1
 800801c:	f7f8 f8d8 	bl	80001d0 <__aeabi_dsub>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4620      	mov	r0, r4
 8008026:	4629      	mov	r1, r5
 8008028:	f7f8 f8d2 	bl	80001d0 <__aeabi_dsub>
 800802c:	4642      	mov	r2, r8
 800802e:	4606      	mov	r6, r0
 8008030:	460f      	mov	r7, r1
 8008032:	464b      	mov	r3, r9
 8008034:	4640      	mov	r0, r8
 8008036:	4649      	mov	r1, r9
 8008038:	f7f8 fa82 	bl	8000540 <__aeabi_dmul>
 800803c:	a35e      	add	r3, pc, #376	; (adr r3, 80081b8 <__ieee754_pow+0xa18>)
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	4604      	mov	r4, r0
 8008044:	460d      	mov	r5, r1
 8008046:	f7f8 fa7b 	bl	8000540 <__aeabi_dmul>
 800804a:	a35d      	add	r3, pc, #372	; (adr r3, 80081c0 <__ieee754_pow+0xa20>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f8be 	bl	80001d0 <__aeabi_dsub>
 8008054:	4622      	mov	r2, r4
 8008056:	462b      	mov	r3, r5
 8008058:	f7f8 fa72 	bl	8000540 <__aeabi_dmul>
 800805c:	a35a      	add	r3, pc, #360	; (adr r3, 80081c8 <__ieee754_pow+0xa28>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f7f8 f8b7 	bl	80001d4 <__adddf3>
 8008066:	4622      	mov	r2, r4
 8008068:	462b      	mov	r3, r5
 800806a:	f7f8 fa69 	bl	8000540 <__aeabi_dmul>
 800806e:	a358      	add	r3, pc, #352	; (adr r3, 80081d0 <__ieee754_pow+0xa30>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f8ac 	bl	80001d0 <__aeabi_dsub>
 8008078:	4622      	mov	r2, r4
 800807a:	462b      	mov	r3, r5
 800807c:	f7f8 fa60 	bl	8000540 <__aeabi_dmul>
 8008080:	a355      	add	r3, pc, #340	; (adr r3, 80081d8 <__ieee754_pow+0xa38>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 f8a5 	bl	80001d4 <__adddf3>
 800808a:	4622      	mov	r2, r4
 800808c:	462b      	mov	r3, r5
 800808e:	f7f8 fa57 	bl	8000540 <__aeabi_dmul>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4640      	mov	r0, r8
 8008098:	4649      	mov	r1, r9
 800809a:	f7f8 f899 	bl	80001d0 <__aeabi_dsub>
 800809e:	4604      	mov	r4, r0
 80080a0:	460d      	mov	r5, r1
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	4640      	mov	r0, r8
 80080a8:	4649      	mov	r1, r9
 80080aa:	f7f8 fa49 	bl	8000540 <__aeabi_dmul>
 80080ae:	2200      	movs	r2, #0
 80080b0:	ec41 0b19 	vmov	d9, r0, r1
 80080b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080b8:	4620      	mov	r0, r4
 80080ba:	4629      	mov	r1, r5
 80080bc:	f7f8 f888 	bl	80001d0 <__aeabi_dsub>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	ec51 0b19 	vmov	r0, r1, d9
 80080c8:	f7f8 fb64 	bl	8000794 <__aeabi_ddiv>
 80080cc:	4632      	mov	r2, r6
 80080ce:	4604      	mov	r4, r0
 80080d0:	460d      	mov	r5, r1
 80080d2:	463b      	mov	r3, r7
 80080d4:	4640      	mov	r0, r8
 80080d6:	4649      	mov	r1, r9
 80080d8:	f7f8 fa32 	bl	8000540 <__aeabi_dmul>
 80080dc:	4632      	mov	r2, r6
 80080de:	463b      	mov	r3, r7
 80080e0:	f7f8 f878 	bl	80001d4 <__adddf3>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4620      	mov	r0, r4
 80080ea:	4629      	mov	r1, r5
 80080ec:	f7f8 f870 	bl	80001d0 <__aeabi_dsub>
 80080f0:	4642      	mov	r2, r8
 80080f2:	464b      	mov	r3, r9
 80080f4:	f7f8 f86c 	bl	80001d0 <__aeabi_dsub>
 80080f8:	460b      	mov	r3, r1
 80080fa:	4602      	mov	r2, r0
 80080fc:	493a      	ldr	r1, [pc, #232]	; (80081e8 <__ieee754_pow+0xa48>)
 80080fe:	2000      	movs	r0, #0
 8008100:	f7f8 f866 	bl	80001d0 <__aeabi_dsub>
 8008104:	ec41 0b10 	vmov	d0, r0, r1
 8008108:	ee10 3a90 	vmov	r3, s1
 800810c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008114:	da2b      	bge.n	800816e <__ieee754_pow+0x9ce>
 8008116:	4650      	mov	r0, sl
 8008118:	f001 fa56 	bl	80095c8 <scalbn>
 800811c:	ec51 0b10 	vmov	r0, r1, d0
 8008120:	ec53 2b18 	vmov	r2, r3, d8
 8008124:	f7ff bbed 	b.w	8007902 <__ieee754_pow+0x162>
 8008128:	4b30      	ldr	r3, [pc, #192]	; (80081ec <__ieee754_pow+0xa4c>)
 800812a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800812e:	429e      	cmp	r6, r3
 8008130:	f77f af0c 	ble.w	8007f4c <__ieee754_pow+0x7ac>
 8008134:	4b2e      	ldr	r3, [pc, #184]	; (80081f0 <__ieee754_pow+0xa50>)
 8008136:	440b      	add	r3, r1
 8008138:	4303      	orrs	r3, r0
 800813a:	d009      	beq.n	8008150 <__ieee754_pow+0x9b0>
 800813c:	ec51 0b18 	vmov	r0, r1, d8
 8008140:	2200      	movs	r2, #0
 8008142:	2300      	movs	r3, #0
 8008144:	f7f8 fc6e 	bl	8000a24 <__aeabi_dcmplt>
 8008148:	3800      	subs	r0, #0
 800814a:	bf18      	it	ne
 800814c:	2001      	movne	r0, #1
 800814e:	e447      	b.n	80079e0 <__ieee754_pow+0x240>
 8008150:	4622      	mov	r2, r4
 8008152:	462b      	mov	r3, r5
 8008154:	f7f8 f83c 	bl	80001d0 <__aeabi_dsub>
 8008158:	4642      	mov	r2, r8
 800815a:	464b      	mov	r3, r9
 800815c:	f7f8 fc76 	bl	8000a4c <__aeabi_dcmpge>
 8008160:	2800      	cmp	r0, #0
 8008162:	f43f aef3 	beq.w	8007f4c <__ieee754_pow+0x7ac>
 8008166:	e7e9      	b.n	800813c <__ieee754_pow+0x99c>
 8008168:	f04f 0a00 	mov.w	sl, #0
 800816c:	e71a      	b.n	8007fa4 <__ieee754_pow+0x804>
 800816e:	ec51 0b10 	vmov	r0, r1, d0
 8008172:	4619      	mov	r1, r3
 8008174:	e7d4      	b.n	8008120 <__ieee754_pow+0x980>
 8008176:	491c      	ldr	r1, [pc, #112]	; (80081e8 <__ieee754_pow+0xa48>)
 8008178:	2000      	movs	r0, #0
 800817a:	f7ff bb30 	b.w	80077de <__ieee754_pow+0x3e>
 800817e:	2000      	movs	r0, #0
 8008180:	2100      	movs	r1, #0
 8008182:	f7ff bb2c 	b.w	80077de <__ieee754_pow+0x3e>
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7ff bb28 	b.w	80077de <__ieee754_pow+0x3e>
 800818e:	9204      	str	r2, [sp, #16]
 8008190:	f7ff bb7a 	b.w	8007888 <__ieee754_pow+0xe8>
 8008194:	2300      	movs	r3, #0
 8008196:	f7ff bb64 	b.w	8007862 <__ieee754_pow+0xc2>
 800819a:	bf00      	nop
 800819c:	f3af 8000 	nop.w
 80081a0:	00000000 	.word	0x00000000
 80081a4:	3fe62e43 	.word	0x3fe62e43
 80081a8:	fefa39ef 	.word	0xfefa39ef
 80081ac:	3fe62e42 	.word	0x3fe62e42
 80081b0:	0ca86c39 	.word	0x0ca86c39
 80081b4:	be205c61 	.word	0xbe205c61
 80081b8:	72bea4d0 	.word	0x72bea4d0
 80081bc:	3e663769 	.word	0x3e663769
 80081c0:	c5d26bf1 	.word	0xc5d26bf1
 80081c4:	3ebbbd41 	.word	0x3ebbbd41
 80081c8:	af25de2c 	.word	0xaf25de2c
 80081cc:	3f11566a 	.word	0x3f11566a
 80081d0:	16bebd93 	.word	0x16bebd93
 80081d4:	3f66c16c 	.word	0x3f66c16c
 80081d8:	5555553e 	.word	0x5555553e
 80081dc:	3fc55555 	.word	0x3fc55555
 80081e0:	3fe00000 	.word	0x3fe00000
 80081e4:	000fffff 	.word	0x000fffff
 80081e8:	3ff00000 	.word	0x3ff00000
 80081ec:	4090cbff 	.word	0x4090cbff
 80081f0:	3f6f3400 	.word	0x3f6f3400
 80081f4:	652b82fe 	.word	0x652b82fe
 80081f8:	3c971547 	.word	0x3c971547
 80081fc:	00000000 	.word	0x00000000

08008200 <__ieee754_rem_pio2>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	ed2d 8b02 	vpush	{d8}
 8008208:	ec55 4b10 	vmov	r4, r5, d0
 800820c:	4bca      	ldr	r3, [pc, #808]	; (8008538 <__ieee754_rem_pio2+0x338>)
 800820e:	b08b      	sub	sp, #44	; 0x2c
 8008210:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008214:	4598      	cmp	r8, r3
 8008216:	4682      	mov	sl, r0
 8008218:	9502      	str	r5, [sp, #8]
 800821a:	dc08      	bgt.n	800822e <__ieee754_rem_pio2+0x2e>
 800821c:	2200      	movs	r2, #0
 800821e:	2300      	movs	r3, #0
 8008220:	ed80 0b00 	vstr	d0, [r0]
 8008224:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008228:	f04f 0b00 	mov.w	fp, #0
 800822c:	e028      	b.n	8008280 <__ieee754_rem_pio2+0x80>
 800822e:	4bc3      	ldr	r3, [pc, #780]	; (800853c <__ieee754_rem_pio2+0x33c>)
 8008230:	4598      	cmp	r8, r3
 8008232:	dc78      	bgt.n	8008326 <__ieee754_rem_pio2+0x126>
 8008234:	9b02      	ldr	r3, [sp, #8]
 8008236:	4ec2      	ldr	r6, [pc, #776]	; (8008540 <__ieee754_rem_pio2+0x340>)
 8008238:	2b00      	cmp	r3, #0
 800823a:	ee10 0a10 	vmov	r0, s0
 800823e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008500 <__ieee754_rem_pio2+0x300>)
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	4629      	mov	r1, r5
 8008246:	dd39      	ble.n	80082bc <__ieee754_rem_pio2+0xbc>
 8008248:	f7f7 ffc2 	bl	80001d0 <__aeabi_dsub>
 800824c:	45b0      	cmp	r8, r6
 800824e:	4604      	mov	r4, r0
 8008250:	460d      	mov	r5, r1
 8008252:	d01b      	beq.n	800828c <__ieee754_rem_pio2+0x8c>
 8008254:	a3ac      	add	r3, pc, #688	; (adr r3, 8008508 <__ieee754_rem_pio2+0x308>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f7f7 ffb9 	bl	80001d0 <__aeabi_dsub>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	e9ca 2300 	strd	r2, r3, [sl]
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f7 ffb1 	bl	80001d0 <__aeabi_dsub>
 800826e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008508 <__ieee754_rem_pio2+0x308>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f7f7 ffac 	bl	80001d0 <__aeabi_dsub>
 8008278:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800827c:	f04f 0b01 	mov.w	fp, #1
 8008280:	4658      	mov	r0, fp
 8008282:	b00b      	add	sp, #44	; 0x2c
 8008284:	ecbd 8b02 	vpop	{d8}
 8008288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008510 <__ieee754_rem_pio2+0x310>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f7f7 ff9d 	bl	80001d0 <__aeabi_dsub>
 8008296:	a3a0      	add	r3, pc, #640	; (adr r3, 8008518 <__ieee754_rem_pio2+0x318>)
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	f7f7 ff96 	bl	80001d0 <__aeabi_dsub>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	e9ca 2300 	strd	r2, r3, [sl]
 80082ac:	4620      	mov	r0, r4
 80082ae:	4629      	mov	r1, r5
 80082b0:	f7f7 ff8e 	bl	80001d0 <__aeabi_dsub>
 80082b4:	a398      	add	r3, pc, #608	; (adr r3, 8008518 <__ieee754_rem_pio2+0x318>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	e7db      	b.n	8008274 <__ieee754_rem_pio2+0x74>
 80082bc:	f7f7 ff8a 	bl	80001d4 <__adddf3>
 80082c0:	45b0      	cmp	r8, r6
 80082c2:	4604      	mov	r4, r0
 80082c4:	460d      	mov	r5, r1
 80082c6:	d016      	beq.n	80082f6 <__ieee754_rem_pio2+0xf6>
 80082c8:	a38f      	add	r3, pc, #572	; (adr r3, 8008508 <__ieee754_rem_pio2+0x308>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f7f7 ff81 	bl	80001d4 <__adddf3>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	e9ca 2300 	strd	r2, r3, [sl]
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	f7f7 ff77 	bl	80001d0 <__aeabi_dsub>
 80082e2:	a389      	add	r3, pc, #548	; (adr r3, 8008508 <__ieee754_rem_pio2+0x308>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f7f7 ff74 	bl	80001d4 <__adddf3>
 80082ec:	f04f 3bff 	mov.w	fp, #4294967295
 80082f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80082f4:	e7c4      	b.n	8008280 <__ieee754_rem_pio2+0x80>
 80082f6:	a386      	add	r3, pc, #536	; (adr r3, 8008510 <__ieee754_rem_pio2+0x310>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f7f7 ff6a 	bl	80001d4 <__adddf3>
 8008300:	a385      	add	r3, pc, #532	; (adr r3, 8008518 <__ieee754_rem_pio2+0x318>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	4604      	mov	r4, r0
 8008308:	460d      	mov	r5, r1
 800830a:	f7f7 ff63 	bl	80001d4 <__adddf3>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	e9ca 2300 	strd	r2, r3, [sl]
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f7 ff59 	bl	80001d0 <__aeabi_dsub>
 800831e:	a37e      	add	r3, pc, #504	; (adr r3, 8008518 <__ieee754_rem_pio2+0x318>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	e7e0      	b.n	80082e8 <__ieee754_rem_pio2+0xe8>
 8008326:	4b87      	ldr	r3, [pc, #540]	; (8008544 <__ieee754_rem_pio2+0x344>)
 8008328:	4598      	cmp	r8, r3
 800832a:	f300 80d9 	bgt.w	80084e0 <__ieee754_rem_pio2+0x2e0>
 800832e:	f001 f8b5 	bl	800949c <fabs>
 8008332:	ec55 4b10 	vmov	r4, r5, d0
 8008336:	ee10 0a10 	vmov	r0, s0
 800833a:	a379      	add	r3, pc, #484	; (adr r3, 8008520 <__ieee754_rem_pio2+0x320>)
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	4629      	mov	r1, r5
 8008342:	f7f8 f8fd 	bl	8000540 <__aeabi_dmul>
 8008346:	4b80      	ldr	r3, [pc, #512]	; (8008548 <__ieee754_rem_pio2+0x348>)
 8008348:	2200      	movs	r2, #0
 800834a:	f7f7 ff43 	bl	80001d4 <__adddf3>
 800834e:	f7f8 fba7 	bl	8000aa0 <__aeabi_d2iz>
 8008352:	4683      	mov	fp, r0
 8008354:	f7f8 f88a 	bl	800046c <__aeabi_i2d>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	ec43 2b18 	vmov	d8, r2, r3
 8008360:	a367      	add	r3, pc, #412	; (adr r3, 8008500 <__ieee754_rem_pio2+0x300>)
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7f8 f8eb 	bl	8000540 <__aeabi_dmul>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	4620      	mov	r0, r4
 8008370:	4629      	mov	r1, r5
 8008372:	f7f7 ff2d 	bl	80001d0 <__aeabi_dsub>
 8008376:	a364      	add	r3, pc, #400	; (adr r3, 8008508 <__ieee754_rem_pio2+0x308>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	4606      	mov	r6, r0
 800837e:	460f      	mov	r7, r1
 8008380:	ec51 0b18 	vmov	r0, r1, d8
 8008384:	f7f8 f8dc 	bl	8000540 <__aeabi_dmul>
 8008388:	f1bb 0f1f 	cmp.w	fp, #31
 800838c:	4604      	mov	r4, r0
 800838e:	460d      	mov	r5, r1
 8008390:	dc0d      	bgt.n	80083ae <__ieee754_rem_pio2+0x1ae>
 8008392:	4b6e      	ldr	r3, [pc, #440]	; (800854c <__ieee754_rem_pio2+0x34c>)
 8008394:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839c:	4543      	cmp	r3, r8
 800839e:	d006      	beq.n	80083ae <__ieee754_rem_pio2+0x1ae>
 80083a0:	4622      	mov	r2, r4
 80083a2:	462b      	mov	r3, r5
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f7 ff12 	bl	80001d0 <__aeabi_dsub>
 80083ac:	e00f      	b.n	80083ce <__ieee754_rem_pio2+0x1ce>
 80083ae:	462b      	mov	r3, r5
 80083b0:	4622      	mov	r2, r4
 80083b2:	4630      	mov	r0, r6
 80083b4:	4639      	mov	r1, r7
 80083b6:	f7f7 ff0b 	bl	80001d0 <__aeabi_dsub>
 80083ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80083be:	9303      	str	r3, [sp, #12]
 80083c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80083c8:	f1b8 0f10 	cmp.w	r8, #16
 80083cc:	dc02      	bgt.n	80083d4 <__ieee754_rem_pio2+0x1d4>
 80083ce:	e9ca 0100 	strd	r0, r1, [sl]
 80083d2:	e039      	b.n	8008448 <__ieee754_rem_pio2+0x248>
 80083d4:	a34e      	add	r3, pc, #312	; (adr r3, 8008510 <__ieee754_rem_pio2+0x310>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	ec51 0b18 	vmov	r0, r1, d8
 80083de:	f7f8 f8af 	bl	8000540 <__aeabi_dmul>
 80083e2:	4604      	mov	r4, r0
 80083e4:	460d      	mov	r5, r1
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f7 feef 	bl	80001d0 <__aeabi_dsub>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4680      	mov	r8, r0
 80083f8:	4689      	mov	r9, r1
 80083fa:	4630      	mov	r0, r6
 80083fc:	4639      	mov	r1, r7
 80083fe:	f7f7 fee7 	bl	80001d0 <__aeabi_dsub>
 8008402:	4622      	mov	r2, r4
 8008404:	462b      	mov	r3, r5
 8008406:	f7f7 fee3 	bl	80001d0 <__aeabi_dsub>
 800840a:	a343      	add	r3, pc, #268	; (adr r3, 8008518 <__ieee754_rem_pio2+0x318>)
 800840c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008410:	4604      	mov	r4, r0
 8008412:	460d      	mov	r5, r1
 8008414:	ec51 0b18 	vmov	r0, r1, d8
 8008418:	f7f8 f892 	bl	8000540 <__aeabi_dmul>
 800841c:	4622      	mov	r2, r4
 800841e:	462b      	mov	r3, r5
 8008420:	f7f7 fed6 	bl	80001d0 <__aeabi_dsub>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4604      	mov	r4, r0
 800842a:	460d      	mov	r5, r1
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f7 fece 	bl	80001d0 <__aeabi_dsub>
 8008434:	9a03      	ldr	r2, [sp, #12]
 8008436:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b31      	cmp	r3, #49	; 0x31
 800843e:	dc24      	bgt.n	800848a <__ieee754_rem_pio2+0x28a>
 8008440:	e9ca 0100 	strd	r0, r1, [sl]
 8008444:	4646      	mov	r6, r8
 8008446:	464f      	mov	r7, r9
 8008448:	e9da 8900 	ldrd	r8, r9, [sl]
 800844c:	4630      	mov	r0, r6
 800844e:	4642      	mov	r2, r8
 8008450:	464b      	mov	r3, r9
 8008452:	4639      	mov	r1, r7
 8008454:	f7f7 febc 	bl	80001d0 <__aeabi_dsub>
 8008458:	462b      	mov	r3, r5
 800845a:	4622      	mov	r2, r4
 800845c:	f7f7 feb8 	bl	80001d0 <__aeabi_dsub>
 8008460:	9b02      	ldr	r3, [sp, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008468:	f6bf af0a 	bge.w	8008280 <__ieee754_rem_pio2+0x80>
 800846c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008470:	f8ca 3004 	str.w	r3, [sl, #4]
 8008474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008478:	f8ca 8000 	str.w	r8, [sl]
 800847c:	f8ca 0008 	str.w	r0, [sl, #8]
 8008480:	f8ca 300c 	str.w	r3, [sl, #12]
 8008484:	f1cb 0b00 	rsb	fp, fp, #0
 8008488:	e6fa      	b.n	8008280 <__ieee754_rem_pio2+0x80>
 800848a:	a327      	add	r3, pc, #156	; (adr r3, 8008528 <__ieee754_rem_pio2+0x328>)
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	ec51 0b18 	vmov	r0, r1, d8
 8008494:	f7f8 f854 	bl	8000540 <__aeabi_dmul>
 8008498:	4604      	mov	r4, r0
 800849a:	460d      	mov	r5, r1
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4640      	mov	r0, r8
 80084a2:	4649      	mov	r1, r9
 80084a4:	f7f7 fe94 	bl	80001d0 <__aeabi_dsub>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4606      	mov	r6, r0
 80084ae:	460f      	mov	r7, r1
 80084b0:	4640      	mov	r0, r8
 80084b2:	4649      	mov	r1, r9
 80084b4:	f7f7 fe8c 	bl	80001d0 <__aeabi_dsub>
 80084b8:	4622      	mov	r2, r4
 80084ba:	462b      	mov	r3, r5
 80084bc:	f7f7 fe88 	bl	80001d0 <__aeabi_dsub>
 80084c0:	a31b      	add	r3, pc, #108	; (adr r3, 8008530 <__ieee754_rem_pio2+0x330>)
 80084c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c6:	4604      	mov	r4, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	ec51 0b18 	vmov	r0, r1, d8
 80084ce:	f7f8 f837 	bl	8000540 <__aeabi_dmul>
 80084d2:	4622      	mov	r2, r4
 80084d4:	462b      	mov	r3, r5
 80084d6:	f7f7 fe7b 	bl	80001d0 <__aeabi_dsub>
 80084da:	4604      	mov	r4, r0
 80084dc:	460d      	mov	r5, r1
 80084de:	e75f      	b.n	80083a0 <__ieee754_rem_pio2+0x1a0>
 80084e0:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <__ieee754_rem_pio2+0x350>)
 80084e2:	4598      	cmp	r8, r3
 80084e4:	dd36      	ble.n	8008554 <__ieee754_rem_pio2+0x354>
 80084e6:	ee10 2a10 	vmov	r2, s0
 80084ea:	462b      	mov	r3, r5
 80084ec:	4620      	mov	r0, r4
 80084ee:	4629      	mov	r1, r5
 80084f0:	f7f7 fe6e 	bl	80001d0 <__aeabi_dsub>
 80084f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084f8:	e9ca 0100 	strd	r0, r1, [sl]
 80084fc:	e694      	b.n	8008228 <__ieee754_rem_pio2+0x28>
 80084fe:	bf00      	nop
 8008500:	54400000 	.word	0x54400000
 8008504:	3ff921fb 	.word	0x3ff921fb
 8008508:	1a626331 	.word	0x1a626331
 800850c:	3dd0b461 	.word	0x3dd0b461
 8008510:	1a600000 	.word	0x1a600000
 8008514:	3dd0b461 	.word	0x3dd0b461
 8008518:	2e037073 	.word	0x2e037073
 800851c:	3ba3198a 	.word	0x3ba3198a
 8008520:	6dc9c883 	.word	0x6dc9c883
 8008524:	3fe45f30 	.word	0x3fe45f30
 8008528:	2e000000 	.word	0x2e000000
 800852c:	3ba3198a 	.word	0x3ba3198a
 8008530:	252049c1 	.word	0x252049c1
 8008534:	397b839a 	.word	0x397b839a
 8008538:	3fe921fb 	.word	0x3fe921fb
 800853c:	4002d97b 	.word	0x4002d97b
 8008540:	3ff921fb 	.word	0x3ff921fb
 8008544:	413921fb 	.word	0x413921fb
 8008548:	3fe00000 	.word	0x3fe00000
 800854c:	08009910 	.word	0x08009910
 8008550:	7fefffff 	.word	0x7fefffff
 8008554:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008558:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800855c:	ee10 0a10 	vmov	r0, s0
 8008560:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008564:	ee10 6a10 	vmov	r6, s0
 8008568:	460f      	mov	r7, r1
 800856a:	f7f8 fa99 	bl	8000aa0 <__aeabi_d2iz>
 800856e:	f7f7 ff7d 	bl	800046c <__aeabi_i2d>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800857e:	f7f7 fe27 	bl	80001d0 <__aeabi_dsub>
 8008582:	4b23      	ldr	r3, [pc, #140]	; (8008610 <__ieee754_rem_pio2+0x410>)
 8008584:	2200      	movs	r2, #0
 8008586:	f7f7 ffdb 	bl	8000540 <__aeabi_dmul>
 800858a:	460f      	mov	r7, r1
 800858c:	4606      	mov	r6, r0
 800858e:	f7f8 fa87 	bl	8000aa0 <__aeabi_d2iz>
 8008592:	f7f7 ff6b 	bl	800046c <__aeabi_i2d>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4630      	mov	r0, r6
 800859c:	4639      	mov	r1, r7
 800859e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80085a2:	f7f7 fe15 	bl	80001d0 <__aeabi_dsub>
 80085a6:	4b1a      	ldr	r3, [pc, #104]	; (8008610 <__ieee754_rem_pio2+0x410>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	f7f7 ffc9 	bl	8000540 <__aeabi_dmul>
 80085ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085b2:	ad04      	add	r5, sp, #16
 80085b4:	f04f 0803 	mov.w	r8, #3
 80085b8:	46a9      	mov	r9, r5
 80085ba:	2600      	movs	r6, #0
 80085bc:	2700      	movs	r7, #0
 80085be:	4632      	mov	r2, r6
 80085c0:	463b      	mov	r3, r7
 80085c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80085c6:	46c3      	mov	fp, r8
 80085c8:	3d08      	subs	r5, #8
 80085ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80085ce:	f7f8 fa1f 	bl	8000a10 <__aeabi_dcmpeq>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d1f3      	bne.n	80085be <__ieee754_rem_pio2+0x3be>
 80085d6:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <__ieee754_rem_pio2+0x414>)
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	2302      	movs	r3, #2
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	4622      	mov	r2, r4
 80085e0:	465b      	mov	r3, fp
 80085e2:	4651      	mov	r1, sl
 80085e4:	4648      	mov	r0, r9
 80085e6:	f000 fb1b 	bl	8008c20 <__kernel_rem_pio2>
 80085ea:	9b02      	ldr	r3, [sp, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	4683      	mov	fp, r0
 80085f0:	f6bf ae46 	bge.w	8008280 <__ieee754_rem_pio2+0x80>
 80085f4:	e9da 2100 	ldrd	r2, r1, [sl]
 80085f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085fc:	e9ca 2300 	strd	r2, r3, [sl]
 8008600:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008604:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008608:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800860c:	e73a      	b.n	8008484 <__ieee754_rem_pio2+0x284>
 800860e:	bf00      	nop
 8008610:	41700000 	.word	0x41700000
 8008614:	08009990 	.word	0x08009990

08008618 <__ieee754_sqrt>:
 8008618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800861c:	ec55 4b10 	vmov	r4, r5, d0
 8008620:	4e55      	ldr	r6, [pc, #340]	; (8008778 <__ieee754_sqrt+0x160>)
 8008622:	43ae      	bics	r6, r5
 8008624:	ee10 0a10 	vmov	r0, s0
 8008628:	ee10 3a10 	vmov	r3, s0
 800862c:	462a      	mov	r2, r5
 800862e:	4629      	mov	r1, r5
 8008630:	d110      	bne.n	8008654 <__ieee754_sqrt+0x3c>
 8008632:	ee10 2a10 	vmov	r2, s0
 8008636:	462b      	mov	r3, r5
 8008638:	f7f7 ff82 	bl	8000540 <__aeabi_dmul>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4620      	mov	r0, r4
 8008642:	4629      	mov	r1, r5
 8008644:	f7f7 fdc6 	bl	80001d4 <__adddf3>
 8008648:	4604      	mov	r4, r0
 800864a:	460d      	mov	r5, r1
 800864c:	ec45 4b10 	vmov	d0, r4, r5
 8008650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008654:	2d00      	cmp	r5, #0
 8008656:	dc10      	bgt.n	800867a <__ieee754_sqrt+0x62>
 8008658:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800865c:	4330      	orrs	r0, r6
 800865e:	d0f5      	beq.n	800864c <__ieee754_sqrt+0x34>
 8008660:	b15d      	cbz	r5, 800867a <__ieee754_sqrt+0x62>
 8008662:	ee10 2a10 	vmov	r2, s0
 8008666:	462b      	mov	r3, r5
 8008668:	ee10 0a10 	vmov	r0, s0
 800866c:	f7f7 fdb0 	bl	80001d0 <__aeabi_dsub>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	f7f8 f88e 	bl	8000794 <__aeabi_ddiv>
 8008678:	e7e6      	b.n	8008648 <__ieee754_sqrt+0x30>
 800867a:	1512      	asrs	r2, r2, #20
 800867c:	d074      	beq.n	8008768 <__ieee754_sqrt+0x150>
 800867e:	07d4      	lsls	r4, r2, #31
 8008680:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008684:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800868c:	bf5e      	ittt	pl
 800868e:	0fda      	lsrpl	r2, r3, #31
 8008690:	005b      	lslpl	r3, r3, #1
 8008692:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008696:	2400      	movs	r4, #0
 8008698:	0fda      	lsrs	r2, r3, #31
 800869a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800869e:	107f      	asrs	r7, r7, #1
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	2516      	movs	r5, #22
 80086a4:	4620      	mov	r0, r4
 80086a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80086aa:	1886      	adds	r6, r0, r2
 80086ac:	428e      	cmp	r6, r1
 80086ae:	bfde      	ittt	le
 80086b0:	1b89      	suble	r1, r1, r6
 80086b2:	18b0      	addle	r0, r6, r2
 80086b4:	18a4      	addle	r4, r4, r2
 80086b6:	0049      	lsls	r1, r1, #1
 80086b8:	3d01      	subs	r5, #1
 80086ba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80086be:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80086c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80086c6:	d1f0      	bne.n	80086aa <__ieee754_sqrt+0x92>
 80086c8:	462a      	mov	r2, r5
 80086ca:	f04f 0e20 	mov.w	lr, #32
 80086ce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80086d2:	4281      	cmp	r1, r0
 80086d4:	eb06 0c05 	add.w	ip, r6, r5
 80086d8:	dc02      	bgt.n	80086e0 <__ieee754_sqrt+0xc8>
 80086da:	d113      	bne.n	8008704 <__ieee754_sqrt+0xec>
 80086dc:	459c      	cmp	ip, r3
 80086de:	d811      	bhi.n	8008704 <__ieee754_sqrt+0xec>
 80086e0:	f1bc 0f00 	cmp.w	ip, #0
 80086e4:	eb0c 0506 	add.w	r5, ip, r6
 80086e8:	da43      	bge.n	8008772 <__ieee754_sqrt+0x15a>
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	db41      	blt.n	8008772 <__ieee754_sqrt+0x15a>
 80086ee:	f100 0801 	add.w	r8, r0, #1
 80086f2:	1a09      	subs	r1, r1, r0
 80086f4:	459c      	cmp	ip, r3
 80086f6:	bf88      	it	hi
 80086f8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80086fc:	eba3 030c 	sub.w	r3, r3, ip
 8008700:	4432      	add	r2, r6
 8008702:	4640      	mov	r0, r8
 8008704:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008708:	f1be 0e01 	subs.w	lr, lr, #1
 800870c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008710:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008714:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008718:	d1db      	bne.n	80086d2 <__ieee754_sqrt+0xba>
 800871a:	430b      	orrs	r3, r1
 800871c:	d006      	beq.n	800872c <__ieee754_sqrt+0x114>
 800871e:	1c50      	adds	r0, r2, #1
 8008720:	bf13      	iteet	ne
 8008722:	3201      	addne	r2, #1
 8008724:	3401      	addeq	r4, #1
 8008726:	4672      	moveq	r2, lr
 8008728:	f022 0201 	bicne.w	r2, r2, #1
 800872c:	1063      	asrs	r3, r4, #1
 800872e:	0852      	lsrs	r2, r2, #1
 8008730:	07e1      	lsls	r1, r4, #31
 8008732:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008736:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800873a:	bf48      	it	mi
 800873c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008740:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008744:	4614      	mov	r4, r2
 8008746:	e781      	b.n	800864c <__ieee754_sqrt+0x34>
 8008748:	0ad9      	lsrs	r1, r3, #11
 800874a:	3815      	subs	r0, #21
 800874c:	055b      	lsls	r3, r3, #21
 800874e:	2900      	cmp	r1, #0
 8008750:	d0fa      	beq.n	8008748 <__ieee754_sqrt+0x130>
 8008752:	02cd      	lsls	r5, r1, #11
 8008754:	d50a      	bpl.n	800876c <__ieee754_sqrt+0x154>
 8008756:	f1c2 0420 	rsb	r4, r2, #32
 800875a:	fa23 f404 	lsr.w	r4, r3, r4
 800875e:	1e55      	subs	r5, r2, #1
 8008760:	4093      	lsls	r3, r2
 8008762:	4321      	orrs	r1, r4
 8008764:	1b42      	subs	r2, r0, r5
 8008766:	e78a      	b.n	800867e <__ieee754_sqrt+0x66>
 8008768:	4610      	mov	r0, r2
 800876a:	e7f0      	b.n	800874e <__ieee754_sqrt+0x136>
 800876c:	0049      	lsls	r1, r1, #1
 800876e:	3201      	adds	r2, #1
 8008770:	e7ef      	b.n	8008752 <__ieee754_sqrt+0x13a>
 8008772:	4680      	mov	r8, r0
 8008774:	e7bd      	b.n	80086f2 <__ieee754_sqrt+0xda>
 8008776:	bf00      	nop
 8008778:	7ff00000 	.word	0x7ff00000

0800877c <__ieee754_asinf>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	ee10 5a10 	vmov	r5, s0
 8008782:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008786:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800878a:	ed2d 8b04 	vpush	{d8-d9}
 800878e:	d10c      	bne.n	80087aa <__ieee754_asinf+0x2e>
 8008790:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8008908 <__ieee754_asinf+0x18c>
 8008794:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800890c <__ieee754_asinf+0x190>
 8008798:	ee60 7a27 	vmul.f32	s15, s0, s15
 800879c:	eee0 7a07 	vfma.f32	s15, s0, s14
 80087a0:	eeb0 0a67 	vmov.f32	s0, s15
 80087a4:	ecbd 8b04 	vpop	{d8-d9}
 80087a8:	bd38      	pop	{r3, r4, r5, pc}
 80087aa:	dd04      	ble.n	80087b6 <__ieee754_asinf+0x3a>
 80087ac:	ee70 7a40 	vsub.f32	s15, s0, s0
 80087b0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80087b4:	e7f6      	b.n	80087a4 <__ieee754_asinf+0x28>
 80087b6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80087ba:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80087be:	da0b      	bge.n	80087d8 <__ieee754_asinf+0x5c>
 80087c0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80087c4:	da52      	bge.n	800886c <__ieee754_asinf+0xf0>
 80087c6:	eddf 7a52 	vldr	s15, [pc, #328]	; 8008910 <__ieee754_asinf+0x194>
 80087ca:	ee70 7a27 	vadd.f32	s15, s0, s15
 80087ce:	eef4 7ae8 	vcmpe.f32	s15, s17
 80087d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d6:	dce5      	bgt.n	80087a4 <__ieee754_asinf+0x28>
 80087d8:	f001 f850 	bl	800987c <fabsf>
 80087dc:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80087e0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80087e4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80087e8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8008914 <__ieee754_asinf+0x198>
 80087ec:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8008918 <__ieee754_asinf+0x19c>
 80087f0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800891c <__ieee754_asinf+0x1a0>
 80087f4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80087f8:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008920 <__ieee754_asinf+0x1a4>
 80087fc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008800:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008924 <__ieee754_asinf+0x1a8>
 8008804:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008808:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008928 <__ieee754_asinf+0x1ac>
 800880c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008810:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800892c <__ieee754_asinf+0x1b0>
 8008814:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008818:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008930 <__ieee754_asinf+0x1b4>
 800881c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008820:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008934 <__ieee754_asinf+0x1b8>
 8008824:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008828:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008938 <__ieee754_asinf+0x1bc>
 800882c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008830:	eeb0 0a48 	vmov.f32	s0, s16
 8008834:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008838:	f000 f926 	bl	8008a88 <__ieee754_sqrtf>
 800883c:	4b3f      	ldr	r3, [pc, #252]	; (800893c <__ieee754_asinf+0x1c0>)
 800883e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008842:	429c      	cmp	r4, r3
 8008844:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008848:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800884c:	dd3d      	ble.n	80088ca <__ieee754_asinf+0x14e>
 800884e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008852:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008940 <__ieee754_asinf+0x1c4>
 8008856:	eee0 7a26 	vfma.f32	s15, s0, s13
 800885a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800890c <__ieee754_asinf+0x190>
 800885e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008862:	2d00      	cmp	r5, #0
 8008864:	bfd8      	it	le
 8008866:	eeb1 0a40 	vnegle.f32	s0, s0
 800886a:	e79b      	b.n	80087a4 <__ieee754_asinf+0x28>
 800886c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008870:	eddf 6a28 	vldr	s13, [pc, #160]	; 8008914 <__ieee754_asinf+0x198>
 8008874:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008918 <__ieee754_asinf+0x19c>
 8008878:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800892c <__ieee754_asinf+0x1b0>
 800887c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008880:	eddf 6a27 	vldr	s13, [pc, #156]	; 8008920 <__ieee754_asinf+0x1a4>
 8008884:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008888:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008924 <__ieee754_asinf+0x1a8>
 800888c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008890:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008928 <__ieee754_asinf+0x1ac>
 8008894:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008898:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800891c <__ieee754_asinf+0x1a0>
 800889c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088a0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008930 <__ieee754_asinf+0x1b4>
 80088a4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80088a8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8008934 <__ieee754_asinf+0x1b8>
 80088ac:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80088b0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008938 <__ieee754_asinf+0x1bc>
 80088b4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80088b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80088bc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80088c0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80088c4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80088c8:	e76c      	b.n	80087a4 <__ieee754_asinf+0x28>
 80088ca:	ee10 3a10 	vmov	r3, s0
 80088ce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80088d2:	f023 030f 	bic.w	r3, r3, #15
 80088d6:	ee07 3a10 	vmov	s14, r3
 80088da:	eea7 8a47 	vfms.f32	s16, s14, s14
 80088de:	ee70 7a07 	vadd.f32	s15, s0, s14
 80088e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80088e6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80088ea:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008908 <__ieee754_asinf+0x18c>
 80088ee:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80088f2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80088f6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008944 <__ieee754_asinf+0x1c8>
 80088fa:	eeb0 6a40 	vmov.f32	s12, s0
 80088fe:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008902:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008906:	e7aa      	b.n	800885e <__ieee754_asinf+0xe2>
 8008908:	b33bbd2e 	.word	0xb33bbd2e
 800890c:	3fc90fdb 	.word	0x3fc90fdb
 8008910:	7149f2ca 	.word	0x7149f2ca
 8008914:	3811ef08 	.word	0x3811ef08
 8008918:	3a4f7f04 	.word	0x3a4f7f04
 800891c:	3e2aaaab 	.word	0x3e2aaaab
 8008920:	bd241146 	.word	0xbd241146
 8008924:	3e4e0aa8 	.word	0x3e4e0aa8
 8008928:	bea6b090 	.word	0xbea6b090
 800892c:	3d9dc62e 	.word	0x3d9dc62e
 8008930:	bf303361 	.word	0xbf303361
 8008934:	4001572d 	.word	0x4001572d
 8008938:	c019d139 	.word	0xc019d139
 800893c:	3f799999 	.word	0x3f799999
 8008940:	333bbd2e 	.word	0x333bbd2e
 8008944:	3f490fdb 	.word	0x3f490fdb

08008948 <__ieee754_atan2f>:
 8008948:	ee10 2a90 	vmov	r2, s1
 800894c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008950:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008954:	b510      	push	{r4, lr}
 8008956:	eef0 7a40 	vmov.f32	s15, s0
 800895a:	dc06      	bgt.n	800896a <__ieee754_atan2f+0x22>
 800895c:	ee10 0a10 	vmov	r0, s0
 8008960:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008964:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008968:	dd04      	ble.n	8008974 <__ieee754_atan2f+0x2c>
 800896a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800896e:	eeb0 0a67 	vmov.f32	s0, s15
 8008972:	bd10      	pop	{r4, pc}
 8008974:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008978:	d103      	bne.n	8008982 <__ieee754_atan2f+0x3a>
 800897a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800897e:	f000 bea9 	b.w	80096d4 <atanf>
 8008982:	1794      	asrs	r4, r2, #30
 8008984:	f004 0402 	and.w	r4, r4, #2
 8008988:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800898c:	b943      	cbnz	r3, 80089a0 <__ieee754_atan2f+0x58>
 800898e:	2c02      	cmp	r4, #2
 8008990:	d05e      	beq.n	8008a50 <__ieee754_atan2f+0x108>
 8008992:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008a64 <__ieee754_atan2f+0x11c>
 8008996:	2c03      	cmp	r4, #3
 8008998:	bf08      	it	eq
 800899a:	eef0 7a47 	vmoveq.f32	s15, s14
 800899e:	e7e6      	b.n	800896e <__ieee754_atan2f+0x26>
 80089a0:	b941      	cbnz	r1, 80089b4 <__ieee754_atan2f+0x6c>
 80089a2:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008a68 <__ieee754_atan2f+0x120>
 80089a6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008a6c <__ieee754_atan2f+0x124>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	bfb8      	it	lt
 80089ae:	eef0 7a40 	vmovlt.f32	s15, s0
 80089b2:	e7dc      	b.n	800896e <__ieee754_atan2f+0x26>
 80089b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80089b8:	d110      	bne.n	80089dc <__ieee754_atan2f+0x94>
 80089ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80089be:	f104 34ff 	add.w	r4, r4, #4294967295
 80089c2:	d107      	bne.n	80089d4 <__ieee754_atan2f+0x8c>
 80089c4:	2c02      	cmp	r4, #2
 80089c6:	d846      	bhi.n	8008a56 <__ieee754_atan2f+0x10e>
 80089c8:	4b29      	ldr	r3, [pc, #164]	; (8008a70 <__ieee754_atan2f+0x128>)
 80089ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089ce:	edd4 7a00 	vldr	s15, [r4]
 80089d2:	e7cc      	b.n	800896e <__ieee754_atan2f+0x26>
 80089d4:	2c02      	cmp	r4, #2
 80089d6:	d841      	bhi.n	8008a5c <__ieee754_atan2f+0x114>
 80089d8:	4b26      	ldr	r3, [pc, #152]	; (8008a74 <__ieee754_atan2f+0x12c>)
 80089da:	e7f6      	b.n	80089ca <__ieee754_atan2f+0x82>
 80089dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80089e0:	d0df      	beq.n	80089a2 <__ieee754_atan2f+0x5a>
 80089e2:	1a5b      	subs	r3, r3, r1
 80089e4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80089e8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80089ec:	da1a      	bge.n	8008a24 <__ieee754_atan2f+0xdc>
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	da01      	bge.n	80089f6 <__ieee754_atan2f+0xae>
 80089f2:	313c      	adds	r1, #60	; 0x3c
 80089f4:	db19      	blt.n	8008a2a <__ieee754_atan2f+0xe2>
 80089f6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80089fa:	f000 ff3f 	bl	800987c <fabsf>
 80089fe:	f000 fe69 	bl	80096d4 <atanf>
 8008a02:	eef0 7a40 	vmov.f32	s15, s0
 8008a06:	2c01      	cmp	r4, #1
 8008a08:	d012      	beq.n	8008a30 <__ieee754_atan2f+0xe8>
 8008a0a:	2c02      	cmp	r4, #2
 8008a0c:	d017      	beq.n	8008a3e <__ieee754_atan2f+0xf6>
 8008a0e:	2c00      	cmp	r4, #0
 8008a10:	d0ad      	beq.n	800896e <__ieee754_atan2f+0x26>
 8008a12:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008a78 <__ieee754_atan2f+0x130>
 8008a16:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008a1a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008a7c <__ieee754_atan2f+0x134>
 8008a1e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008a22:	e7a4      	b.n	800896e <__ieee754_atan2f+0x26>
 8008a24:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008a68 <__ieee754_atan2f+0x120>
 8008a28:	e7ed      	b.n	8008a06 <__ieee754_atan2f+0xbe>
 8008a2a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008a80 <__ieee754_atan2f+0x138>
 8008a2e:	e7ea      	b.n	8008a06 <__ieee754_atan2f+0xbe>
 8008a30:	ee17 3a90 	vmov	r3, s15
 8008a34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a38:	ee07 3a90 	vmov	s15, r3
 8008a3c:	e797      	b.n	800896e <__ieee754_atan2f+0x26>
 8008a3e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008a78 <__ieee754_atan2f+0x130>
 8008a42:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008a46:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008a7c <__ieee754_atan2f+0x134>
 8008a4a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008a4e:	e78e      	b.n	800896e <__ieee754_atan2f+0x26>
 8008a50:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008a7c <__ieee754_atan2f+0x134>
 8008a54:	e78b      	b.n	800896e <__ieee754_atan2f+0x26>
 8008a56:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008a84 <__ieee754_atan2f+0x13c>
 8008a5a:	e788      	b.n	800896e <__ieee754_atan2f+0x26>
 8008a5c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008a80 <__ieee754_atan2f+0x138>
 8008a60:	e785      	b.n	800896e <__ieee754_atan2f+0x26>
 8008a62:	bf00      	nop
 8008a64:	c0490fdb 	.word	0xc0490fdb
 8008a68:	3fc90fdb 	.word	0x3fc90fdb
 8008a6c:	bfc90fdb 	.word	0xbfc90fdb
 8008a70:	08009a98 	.word	0x08009a98
 8008a74:	08009aa4 	.word	0x08009aa4
 8008a78:	33bbbd2e 	.word	0x33bbbd2e
 8008a7c:	40490fdb 	.word	0x40490fdb
 8008a80:	00000000 	.word	0x00000000
 8008a84:	3f490fdb 	.word	0x3f490fdb

08008a88 <__ieee754_sqrtf>:
 8008a88:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008a8c:	4770      	bx	lr
	...

08008a90 <__kernel_cos>:
 8008a90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	ec57 6b10 	vmov	r6, r7, d0
 8008a98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008a9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008aa0:	ed8d 1b00 	vstr	d1, [sp]
 8008aa4:	da07      	bge.n	8008ab6 <__kernel_cos+0x26>
 8008aa6:	ee10 0a10 	vmov	r0, s0
 8008aaa:	4639      	mov	r1, r7
 8008aac:	f7f7 fff8 	bl	8000aa0 <__aeabi_d2iz>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f000 8088 	beq.w	8008bc6 <__kernel_cos+0x136>
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	463b      	mov	r3, r7
 8008aba:	4630      	mov	r0, r6
 8008abc:	4639      	mov	r1, r7
 8008abe:	f7f7 fd3f 	bl	8000540 <__aeabi_dmul>
 8008ac2:	4b51      	ldr	r3, [pc, #324]	; (8008c08 <__kernel_cos+0x178>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	460d      	mov	r5, r1
 8008aca:	f7f7 fd39 	bl	8000540 <__aeabi_dmul>
 8008ace:	a340      	add	r3, pc, #256	; (adr r3, 8008bd0 <__kernel_cos+0x140>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	4682      	mov	sl, r0
 8008ad6:	468b      	mov	fp, r1
 8008ad8:	4620      	mov	r0, r4
 8008ada:	4629      	mov	r1, r5
 8008adc:	f7f7 fd30 	bl	8000540 <__aeabi_dmul>
 8008ae0:	a33d      	add	r3, pc, #244	; (adr r3, 8008bd8 <__kernel_cos+0x148>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fb75 	bl	80001d4 <__adddf3>
 8008aea:	4622      	mov	r2, r4
 8008aec:	462b      	mov	r3, r5
 8008aee:	f7f7 fd27 	bl	8000540 <__aeabi_dmul>
 8008af2:	a33b      	add	r3, pc, #236	; (adr r3, 8008be0 <__kernel_cos+0x150>)
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f7f7 fb6a 	bl	80001d0 <__aeabi_dsub>
 8008afc:	4622      	mov	r2, r4
 8008afe:	462b      	mov	r3, r5
 8008b00:	f7f7 fd1e 	bl	8000540 <__aeabi_dmul>
 8008b04:	a338      	add	r3, pc, #224	; (adr r3, 8008be8 <__kernel_cos+0x158>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fb63 	bl	80001d4 <__adddf3>
 8008b0e:	4622      	mov	r2, r4
 8008b10:	462b      	mov	r3, r5
 8008b12:	f7f7 fd15 	bl	8000540 <__aeabi_dmul>
 8008b16:	a336      	add	r3, pc, #216	; (adr r3, 8008bf0 <__kernel_cos+0x160>)
 8008b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1c:	f7f7 fb58 	bl	80001d0 <__aeabi_dsub>
 8008b20:	4622      	mov	r2, r4
 8008b22:	462b      	mov	r3, r5
 8008b24:	f7f7 fd0c 	bl	8000540 <__aeabi_dmul>
 8008b28:	a333      	add	r3, pc, #204	; (adr r3, 8008bf8 <__kernel_cos+0x168>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fb51 	bl	80001d4 <__adddf3>
 8008b32:	4622      	mov	r2, r4
 8008b34:	462b      	mov	r3, r5
 8008b36:	f7f7 fd03 	bl	8000540 <__aeabi_dmul>
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	462b      	mov	r3, r5
 8008b3e:	f7f7 fcff 	bl	8000540 <__aeabi_dmul>
 8008b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b46:	4604      	mov	r4, r0
 8008b48:	460d      	mov	r5, r1
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	4639      	mov	r1, r7
 8008b4e:	f7f7 fcf7 	bl	8000540 <__aeabi_dmul>
 8008b52:	460b      	mov	r3, r1
 8008b54:	4602      	mov	r2, r0
 8008b56:	4629      	mov	r1, r5
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f7f7 fb39 	bl	80001d0 <__aeabi_dsub>
 8008b5e:	4b2b      	ldr	r3, [pc, #172]	; (8008c0c <__kernel_cos+0x17c>)
 8008b60:	4598      	cmp	r8, r3
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	dc10      	bgt.n	8008b8a <__kernel_cos+0xfa>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4650      	mov	r0, sl
 8008b6e:	4659      	mov	r1, fp
 8008b70:	f7f7 fb2e 	bl	80001d0 <__aeabi_dsub>
 8008b74:	460b      	mov	r3, r1
 8008b76:	4926      	ldr	r1, [pc, #152]	; (8008c10 <__kernel_cos+0x180>)
 8008b78:	4602      	mov	r2, r0
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	f7f7 fb28 	bl	80001d0 <__aeabi_dsub>
 8008b80:	ec41 0b10 	vmov	d0, r0, r1
 8008b84:	b003      	add	sp, #12
 8008b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8a:	4b22      	ldr	r3, [pc, #136]	; (8008c14 <__kernel_cos+0x184>)
 8008b8c:	4920      	ldr	r1, [pc, #128]	; (8008c10 <__kernel_cos+0x180>)
 8008b8e:	4598      	cmp	r8, r3
 8008b90:	bfcc      	ite	gt
 8008b92:	4d21      	ldrgt	r5, [pc, #132]	; (8008c18 <__kernel_cos+0x188>)
 8008b94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008b98:	2400      	movs	r4, #0
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f7f7 fb16 	bl	80001d0 <__aeabi_dsub>
 8008ba4:	4622      	mov	r2, r4
 8008ba6:	4680      	mov	r8, r0
 8008ba8:	4689      	mov	r9, r1
 8008baa:	462b      	mov	r3, r5
 8008bac:	4650      	mov	r0, sl
 8008bae:	4659      	mov	r1, fp
 8008bb0:	f7f7 fb0e 	bl	80001d0 <__aeabi_dsub>
 8008bb4:	4632      	mov	r2, r6
 8008bb6:	463b      	mov	r3, r7
 8008bb8:	f7f7 fb0a 	bl	80001d0 <__aeabi_dsub>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4640      	mov	r0, r8
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	e7da      	b.n	8008b7c <__kernel_cos+0xec>
 8008bc6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008c00 <__kernel_cos+0x170>
 8008bca:	e7db      	b.n	8008b84 <__kernel_cos+0xf4>
 8008bcc:	f3af 8000 	nop.w
 8008bd0:	be8838d4 	.word	0xbe8838d4
 8008bd4:	bda8fae9 	.word	0xbda8fae9
 8008bd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008bdc:	3e21ee9e 	.word	0x3e21ee9e
 8008be0:	809c52ad 	.word	0x809c52ad
 8008be4:	3e927e4f 	.word	0x3e927e4f
 8008be8:	19cb1590 	.word	0x19cb1590
 8008bec:	3efa01a0 	.word	0x3efa01a0
 8008bf0:	16c15177 	.word	0x16c15177
 8008bf4:	3f56c16c 	.word	0x3f56c16c
 8008bf8:	5555554c 	.word	0x5555554c
 8008bfc:	3fa55555 	.word	0x3fa55555
 8008c00:	00000000 	.word	0x00000000
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	3fe00000 	.word	0x3fe00000
 8008c0c:	3fd33332 	.word	0x3fd33332
 8008c10:	3ff00000 	.word	0x3ff00000
 8008c14:	3fe90000 	.word	0x3fe90000
 8008c18:	3fd20000 	.word	0x3fd20000
 8008c1c:	00000000 	.word	0x00000000

08008c20 <__kernel_rem_pio2>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	ed2d 8b02 	vpush	{d8}
 8008c28:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8008c2c:	f112 0f14 	cmn.w	r2, #20
 8008c30:	9308      	str	r3, [sp, #32]
 8008c32:	9101      	str	r1, [sp, #4]
 8008c34:	4bc4      	ldr	r3, [pc, #784]	; (8008f48 <__kernel_rem_pio2+0x328>)
 8008c36:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008c38:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c3e:	9302      	str	r3, [sp, #8]
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c46:	bfa8      	it	ge
 8008c48:	1ed4      	subge	r4, r2, #3
 8008c4a:	9306      	str	r3, [sp, #24]
 8008c4c:	bfb2      	itee	lt
 8008c4e:	2400      	movlt	r4, #0
 8008c50:	2318      	movge	r3, #24
 8008c52:	fb94 f4f3 	sdivge	r4, r4, r3
 8008c56:	f06f 0317 	mvn.w	r3, #23
 8008c5a:	fb04 3303 	mla	r3, r4, r3, r3
 8008c5e:	eb03 0a02 	add.w	sl, r3, r2
 8008c62:	9b02      	ldr	r3, [sp, #8]
 8008c64:	9a06      	ldr	r2, [sp, #24]
 8008c66:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008f38 <__kernel_rem_pio2+0x318>
 8008c6a:	eb03 0802 	add.w	r8, r3, r2
 8008c6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008c70:	1aa7      	subs	r7, r4, r2
 8008c72:	ae22      	add	r6, sp, #136	; 0x88
 8008c74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008c78:	2500      	movs	r5, #0
 8008c7a:	4545      	cmp	r5, r8
 8008c7c:	dd13      	ble.n	8008ca6 <__kernel_rem_pio2+0x86>
 8008c7e:	9b08      	ldr	r3, [sp, #32]
 8008c80:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008f38 <__kernel_rem_pio2+0x318>
 8008c84:	aa22      	add	r2, sp, #136	; 0x88
 8008c86:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008c8a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8008c8e:	f04f 0800 	mov.w	r8, #0
 8008c92:	9b02      	ldr	r3, [sp, #8]
 8008c94:	4598      	cmp	r8, r3
 8008c96:	dc2f      	bgt.n	8008cf8 <__kernel_rem_pio2+0xd8>
 8008c98:	ed8d 8b04 	vstr	d8, [sp, #16]
 8008c9c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008ca0:	462f      	mov	r7, r5
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	e01b      	b.n	8008cde <__kernel_rem_pio2+0xbe>
 8008ca6:	42ef      	cmn	r7, r5
 8008ca8:	d407      	bmi.n	8008cba <__kernel_rem_pio2+0x9a>
 8008caa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008cae:	f7f7 fbdd 	bl	800046c <__aeabi_i2d>
 8008cb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008cb6:	3501      	adds	r5, #1
 8008cb8:	e7df      	b.n	8008c7a <__kernel_rem_pio2+0x5a>
 8008cba:	ec51 0b18 	vmov	r0, r1, d8
 8008cbe:	e7f8      	b.n	8008cb2 <__kernel_rem_pio2+0x92>
 8008cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008cc8:	f7f7 fc3a 	bl	8000540 <__aeabi_dmul>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cd4:	f7f7 fa7e 	bl	80001d4 <__adddf3>
 8008cd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cdc:	3601      	adds	r6, #1
 8008cde:	9b06      	ldr	r3, [sp, #24]
 8008ce0:	429e      	cmp	r6, r3
 8008ce2:	f1a7 0708 	sub.w	r7, r7, #8
 8008ce6:	ddeb      	ble.n	8008cc0 <__kernel_rem_pio2+0xa0>
 8008ce8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008cec:	f108 0801 	add.w	r8, r8, #1
 8008cf0:	ecab 7b02 	vstmia	fp!, {d7}
 8008cf4:	3508      	adds	r5, #8
 8008cf6:	e7cc      	b.n	8008c92 <__kernel_rem_pio2+0x72>
 8008cf8:	9b02      	ldr	r3, [sp, #8]
 8008cfa:	aa0e      	add	r2, sp, #56	; 0x38
 8008cfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d00:	930d      	str	r3, [sp, #52]	; 0x34
 8008d02:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008d04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008d08:	9c02      	ldr	r4, [sp, #8]
 8008d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d0c:	00e3      	lsls	r3, r4, #3
 8008d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d10:	ab9a      	add	r3, sp, #616	; 0x268
 8008d12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d16:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008d1a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8008d1e:	ab72      	add	r3, sp, #456	; 0x1c8
 8008d20:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008d24:	46c3      	mov	fp, r8
 8008d26:	46a1      	mov	r9, r4
 8008d28:	f1b9 0f00 	cmp.w	r9, #0
 8008d2c:	f1a5 0508 	sub.w	r5, r5, #8
 8008d30:	dc77      	bgt.n	8008e22 <__kernel_rem_pio2+0x202>
 8008d32:	ec47 6b10 	vmov	d0, r6, r7
 8008d36:	4650      	mov	r0, sl
 8008d38:	f000 fc46 	bl	80095c8 <scalbn>
 8008d3c:	ec57 6b10 	vmov	r6, r7, d0
 8008d40:	2200      	movs	r2, #0
 8008d42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008d46:	ee10 0a10 	vmov	r0, s0
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 fbf8 	bl	8000540 <__aeabi_dmul>
 8008d50:	ec41 0b10 	vmov	d0, r0, r1
 8008d54:	f000 fbb8 	bl	80094c8 <floor>
 8008d58:	4b7c      	ldr	r3, [pc, #496]	; (8008f4c <__kernel_rem_pio2+0x32c>)
 8008d5a:	ec51 0b10 	vmov	r0, r1, d0
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f7f7 fbee 	bl	8000540 <__aeabi_dmul>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fa30 	bl	80001d0 <__aeabi_dsub>
 8008d70:	460f      	mov	r7, r1
 8008d72:	4606      	mov	r6, r0
 8008d74:	f7f7 fe94 	bl	8000aa0 <__aeabi_d2iz>
 8008d78:	9004      	str	r0, [sp, #16]
 8008d7a:	f7f7 fb77 	bl	800046c <__aeabi_i2d>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4630      	mov	r0, r6
 8008d84:	4639      	mov	r1, r7
 8008d86:	f7f7 fa23 	bl	80001d0 <__aeabi_dsub>
 8008d8a:	f1ba 0f00 	cmp.w	sl, #0
 8008d8e:	4606      	mov	r6, r0
 8008d90:	460f      	mov	r7, r1
 8008d92:	dd6d      	ble.n	8008e70 <__kernel_rem_pio2+0x250>
 8008d94:	1e62      	subs	r2, r4, #1
 8008d96:	ab0e      	add	r3, sp, #56	; 0x38
 8008d98:	9d04      	ldr	r5, [sp, #16]
 8008d9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008d9e:	f1ca 0118 	rsb	r1, sl, #24
 8008da2:	fa40 f301 	asr.w	r3, r0, r1
 8008da6:	441d      	add	r5, r3
 8008da8:	408b      	lsls	r3, r1
 8008daa:	1ac0      	subs	r0, r0, r3
 8008dac:	ab0e      	add	r3, sp, #56	; 0x38
 8008dae:	9504      	str	r5, [sp, #16]
 8008db0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008db4:	f1ca 0317 	rsb	r3, sl, #23
 8008db8:	fa40 fb03 	asr.w	fp, r0, r3
 8008dbc:	f1bb 0f00 	cmp.w	fp, #0
 8008dc0:	dd65      	ble.n	8008e8e <__kernel_rem_pio2+0x26e>
 8008dc2:	9b04      	ldr	r3, [sp, #16]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	4615      	mov	r5, r2
 8008dcc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008dd0:	4294      	cmp	r4, r2
 8008dd2:	f300 809c 	bgt.w	8008f0e <__kernel_rem_pio2+0x2ee>
 8008dd6:	f1ba 0f00 	cmp.w	sl, #0
 8008dda:	dd07      	ble.n	8008dec <__kernel_rem_pio2+0x1cc>
 8008ddc:	f1ba 0f01 	cmp.w	sl, #1
 8008de0:	f000 80c0 	beq.w	8008f64 <__kernel_rem_pio2+0x344>
 8008de4:	f1ba 0f02 	cmp.w	sl, #2
 8008de8:	f000 80c6 	beq.w	8008f78 <__kernel_rem_pio2+0x358>
 8008dec:	f1bb 0f02 	cmp.w	fp, #2
 8008df0:	d14d      	bne.n	8008e8e <__kernel_rem_pio2+0x26e>
 8008df2:	4632      	mov	r2, r6
 8008df4:	463b      	mov	r3, r7
 8008df6:	4956      	ldr	r1, [pc, #344]	; (8008f50 <__kernel_rem_pio2+0x330>)
 8008df8:	2000      	movs	r0, #0
 8008dfa:	f7f7 f9e9 	bl	80001d0 <__aeabi_dsub>
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	2d00      	cmp	r5, #0
 8008e04:	d043      	beq.n	8008e8e <__kernel_rem_pio2+0x26e>
 8008e06:	4650      	mov	r0, sl
 8008e08:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008f40 <__kernel_rem_pio2+0x320>
 8008e0c:	f000 fbdc 	bl	80095c8 <scalbn>
 8008e10:	4630      	mov	r0, r6
 8008e12:	4639      	mov	r1, r7
 8008e14:	ec53 2b10 	vmov	r2, r3, d0
 8008e18:	f7f7 f9da 	bl	80001d0 <__aeabi_dsub>
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	e035      	b.n	8008e8e <__kernel_rem_pio2+0x26e>
 8008e22:	4b4c      	ldr	r3, [pc, #304]	; (8008f54 <__kernel_rem_pio2+0x334>)
 8008e24:	2200      	movs	r2, #0
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7f7 fb89 	bl	8000540 <__aeabi_dmul>
 8008e2e:	f7f7 fe37 	bl	8000aa0 <__aeabi_d2iz>
 8008e32:	f7f7 fb1b 	bl	800046c <__aeabi_i2d>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	ec43 2b18 	vmov	d8, r2, r3
 8008e3e:	4b46      	ldr	r3, [pc, #280]	; (8008f58 <__kernel_rem_pio2+0x338>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	f7f7 fb7d 	bl	8000540 <__aeabi_dmul>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	f7f7 f9bf 	bl	80001d0 <__aeabi_dsub>
 8008e52:	f7f7 fe25 	bl	8000aa0 <__aeabi_d2iz>
 8008e56:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e5a:	f84b 0b04 	str.w	r0, [fp], #4
 8008e5e:	ec51 0b18 	vmov	r0, r1, d8
 8008e62:	f7f7 f9b7 	bl	80001d4 <__adddf3>
 8008e66:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	e75b      	b.n	8008d28 <__kernel_rem_pio2+0x108>
 8008e70:	d106      	bne.n	8008e80 <__kernel_rem_pio2+0x260>
 8008e72:	1e63      	subs	r3, r4, #1
 8008e74:	aa0e      	add	r2, sp, #56	; 0x38
 8008e76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008e7a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008e7e:	e79d      	b.n	8008dbc <__kernel_rem_pio2+0x19c>
 8008e80:	4b36      	ldr	r3, [pc, #216]	; (8008f5c <__kernel_rem_pio2+0x33c>)
 8008e82:	2200      	movs	r2, #0
 8008e84:	f7f7 fde2 	bl	8000a4c <__aeabi_dcmpge>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d13d      	bne.n	8008f08 <__kernel_rem_pio2+0x2e8>
 8008e8c:	4683      	mov	fp, r0
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2300      	movs	r3, #0
 8008e92:	4630      	mov	r0, r6
 8008e94:	4639      	mov	r1, r7
 8008e96:	f7f7 fdbb 	bl	8000a10 <__aeabi_dcmpeq>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	f000 80c0 	beq.w	8009020 <__kernel_rem_pio2+0x400>
 8008ea0:	1e65      	subs	r5, r4, #1
 8008ea2:	462b      	mov	r3, r5
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	9902      	ldr	r1, [sp, #8]
 8008ea8:	428b      	cmp	r3, r1
 8008eaa:	da6c      	bge.n	8008f86 <__kernel_rem_pio2+0x366>
 8008eac:	2a00      	cmp	r2, #0
 8008eae:	f000 8089 	beq.w	8008fc4 <__kernel_rem_pio2+0x3a4>
 8008eb2:	ab0e      	add	r3, sp, #56	; 0x38
 8008eb4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008eb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 80ad 	beq.w	800901c <__kernel_rem_pio2+0x3fc>
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008f40 <__kernel_rem_pio2+0x320>
 8008ec8:	f000 fb7e 	bl	80095c8 <scalbn>
 8008ecc:	ab9a      	add	r3, sp, #616	; 0x268
 8008ece:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008ed2:	ec57 6b10 	vmov	r6, r7, d0
 8008ed6:	00ec      	lsls	r4, r5, #3
 8008ed8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8008edc:	46aa      	mov	sl, r5
 8008ede:	f1ba 0f00 	cmp.w	sl, #0
 8008ee2:	f280 80d6 	bge.w	8009092 <__kernel_rem_pio2+0x472>
 8008ee6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008f38 <__kernel_rem_pio2+0x318>
 8008eea:	462e      	mov	r6, r5
 8008eec:	2e00      	cmp	r6, #0
 8008eee:	f2c0 8104 	blt.w	80090fa <__kernel_rem_pio2+0x4da>
 8008ef2:	ab72      	add	r3, sp, #456	; 0x1c8
 8008ef4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008ef8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008f60 <__kernel_rem_pio2+0x340>
 8008efc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008f00:	f04f 0800 	mov.w	r8, #0
 8008f04:	1baf      	subs	r7, r5, r6
 8008f06:	e0ea      	b.n	80090de <__kernel_rem_pio2+0x4be>
 8008f08:	f04f 0b02 	mov.w	fp, #2
 8008f0c:	e759      	b.n	8008dc2 <__kernel_rem_pio2+0x1a2>
 8008f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f12:	b955      	cbnz	r5, 8008f2a <__kernel_rem_pio2+0x30a>
 8008f14:	b123      	cbz	r3, 8008f20 <__kernel_rem_pio2+0x300>
 8008f16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008f1a:	f8c8 3000 	str.w	r3, [r8]
 8008f1e:	2301      	movs	r3, #1
 8008f20:	3201      	adds	r2, #1
 8008f22:	f108 0804 	add.w	r8, r8, #4
 8008f26:	461d      	mov	r5, r3
 8008f28:	e752      	b.n	8008dd0 <__kernel_rem_pio2+0x1b0>
 8008f2a:	1acb      	subs	r3, r1, r3
 8008f2c:	f8c8 3000 	str.w	r3, [r8]
 8008f30:	462b      	mov	r3, r5
 8008f32:	e7f5      	b.n	8008f20 <__kernel_rem_pio2+0x300>
 8008f34:	f3af 8000 	nop.w
	...
 8008f44:	3ff00000 	.word	0x3ff00000
 8008f48:	08009af0 	.word	0x08009af0
 8008f4c:	40200000 	.word	0x40200000
 8008f50:	3ff00000 	.word	0x3ff00000
 8008f54:	3e700000 	.word	0x3e700000
 8008f58:	41700000 	.word	0x41700000
 8008f5c:	3fe00000 	.word	0x3fe00000
 8008f60:	08009ab0 	.word	0x08009ab0
 8008f64:	1e62      	subs	r2, r4, #1
 8008f66:	ab0e      	add	r3, sp, #56	; 0x38
 8008f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008f70:	a90e      	add	r1, sp, #56	; 0x38
 8008f72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008f76:	e739      	b.n	8008dec <__kernel_rem_pio2+0x1cc>
 8008f78:	1e62      	subs	r2, r4, #1
 8008f7a:	ab0e      	add	r3, sp, #56	; 0x38
 8008f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f84:	e7f4      	b.n	8008f70 <__kernel_rem_pio2+0x350>
 8008f86:	a90e      	add	r1, sp, #56	; 0x38
 8008f88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	e789      	b.n	8008ea6 <__kernel_rem_pio2+0x286>
 8008f92:	3301      	adds	r3, #1
 8008f94:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	d0fa      	beq.n	8008f92 <__kernel_rem_pio2+0x372>
 8008f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f9e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008fa2:	446a      	add	r2, sp
 8008fa4:	3a98      	subs	r2, #152	; 0x98
 8008fa6:	920a      	str	r2, [sp, #40]	; 0x28
 8008fa8:	9a08      	ldr	r2, [sp, #32]
 8008faa:	18e3      	adds	r3, r4, r3
 8008fac:	18a5      	adds	r5, r4, r2
 8008fae:	aa22      	add	r2, sp, #136	; 0x88
 8008fb0:	f104 0801 	add.w	r8, r4, #1
 8008fb4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008fb8:	9304      	str	r3, [sp, #16]
 8008fba:	9b04      	ldr	r3, [sp, #16]
 8008fbc:	4543      	cmp	r3, r8
 8008fbe:	da04      	bge.n	8008fca <__kernel_rem_pio2+0x3aa>
 8008fc0:	461c      	mov	r4, r3
 8008fc2:	e6a3      	b.n	8008d0c <__kernel_rem_pio2+0xec>
 8008fc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e7e4      	b.n	8008f94 <__kernel_rem_pio2+0x374>
 8008fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fcc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008fd0:	f7f7 fa4c 	bl	800046c <__aeabi_i2d>
 8008fd4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008fd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fda:	46ab      	mov	fp, r5
 8008fdc:	461c      	mov	r4, r3
 8008fde:	f04f 0900 	mov.w	r9, #0
 8008fe2:	2600      	movs	r6, #0
 8008fe4:	2700      	movs	r7, #0
 8008fe6:	9b06      	ldr	r3, [sp, #24]
 8008fe8:	4599      	cmp	r9, r3
 8008fea:	dd06      	ble.n	8008ffa <__kernel_rem_pio2+0x3da>
 8008fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fee:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008ff2:	f108 0801 	add.w	r8, r8, #1
 8008ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ff8:	e7df      	b.n	8008fba <__kernel_rem_pio2+0x39a>
 8008ffa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008ffe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009002:	f7f7 fa9d 	bl	8000540 <__aeabi_dmul>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4630      	mov	r0, r6
 800900c:	4639      	mov	r1, r7
 800900e:	f7f7 f8e1 	bl	80001d4 <__adddf3>
 8009012:	f109 0901 	add.w	r9, r9, #1
 8009016:	4606      	mov	r6, r0
 8009018:	460f      	mov	r7, r1
 800901a:	e7e4      	b.n	8008fe6 <__kernel_rem_pio2+0x3c6>
 800901c:	3d01      	subs	r5, #1
 800901e:	e748      	b.n	8008eb2 <__kernel_rem_pio2+0x292>
 8009020:	ec47 6b10 	vmov	d0, r6, r7
 8009024:	f1ca 0000 	rsb	r0, sl, #0
 8009028:	f000 face 	bl	80095c8 <scalbn>
 800902c:	ec57 6b10 	vmov	r6, r7, d0
 8009030:	4ba0      	ldr	r3, [pc, #640]	; (80092b4 <__kernel_rem_pio2+0x694>)
 8009032:	ee10 0a10 	vmov	r0, s0
 8009036:	2200      	movs	r2, #0
 8009038:	4639      	mov	r1, r7
 800903a:	f7f7 fd07 	bl	8000a4c <__aeabi_dcmpge>
 800903e:	b1f8      	cbz	r0, 8009080 <__kernel_rem_pio2+0x460>
 8009040:	4b9d      	ldr	r3, [pc, #628]	; (80092b8 <__kernel_rem_pio2+0x698>)
 8009042:	2200      	movs	r2, #0
 8009044:	4630      	mov	r0, r6
 8009046:	4639      	mov	r1, r7
 8009048:	f7f7 fa7a 	bl	8000540 <__aeabi_dmul>
 800904c:	f7f7 fd28 	bl	8000aa0 <__aeabi_d2iz>
 8009050:	4680      	mov	r8, r0
 8009052:	f7f7 fa0b 	bl	800046c <__aeabi_i2d>
 8009056:	4b97      	ldr	r3, [pc, #604]	; (80092b4 <__kernel_rem_pio2+0x694>)
 8009058:	2200      	movs	r2, #0
 800905a:	f7f7 fa71 	bl	8000540 <__aeabi_dmul>
 800905e:	460b      	mov	r3, r1
 8009060:	4602      	mov	r2, r0
 8009062:	4639      	mov	r1, r7
 8009064:	4630      	mov	r0, r6
 8009066:	f7f7 f8b3 	bl	80001d0 <__aeabi_dsub>
 800906a:	f7f7 fd19 	bl	8000aa0 <__aeabi_d2iz>
 800906e:	1c65      	adds	r5, r4, #1
 8009070:	ab0e      	add	r3, sp, #56	; 0x38
 8009072:	f10a 0a18 	add.w	sl, sl, #24
 8009076:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800907a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800907e:	e720      	b.n	8008ec2 <__kernel_rem_pio2+0x2a2>
 8009080:	4630      	mov	r0, r6
 8009082:	4639      	mov	r1, r7
 8009084:	f7f7 fd0c 	bl	8000aa0 <__aeabi_d2iz>
 8009088:	ab0e      	add	r3, sp, #56	; 0x38
 800908a:	4625      	mov	r5, r4
 800908c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009090:	e717      	b.n	8008ec2 <__kernel_rem_pio2+0x2a2>
 8009092:	ab0e      	add	r3, sp, #56	; 0x38
 8009094:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009098:	f7f7 f9e8 	bl	800046c <__aeabi_i2d>
 800909c:	4632      	mov	r2, r6
 800909e:	463b      	mov	r3, r7
 80090a0:	f7f7 fa4e 	bl	8000540 <__aeabi_dmul>
 80090a4:	4b84      	ldr	r3, [pc, #528]	; (80092b8 <__kernel_rem_pio2+0x698>)
 80090a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80090aa:	2200      	movs	r2, #0
 80090ac:	4630      	mov	r0, r6
 80090ae:	4639      	mov	r1, r7
 80090b0:	f7f7 fa46 	bl	8000540 <__aeabi_dmul>
 80090b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090b8:	4606      	mov	r6, r0
 80090ba:	460f      	mov	r7, r1
 80090bc:	e70f      	b.n	8008ede <__kernel_rem_pio2+0x2be>
 80090be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80090c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80090c6:	f7f7 fa3b 	bl	8000540 <__aeabi_dmul>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090d2:	f7f7 f87f 	bl	80001d4 <__adddf3>
 80090d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80090da:	f108 0801 	add.w	r8, r8, #1
 80090de:	9b02      	ldr	r3, [sp, #8]
 80090e0:	4598      	cmp	r8, r3
 80090e2:	dc01      	bgt.n	80090e8 <__kernel_rem_pio2+0x4c8>
 80090e4:	45b8      	cmp	r8, r7
 80090e6:	ddea      	ble.n	80090be <__kernel_rem_pio2+0x49e>
 80090e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80090ec:	ab4a      	add	r3, sp, #296	; 0x128
 80090ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80090f2:	ed87 7b00 	vstr	d7, [r7]
 80090f6:	3e01      	subs	r6, #1
 80090f8:	e6f8      	b.n	8008eec <__kernel_rem_pio2+0x2cc>
 80090fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	dc0b      	bgt.n	8009118 <__kernel_rem_pio2+0x4f8>
 8009100:	2b00      	cmp	r3, #0
 8009102:	dc35      	bgt.n	8009170 <__kernel_rem_pio2+0x550>
 8009104:	d059      	beq.n	80091ba <__kernel_rem_pio2+0x59a>
 8009106:	9b04      	ldr	r3, [sp, #16]
 8009108:	f003 0007 	and.w	r0, r3, #7
 800910c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009110:	ecbd 8b02 	vpop	{d8}
 8009114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009118:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800911a:	2b03      	cmp	r3, #3
 800911c:	d1f3      	bne.n	8009106 <__kernel_rem_pio2+0x4e6>
 800911e:	ab4a      	add	r3, sp, #296	; 0x128
 8009120:	4423      	add	r3, r4
 8009122:	9306      	str	r3, [sp, #24]
 8009124:	461c      	mov	r4, r3
 8009126:	469a      	mov	sl, r3
 8009128:	9502      	str	r5, [sp, #8]
 800912a:	9b02      	ldr	r3, [sp, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	f1aa 0a08 	sub.w	sl, sl, #8
 8009132:	dc6b      	bgt.n	800920c <__kernel_rem_pio2+0x5ec>
 8009134:	46aa      	mov	sl, r5
 8009136:	f1ba 0f01 	cmp.w	sl, #1
 800913a:	f1a4 0408 	sub.w	r4, r4, #8
 800913e:	f300 8085 	bgt.w	800924c <__kernel_rem_pio2+0x62c>
 8009142:	9c06      	ldr	r4, [sp, #24]
 8009144:	2000      	movs	r0, #0
 8009146:	3408      	adds	r4, #8
 8009148:	2100      	movs	r1, #0
 800914a:	2d01      	cmp	r5, #1
 800914c:	f300 809d 	bgt.w	800928a <__kernel_rem_pio2+0x66a>
 8009150:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009154:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009158:	f1bb 0f00 	cmp.w	fp, #0
 800915c:	f040 809b 	bne.w	8009296 <__kernel_rem_pio2+0x676>
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	e9c3 5600 	strd	r5, r6, [r3]
 8009166:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800916a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800916e:	e7ca      	b.n	8009106 <__kernel_rem_pio2+0x4e6>
 8009170:	3408      	adds	r4, #8
 8009172:	ab4a      	add	r3, sp, #296	; 0x128
 8009174:	441c      	add	r4, r3
 8009176:	462e      	mov	r6, r5
 8009178:	2000      	movs	r0, #0
 800917a:	2100      	movs	r1, #0
 800917c:	2e00      	cmp	r6, #0
 800917e:	da36      	bge.n	80091ee <__kernel_rem_pio2+0x5ce>
 8009180:	f1bb 0f00 	cmp.w	fp, #0
 8009184:	d039      	beq.n	80091fa <__kernel_rem_pio2+0x5da>
 8009186:	4602      	mov	r2, r0
 8009188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800918c:	9c01      	ldr	r4, [sp, #4]
 800918e:	e9c4 2300 	strd	r2, r3, [r4]
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800919a:	f7f7 f819 	bl	80001d0 <__aeabi_dsub>
 800919e:	ae4c      	add	r6, sp, #304	; 0x130
 80091a0:	2401      	movs	r4, #1
 80091a2:	42a5      	cmp	r5, r4
 80091a4:	da2c      	bge.n	8009200 <__kernel_rem_pio2+0x5e0>
 80091a6:	f1bb 0f00 	cmp.w	fp, #0
 80091aa:	d002      	beq.n	80091b2 <__kernel_rem_pio2+0x592>
 80091ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091b0:	4619      	mov	r1, r3
 80091b2:	9b01      	ldr	r3, [sp, #4]
 80091b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80091b8:	e7a5      	b.n	8009106 <__kernel_rem_pio2+0x4e6>
 80091ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80091be:	eb0d 0403 	add.w	r4, sp, r3
 80091c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80091c6:	2000      	movs	r0, #0
 80091c8:	2100      	movs	r1, #0
 80091ca:	2d00      	cmp	r5, #0
 80091cc:	da09      	bge.n	80091e2 <__kernel_rem_pio2+0x5c2>
 80091ce:	f1bb 0f00 	cmp.w	fp, #0
 80091d2:	d002      	beq.n	80091da <__kernel_rem_pio2+0x5ba>
 80091d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091d8:	4619      	mov	r1, r3
 80091da:	9b01      	ldr	r3, [sp, #4]
 80091dc:	e9c3 0100 	strd	r0, r1, [r3]
 80091e0:	e791      	b.n	8009106 <__kernel_rem_pio2+0x4e6>
 80091e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091e6:	f7f6 fff5 	bl	80001d4 <__adddf3>
 80091ea:	3d01      	subs	r5, #1
 80091ec:	e7ed      	b.n	80091ca <__kernel_rem_pio2+0x5aa>
 80091ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091f2:	f7f6 ffef 	bl	80001d4 <__adddf3>
 80091f6:	3e01      	subs	r6, #1
 80091f8:	e7c0      	b.n	800917c <__kernel_rem_pio2+0x55c>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	e7c5      	b.n	800918c <__kernel_rem_pio2+0x56c>
 8009200:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009204:	f7f6 ffe6 	bl	80001d4 <__adddf3>
 8009208:	3401      	adds	r4, #1
 800920a:	e7ca      	b.n	80091a2 <__kernel_rem_pio2+0x582>
 800920c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009210:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009214:	9b02      	ldr	r3, [sp, #8]
 8009216:	3b01      	subs	r3, #1
 8009218:	9302      	str	r3, [sp, #8]
 800921a:	4632      	mov	r2, r6
 800921c:	463b      	mov	r3, r7
 800921e:	4640      	mov	r0, r8
 8009220:	4649      	mov	r1, r9
 8009222:	f7f6 ffd7 	bl	80001d4 <__adddf3>
 8009226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800922a:	4602      	mov	r2, r0
 800922c:	460b      	mov	r3, r1
 800922e:	4640      	mov	r0, r8
 8009230:	4649      	mov	r1, r9
 8009232:	f7f6 ffcd 	bl	80001d0 <__aeabi_dsub>
 8009236:	4632      	mov	r2, r6
 8009238:	463b      	mov	r3, r7
 800923a:	f7f6 ffcb 	bl	80001d4 <__adddf3>
 800923e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009242:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009246:	ed8a 7b00 	vstr	d7, [sl]
 800924a:	e76e      	b.n	800912a <__kernel_rem_pio2+0x50a>
 800924c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009250:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009254:	4640      	mov	r0, r8
 8009256:	4632      	mov	r2, r6
 8009258:	463b      	mov	r3, r7
 800925a:	4649      	mov	r1, r9
 800925c:	f7f6 ffba 	bl	80001d4 <__adddf3>
 8009260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	4640      	mov	r0, r8
 800926a:	4649      	mov	r1, r9
 800926c:	f7f6 ffb0 	bl	80001d0 <__aeabi_dsub>
 8009270:	4632      	mov	r2, r6
 8009272:	463b      	mov	r3, r7
 8009274:	f7f6 ffae 	bl	80001d4 <__adddf3>
 8009278:	ed9d 7b02 	vldr	d7, [sp, #8]
 800927c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009280:	ed84 7b00 	vstr	d7, [r4]
 8009284:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009288:	e755      	b.n	8009136 <__kernel_rem_pio2+0x516>
 800928a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800928e:	f7f6 ffa1 	bl	80001d4 <__adddf3>
 8009292:	3d01      	subs	r5, #1
 8009294:	e759      	b.n	800914a <__kernel_rem_pio2+0x52a>
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	9a01      	ldr	r2, [sp, #4]
 800929a:	601d      	str	r5, [r3, #0]
 800929c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80092a0:	605c      	str	r4, [r3, #4]
 80092a2:	609f      	str	r7, [r3, #8]
 80092a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80092a8:	60d3      	str	r3, [r2, #12]
 80092aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092ae:	6110      	str	r0, [r2, #16]
 80092b0:	6153      	str	r3, [r2, #20]
 80092b2:	e728      	b.n	8009106 <__kernel_rem_pio2+0x4e6>
 80092b4:	41700000 	.word	0x41700000
 80092b8:	3e700000 	.word	0x3e700000
 80092bc:	00000000 	.word	0x00000000

080092c0 <__kernel_sin>:
 80092c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c4:	ed2d 8b04 	vpush	{d8-d9}
 80092c8:	eeb0 8a41 	vmov.f32	s16, s2
 80092cc:	eef0 8a61 	vmov.f32	s17, s3
 80092d0:	ec55 4b10 	vmov	r4, r5, d0
 80092d4:	b083      	sub	sp, #12
 80092d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80092de:	9001      	str	r0, [sp, #4]
 80092e0:	da06      	bge.n	80092f0 <__kernel_sin+0x30>
 80092e2:	ee10 0a10 	vmov	r0, s0
 80092e6:	4629      	mov	r1, r5
 80092e8:	f7f7 fbda 	bl	8000aa0 <__aeabi_d2iz>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d051      	beq.n	8009394 <__kernel_sin+0xd4>
 80092f0:	4622      	mov	r2, r4
 80092f2:	462b      	mov	r3, r5
 80092f4:	4620      	mov	r0, r4
 80092f6:	4629      	mov	r1, r5
 80092f8:	f7f7 f922 	bl	8000540 <__aeabi_dmul>
 80092fc:	4682      	mov	sl, r0
 80092fe:	468b      	mov	fp, r1
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	4620      	mov	r0, r4
 8009306:	4629      	mov	r1, r5
 8009308:	f7f7 f91a 	bl	8000540 <__aeabi_dmul>
 800930c:	a341      	add	r3, pc, #260	; (adr r3, 8009414 <__kernel_sin+0x154>)
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	4680      	mov	r8, r0
 8009314:	4689      	mov	r9, r1
 8009316:	4650      	mov	r0, sl
 8009318:	4659      	mov	r1, fp
 800931a:	f7f7 f911 	bl	8000540 <__aeabi_dmul>
 800931e:	a33f      	add	r3, pc, #252	; (adr r3, 800941c <__kernel_sin+0x15c>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f7f6 ff54 	bl	80001d0 <__aeabi_dsub>
 8009328:	4652      	mov	r2, sl
 800932a:	465b      	mov	r3, fp
 800932c:	f7f7 f908 	bl	8000540 <__aeabi_dmul>
 8009330:	a33c      	add	r3, pc, #240	; (adr r3, 8009424 <__kernel_sin+0x164>)
 8009332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009336:	f7f6 ff4d 	bl	80001d4 <__adddf3>
 800933a:	4652      	mov	r2, sl
 800933c:	465b      	mov	r3, fp
 800933e:	f7f7 f8ff 	bl	8000540 <__aeabi_dmul>
 8009342:	a33a      	add	r3, pc, #232	; (adr r3, 800942c <__kernel_sin+0x16c>)
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f7f6 ff42 	bl	80001d0 <__aeabi_dsub>
 800934c:	4652      	mov	r2, sl
 800934e:	465b      	mov	r3, fp
 8009350:	f7f7 f8f6 	bl	8000540 <__aeabi_dmul>
 8009354:	a337      	add	r3, pc, #220	; (adr r3, 8009434 <__kernel_sin+0x174>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	f7f6 ff3b 	bl	80001d4 <__adddf3>
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	4606      	mov	r6, r0
 8009362:	460f      	mov	r7, r1
 8009364:	b9eb      	cbnz	r3, 80093a2 <__kernel_sin+0xe2>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	4650      	mov	r0, sl
 800936c:	4659      	mov	r1, fp
 800936e:	f7f7 f8e7 	bl	8000540 <__aeabi_dmul>
 8009372:	a325      	add	r3, pc, #148	; (adr r3, 8009408 <__kernel_sin+0x148>)
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	f7f6 ff2a 	bl	80001d0 <__aeabi_dsub>
 800937c:	4642      	mov	r2, r8
 800937e:	464b      	mov	r3, r9
 8009380:	f7f7 f8de 	bl	8000540 <__aeabi_dmul>
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4620      	mov	r0, r4
 800938a:	4629      	mov	r1, r5
 800938c:	f7f6 ff22 	bl	80001d4 <__adddf3>
 8009390:	4604      	mov	r4, r0
 8009392:	460d      	mov	r5, r1
 8009394:	ec45 4b10 	vmov	d0, r4, r5
 8009398:	b003      	add	sp, #12
 800939a:	ecbd 8b04 	vpop	{d8-d9}
 800939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a2:	4b1b      	ldr	r3, [pc, #108]	; (8009410 <__kernel_sin+0x150>)
 80093a4:	ec51 0b18 	vmov	r0, r1, d8
 80093a8:	2200      	movs	r2, #0
 80093aa:	f7f7 f8c9 	bl	8000540 <__aeabi_dmul>
 80093ae:	4632      	mov	r2, r6
 80093b0:	ec41 0b19 	vmov	d9, r0, r1
 80093b4:	463b      	mov	r3, r7
 80093b6:	4640      	mov	r0, r8
 80093b8:	4649      	mov	r1, r9
 80093ba:	f7f7 f8c1 	bl	8000540 <__aeabi_dmul>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	ec51 0b19 	vmov	r0, r1, d9
 80093c6:	f7f6 ff03 	bl	80001d0 <__aeabi_dsub>
 80093ca:	4652      	mov	r2, sl
 80093cc:	465b      	mov	r3, fp
 80093ce:	f7f7 f8b7 	bl	8000540 <__aeabi_dmul>
 80093d2:	ec53 2b18 	vmov	r2, r3, d8
 80093d6:	f7f6 fefb 	bl	80001d0 <__aeabi_dsub>
 80093da:	a30b      	add	r3, pc, #44	; (adr r3, 8009408 <__kernel_sin+0x148>)
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	4606      	mov	r6, r0
 80093e2:	460f      	mov	r7, r1
 80093e4:	4640      	mov	r0, r8
 80093e6:	4649      	mov	r1, r9
 80093e8:	f7f7 f8aa 	bl	8000540 <__aeabi_dmul>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4630      	mov	r0, r6
 80093f2:	4639      	mov	r1, r7
 80093f4:	f7f6 feee 	bl	80001d4 <__adddf3>
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f6 fee6 	bl	80001d0 <__aeabi_dsub>
 8009404:	e7c4      	b.n	8009390 <__kernel_sin+0xd0>
 8009406:	bf00      	nop
 8009408:	55555549 	.word	0x55555549
 800940c:	3fc55555 	.word	0x3fc55555
 8009410:	3fe00000 	.word	0x3fe00000
 8009414:	5acfd57c 	.word	0x5acfd57c
 8009418:	3de5d93a 	.word	0x3de5d93a
 800941c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009420:	3e5ae5e6 	.word	0x3e5ae5e6
 8009424:	57b1fe7d 	.word	0x57b1fe7d
 8009428:	3ec71de3 	.word	0x3ec71de3
 800942c:	19c161d5 	.word	0x19c161d5
 8009430:	3f2a01a0 	.word	0x3f2a01a0
 8009434:	1110f8a6 	.word	0x1110f8a6
 8009438:	3f811111 	.word	0x3f811111

0800943c <with_errno>:
 800943c:	b570      	push	{r4, r5, r6, lr}
 800943e:	4604      	mov	r4, r0
 8009440:	460d      	mov	r5, r1
 8009442:	4616      	mov	r6, r2
 8009444:	f7fe f82e 	bl	80074a4 <__errno>
 8009448:	4629      	mov	r1, r5
 800944a:	6006      	str	r6, [r0, #0]
 800944c:	4620      	mov	r0, r4
 800944e:	bd70      	pop	{r4, r5, r6, pc}

08009450 <xflow>:
 8009450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009452:	4614      	mov	r4, r2
 8009454:	461d      	mov	r5, r3
 8009456:	b108      	cbz	r0, 800945c <xflow+0xc>
 8009458:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800945c:	e9cd 2300 	strd	r2, r3, [sp]
 8009460:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009464:	4620      	mov	r0, r4
 8009466:	4629      	mov	r1, r5
 8009468:	f7f7 f86a 	bl	8000540 <__aeabi_dmul>
 800946c:	2222      	movs	r2, #34	; 0x22
 800946e:	b003      	add	sp, #12
 8009470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009474:	f7ff bfe2 	b.w	800943c <with_errno>

08009478 <__math_uflow>:
 8009478:	b508      	push	{r3, lr}
 800947a:	2200      	movs	r2, #0
 800947c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009480:	f7ff ffe6 	bl	8009450 <xflow>
 8009484:	ec41 0b10 	vmov	d0, r0, r1
 8009488:	bd08      	pop	{r3, pc}

0800948a <__math_oflow>:
 800948a:	b508      	push	{r3, lr}
 800948c:	2200      	movs	r2, #0
 800948e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009492:	f7ff ffdd 	bl	8009450 <xflow>
 8009496:	ec41 0b10 	vmov	d0, r0, r1
 800949a:	bd08      	pop	{r3, pc}

0800949c <fabs>:
 800949c:	ec51 0b10 	vmov	r0, r1, d0
 80094a0:	ee10 2a10 	vmov	r2, s0
 80094a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094a8:	ec43 2b10 	vmov	d0, r2, r3
 80094ac:	4770      	bx	lr

080094ae <finite>:
 80094ae:	b082      	sub	sp, #8
 80094b0:	ed8d 0b00 	vstr	d0, [sp]
 80094b4:	9801      	ldr	r0, [sp, #4]
 80094b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80094ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80094be:	0fc0      	lsrs	r0, r0, #31
 80094c0:	b002      	add	sp, #8
 80094c2:	4770      	bx	lr
 80094c4:	0000      	movs	r0, r0
	...

080094c8 <floor>:
 80094c8:	ec51 0b10 	vmov	r0, r1, d0
 80094cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80094d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80094d8:	2e13      	cmp	r6, #19
 80094da:	ee10 5a10 	vmov	r5, s0
 80094de:	ee10 8a10 	vmov	r8, s0
 80094e2:	460c      	mov	r4, r1
 80094e4:	dc32      	bgt.n	800954c <floor+0x84>
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	da14      	bge.n	8009514 <floor+0x4c>
 80094ea:	a333      	add	r3, pc, #204	; (adr r3, 80095b8 <floor+0xf0>)
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	f7f6 fe70 	bl	80001d4 <__adddf3>
 80094f4:	2200      	movs	r2, #0
 80094f6:	2300      	movs	r3, #0
 80094f8:	f7f7 fab2 	bl	8000a60 <__aeabi_dcmpgt>
 80094fc:	b138      	cbz	r0, 800950e <floor+0x46>
 80094fe:	2c00      	cmp	r4, #0
 8009500:	da57      	bge.n	80095b2 <floor+0xea>
 8009502:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009506:	431d      	orrs	r5, r3
 8009508:	d001      	beq.n	800950e <floor+0x46>
 800950a:	4c2d      	ldr	r4, [pc, #180]	; (80095c0 <floor+0xf8>)
 800950c:	2500      	movs	r5, #0
 800950e:	4621      	mov	r1, r4
 8009510:	4628      	mov	r0, r5
 8009512:	e025      	b.n	8009560 <floor+0x98>
 8009514:	4f2b      	ldr	r7, [pc, #172]	; (80095c4 <floor+0xfc>)
 8009516:	4137      	asrs	r7, r6
 8009518:	ea01 0307 	and.w	r3, r1, r7
 800951c:	4303      	orrs	r3, r0
 800951e:	d01f      	beq.n	8009560 <floor+0x98>
 8009520:	a325      	add	r3, pc, #148	; (adr r3, 80095b8 <floor+0xf0>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f6 fe55 	bl	80001d4 <__adddf3>
 800952a:	2200      	movs	r2, #0
 800952c:	2300      	movs	r3, #0
 800952e:	f7f7 fa97 	bl	8000a60 <__aeabi_dcmpgt>
 8009532:	2800      	cmp	r0, #0
 8009534:	d0eb      	beq.n	800950e <floor+0x46>
 8009536:	2c00      	cmp	r4, #0
 8009538:	bfbe      	ittt	lt
 800953a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800953e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009542:	19a4      	addlt	r4, r4, r6
 8009544:	ea24 0407 	bic.w	r4, r4, r7
 8009548:	2500      	movs	r5, #0
 800954a:	e7e0      	b.n	800950e <floor+0x46>
 800954c:	2e33      	cmp	r6, #51	; 0x33
 800954e:	dd0b      	ble.n	8009568 <floor+0xa0>
 8009550:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009554:	d104      	bne.n	8009560 <floor+0x98>
 8009556:	ee10 2a10 	vmov	r2, s0
 800955a:	460b      	mov	r3, r1
 800955c:	f7f6 fe3a 	bl	80001d4 <__adddf3>
 8009560:	ec41 0b10 	vmov	d0, r0, r1
 8009564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009568:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800956c:	f04f 33ff 	mov.w	r3, #4294967295
 8009570:	fa23 f707 	lsr.w	r7, r3, r7
 8009574:	4207      	tst	r7, r0
 8009576:	d0f3      	beq.n	8009560 <floor+0x98>
 8009578:	a30f      	add	r3, pc, #60	; (adr r3, 80095b8 <floor+0xf0>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f6 fe29 	bl	80001d4 <__adddf3>
 8009582:	2200      	movs	r2, #0
 8009584:	2300      	movs	r3, #0
 8009586:	f7f7 fa6b 	bl	8000a60 <__aeabi_dcmpgt>
 800958a:	2800      	cmp	r0, #0
 800958c:	d0bf      	beq.n	800950e <floor+0x46>
 800958e:	2c00      	cmp	r4, #0
 8009590:	da02      	bge.n	8009598 <floor+0xd0>
 8009592:	2e14      	cmp	r6, #20
 8009594:	d103      	bne.n	800959e <floor+0xd6>
 8009596:	3401      	adds	r4, #1
 8009598:	ea25 0507 	bic.w	r5, r5, r7
 800959c:	e7b7      	b.n	800950e <floor+0x46>
 800959e:	2301      	movs	r3, #1
 80095a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80095a4:	fa03 f606 	lsl.w	r6, r3, r6
 80095a8:	4435      	add	r5, r6
 80095aa:	4545      	cmp	r5, r8
 80095ac:	bf38      	it	cc
 80095ae:	18e4      	addcc	r4, r4, r3
 80095b0:	e7f2      	b.n	8009598 <floor+0xd0>
 80095b2:	2500      	movs	r5, #0
 80095b4:	462c      	mov	r4, r5
 80095b6:	e7aa      	b.n	800950e <floor+0x46>
 80095b8:	8800759c 	.word	0x8800759c
 80095bc:	7e37e43c 	.word	0x7e37e43c
 80095c0:	bff00000 	.word	0xbff00000
 80095c4:	000fffff 	.word	0x000fffff

080095c8 <scalbn>:
 80095c8:	b570      	push	{r4, r5, r6, lr}
 80095ca:	ec55 4b10 	vmov	r4, r5, d0
 80095ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80095d2:	4606      	mov	r6, r0
 80095d4:	462b      	mov	r3, r5
 80095d6:	b99a      	cbnz	r2, 8009600 <scalbn+0x38>
 80095d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095dc:	4323      	orrs	r3, r4
 80095de:	d036      	beq.n	800964e <scalbn+0x86>
 80095e0:	4b39      	ldr	r3, [pc, #228]	; (80096c8 <scalbn+0x100>)
 80095e2:	4629      	mov	r1, r5
 80095e4:	ee10 0a10 	vmov	r0, s0
 80095e8:	2200      	movs	r2, #0
 80095ea:	f7f6 ffa9 	bl	8000540 <__aeabi_dmul>
 80095ee:	4b37      	ldr	r3, [pc, #220]	; (80096cc <scalbn+0x104>)
 80095f0:	429e      	cmp	r6, r3
 80095f2:	4604      	mov	r4, r0
 80095f4:	460d      	mov	r5, r1
 80095f6:	da10      	bge.n	800961a <scalbn+0x52>
 80095f8:	a32b      	add	r3, pc, #172	; (adr r3, 80096a8 <scalbn+0xe0>)
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	e03a      	b.n	8009676 <scalbn+0xae>
 8009600:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009604:	428a      	cmp	r2, r1
 8009606:	d10c      	bne.n	8009622 <scalbn+0x5a>
 8009608:	ee10 2a10 	vmov	r2, s0
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f6 fde0 	bl	80001d4 <__adddf3>
 8009614:	4604      	mov	r4, r0
 8009616:	460d      	mov	r5, r1
 8009618:	e019      	b.n	800964e <scalbn+0x86>
 800961a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800961e:	460b      	mov	r3, r1
 8009620:	3a36      	subs	r2, #54	; 0x36
 8009622:	4432      	add	r2, r6
 8009624:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009628:	428a      	cmp	r2, r1
 800962a:	dd08      	ble.n	800963e <scalbn+0x76>
 800962c:	2d00      	cmp	r5, #0
 800962e:	a120      	add	r1, pc, #128	; (adr r1, 80096b0 <scalbn+0xe8>)
 8009630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009634:	da1c      	bge.n	8009670 <scalbn+0xa8>
 8009636:	a120      	add	r1, pc, #128	; (adr r1, 80096b8 <scalbn+0xf0>)
 8009638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800963c:	e018      	b.n	8009670 <scalbn+0xa8>
 800963e:	2a00      	cmp	r2, #0
 8009640:	dd08      	ble.n	8009654 <scalbn+0x8c>
 8009642:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009646:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800964a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800964e:	ec45 4b10 	vmov	d0, r4, r5
 8009652:	bd70      	pop	{r4, r5, r6, pc}
 8009654:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009658:	da19      	bge.n	800968e <scalbn+0xc6>
 800965a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800965e:	429e      	cmp	r6, r3
 8009660:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009664:	dd0a      	ble.n	800967c <scalbn+0xb4>
 8009666:	a112      	add	r1, pc, #72	; (adr r1, 80096b0 <scalbn+0xe8>)
 8009668:	e9d1 0100 	ldrd	r0, r1, [r1]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e2      	bne.n	8009636 <scalbn+0x6e>
 8009670:	a30f      	add	r3, pc, #60	; (adr r3, 80096b0 <scalbn+0xe8>)
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f7f6 ff63 	bl	8000540 <__aeabi_dmul>
 800967a:	e7cb      	b.n	8009614 <scalbn+0x4c>
 800967c:	a10a      	add	r1, pc, #40	; (adr r1, 80096a8 <scalbn+0xe0>)
 800967e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0b8      	beq.n	80095f8 <scalbn+0x30>
 8009686:	a10e      	add	r1, pc, #56	; (adr r1, 80096c0 <scalbn+0xf8>)
 8009688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800968c:	e7b4      	b.n	80095f8 <scalbn+0x30>
 800968e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009692:	3236      	adds	r2, #54	; 0x36
 8009694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009698:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800969c:	4620      	mov	r0, r4
 800969e:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <scalbn+0x108>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	e7e8      	b.n	8009676 <scalbn+0xae>
 80096a4:	f3af 8000 	nop.w
 80096a8:	c2f8f359 	.word	0xc2f8f359
 80096ac:	01a56e1f 	.word	0x01a56e1f
 80096b0:	8800759c 	.word	0x8800759c
 80096b4:	7e37e43c 	.word	0x7e37e43c
 80096b8:	8800759c 	.word	0x8800759c
 80096bc:	fe37e43c 	.word	0xfe37e43c
 80096c0:	c2f8f359 	.word	0xc2f8f359
 80096c4:	81a56e1f 	.word	0x81a56e1f
 80096c8:	43500000 	.word	0x43500000
 80096cc:	ffff3cb0 	.word	0xffff3cb0
 80096d0:	3c900000 	.word	0x3c900000

080096d4 <atanf>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	ee10 5a10 	vmov	r5, s0
 80096da:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80096de:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80096e2:	eef0 7a40 	vmov.f32	s15, s0
 80096e6:	db10      	blt.n	800970a <atanf+0x36>
 80096e8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80096ec:	dd04      	ble.n	80096f8 <atanf+0x24>
 80096ee:	ee70 7a00 	vadd.f32	s15, s0, s0
 80096f2:	eeb0 0a67 	vmov.f32	s0, s15
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009830 <atanf+0x15c>
 80096fc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009834 <atanf+0x160>
 8009700:	2d00      	cmp	r5, #0
 8009702:	bfd8      	it	le
 8009704:	eef0 7a40 	vmovle.f32	s15, s0
 8009708:	e7f3      	b.n	80096f2 <atanf+0x1e>
 800970a:	4b4b      	ldr	r3, [pc, #300]	; (8009838 <atanf+0x164>)
 800970c:	429c      	cmp	r4, r3
 800970e:	dc10      	bgt.n	8009732 <atanf+0x5e>
 8009710:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009714:	da0a      	bge.n	800972c <atanf+0x58>
 8009716:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800983c <atanf+0x168>
 800971a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800971e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009722:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800972a:	dce2      	bgt.n	80096f2 <atanf+0x1e>
 800972c:	f04f 33ff 	mov.w	r3, #4294967295
 8009730:	e013      	b.n	800975a <atanf+0x86>
 8009732:	f000 f8a3 	bl	800987c <fabsf>
 8009736:	4b42      	ldr	r3, [pc, #264]	; (8009840 <atanf+0x16c>)
 8009738:	429c      	cmp	r4, r3
 800973a:	dc4f      	bgt.n	80097dc <atanf+0x108>
 800973c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009740:	429c      	cmp	r4, r3
 8009742:	dc41      	bgt.n	80097c8 <atanf+0xf4>
 8009744:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009748:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800974c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009750:	2300      	movs	r3, #0
 8009752:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009756:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009760:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009844 <atanf+0x170>
 8009764:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009848 <atanf+0x174>
 8009768:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800984c <atanf+0x178>
 800976c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009770:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009774:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009850 <atanf+0x17c>
 8009778:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800977c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009854 <atanf+0x180>
 8009780:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009784:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009858 <atanf+0x184>
 8009788:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800978c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800985c <atanf+0x188>
 8009790:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009794:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009860 <atanf+0x18c>
 8009798:	eea6 5a87 	vfma.f32	s10, s13, s14
 800979c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009864 <atanf+0x190>
 80097a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80097a4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009868 <atanf+0x194>
 80097a8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80097ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800986c <atanf+0x198>
 80097b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80097b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80097b8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80097bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80097c0:	d121      	bne.n	8009806 <atanf+0x132>
 80097c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097c6:	e794      	b.n	80096f2 <atanf+0x1e>
 80097c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80097cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80097d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80097d4:	2301      	movs	r3, #1
 80097d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80097da:	e7be      	b.n	800975a <atanf+0x86>
 80097dc:	4b24      	ldr	r3, [pc, #144]	; (8009870 <atanf+0x19c>)
 80097de:	429c      	cmp	r4, r3
 80097e0:	dc0b      	bgt.n	80097fa <atanf+0x126>
 80097e2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80097e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 80097ee:	2302      	movs	r3, #2
 80097f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80097f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f8:	e7af      	b.n	800975a <atanf+0x86>
 80097fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80097fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009802:	2303      	movs	r3, #3
 8009804:	e7a9      	b.n	800975a <atanf+0x86>
 8009806:	4a1b      	ldr	r2, [pc, #108]	; (8009874 <atanf+0x1a0>)
 8009808:	491b      	ldr	r1, [pc, #108]	; (8009878 <atanf+0x1a4>)
 800980a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800980e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009812:	ed93 0a00 	vldr	s0, [r3]
 8009816:	ee37 7a40 	vsub.f32	s14, s14, s0
 800981a:	ed92 0a00 	vldr	s0, [r2]
 800981e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009822:	2d00      	cmp	r5, #0
 8009824:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009828:	bfb8      	it	lt
 800982a:	eef1 7a67 	vneglt.f32	s15, s15
 800982e:	e760      	b.n	80096f2 <atanf+0x1e>
 8009830:	3fc90fdb 	.word	0x3fc90fdb
 8009834:	bfc90fdb 	.word	0xbfc90fdb
 8009838:	3edfffff 	.word	0x3edfffff
 800983c:	7149f2ca 	.word	0x7149f2ca
 8009840:	3f97ffff 	.word	0x3f97ffff
 8009844:	3c8569d7 	.word	0x3c8569d7
 8009848:	3d4bda59 	.word	0x3d4bda59
 800984c:	bd6ef16b 	.word	0xbd6ef16b
 8009850:	3d886b35 	.word	0x3d886b35
 8009854:	3dba2e6e 	.word	0x3dba2e6e
 8009858:	3e124925 	.word	0x3e124925
 800985c:	3eaaaaab 	.word	0x3eaaaaab
 8009860:	bd15a221 	.word	0xbd15a221
 8009864:	bd9d8795 	.word	0xbd9d8795
 8009868:	bde38e38 	.word	0xbde38e38
 800986c:	be4ccccd 	.word	0xbe4ccccd
 8009870:	401bffff 	.word	0x401bffff
 8009874:	08009b00 	.word	0x08009b00
 8009878:	08009b10 	.word	0x08009b10

0800987c <fabsf>:
 800987c:	ee10 3a10 	vmov	r3, s0
 8009880:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009884:	ee00 3a10 	vmov	s0, r3
 8009888:	4770      	bx	lr
	...

0800988c <nanf>:
 800988c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009894 <nanf+0x8>
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	7fc00000 	.word	0x7fc00000

08009898 <_init>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	bf00      	nop
 800989c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989e:	bc08      	pop	{r3}
 80098a0:	469e      	mov	lr, r3
 80098a2:	4770      	bx	lr

080098a4 <_fini>:
 80098a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a6:	bf00      	nop
 80098a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098aa:	bc08      	pop	{r3}
 80098ac:	469e      	mov	lr, r3
 80098ae:	4770      	bx	lr
