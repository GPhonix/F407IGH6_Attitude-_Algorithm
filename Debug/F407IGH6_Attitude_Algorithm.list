
F407IGH6_Attitude_Algorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  08009e70  08009e70  00019e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a710  0800a710  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a710  0800a710  0001a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a718  0800a718  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a718  0800a718  0001a718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a71c  0800a71c  0001a71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  0800a720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200f8  2**0
                  CONTENTS
 10 .bss          0000019c  200000f8  200000f8  000200f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000294  20000294  000200f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012189  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a89  00000000  00000000  000322b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00034d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f58  00000000  00000000  00035de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c91  00000000  00000000  00036d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015f90  00000000  00000000  000599d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce8db  00000000  00000000  0006f961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e23c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d68  00000000  00000000  0013e28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000f8 	.word	0x200000f8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e58 	.word	0x08009e58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000fc 	.word	0x200000fc
 80001c4:	08009e58 	.word	0x08009e58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b6c      	ldr	r3, [pc, #432]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a6b      	ldr	r2, [pc, #428]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b69      	ldr	r3, [pc, #420]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b65      	ldr	r3, [pc, #404]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a64      	ldr	r2, [pc, #400]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b62      	ldr	r3, [pc, #392]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b5e      	ldr	r3, [pc, #376]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a5d      	ldr	r2, [pc, #372]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eec:	f043 0320 	orr.w	r3, r3, #32
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0320 	and.w	r3, r3, #32
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b54      	ldr	r3, [pc, #336]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b50      	ldr	r3, [pc, #320]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b49      	ldr	r3, [pc, #292]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a48      	ldr	r2, [pc, #288]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b46      	ldr	r3, [pc, #280]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OLED_SDA_Pin|OLED_SCL_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2103      	movs	r1, #3
 8000f56:	4843      	ldr	r0, [pc, #268]	; (8001064 <MX_GPIO_Init+0x1d0>)
 8000f58:	f001 f900 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST8310_RST_GPIO_Port, IST8310_RST_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4841      	ldr	r0, [pc, #260]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000f62:	f001 f8fb 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f6c:	483f      	ldr	r0, [pc, #252]	; (800106c <MX_GPIO_Init+0x1d8>)
 8000f6e:	f001 f8f5 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Accel_GPIO_Port, CS1_Accel_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2110      	movs	r1, #16
 8000f76:	483e      	ldr	r0, [pc, #248]	; (8001070 <MX_GPIO_Init+0x1dc>)
 8000f78:	f001 f8f0 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Gyro_GPIO_Port, CS1_Gyro_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	483c      	ldr	r0, [pc, #240]	; (8001074 <MX_GPIO_Init+0x1e0>)
 8000f82:	f001 f8eb 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OLED_SDA_Pin|OLED_SCL_Pin;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4831      	ldr	r0, [pc, #196]	; (8001064 <MX_GPIO_Init+0x1d0>)
 8000f9e:	f000 ff29 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST8310_RST_Pin;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IST8310_RST_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000fba:	f000 ff1b 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000fbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_GPIO_Init+0x1d8>)
 8000fd8:	f000 ff0c 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST8310_DRDY_Pin;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST8310_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000ff2:	f000 feff 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001000:	2301      	movs	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4819      	ldr	r0, [pc, #100]	; (8001070 <MX_GPIO_Init+0x1dc>)
 800100c:	f000 fef2 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Accel_Pin;
 8001010:	2310      	movs	r3, #16
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS1_Accel_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4812      	ldr	r0, [pc, #72]	; (8001070 <MX_GPIO_Init+0x1dc>)
 8001028:	f000 fee4 	bl	8001df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Gyro_Pin;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS1_Gyro_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x1e0>)
 8001044:	f000 fed6 	bl	8001df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2006      	movs	r0, #6
 800104e:	f000 fe9a 	bl	8001d86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001052:	2006      	movs	r0, #6
 8001054:	f000 feb3 	bl	8001dbe <HAL_NVIC_EnableIRQ>

}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	; 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400

08001078 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C3_Init+0x50>)
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <MX_I2C3_Init+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_I2C3_Init+0x58>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C3_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_I2C3_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010b6:	f001 f89d 	bl	80021f4 <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 fa9c 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000114 	.word	0x20000114
 80010cc:	40005c00 	.word	0x40005c00
 80010d0:	00061a80 	.word	0x00061a80

080010d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_I2C_MspInit+0xc4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d14b      	bne.n	800118e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_I2C_MspInit+0xc8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a20      	ldr	r2, [pc, #128]	; (800119c <HAL_I2C_MspInit+0xc8>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001140:	2304      	movs	r3, #4
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <HAL_I2C_MspInit+0xcc>)
 800114c:	f000 fe52 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001156:	2312      	movs	r3, #18
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001162:	2304      	movs	r3, #4
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 800116e:	f000 fe41 	bl	8001df4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_I2C_MspInit+0xc8>)
 800117c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005c00 	.word	0x40005c00
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_WWDG_Refresh(&hwwdg);
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	static uint16_t count = 0;
	if (htim->Instance == TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d13c      	bne.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x8c>
	{
		count++;
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011c4:	801a      	strh	r2, [r3, #0]
		count %= 1000;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	4a1d      	ldr	r2, [pc, #116]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80011cc:	fba2 1203 	umull	r1, r2, r2, r3
 80011d0:	0992      	lsrs	r2, r2, #6
 80011d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d6:	fb01 f202 	mul.w	r2, r1, r2
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011e0:	801a      	strh	r2, [r3, #0]
		if(count % 5 == 0)
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80011e8:	fba3 1302 	umull	r1, r3, r3, r2
 80011ec:	0899      	lsrs	r1, r3, #2
 80011ee:	460b      	mov	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d108      	bne.n	800120e <HAL_TIM_PeriodElapsedCallback+0x66>
		{
//			HAL_WWDG_Refresh(&hwwdg);
			IMU_Data_Fusion_Mahony(0.005, &g_roll, &g_pitch, &g_yaw);
 80011fc:	4a12      	ldr	r2, [pc, #72]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80011fe:	4913      	ldr	r1, [pc, #76]	; (800124c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001202:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001254 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001206:	f005 f9a3 	bl	8006550 <IMU_Data_Fusion_Mahony>
			IMU_Temperature_Compensate();
 800120a:	f005 fee9 	bl	8006fe0 <IMU_Temperature_Compensate>

		}
		if(count % 500 == 0)
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001214:	fba2 1203 	umull	r1, r2, r2, r3
 8001218:	0952      	lsrs	r2, r2, #5
 800121a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800121e:	fb01 f202 	mul.w	r2, r1, r2
 8001222:	1a9b      	subs	r3, r3, r2
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d104      	bne.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x8c>
		{
			LED_TOG(LED_R);
 800122a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001230:	f000 ffad 	bl	800218e <HAL_GPIO_TogglePin>
		}
	}
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000019a 	.word	0x2000019a
 8001240:	10624dd3 	.word	0x10624dd3
 8001244:	cccccccd 	.word	0xcccccccd
 8001248:	20000194 	.word	0x20000194
 800124c:	20000190 	.word	0x20000190
 8001250:	2000018c 	.word	0x2000018c
 8001254:	3ba3d70a 	.word	0x3ba3d70a
 8001258:	40021c00 	.word	0x40021c00

0800125c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == KEY_Pin)
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d128      	bne.n	80012be <HAL_GPIO_EXTI_Callback+0x62>
	{
		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET)
 800126c:	2101      	movs	r1, #1
 800126e:	4816      	ldr	r0, [pc, #88]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001270:	f000 ff5c 	bl	800212c <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d121      	bne.n	80012be <HAL_GPIO_EXTI_Callback+0x62>
		{
			g_oled_page++;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_GPIO_EXTI_Callback+0x70>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_GPIO_EXTI_Callback+0x70>)
 8001284:	701a      	strb	r2, [r3, #0]
			g_oled_page %= 5;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_GPIO_EXTI_Callback+0x70>)
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x74>)
 800128c:	fba3 1302 	umull	r1, r3, r3, r2
 8001290:	0899      	lsrs	r1, r3, #2
 8001292:	460b      	mov	r3, r1
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_GPIO_EXTI_Callback+0x70>)
 800129e:	701a      	strb	r2, [r3, #0]
			LED_TOG(LED_B);
 80012a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x78>)
 80012a6:	f000 ff72 	bl	800218e <HAL_GPIO_TogglePin>
			OLED_Clear();
 80012aa:	f006 f87a 	bl	80073a2 <OLED_Clear>
			OLED_ShowNum(1, 14, g_oled_page, 1);
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <HAL_GPIO_EXTI_Callback+0x70>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	2301      	movs	r3, #1
 80012b6:	210e      	movs	r1, #14
 80012b8:	2001      	movs	r0, #1
 80012ba:	f006 f92d 	bl	8007518 <OLED_ShowNum>
		}
	}
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40020000 	.word	0x40020000
 80012cc:	20000198 	.word	0x20000198
 80012d0:	cccccccd 	.word	0xcccccccd
 80012d4:	40021c00 	.word	0x40021c00

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012de:	f000 fbe1 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e2:	f000 f921 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e6:	f7ff fdd5 	bl	8000e94 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012ea:	f000 faa1 	bl	8001830 <MX_TIM2_Init>
  MX_I2C3_Init();
 80012ee:	f7ff fec3 	bl	8001078 <MX_I2C3_Init>
  MX_SPI1_Init();
 80012f2:	f000 f989 	bl	8001608 <MX_SPI1_Init>
  MX_TIM10_Init();
 80012f6:	f000 fae7 	bl	80018c8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  uint8_t IMU_error = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
  OLED_Init();
 80012fe:	f006 fa17 	bl	8007730 <OLED_Init>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001302:	2100      	movs	r1, #0
 8001304:	4878      	ldr	r0, [pc, #480]	; (80014e8 <main+0x210>)
 8001306:	f003 fa3b 	bl	8004780 <HAL_TIM_PWM_Start>
  IMU_error = IMU_Init();
 800130a:	f004 fc81 	bl	8005c10 <IMU_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  HAL_TIM_Base_Start_IT(&htim2);
 8001312:	4876      	ldr	r0, [pc, #472]	; (80014ec <main+0x214>)
 8001314:	f003 f96a 	bl	80045ec <HAL_TIM_Base_Start_IT>
//	 HAL_Delay(50);
//	 for(uint8_t i = 0; i < 3; i++)
//	 {
//		  OLED_Showfloat(2 + i, 1, accdata[i], 4, 4);
//	 }
	  HAL_Delay(50);
 8001318:	2032      	movs	r0, #50	; 0x32
 800131a:	f000 fc35 	bl	8001b88 <HAL_Delay>
	  switch (g_oled_page)
 800131e:	4b74      	ldr	r3, [pc, #464]	; (80014f0 <main+0x218>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b04      	cmp	r3, #4
 8001324:	f200 80de 	bhi.w	80014e4 <main+0x20c>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <main+0x58>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001345 	.word	0x08001345
 8001334:	08001389 	.word	0x08001389
 8001338:	080013d7 	.word	0x080013d7
 800133c:	0800142b 	.word	0x0800142b
 8001340:	0800147f 	.word	0x0800147f
	  {
	  case 0:
		  OLED_ShowString(1, 1, "IMU DEMO");
 8001344:	4a6b      	ldr	r2, [pc, #428]	; (80014f4 <main+0x21c>)
 8001346:	2101      	movs	r1, #1
 8001348:	2001      	movs	r0, #1
 800134a:	f006 f8a7 	bl	800749c <OLED_ShowString>
		  OLED_ShowString(2, 1, "ERROR:");OLED_ShowBinNum(2, 7, IMU_error, 8);
 800134e:	4a6a      	ldr	r2, [pc, #424]	; (80014f8 <main+0x220>)
 8001350:	2101      	movs	r1, #1
 8001352:	2002      	movs	r0, #2
 8001354:	f006 f8a2 	bl	800749c <OLED_ShowString>
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	2308      	movs	r3, #8
 800135c:	2107      	movs	r1, #7
 800135e:	2002      	movs	r0, #2
 8001360:	f006 f9b0 	bl	80076c4 <OLED_ShowBinNum>
		  OLED_ShowString(3, 1, "TEMP:"); OLED_Showfloat(3, 6, BMI088_Get_Temperature(), 4, 5);
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <main+0x224>)
 8001366:	2101      	movs	r1, #1
 8001368:	2003      	movs	r0, #3
 800136a:	f006 f897 	bl	800749c <OLED_ShowString>
 800136e:	f004 fa79 	bl	8005864 <BMI088_Get_Temperature>
 8001372:	eef0 7a40 	vmov.f32	s15, s0
 8001376:	2305      	movs	r3, #5
 8001378:	2204      	movs	r2, #4
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	2106      	movs	r1, #6
 8001380:	2003      	movs	r0, #3
 8001382:	f006 fa43 	bl	800780c <OLED_Showfloat>
		  break;
 8001386:	e0ae      	b.n	80014e6 <main+0x20e>
	  case 1:
		  OLED_ShowString(1, 1, "Angle");
 8001388:	4a5d      	ldr	r2, [pc, #372]	; (8001500 <main+0x228>)
 800138a:	2101      	movs	r1, #1
 800138c:	2001      	movs	r0, #1
 800138e:	f006 f885 	bl	800749c <OLED_ShowString>
		  OLED_Showfloat(2, 4, g_roll , 4, 4);
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <main+0x22c>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	2304      	movs	r3, #4
 800139a:	2204      	movs	r2, #4
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	2104      	movs	r1, #4
 80013a2:	2002      	movs	r0, #2
 80013a4:	f006 fa32 	bl	800780c <OLED_Showfloat>
		  OLED_Showfloat(3, 4, g_pitch, 4, 4);
 80013a8:	4b57      	ldr	r3, [pc, #348]	; (8001508 <main+0x230>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	2304      	movs	r3, #4
 80013b0:	2204      	movs	r2, #4
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	2104      	movs	r1, #4
 80013b8:	2003      	movs	r0, #3
 80013ba:	f006 fa27 	bl	800780c <OLED_Showfloat>
		  OLED_Showfloat(4, 4, g_yaw  , 4, 4);
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <main+0x234>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	2304      	movs	r3, #4
 80013c6:	2204      	movs	r2, #4
 80013c8:	eeb0 0a67 	vmov.f32	s0, s15
 80013cc:	2104      	movs	r1, #4
 80013ce:	2004      	movs	r0, #4
 80013d0:	f006 fa1c 	bl	800780c <OLED_Showfloat>
		  break;
 80013d4:	e087      	b.n	80014e6 <main+0x20e>
	  case 2:
		  BMI088_Getdata_Acc(accdata);
 80013d6:	484e      	ldr	r0, [pc, #312]	; (8001510 <main+0x238>)
 80013d8:	f004 face 	bl	8005978 <BMI088_Getdata_Acc>
		  OLED_ShowString(1, 1, "A-C-C");
 80013dc:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <main+0x23c>)
 80013de:	2101      	movs	r1, #1
 80013e0:	2001      	movs	r0, #1
 80013e2:	f006 f85b 	bl	800749c <OLED_ShowString>
//		  OLED_ShowHexNum(1, 12, BMI088_Acc_ReadID(), 2);
		  OLED_Showfloat(2, 1, accdata[0], 4, 4);
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <main+0x238>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	2304      	movs	r3, #4
 80013ee:	2204      	movs	r2, #4
 80013f0:	eeb0 0a67 	vmov.f32	s0, s15
 80013f4:	2101      	movs	r1, #1
 80013f6:	2002      	movs	r0, #2
 80013f8:	f006 fa08 	bl	800780c <OLED_Showfloat>
		  OLED_Showfloat(3, 1, accdata[1], 4, 4);
 80013fc:	4b44      	ldr	r3, [pc, #272]	; (8001510 <main+0x238>)
 80013fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001402:	2304      	movs	r3, #4
 8001404:	2204      	movs	r2, #4
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	2101      	movs	r1, #1
 800140c:	2003      	movs	r0, #3
 800140e:	f006 f9fd 	bl	800780c <OLED_Showfloat>
		  OLED_Showfloat(4, 1, accdata[2], 4, 4);
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <main+0x238>)
 8001414:	edd3 7a02 	vldr	s15, [r3, #8]
 8001418:	2304      	movs	r3, #4
 800141a:	2204      	movs	r2, #4
 800141c:	eeb0 0a67 	vmov.f32	s0, s15
 8001420:	2101      	movs	r1, #1
 8001422:	2004      	movs	r0, #4
 8001424:	f006 f9f2 	bl	800780c <OLED_Showfloat>
		  break;
 8001428:	e05d      	b.n	80014e6 <main+0x20e>
	  case 3:
		  BMI088_Getdata_Gyro(gyrodata);
 800142a:	483b      	ldr	r0, [pc, #236]	; (8001518 <main+0x240>)
 800142c:	f004 faf6 	bl	8005a1c <BMI088_Getdata_Gyro>
		  OLED_ShowString(1, 1, "G-Y-R-O");
 8001430:	4a3a      	ldr	r2, [pc, #232]	; (800151c <main+0x244>)
 8001432:	2101      	movs	r1, #1
 8001434:	2001      	movs	r0, #1
 8001436:	f006 f831 	bl	800749c <OLED_ShowString>
//		  OLED_ShowHexNum(1, 12, BMI088_Gyro_ReadID(), 2);
		  OLED_Showfloat(2, 1, gyrodata[0], 4, 5);
 800143a:	4b37      	ldr	r3, [pc, #220]	; (8001518 <main+0x240>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	2305      	movs	r3, #5
 8001442:	2204      	movs	r2, #4
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	2101      	movs	r1, #1
 800144a:	2002      	movs	r0, #2
 800144c:	f006 f9de 	bl	800780c <OLED_Showfloat>
		  OLED_Showfloat(3, 1, gyrodata[1], 4, 5);
 8001450:	4b31      	ldr	r3, [pc, #196]	; (8001518 <main+0x240>)
 8001452:	edd3 7a01 	vldr	s15, [r3, #4]
 8001456:	2305      	movs	r3, #5
 8001458:	2204      	movs	r2, #4
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	2101      	movs	r1, #1
 8001460:	2003      	movs	r0, #3
 8001462:	f006 f9d3 	bl	800780c <OLED_Showfloat>
		  OLED_Showfloat(4, 1, gyrodata[2], 4, 5);
 8001466:	4b2c      	ldr	r3, [pc, #176]	; (8001518 <main+0x240>)
 8001468:	edd3 7a02 	vldr	s15, [r3, #8]
 800146c:	2305      	movs	r3, #5
 800146e:	2204      	movs	r2, #4
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	2101      	movs	r1, #1
 8001476:	2004      	movs	r0, #4
 8001478:	f006 f9c8 	bl	800780c <OLED_Showfloat>
		  break;
 800147c:	e033      	b.n	80014e6 <main+0x20e>
	  case 4:
		  IST8310_Getdata_Mag(magdata);
 800147e:	4828      	ldr	r0, [pc, #160]	; (8001520 <main+0x248>)
 8001480:	f005 fe84 	bl	800718c <IST8310_Getdata_Mag>
		  OLED_ShowString(1, 1, "M-A-G");
 8001484:	4a27      	ldr	r2, [pc, #156]	; (8001524 <main+0x24c>)
 8001486:	2101      	movs	r1, #1
 8001488:	2001      	movs	r0, #1
 800148a:	f006 f807 	bl	800749c <OLED_ShowString>
		  OLED_ShowHexNum(1, 12, IST8310_ReadID(), 2);
 800148e:	f005 fe0f 	bl	80070b0 <IST8310_ReadID>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	2302      	movs	r3, #2
 8001498:	210c      	movs	r1, #12
 800149a:	2001      	movs	r0, #1
 800149c:	f006 f8ce 	bl	800763c <OLED_ShowHexNum>
		  OLED_Showfloat(2, 1, magdata[0], 4, 5);
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <main+0x248>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	2305      	movs	r3, #5
 80014a8:	2204      	movs	r2, #4
 80014aa:	eeb0 0a67 	vmov.f32	s0, s15
 80014ae:	2101      	movs	r1, #1
 80014b0:	2002      	movs	r0, #2
 80014b2:	f006 f9ab 	bl	800780c <OLED_Showfloat>
		  OLED_Showfloat(3, 1, magdata[1], 4, 5);
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <main+0x248>)
 80014b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80014bc:	2305      	movs	r3, #5
 80014be:	2204      	movs	r2, #4
 80014c0:	eeb0 0a67 	vmov.f32	s0, s15
 80014c4:	2101      	movs	r1, #1
 80014c6:	2003      	movs	r0, #3
 80014c8:	f006 f9a0 	bl	800780c <OLED_Showfloat>
		  OLED_Showfloat(4, 1, magdata[2], 4, 5);
 80014cc:	4b14      	ldr	r3, [pc, #80]	; (8001520 <main+0x248>)
 80014ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80014d2:	2305      	movs	r3, #5
 80014d4:	2204      	movs	r2, #4
 80014d6:	eeb0 0a67 	vmov.f32	s0, s15
 80014da:	2101      	movs	r1, #1
 80014dc:	2004      	movs	r0, #4
 80014de:	f006 f995 	bl	800780c <OLED_Showfloat>
		  break;
 80014e2:	e000      	b.n	80014e6 <main+0x20e>
	  default: break;
 80014e4:	bf00      	nop
	  HAL_Delay(50);
 80014e6:	e717      	b.n	8001318 <main+0x40>
 80014e8:	2000023c 	.word	0x2000023c
 80014ec:	200001f4 	.word	0x200001f4
 80014f0:	20000198 	.word	0x20000198
 80014f4:	08009e70 	.word	0x08009e70
 80014f8:	08009e7c 	.word	0x08009e7c
 80014fc:	08009e84 	.word	0x08009e84
 8001500:	08009e8c 	.word	0x08009e8c
 8001504:	2000018c 	.word	0x2000018c
 8001508:	20000190 	.word	0x20000190
 800150c:	20000194 	.word	0x20000194
 8001510:	20000168 	.word	0x20000168
 8001514:	08009e94 	.word	0x08009e94
 8001518:	20000174 	.word	0x20000174
 800151c:	08009e9c 	.word	0x08009e9c
 8001520:	20000180 	.word	0x20000180
 8001524:	08009ea4 	.word	0x08009ea4

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b094      	sub	sp, #80	; 0x50
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0320 	add.w	r3, r7, #32
 8001532:	2230      	movs	r2, #48	; 0x30
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f006 fa92 	bl	8007a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <SystemClock_Config+0xcc>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <SystemClock_Config+0xcc>)
 8001556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <SystemClock_Config+0xcc>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <SystemClock_Config+0xd0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a21      	ldr	r2, [pc, #132]	; (80015f8 <SystemClock_Config+0xd0>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <SystemClock_Config+0xd0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001584:	2301      	movs	r3, #1
 8001586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158e:	2302      	movs	r3, #2
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001598:	2306      	movs	r3, #6
 800159a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800159c:	23a8      	movs	r3, #168	; 0xa8
 800159e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015a4:	2304      	movs	r3, #4
 80015a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a8:	f107 0320 	add.w	r3, r7, #32
 80015ac:	4618      	mov	r0, r3
 80015ae:	f001 fde1 	bl	8003174 <HAL_RCC_OscConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015b8:	f000 f820 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015bc:	230f      	movs	r3, #15
 80015be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c0:	2302      	movs	r3, #2
 80015c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2105      	movs	r1, #5
 80015da:	4618      	mov	r0, r3
 80015dc:	f002 f842 	bl	8003664 <HAL_RCC_ClockConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015e6:	f000 f809 	bl	80015fc <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	3750      	adds	r7, #80	; 0x50
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_SPI1_Init+0x64>)
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <MX_SPI1_Init+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_SPI1_Init+0x64>)
 8001614:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_SPI1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_SPI1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_SPI1_Init+0x64>)
 8001628:	2202      	movs	r2, #2
 800162a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_SPI1_Init+0x64>)
 800162e:	2201      	movs	r2, #1
 8001630:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_SPI1_Init+0x64>)
 8001634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001638:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_SPI1_Init+0x64>)
 800163c:	2218      	movs	r2, #24
 800163e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_SPI1_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_SPI1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <MX_SPI1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_SPI1_Init+0x64>)
 8001654:	220a      	movs	r2, #10
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_SPI1_Init+0x64>)
 800165a:	f002 f9cf 	bl	80039fc <HAL_SPI_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001664:	f7ff ffca 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2000019c 	.word	0x2000019c
 8001670:	40013000 	.word	0x40013000

08001674 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a28      	ldr	r2, [pc, #160]	; (8001734 <HAL_SPI_MspInit+0xc0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d149      	bne.n	800172a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_SPI_MspInit+0xc4>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a26      	ldr	r2, [pc, #152]	; (8001738 <HAL_SPI_MspInit+0xc4>)
 80016a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_SPI_MspInit+0xc4>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_SPI_MspInit+0xc4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <HAL_SPI_MspInit+0xc4>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_SPI_MspInit+0xc4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_SPI_MspInit+0xc4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a18      	ldr	r2, [pc, #96]	; (8001738 <HAL_SPI_MspInit+0xc4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_SPI_MspInit+0xc4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80016ea:	2318      	movs	r3, #24
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fa:	2305      	movs	r3, #5
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <HAL_SPI_MspInit+0xc8>)
 8001706:	f000 fb75 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800171a:	2305      	movs	r3, #5
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4806      	ldr	r0, [pc, #24]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 8001726:	f000 fb65 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	; 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40013000 	.word	0x40013000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400
 8001740:	40020000 	.word	0x40020000

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_MspInit+0x4c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <HAL_MspInit+0x4c>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <HAL_MspInit+0x4c>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x4c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x4c>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x4c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 f9b2 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f000 fce9 	bl	80021c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <TIM2_IRQHandler+0x10>)
 80017fe:	f003 f887 	bl	8004910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200001f4 	.word	0x200001f4

0800180c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <MX_TIM2_Init+0x94>)
 800184e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001852:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <MX_TIM2_Init+0x94>)
 8001856:	2253      	movs	r2, #83	; 0x53
 8001858:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <MX_TIM2_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001860:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <MX_TIM2_Init+0x94>)
 8001862:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001866:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_TIM2_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <MX_TIM2_Init+0x94>)
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001874:	4813      	ldr	r0, [pc, #76]	; (80018c4 <MX_TIM2_Init+0x94>)
 8001876:	f002 fe69 	bl	800454c <HAL_TIM_Base_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001880:	f7ff febc 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001888:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4619      	mov	r1, r3
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <MX_TIM2_Init+0x94>)
 8001892:	f003 fa07 	bl	8004ca4 <HAL_TIM_ConfigClockSource>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800189c:	f7ff feae 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_TIM2_Init+0x94>)
 80018ae:	f003 fdf9 	bl	80054a4 <HAL_TIMEx_MasterConfigSynchronization>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018b8:	f7ff fea0 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200001f4 	.word	0x200001f4

080018c8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	; (800195c <MX_TIM10_Init+0x94>)
 80018e2:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <MX_TIM10_Init+0x98>)
 80018e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <MX_TIM10_Init+0x94>)
 80018e8:	22a7      	movs	r2, #167	; 0xa7
 80018ea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <MX_TIM10_Init+0x94>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <MX_TIM10_Init+0x94>)
 80018f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <MX_TIM10_Init+0x94>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001900:	4b16      	ldr	r3, [pc, #88]	; (800195c <MX_TIM10_Init+0x94>)
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001906:	4815      	ldr	r0, [pc, #84]	; (800195c <MX_TIM10_Init+0x94>)
 8001908:	f002 fe20 	bl	800454c <HAL_TIM_Base_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001912:	f7ff fe73 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001916:	4811      	ldr	r0, [pc, #68]	; (800195c <MX_TIM10_Init+0x94>)
 8001918:	f002 fed8 	bl	80046cc <HAL_TIM_PWM_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001922:	f7ff fe6b 	bl	80015fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001926:	2360      	movs	r3, #96	; 0x60
 8001928:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	4619      	mov	r1, r3
 800193c:	4807      	ldr	r0, [pc, #28]	; (800195c <MX_TIM10_Init+0x94>)
 800193e:	f003 f8ef 	bl	8004b20 <HAL_TIM_PWM_ConfigChannel>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001948:	f7ff fe58 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800194c:	4803      	ldr	r0, [pc, #12]	; (800195c <MX_TIM10_Init+0x94>)
 800194e:	f000 f845 	bl	80019dc <HAL_TIM_MspPostInit>

}
 8001952:	bf00      	nop
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000023c 	.word	0x2000023c
 8001960:	40014400 	.word	0x40014400

08001964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d116      	bne.n	80019a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_TIM_Base_MspInit+0x70>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <HAL_TIM_Base_MspInit+0x70>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_TIM_Base_MspInit+0x70>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	201c      	movs	r0, #28
 8001998:	f000 f9f5 	bl	8001d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800199c:	201c      	movs	r0, #28
 800199e:	f000 fa0e 	bl	8001dbe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80019a2:	e012      	b.n	80019ca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_TIM_Base_MspInit+0x74>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d10d      	bne.n	80019ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_TIM_Base_MspInit+0x70>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <HAL_TIM_Base_MspInit+0x70>)
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_TIM_Base_MspInit+0x70>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
}
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40014400 	.word	0x40014400

080019dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_TIM_MspPostInit+0x68>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d11d      	bne.n	8001a3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_TIM_MspPostInit+0x6c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_TIM_MspPostInit+0x6c>)
 8001a08:	f043 0320 	orr.w	r3, r3, #32
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_TIM_MspPostInit+0x6c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PF6     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a1a:	2340      	movs	r3, #64	; 0x40
 8001a1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <HAL_TIM_MspPostInit+0x70>)
 8001a36:	f000 f9dd 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40014400 	.word	0x40014400
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40021400 	.word	0x40021400

08001a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a56:	490e      	ldr	r1, [pc, #56]	; (8001a90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a58:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a6c:	4c0b      	ldr	r4, [pc, #44]	; (8001a9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a7a:	f7ff fec7 	bl	800180c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f005 ffcb 	bl	8007a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a82:	f7ff fc29 	bl	80012d8 <main>
  bx  lr    
 8001a86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8001a94:	0800a720 	.word	0x0800a720
  ldr r2, =_sbss
 8001a98:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8001a9c:	20000294 	.word	0x20000294

08001aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_Init+0x40>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_Init+0x40>)
 8001aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_Init+0x40>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001acc:	2003      	movs	r0, #3
 8001ace:	f000 f94f 	bl	8001d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad2:	200f      	movs	r0, #15
 8001ad4:	f000 f808 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad8:	f7ff fe34 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x54>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x58>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f967 	bl	8001dda <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 f92f 	bl	8001d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x5c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000008 	.word	0x20000008
 8001b44:	20000004 	.word	0x20000004

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000284 	.word	0x20000284

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000284 	.word	0x20000284

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff ffee 	bl	8001b70 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bec:	4013      	ands	r3, r2
 8001bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x44>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <__NVIC_GetPriorityGrouping+0x18>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	f003 0307 	and.w	r3, r3, #7
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	db0b      	blt.n	8001c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	4907      	ldr	r1, [pc, #28]	; (8001c6c <__NVIC_EnableIRQ+0x38>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	2001      	movs	r0, #1
 8001c56:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	db0a      	blt.n	8001c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	490c      	ldr	r1, [pc, #48]	; (8001cbc <__NVIC_SetPriority+0x4c>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440b      	add	r3, r1
 8001c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c98:	e00a      	b.n	8001cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <__NVIC_SetPriority+0x50>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	3b04      	subs	r3, #4
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	440b      	add	r3, r1
 8001cae:	761a      	strb	r2, [r3, #24]
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000e100 	.word	0xe000e100
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f1c3 0307 	rsb	r3, r3, #7
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	bf28      	it	cs
 8001ce2:	2304      	movcs	r3, #4
 8001ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	2b06      	cmp	r3, #6
 8001cec:	d902      	bls.n	8001cf4 <NVIC_EncodePriority+0x30>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	3b03      	subs	r3, #3
 8001cf2:	e000      	b.n	8001cf6 <NVIC_EncodePriority+0x32>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43da      	mvns	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	401a      	ands	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa01 f303 	lsl.w	r3, r1, r3
 8001d16:	43d9      	mvns	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	4313      	orrs	r3, r2
         );
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d3c:	d301      	bcc.n	8001d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00f      	b.n	8001d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d42:	4a0a      	ldr	r2, [pc, #40]	; (8001d6c <SysTick_Config+0x40>)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f7ff ff8e 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SysTick_Config+0x40>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <SysTick_Config+0x40>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	e000e010 	.word	0xe000e010

08001d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ff29 	bl	8001bd0 <__NVIC_SetPriorityGrouping>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d98:	f7ff ff3e 	bl	8001c18 <__NVIC_GetPriorityGrouping>
 8001d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	6978      	ldr	r0, [r7, #20]
 8001da4:	f7ff ff8e 	bl	8001cc4 <NVIC_EncodePriority>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	bf00      	nop
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff31 	bl	8001c34 <__NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffa2 	bl	8001d2c <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	; 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	e16b      	b.n	80020e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e10:	2201      	movs	r2, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	f040 815a 	bne.w	80020e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d005      	beq.n	8001e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d130      	bne.n	8001ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 0201 	and.w	r2, r3, #1
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d017      	beq.n	8001ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d123      	bne.n	8001f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	08da      	lsrs	r2, r3, #3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3208      	adds	r2, #8
 8001ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	220f      	movs	r2, #15
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	08da      	lsrs	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3208      	adds	r2, #8
 8001f32:	69b9      	ldr	r1, [r7, #24]
 8001f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0203 	and.w	r2, r3, #3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80b4 	beq.w	80020e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b60      	ldr	r3, [pc, #384]	; (8002100 <HAL_GPIO_Init+0x30c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <HAL_GPIO_Init+0x30c>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_GPIO_Init+0x30c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f96:	4a5b      	ldr	r2, [pc, #364]	; (8002104 <HAL_GPIO_Init+0x310>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_GPIO_Init+0x314>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02b      	beq.n	800201a <HAL_GPIO_Init+0x226>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a51      	ldr	r2, [pc, #324]	; (800210c <HAL_GPIO_Init+0x318>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x222>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	; (8002110 <HAL_GPIO_Init+0x31c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x21e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4f      	ldr	r2, [pc, #316]	; (8002114 <HAL_GPIO_Init+0x320>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x21a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4e      	ldr	r2, [pc, #312]	; (8002118 <HAL_GPIO_Init+0x324>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x216>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4d      	ldr	r2, [pc, #308]	; (800211c <HAL_GPIO_Init+0x328>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x212>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4c      	ldr	r2, [pc, #304]	; (8002120 <HAL_GPIO_Init+0x32c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x20e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4b      	ldr	r2, [pc, #300]	; (8002124 <HAL_GPIO_Init+0x330>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x20a>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e00e      	b.n	800201c <HAL_GPIO_Init+0x228>
 8001ffe:	2308      	movs	r3, #8
 8002000:	e00c      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002002:	2306      	movs	r3, #6
 8002004:	e00a      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002006:	2305      	movs	r3, #5
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x228>
 800200a:	2304      	movs	r3, #4
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x228>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x228>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x228>
 800201a:	2300      	movs	r3, #0
 800201c:	69fa      	ldr	r2, [r7, #28]
 800201e:	f002 0203 	and.w	r2, r2, #3
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202c:	4935      	ldr	r1, [pc, #212]	; (8002104 <HAL_GPIO_Init+0x310>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203a:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <HAL_GPIO_Init+0x334>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800205e:	4a32      	ldr	r2, [pc, #200]	; (8002128 <HAL_GPIO_Init+0x334>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <HAL_GPIO_Init+0x334>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002088:	4a27      	ldr	r2, [pc, #156]	; (8002128 <HAL_GPIO_Init+0x334>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_GPIO_Init+0x334>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020b2:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_GPIO_Init+0x334>)
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_GPIO_Init+0x334>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020dc:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_GPIO_Init+0x334>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3301      	adds	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	2b0f      	cmp	r3, #15
 80020ec:	f67f ae90 	bls.w	8001e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800
 8002104:	40013800 	.word	0x40013800
 8002108:	40020000 	.word	0x40020000
 800210c:	40020400 	.word	0x40020400
 8002110:	40020800 	.word	0x40020800
 8002114:	40020c00 	.word	0x40020c00
 8002118:	40021000 	.word	0x40021000
 800211c:	40021400 	.word	0x40021400
 8002120:	40021800 	.word	0x40021800
 8002124:	40021c00 	.word	0x40021c00
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e001      	b.n	800214e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021a0:	887a      	ldrh	r2, [r7, #2]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4013      	ands	r3, r2
 80021a6:	041a      	lsls	r2, r3, #16
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	400b      	ands	r3, r1
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d006      	beq.n	80021e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f83a 	bl	800125c <HAL_GPIO_EXTI_Callback>
  }
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e12b      	b.n	800245e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe ff5a 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	; 0x24
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002246:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002258:	f001 fbbc 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 800225c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4a81      	ldr	r2, [pc, #516]	; (8002468 <HAL_I2C_Init+0x274>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d807      	bhi.n	8002278 <HAL_I2C_Init+0x84>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4a80      	ldr	r2, [pc, #512]	; (800246c <HAL_I2C_Init+0x278>)
 800226c:	4293      	cmp	r3, r2
 800226e:	bf94      	ite	ls
 8002270:	2301      	movls	r3, #1
 8002272:	2300      	movhi	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e006      	b.n	8002286 <HAL_I2C_Init+0x92>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a7d      	ldr	r2, [pc, #500]	; (8002470 <HAL_I2C_Init+0x27c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	bf94      	ite	ls
 8002280:	2301      	movls	r3, #1
 8002282:	2300      	movhi	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0e7      	b.n	800245e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a78      	ldr	r2, [pc, #480]	; (8002474 <HAL_I2C_Init+0x280>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9b      	lsrs	r3, r3, #18
 8002298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a6a      	ldr	r2, [pc, #424]	; (8002468 <HAL_I2C_Init+0x274>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d802      	bhi.n	80022c8 <HAL_I2C_Init+0xd4>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3301      	adds	r3, #1
 80022c6:	e009      	b.n	80022dc <HAL_I2C_Init+0xe8>
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	4a69      	ldr	r2, [pc, #420]	; (8002478 <HAL_I2C_Init+0x284>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	099b      	lsrs	r3, r3, #6
 80022da:	3301      	adds	r3, #1
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	430b      	orrs	r3, r1
 80022e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	495c      	ldr	r1, [pc, #368]	; (8002468 <HAL_I2C_Init+0x274>)
 80022f8:	428b      	cmp	r3, r1
 80022fa:	d819      	bhi.n	8002330 <HAL_I2C_Init+0x13c>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e59      	subs	r1, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	fbb1 f3f3 	udiv	r3, r1, r3
 800230a:	1c59      	adds	r1, r3, #1
 800230c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002310:	400b      	ands	r3, r1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_I2C_Init+0x138>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1e59      	subs	r1, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fbb1 f3f3 	udiv	r3, r1, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232a:	e051      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 800232c:	2304      	movs	r3, #4
 800232e:	e04f      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <HAL_I2C_Init+0x168>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e58      	subs	r0, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	440b      	add	r3, r1
 8002346:	fbb0 f3f3 	udiv	r3, r0, r3
 800234a:	3301      	adds	r3, #1
 800234c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	e012      	b.n	8002382 <HAL_I2C_Init+0x18e>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1e58      	subs	r0, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	0099      	lsls	r1, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Init+0x196>
 8002386:	2301      	movs	r3, #1
 8002388:	e022      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10e      	bne.n	80023b0 <HAL_I2C_Init+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1e58      	subs	r0, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	440b      	add	r3, r1
 80023a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ae:	e00f      	b.n	80023d0 <HAL_I2C_Init+0x1dc>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e58      	subs	r0, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	0099      	lsls	r1, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	6809      	ldr	r1, [r1, #0]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6911      	ldr	r1, [r2, #16]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68d2      	ldr	r2, [r2, #12]
 800240a:	4311      	orrs	r1, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	430b      	orrs	r3, r1
 8002412:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	000186a0 	.word	0x000186a0
 800246c:	001e847f 	.word	0x001e847f
 8002470:	003d08ff 	.word	0x003d08ff
 8002474:	431bde83 	.word	0x431bde83
 8002478:	10624dd3 	.word	0x10624dd3

0800247c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	461a      	mov	r2, r3
 800248a:	4603      	mov	r3, r0
 800248c:	817b      	strh	r3, [r7, #10]
 800248e:	460b      	mov	r3, r1
 8002490:	813b      	strh	r3, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002496:	f7ff fb6b 	bl	8001b70 <HAL_GetTick>
 800249a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b20      	cmp	r3, #32
 80024a6:	f040 80d9 	bne.w	800265c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2319      	movs	r3, #25
 80024b0:	2201      	movs	r2, #1
 80024b2:	496d      	ldr	r1, [pc, #436]	; (8002668 <HAL_I2C_Mem_Write+0x1ec>)
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fc7f 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
 80024c2:	e0cc      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_I2C_Mem_Write+0x56>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e0c5      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d007      	beq.n	80024f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2221      	movs	r2, #33	; 0x21
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a3a      	ldr	r2, [r7, #32]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4a4d      	ldr	r2, [pc, #308]	; (800266c <HAL_I2C_Mem_Write+0x1f0>)
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800253a:	88f8      	ldrh	r0, [r7, #6]
 800253c:	893a      	ldrh	r2, [r7, #8]
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	4603      	mov	r3, r0
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fab6 	bl	8002abc <I2C_RequestMemoryWrite>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d052      	beq.n	80025fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e081      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fd00 	bl	8002f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00d      	beq.n	8002586 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2b04      	cmp	r3, #4
 8002570:	d107      	bne.n	8002582 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002580:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e06b      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	781a      	ldrb	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d11b      	bne.n	80025fc <HAL_I2C_Mem_Write+0x180>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d017      	beq.n	80025fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1aa      	bne.n	800255a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fcec 	bl	8002fe6 <I2C_WaitOnBTFFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	2b04      	cmp	r3, #4
 800261a:	d107      	bne.n	800262c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e016      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	e000      	b.n	800265e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800265c:	2302      	movs	r3, #2
  }
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	00100002 	.word	0x00100002
 800266c:	ffff0000 	.word	0xffff0000

08002670 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b08c      	sub	sp, #48	; 0x30
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	460b      	mov	r3, r1
 8002684:	813b      	strh	r3, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800268a:	f7ff fa71 	bl	8001b70 <HAL_GetTick>
 800268e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b20      	cmp	r3, #32
 800269a:	f040 8208 	bne.w	8002aae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2319      	movs	r3, #25
 80026a4:	2201      	movs	r2, #1
 80026a6:	497b      	ldr	r1, [pc, #492]	; (8002894 <HAL_I2C_Mem_Read+0x224>)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fb85 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
 80026b6:	e1fb      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Mem_Read+0x56>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e1f4      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x440>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d007      	beq.n	80026ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2222      	movs	r2, #34	; 0x22
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2240      	movs	r2, #64	; 0x40
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a5b      	ldr	r2, [pc, #364]	; (8002898 <HAL_I2C_Mem_Read+0x228>)
 800272c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800272e:	88f8      	ldrh	r0, [r7, #6]
 8002730:	893a      	ldrh	r2, [r7, #8]
 8002732:	8979      	ldrh	r1, [r7, #10]
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	4603      	mov	r3, r0
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fa52 	bl	8002be8 <I2C_RequestMemoryRead>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e1b0      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	2b00      	cmp	r3, #0
 8002754:	d113      	bne.n	800277e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	623b      	str	r3, [r7, #32]
 800276a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e184      	b.n	8002a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	2b01      	cmp	r3, #1
 8002784:	d11b      	bne.n	80027be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	61fb      	str	r3, [r7, #28]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e164      	b.n	8002a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d11b      	bne.n	80027fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e6:	2300      	movs	r3, #0
 80027e8:	61bb      	str	r3, [r7, #24]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	e144      	b.n	8002a88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002814:	e138      	b.n	8002a88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	2b03      	cmp	r3, #3
 800281c:	f200 80f1 	bhi.w	8002a02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002824:	2b01      	cmp	r3, #1
 8002826:	d123      	bne.n	8002870 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fc1b 	bl	8003068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e139      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800286e:	e10b      	b.n	8002a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	2b02      	cmp	r3, #2
 8002876:	d14e      	bne.n	8002916 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	2200      	movs	r2, #0
 8002880:	4906      	ldr	r1, [pc, #24]	; (800289c <HAL_I2C_Mem_Read+0x22c>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fa98 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d008      	beq.n	80028a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e10e      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x440>
 8002892:	bf00      	nop
 8002894:	00100002 	.word	0x00100002
 8002898:	ffff0000 	.word	0xffff0000
 800289c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691a      	ldr	r2, [r3, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002914:	e0b8      	b.n	8002a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	2200      	movs	r2, #0
 800291e:	4966      	ldr	r1, [pc, #408]	; (8002ab8 <HAL_I2C_Mem_Read+0x448>)
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fa49 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e0bf      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002978:	2200      	movs	r2, #0
 800297a:	494f      	ldr	r1, [pc, #316]	; (8002ab8 <HAL_I2C_Mem_Read+0x448>)
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fa1b 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e091      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a00:	e042      	b.n	8002a88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fb2e 	bl	8003068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e04c      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d118      	bne.n	8002a88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f47f aec2 	bne.w	8002816 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3728      	adds	r7, #40	; 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	00010004 	.word	0x00010004

08002abc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	817b      	strh	r3, [r7, #10]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	813b      	strh	r3, [r7, #8]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 f960 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00d      	beq.n	8002b1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0c:	d103      	bne.n	8002b16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e05f      	b.n	8002bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b1a:	897b      	ldrh	r3, [r7, #10]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	6a3a      	ldr	r2, [r7, #32]
 8002b2e:	492d      	ldr	r1, [pc, #180]	; (8002be4 <I2C_RequestMemoryWrite+0x128>)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f998 	bl	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e04c      	b.n	8002bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b58:	6a39      	ldr	r1, [r7, #32]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fa02 	bl	8002f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d107      	bne.n	8002b7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e02b      	b.n	8002bda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d105      	bne.n	8002b94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b88:	893b      	ldrh	r3, [r7, #8]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	611a      	str	r2, [r3, #16]
 8002b92:	e021      	b.n	8002bd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b94:	893b      	ldrh	r3, [r7, #8]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	6a39      	ldr	r1, [r7, #32]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f9dc 	bl	8002f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e005      	b.n	8002bda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bce:	893b      	ldrh	r3, [r7, #8]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	00010002 	.word	0x00010002

08002be8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	4608      	mov	r0, r1
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	817b      	strh	r3, [r7, #10]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	813b      	strh	r3, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f8c2 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c48:	d103      	bne.n	8002c52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0aa      	b.n	8002dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c56:	897b      	ldrh	r3, [r7, #10]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	4952      	ldr	r1, [pc, #328]	; (8002db4 <I2C_RequestMemoryRead+0x1cc>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f8fa 	bl	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e097      	b.n	8002dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f964 	bl	8002f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d107      	bne.n	8002cba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e076      	b.n	8002dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d105      	bne.n	8002cd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc4:	893b      	ldrh	r3, [r7, #8]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	611a      	str	r2, [r3, #16]
 8002cce:	e021      	b.n	8002d14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd0:	893b      	ldrh	r3, [r7, #8]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	6a39      	ldr	r1, [r7, #32]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f93e 	bl	8002f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00d      	beq.n	8002d0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d107      	bne.n	8002d06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e050      	b.n	8002dac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d0a:	893b      	ldrh	r3, [r7, #8]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	6a39      	ldr	r1, [r7, #32]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f923 	bl	8002f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00d      	beq.n	8002d40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d107      	bne.n	8002d3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e035      	b.n	8002dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f82b 	bl	8002db8 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d76:	d103      	bne.n	8002d80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e013      	b.n	8002dac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d84:	897b      	ldrh	r3, [r7, #10]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	6a3a      	ldr	r2, [r7, #32]
 8002d98:	4906      	ldr	r1, [pc, #24]	; (8002db4 <I2C_RequestMemoryRead+0x1cc>)
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f863 	bl	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	00010002 	.word	0x00010002

08002db8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dc8:	e025      	b.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d021      	beq.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7fe fecd 	bl	8001b70 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d116      	bne.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f043 0220 	orr.w	r2, r3, #32
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e023      	b.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d10d      	bne.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	e00c      	b.n	8002e56 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d0b6      	beq.n	8002dca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e74:	e051      	b.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e84:	d123      	bne.n	8002ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e94:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e9e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0204 	orr.w	r2, r3, #4
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e046      	b.n	8002f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed4:	d021      	beq.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed6:	f7fe fe4b 	bl	8001b70 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d302      	bcc.n	8002eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d116      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0220 	orr.w	r2, r3, #32
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e020      	b.n	8002f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d10c      	bne.n	8002f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bf14      	ite	ne
 8002f36:	2301      	movne	r3, #1
 8002f38:	2300      	moveq	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	e00b      	b.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	43da      	mvns	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d18d      	bne.n	8002e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f70:	e02d      	b.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f8ce 	bl	8003114 <I2C_IsAcknowledgeFailed>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e02d      	b.n	8002fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d021      	beq.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8a:	f7fe fdf1 	bl	8001b70 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d302      	bcc.n	8002fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d116      	bne.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e007      	b.n	8002fde <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d1ca      	bne.n	8002f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ff2:	e02d      	b.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f88d 	bl	8003114 <I2C_IsAcknowledgeFailed>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e02d      	b.n	8003060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300a:	d021      	beq.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300c:	f7fe fdb0 	bl	8001b70 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e007      	b.n	8003060 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d1ca      	bne.n	8002ff4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003074:	e042      	b.n	80030fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b10      	cmp	r3, #16
 8003082:	d119      	bne.n	80030b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0210 	mvn.w	r2, #16
 800308c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e029      	b.n	800310c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b8:	f7fe fd5a 	bl	8001b70 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d302      	bcc.n	80030ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d116      	bne.n	80030fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e007      	b.n	800310c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b40      	cmp	r3, #64	; 0x40
 8003108:	d1b5      	bne.n	8003076 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312a:	d11b      	bne.n	8003164 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003134:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f043 0204 	orr.w	r2, r3, #4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e267      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d075      	beq.n	800327e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003192:	4b88      	ldr	r3, [pc, #544]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b04      	cmp	r3, #4
 800319c:	d00c      	beq.n	80031b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319e:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d112      	bne.n	80031d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031aa:	4b82      	ldr	r3, [pc, #520]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b6:	d10b      	bne.n	80031d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	4b7e      	ldr	r3, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d05b      	beq.n	800327c <HAL_RCC_OscConfig+0x108>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d157      	bne.n	800327c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e242      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d8:	d106      	bne.n	80031e8 <HAL_RCC_OscConfig+0x74>
 80031da:	4b76      	ldr	r3, [pc, #472]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a75      	ldr	r2, [pc, #468]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e01d      	b.n	8003224 <HAL_RCC_OscConfig+0xb0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0x98>
 80031f2:	4b70      	ldr	r3, [pc, #448]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6f      	ldr	r2, [pc, #444]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80031f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a6c      	ldr	r2, [pc, #432]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e00b      	b.n	8003224 <HAL_RCC_OscConfig+0xb0>
 800320c:	4b69      	ldr	r3, [pc, #420]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a68      	ldr	r2, [pc, #416]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b66      	ldr	r3, [pc, #408]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a65      	ldr	r2, [pc, #404]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 800321e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d013      	beq.n	8003254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322c:	f7fe fca0 	bl	8001b70 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003234:	f7fe fc9c 	bl	8001b70 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b64      	cmp	r3, #100	; 0x64
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e207      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	4b5b      	ldr	r3, [pc, #364]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0xc0>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe fc8c 	bl	8001b70 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe fc88 	bl	8001b70 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	; 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e1f3      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0xe8>
 800327a:	e000      	b.n	800327e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d063      	beq.n	8003352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800328a:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d11c      	bne.n	80032dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a2:	4b44      	ldr	r3, [pc, #272]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ae:	4b41      	ldr	r3, [pc, #260]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_RCC_OscConfig+0x152>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1c7      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032da:	e03a      	b.n	8003352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e4:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_RCC_OscConfig+0x244>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe fc41 	bl	8001b70 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fe fc3d 	bl	8001b70 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e1a8      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4925      	ldr	r1, [pc, #148]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
 8003324:	e015      	b.n	8003352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <HAL_RCC_OscConfig+0x244>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332c:	f7fe fc20 	bl	8001b70 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003334:	f7fe fc1c 	bl	8001b70 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e187      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d036      	beq.n	80033cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d016      	beq.n	8003394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003366:	4b15      	ldr	r3, [pc, #84]	; (80033bc <HAL_RCC_OscConfig+0x248>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe fc00 	bl	8001b70 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003374:	f7fe fbfc 	bl	8001b70 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e167      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_OscConfig+0x240>)
 8003388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x200>
 8003392:	e01b      	b.n	80033cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003394:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_OscConfig+0x248>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7fe fbe9 	bl	8001b70 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	e00e      	b.n	80033c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a2:	f7fe fbe5 	bl	8001b70 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d907      	bls.n	80033c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e150      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
 80033b4:	40023800 	.word	0x40023800
 80033b8:	42470000 	.word	0x42470000
 80033bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	4b88      	ldr	r3, [pc, #544]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ea      	bne.n	80033a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8097 	beq.w	8003508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b81      	ldr	r3, [pc, #516]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b7d      	ldr	r3, [pc, #500]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a7c      	ldr	r2, [pc, #496]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b7a      	ldr	r3, [pc, #488]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b77      	ldr	r3, [pc, #476]	; (80035e8 <HAL_RCC_OscConfig+0x474>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d118      	bne.n	8003448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b74      	ldr	r3, [pc, #464]	; (80035e8 <HAL_RCC_OscConfig+0x474>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a73      	ldr	r2, [pc, #460]	; (80035e8 <HAL_RCC_OscConfig+0x474>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fe fba5 	bl	8001b70 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342a:	f7fe fba1 	bl	8001b70 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e10c      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	4b6a      	ldr	r3, [pc, #424]	; (80035e8 <HAL_RCC_OscConfig+0x474>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f0      	beq.n	800342a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d106      	bne.n	800345e <HAL_RCC_OscConfig+0x2ea>
 8003450:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a63      	ldr	r2, [pc, #396]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
 800345c:	e01c      	b.n	8003498 <HAL_RCC_OscConfig+0x324>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b05      	cmp	r3, #5
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x30c>
 8003466:	4b5f      	ldr	r3, [pc, #380]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	4a5e      	ldr	r2, [pc, #376]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	6713      	str	r3, [r2, #112]	; 0x70
 8003472:	4b5c      	ldr	r3, [pc, #368]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a5b      	ldr	r2, [pc, #364]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0x324>
 8003480:	4b58      	ldr	r3, [pc, #352]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a57      	ldr	r2, [pc, #348]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003486:	f023 0301 	bic.w	r3, r3, #1
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	4b55      	ldr	r3, [pc, #340]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a54      	ldr	r2, [pc, #336]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003492:	f023 0304 	bic.w	r3, r3, #4
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d015      	beq.n	80034cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe fb66 	bl	8001b70 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a8:	f7fe fb62 	bl	8001b70 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0cb      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	4b49      	ldr	r3, [pc, #292]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0ee      	beq.n	80034a8 <HAL_RCC_OscConfig+0x334>
 80034ca:	e014      	b.n	80034f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7fe fb50 	bl	8001b70 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d4:	f7fe fb4c 	bl	8001b70 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e0b5      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	4b3e      	ldr	r3, [pc, #248]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ee      	bne.n	80034d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4b39      	ldr	r3, [pc, #228]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003506:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a1 	beq.w	8003654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003512:	4b34      	ldr	r3, [pc, #208]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b08      	cmp	r3, #8
 800351c:	d05c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2b02      	cmp	r3, #2
 8003524:	d141      	bne.n	80035aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b31      	ldr	r3, [pc, #196]	; (80035ec <HAL_RCC_OscConfig+0x478>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe fb20 	bl	8001b70 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fb1c 	bl	8001b70 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e087      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	431a      	orrs	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	085b      	lsrs	r3, r3, #1
 800356a:	3b01      	subs	r3, #1
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	061b      	lsls	r3, r3, #24
 8003576:	491b      	ldr	r1, [pc, #108]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x478>)
 800357e:	2201      	movs	r2, #1
 8003580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fe faf5 	bl	8001b70 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358a:	f7fe faf1 	bl	8001b70 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e05c      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x416>
 80035a8:	e054      	b.n	8003654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_RCC_OscConfig+0x478>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fade 	bl	8001b70 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fe fada 	bl	8001b70 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e045      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ca:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <HAL_RCC_OscConfig+0x470>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x444>
 80035d6:	e03d      	b.n	8003654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e038      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
 80035e4:	40023800 	.word	0x40023800
 80035e8:	40007000 	.word	0x40007000
 80035ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <HAL_RCC_OscConfig+0x4ec>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d028      	beq.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d121      	bne.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d11a      	bne.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003628:	4293      	cmp	r3, r2
 800362a:	d111      	bne.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	085b      	lsrs	r3, r3, #1
 8003638:	3b01      	subs	r3, #1
 800363a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d107      	bne.n	8003650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800

08003664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0cc      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003678:	4b68      	ldr	r3, [pc, #416]	; (800381c <HAL_RCC_ClockConfig+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d90c      	bls.n	80036a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b65      	ldr	r3, [pc, #404]	; (800381c <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b63      	ldr	r3, [pc, #396]	; (800381c <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0b8      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d020      	beq.n	80036ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d005      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b8:	4b59      	ldr	r3, [pc, #356]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a58      	ldr	r2, [pc, #352]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d0:	4b53      	ldr	r3, [pc, #332]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a52      	ldr	r2, [pc, #328]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036dc:	4b50      	ldr	r3, [pc, #320]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	494d      	ldr	r1, [pc, #308]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d044      	beq.n	8003784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d107      	bne.n	8003712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	4b47      	ldr	r3, [pc, #284]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d119      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e07f      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d003      	beq.n	8003722 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800371e:	2b03      	cmp	r3, #3
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003722:	4b3f      	ldr	r3, [pc, #252]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e06f      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e067      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003742:	4b37      	ldr	r3, [pc, #220]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f023 0203 	bic.w	r2, r3, #3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4934      	ldr	r1, [pc, #208]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003754:	f7fe fa0c 	bl	8001b70 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375a:	e00a      	b.n	8003772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375c:	f7fe fa08 	bl	8001b70 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f241 3288 	movw	r2, #5000	; 0x1388
 800376a:	4293      	cmp	r3, r2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e04f      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 020c 	and.w	r2, r3, #12
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	429a      	cmp	r2, r3
 8003782:	d1eb      	bne.n	800375c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003784:	4b25      	ldr	r3, [pc, #148]	; (800381c <HAL_RCC_ClockConfig+0x1b8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d20c      	bcs.n	80037ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b22      	ldr	r3, [pc, #136]	; (800381c <HAL_RCC_ClockConfig+0x1b8>)
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <HAL_RCC_ClockConfig+0x1b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e032      	b.n	8003812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4916      	ldr	r1, [pc, #88]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d6:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	490e      	ldr	r1, [pc, #56]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ea:	f000 f821 	bl	8003830 <HAL_RCC_GetSysClockFreq>
 80037ee:	4602      	mov	r2, r0
 80037f0:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	490a      	ldr	r1, [pc, #40]	; (8003824 <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	5ccb      	ldrb	r3, [r1, r3]
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	4a09      	ldr	r2, [pc, #36]	; (8003828 <HAL_RCC_ClockConfig+0x1c4>)
 8003804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_RCC_ClockConfig+0x1c8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe f96c 	bl	8001ae8 <HAL_InitTick>

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40023c00 	.word	0x40023c00
 8003820:	40023800 	.word	0x40023800
 8003824:	08009ec0 	.word	0x08009ec0
 8003828:	20000000 	.word	0x20000000
 800382c:	20000004 	.word	0x20000004

08003830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003834:	b090      	sub	sp, #64	; 0x40
 8003836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
 800383c:	2300      	movs	r3, #0
 800383e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003840:	2300      	movs	r3, #0
 8003842:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003848:	4b59      	ldr	r3, [pc, #356]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 030c 	and.w	r3, r3, #12
 8003850:	2b08      	cmp	r3, #8
 8003852:	d00d      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0x40>
 8003854:	2b08      	cmp	r3, #8
 8003856:	f200 80a1 	bhi.w	800399c <HAL_RCC_GetSysClockFreq+0x16c>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x34>
 800385e:	2b04      	cmp	r3, #4
 8003860:	d003      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0x3a>
 8003862:	e09b      	b.n	800399c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003866:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003868:	e09b      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800386a:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800386c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800386e:	e098      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003870:	4b4f      	ldr	r3, [pc, #316]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800387a:	4b4d      	ldr	r3, [pc, #308]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d028      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003886:	4b4a      	ldr	r3, [pc, #296]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	099b      	lsrs	r3, r3, #6
 800388c:	2200      	movs	r2, #0
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	627a      	str	r2, [r7, #36]	; 0x24
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003898:	2100      	movs	r1, #0
 800389a:	4b47      	ldr	r3, [pc, #284]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800389c:	fb03 f201 	mul.w	r2, r3, r1
 80038a0:	2300      	movs	r3, #0
 80038a2:	fb00 f303 	mul.w	r3, r0, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	4a43      	ldr	r2, [pc, #268]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038aa:	fba0 1202 	umull	r1, r2, r0, r2
 80038ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038b0:	460a      	mov	r2, r1
 80038b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80038b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b6:	4413      	add	r3, r2
 80038b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038bc:	2200      	movs	r2, #0
 80038be:	61bb      	str	r3, [r7, #24]
 80038c0:	61fa      	str	r2, [r7, #28]
 80038c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038ca:	f7fd f961 	bl	8000b90 <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4613      	mov	r3, r2
 80038d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d6:	e053      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038d8:	4b35      	ldr	r3, [pc, #212]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	2200      	movs	r2, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	617a      	str	r2, [r7, #20]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038ea:	f04f 0b00 	mov.w	fp, #0
 80038ee:	4652      	mov	r2, sl
 80038f0:	465b      	mov	r3, fp
 80038f2:	f04f 0000 	mov.w	r0, #0
 80038f6:	f04f 0100 	mov.w	r1, #0
 80038fa:	0159      	lsls	r1, r3, #5
 80038fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003900:	0150      	lsls	r0, r2, #5
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	ebb2 080a 	subs.w	r8, r2, sl
 800390a:	eb63 090b 	sbc.w	r9, r3, fp
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800391a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800391e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003922:	ebb2 0408 	subs.w	r4, r2, r8
 8003926:	eb63 0509 	sbc.w	r5, r3, r9
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	00eb      	lsls	r3, r5, #3
 8003934:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003938:	00e2      	lsls	r2, r4, #3
 800393a:	4614      	mov	r4, r2
 800393c:	461d      	mov	r5, r3
 800393e:	eb14 030a 	adds.w	r3, r4, sl
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	eb45 030b 	adc.w	r3, r5, fp
 8003948:	607b      	str	r3, [r7, #4]
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003956:	4629      	mov	r1, r5
 8003958:	028b      	lsls	r3, r1, #10
 800395a:	4621      	mov	r1, r4
 800395c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003960:	4621      	mov	r1, r4
 8003962:	028a      	lsls	r2, r1, #10
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396a:	2200      	movs	r2, #0
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	60fa      	str	r2, [r7, #12]
 8003970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003974:	f7fd f90c 	bl	8000b90 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4613      	mov	r3, r2
 800397e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	0c1b      	lsrs	r3, r3, #16
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	3301      	adds	r3, #1
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	fbb2 f3f3 	udiv	r3, r2, r3
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800399a:	e002      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800399e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3740      	adds	r7, #64	; 0x40
 80039a8:	46bd      	mov	sp, r7
 80039aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800
 80039b4:	00f42400 	.word	0x00f42400
 80039b8:	00b71b00 	.word	0x00b71b00

080039bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000000 	.word	0x20000000

080039d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039d8:	f7ff fff0 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0a9b      	lsrs	r3, r3, #10
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	; (80039f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08009ed0 	.word	0x08009ed0

080039fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e07b      	b.n	8003b06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d108      	bne.n	8003a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1e:	d009      	beq.n	8003a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	61da      	str	r2, [r3, #28]
 8003a26:	e005      	b.n	8003a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fd fe10 	bl	8001674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab8:	ea42 0103 	orr.w	r1, r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	f003 0104 	and.w	r1, r3, #4
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0210 	and.w	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b088      	sub	sp, #32
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_SPI_Transmit+0x22>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e126      	b.n	8003d7e <HAL_SPI_Transmit+0x270>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b38:	f7fe f81a 	bl	8001b70 <HAL_GetTick>
 8003b3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d002      	beq.n	8003b54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b52:	e10b      	b.n	8003d6c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_SPI_Transmit+0x52>
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b64:	e102      	b.n	8003d6c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2203      	movs	r2, #3
 8003b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bac:	d10f      	bne.n	8003bce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d007      	beq.n	8003bec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf4:	d14b      	bne.n	8003c8e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_SPI_Transmit+0xf6>
 8003bfe:	8afb      	ldrh	r3, [r7, #22]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d13e      	bne.n	8003c82 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	881a      	ldrh	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	1c9a      	adds	r2, r3, #2
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c28:	e02b      	b.n	8003c82 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d112      	bne.n	8003c5e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	881a      	ldrh	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	1c9a      	adds	r2, r3, #2
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c5c:	e011      	b.n	8003c82 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c5e:	f7fd ff87 	bl	8001b70 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d803      	bhi.n	8003c76 <HAL_SPI_Transmit+0x168>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d102      	bne.n	8003c7c <HAL_SPI_Transmit+0x16e>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c80:	e074      	b.n	8003d6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1ce      	bne.n	8003c2a <HAL_SPI_Transmit+0x11c>
 8003c8c:	e04c      	b.n	8003d28 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <HAL_SPI_Transmit+0x18e>
 8003c96:	8afb      	ldrh	r3, [r7, #22]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d140      	bne.n	8003d1e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	7812      	ldrb	r2, [r2, #0]
 8003ca8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cc2:	e02c      	b.n	8003d1e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d113      	bne.n	8003cfa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cf8:	e011      	b.n	8003d1e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cfa:	f7fd ff39 	bl	8001b70 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d803      	bhi.n	8003d12 <HAL_SPI_Transmit+0x204>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d10:	d102      	bne.n	8003d18 <HAL_SPI_Transmit+0x20a>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d1c:	e026      	b.n	8003d6c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1cd      	bne.n	8003cc4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fbcb 	bl	80044c8 <SPI_EndRxTxTransaction>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e000      	b.n	8003d6c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003d6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b088      	sub	sp, #32
 8003d8a:	af02      	add	r7, sp, #8
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da2:	d112      	bne.n	8003dca <HAL_SPI_Receive+0x44>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10e      	bne.n	8003dca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2204      	movs	r2, #4
 8003db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003db4:	88fa      	ldrh	r2, [r7, #6]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f8f1 	bl	8003fa8 <HAL_SPI_TransmitReceive>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	e0ea      	b.n	8003fa0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_SPI_Receive+0x52>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e0e3      	b.n	8003fa0 <HAL_SPI_Receive+0x21a>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003de0:	f7fd fec6 	bl	8001b70 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d002      	beq.n	8003df8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
 8003df4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003df6:	e0ca      	b.n	8003f8e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_SPI_Receive+0x7e>
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e08:	e0c1      	b.n	8003f8e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	88fa      	ldrh	r2, [r7, #6]
 8003e22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e50:	d10f      	bne.n	8003e72 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d007      	beq.n	8003e90 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d162      	bne.n	8003f5e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e98:	e02e      	b.n	8003ef8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d115      	bne.n	8003ed4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f103 020c 	add.w	r2, r3, #12
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	7812      	ldrb	r2, [r2, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ed2:	e011      	b.n	8003ef8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ed4:	f7fd fe4c 	bl	8001b70 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d803      	bhi.n	8003eec <HAL_SPI_Receive+0x166>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d102      	bne.n	8003ef2 <HAL_SPI_Receive+0x16c>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003ef6:	e04a      	b.n	8003f8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1cb      	bne.n	8003e9a <HAL_SPI_Receive+0x114>
 8003f02:	e031      	b.n	8003f68 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d113      	bne.n	8003f3a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f38:	e011      	b.n	8003f5e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f3a:	f7fd fe19 	bl	8001b70 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d803      	bhi.n	8003f52 <HAL_SPI_Receive+0x1cc>
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d102      	bne.n	8003f58 <HAL_SPI_Receive+0x1d2>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f5c:	e017      	b.n	8003f8e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1cd      	bne.n	8003f04 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	6839      	ldr	r1, [r7, #0]
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 fa45 	bl	80043fc <SPI_EndRxTransaction>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
 8003f8a:	e000      	b.n	8003f8e <HAL_SPI_Receive+0x208>
  }

error :
 8003f8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08c      	sub	sp, #48	; 0x30
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x26>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e18a      	b.n	80042e4 <HAL_SPI_TransmitReceive+0x33c>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fd6:	f7fd fdcb 	bl	8001b70 <HAL_GetTick>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d00f      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x70>
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffe:	d107      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d103      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x68>
 8004008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800400c:	2b04      	cmp	r3, #4
 800400e:	d003      	beq.n	8004018 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004010:	2302      	movs	r3, #2
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004016:	e15b      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_SPI_TransmitReceive+0x82>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_SPI_TransmitReceive+0x82>
 8004024:	887b      	ldrh	r3, [r7, #2]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004030:	e14e      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b04      	cmp	r3, #4
 800403c:	d003      	beq.n	8004046 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2205      	movs	r2, #5
 8004042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	887a      	ldrh	r2, [r7, #2]
 8004056:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	887a      	ldrh	r2, [r7, #2]
 800405c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	887a      	ldrh	r2, [r7, #2]
 800406e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004086:	2b40      	cmp	r3, #64	; 0x40
 8004088:	d007      	beq.n	800409a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004098:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040a2:	d178      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_TransmitReceive+0x10a>
 80040ac:	8b7b      	ldrh	r3, [r7, #26]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d166      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	881a      	ldrh	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	1c9a      	adds	r2, r3, #2
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d6:	e053      	b.n	8004180 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d11b      	bne.n	800411e <HAL_SPI_TransmitReceive+0x176>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d016      	beq.n	800411e <HAL_SPI_TransmitReceive+0x176>
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d113      	bne.n	800411e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	881a      	ldrh	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	1c9a      	adds	r2, r3, #2
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d119      	bne.n	8004160 <HAL_SPI_TransmitReceive+0x1b8>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d014      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	b292      	uxth	r2, r2
 8004142:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800415c:	2301      	movs	r3, #1
 800415e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004160:	f7fd fd06 	bl	8001b70 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800416c:	429a      	cmp	r2, r3
 800416e:	d807      	bhi.n	8004180 <HAL_SPI_TransmitReceive+0x1d8>
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004176:	d003      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800417e:	e0a7      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1a6      	bne.n	80040d8 <HAL_SPI_TransmitReceive+0x130>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1a1      	bne.n	80040d8 <HAL_SPI_TransmitReceive+0x130>
 8004194:	e07c      	b.n	8004290 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x1fc>
 800419e:	8b7b      	ldrh	r3, [r7, #26]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d16b      	bne.n	800427c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	330c      	adds	r3, #12
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ca:	e057      	b.n	800427c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d11c      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x26c>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d017      	beq.n	8004214 <HAL_SPI_TransmitReceive+0x26c>
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d114      	bne.n	8004214 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	7812      	ldrb	r2, [r2, #0]
 80041f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b01      	cmp	r3, #1
 8004220:	d119      	bne.n	8004256 <HAL_SPI_TransmitReceive+0x2ae>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d014      	beq.n	8004256 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004252:	2301      	movs	r3, #1
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004256:	f7fd fc8b 	bl	8001b70 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004262:	429a      	cmp	r2, r3
 8004264:	d803      	bhi.n	800426e <HAL_SPI_TransmitReceive+0x2c6>
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426c:	d102      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x2cc>
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800427a:	e029      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1a2      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x224>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d19d      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f917 	bl	80044c8 <SPI_EndRxTxTransaction>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d006      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042ac:	e010      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	e000      	b.n	80042d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3730      	adds	r7, #48	; 0x30
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042fc:	f7fd fc38 	bl	8001b70 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	4413      	add	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800430c:	f7fd fc30 	bl	8001b70 <HAL_GetTick>
 8004310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004312:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	015b      	lsls	r3, r3, #5
 8004318:	0d1b      	lsrs	r3, r3, #20
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004322:	e054      	b.n	80043ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d050      	beq.n	80043ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800432c:	f7fd fc20 	bl	8001b70 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	d902      	bls.n	8004342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d13d      	bne.n	80043be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435a:	d111      	bne.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004364:	d004      	beq.n	8004370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d107      	bne.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004388:	d10f      	bne.n	80043aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e017      	b.n	80043ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4013      	ands	r3, r2
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d19b      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000000 	.word	0x20000000

080043fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004410:	d111      	bne.n	8004436 <SPI_EndRxTransaction+0x3a>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441a:	d004      	beq.n	8004426 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004424:	d107      	bne.n	8004436 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004434:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800443e:	d12a      	bne.n	8004496 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004448:	d012      	beq.n	8004470 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	2180      	movs	r1, #128	; 0x80
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff ff49 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d02d      	beq.n	80044bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	f043 0220 	orr.w	r2, r3, #32
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e026      	b.n	80044be <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2200      	movs	r2, #0
 8004478:	2101      	movs	r1, #1
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f7ff ff36 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01a      	beq.n	80044bc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e013      	b.n	80044be <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2200      	movs	r2, #0
 800449e:	2101      	movs	r1, #1
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f7ff ff23 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d007      	beq.n	80044bc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f043 0220 	orr.w	r2, r3, #32
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e000      	b.n	80044be <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <SPI_EndRxTxTransaction+0x7c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <SPI_EndRxTxTransaction+0x80>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	0d5b      	lsrs	r3, r3, #21
 80044e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f2:	d112      	bne.n	800451a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2200      	movs	r2, #0
 80044fc:	2180      	movs	r1, #128	; 0x80
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f7ff fef4 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d016      	beq.n	8004538 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f043 0220 	orr.w	r2, r3, #32
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e00f      	b.n	800453a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	3b01      	subs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b80      	cmp	r3, #128	; 0x80
 8004532:	d0f2      	beq.n	800451a <SPI_EndRxTxTransaction+0x52>
 8004534:	e000      	b.n	8004538 <SPI_EndRxTxTransaction+0x70>
        break;
 8004536:	bf00      	nop
  }

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000000 	.word	0x20000000
 8004548:	165e9f81 	.word	0x165e9f81

0800454c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e041      	b.n	80045e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd f9f6 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	4619      	mov	r1, r3
 800458a:	4610      	mov	r0, r2
 800458c:	f000 fc7a 	bl	8004e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d001      	beq.n	8004604 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e04e      	b.n	80046a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0201 	orr.w	r2, r2, #1
 800461a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a23      	ldr	r2, [pc, #140]	; (80046b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d022      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x80>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800462e:	d01d      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x80>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d018      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x80>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1e      	ldr	r2, [pc, #120]	; (80046b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d013      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x80>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_TIM_Base_Start_IT+0xd0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x80>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1b      	ldr	r2, [pc, #108]	; (80046c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x80>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a19      	ldr	r2, [pc, #100]	; (80046c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x80>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d111      	bne.n	8004690 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d010      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e007      	b.n	80046a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40010400 	.word	0x40010400
 80046c4:	40014000 	.word	0x40014000
 80046c8:	40001800 	.word	0x40001800

080046cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e041      	b.n	8004762 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f839 	bl	800476a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f000 fbba 	bl	8004e84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d109      	bne.n	80047a4 <HAL_TIM_PWM_Start+0x24>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e022      	b.n	80047ea <HAL_TIM_PWM_Start+0x6a>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d109      	bne.n	80047be <HAL_TIM_PWM_Start+0x3e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	bf14      	ite	ne
 80047b6:	2301      	movne	r3, #1
 80047b8:	2300      	moveq	r3, #0
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e015      	b.n	80047ea <HAL_TIM_PWM_Start+0x6a>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d109      	bne.n	80047d8 <HAL_TIM_PWM_Start+0x58>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e008      	b.n	80047ea <HAL_TIM_PWM_Start+0x6a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e07c      	b.n	80048ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start+0x82>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004800:	e013      	b.n	800482a <HAL_TIM_PWM_Start+0xaa>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0x92>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004810:	e00b      	b.n	800482a <HAL_TIM_PWM_Start+0xaa>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start+0xa2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004820:	e003      	b.n	800482a <HAL_TIM_PWM_Start+0xaa>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2201      	movs	r2, #1
 8004830:	6839      	ldr	r1, [r7, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fe10 	bl	8005458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2d      	ldr	r2, [pc, #180]	; (80048f4 <HAL_TIM_PWM_Start+0x174>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_TIM_PWM_Start+0xcc>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2c      	ldr	r2, [pc, #176]	; (80048f8 <HAL_TIM_PWM_Start+0x178>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_TIM_PWM_Start+0xd0>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <HAL_TIM_PWM_Start+0xd2>
 8004850:	2300      	movs	r3, #0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004864:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <HAL_TIM_PWM_Start+0x174>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d022      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x136>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d01d      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x136>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1f      	ldr	r2, [pc, #124]	; (80048fc <HAL_TIM_PWM_Start+0x17c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d018      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x136>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1d      	ldr	r2, [pc, #116]	; (8004900 <HAL_TIM_PWM_Start+0x180>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x136>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <HAL_TIM_PWM_Start+0x184>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x136>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <HAL_TIM_PWM_Start+0x178>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x136>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a18      	ldr	r2, [pc, #96]	; (8004908 <HAL_TIM_PWM_Start+0x188>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x136>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a16      	ldr	r2, [pc, #88]	; (800490c <HAL_TIM_PWM_Start+0x18c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d111      	bne.n	80048da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d010      	beq.n	80048ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d8:	e007      	b.n	80048ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40010400 	.word	0x40010400
 80048fc:	40000400 	.word	0x40000400
 8004900:	40000800 	.word	0x40000800
 8004904:	40000c00 	.word	0x40000c00
 8004908:	40014000 	.word	0x40014000
 800490c:	40001800 	.word	0x40001800

08004910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d122      	bne.n	800496c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b02      	cmp	r3, #2
 8004932:	d11b      	bne.n	800496c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f06f 0202 	mvn.w	r2, #2
 800493c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa77 	bl	8004e46 <HAL_TIM_IC_CaptureCallback>
 8004958:	e005      	b.n	8004966 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa69 	bl	8004e32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fa7a 	bl	8004e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d122      	bne.n	80049c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b04      	cmp	r3, #4
 8004986:	d11b      	bne.n	80049c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0204 	mvn.w	r2, #4
 8004990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fa4d 	bl	8004e46 <HAL_TIM_IC_CaptureCallback>
 80049ac:	e005      	b.n	80049ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa3f 	bl	8004e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fa50 	bl	8004e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d122      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d11b      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0208 	mvn.w	r2, #8
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2204      	movs	r2, #4
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa23 	bl	8004e46 <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fa15 	bl	8004e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 fa26 	bl	8004e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0310 	and.w	r3, r3, #16
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d122      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0210 	mvn.w	r2, #16
 8004a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9f9 	bl	8004e46 <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9eb 	bl	8004e32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f9fc 	bl	8004e5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0201 	mvn.w	r2, #1
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fc fb8a 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	d10e      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d107      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fd78 	bl	80055b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d10e      	bne.n	8004aec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	2b40      	cmp	r3, #64	; 0x40
 8004ada:	d107      	bne.n	8004aec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9c1 	bl	8004e6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d10e      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d107      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0220 	mvn.w	r2, #32
 8004b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fd42 	bl	800559c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b18:	bf00      	nop
 8004b1a:	3708      	adds	r7, #8
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e0ae      	b.n	8004c9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b0c      	cmp	r3, #12
 8004b4a:	f200 809f 	bhi.w	8004c8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b89 	.word	0x08004b89
 8004b58:	08004c8d 	.word	0x08004c8d
 8004b5c:	08004c8d 	.word	0x08004c8d
 8004b60:	08004c8d 	.word	0x08004c8d
 8004b64:	08004bc9 	.word	0x08004bc9
 8004b68:	08004c8d 	.word	0x08004c8d
 8004b6c:	08004c8d 	.word	0x08004c8d
 8004b70:	08004c8d 	.word	0x08004c8d
 8004b74:	08004c0b 	.word	0x08004c0b
 8004b78:	08004c8d 	.word	0x08004c8d
 8004b7c:	08004c8d 	.word	0x08004c8d
 8004b80:	08004c8d 	.word	0x08004c8d
 8004b84:	08004c4b 	.word	0x08004c4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa18 	bl	8004fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0208 	orr.w	r2, r2, #8
 8004ba2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0204 	bic.w	r2, r2, #4
 8004bb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	619a      	str	r2, [r3, #24]
      break;
 8004bc6:	e064      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fa68 	bl	80050a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6999      	ldr	r1, [r3, #24]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	021a      	lsls	r2, r3, #8
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	619a      	str	r2, [r3, #24]
      break;
 8004c08:	e043      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fabd 	bl	8005190 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0208 	orr.w	r2, r2, #8
 8004c24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69da      	ldr	r2, [r3, #28]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0204 	bic.w	r2, r2, #4
 8004c34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69d9      	ldr	r1, [r3, #28]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	61da      	str	r2, [r3, #28]
      break;
 8004c48:	e023      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fb11 	bl	8005278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69d9      	ldr	r1, [r3, #28]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	021a      	lsls	r2, r3, #8
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	61da      	str	r2, [r3, #28]
      break;
 8004c8a:	e002      	b.n	8004c92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e0b4      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x186>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf8:	d03e      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0xd4>
 8004cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfe:	f200 8087 	bhi.w	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d06:	f000 8086 	beq.w	8004e16 <HAL_TIM_ConfigClockSource+0x172>
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	d87f      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b70      	cmp	r3, #112	; 0x70
 8004d12:	d01a      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0xa6>
 8004d14:	2b70      	cmp	r3, #112	; 0x70
 8004d16:	d87b      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b60      	cmp	r3, #96	; 0x60
 8004d1a:	d050      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x11a>
 8004d1c:	2b60      	cmp	r3, #96	; 0x60
 8004d1e:	d877      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b50      	cmp	r3, #80	; 0x50
 8004d22:	d03c      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0xfa>
 8004d24:	2b50      	cmp	r3, #80	; 0x50
 8004d26:	d873      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d058      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x13a>
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d86f      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b30      	cmp	r3, #48	; 0x30
 8004d32:	d064      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d34:	2b30      	cmp	r3, #48	; 0x30
 8004d36:	d86b      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d060      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d867      	bhi.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d05c      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d05a      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x15a>
 8004d48:	e062      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6899      	ldr	r1, [r3, #8]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f000 fb5d 	bl	8005418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	609a      	str	r2, [r3, #8]
      break;
 8004d76:	e04f      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	6899      	ldr	r1, [r3, #8]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f000 fb46 	bl	8005418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d9a:	609a      	str	r2, [r3, #8]
      break;
 8004d9c:	e03c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	6859      	ldr	r1, [r3, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	461a      	mov	r2, r3
 8004dac:	f000 faba 	bl	8005324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2150      	movs	r1, #80	; 0x50
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fb13 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8004dbc:	e02c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	f000 fad9 	bl	8005382 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2160      	movs	r1, #96	; 0x60
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fb03 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e01c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f000 fa9a 	bl	8005324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2140      	movs	r1, #64	; 0x40
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 faf3 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8004dfc:	e00c      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f000 faea 	bl	80053e2 <TIM_ITRx_SetConfig>
      break;
 8004e0e:	e003      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
      break;
 8004e14:	e000      	b.n	8004e18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a40      	ldr	r2, [pc, #256]	; (8004f98 <TIM_Base_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d013      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea2:	d00f      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a3d      	ldr	r2, [pc, #244]	; (8004f9c <TIM_Base_SetConfig+0x118>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00b      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a3c      	ldr	r2, [pc, #240]	; (8004fa0 <TIM_Base_SetConfig+0x11c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d007      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a3b      	ldr	r2, [pc, #236]	; (8004fa4 <TIM_Base_SetConfig+0x120>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d003      	beq.n	8004ec4 <TIM_Base_SetConfig+0x40>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a3a      	ldr	r2, [pc, #232]	; (8004fa8 <TIM_Base_SetConfig+0x124>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d108      	bne.n	8004ed6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2f      	ldr	r2, [pc, #188]	; (8004f98 <TIM_Base_SetConfig+0x114>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02b      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee4:	d027      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <TIM_Base_SetConfig+0x118>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d023      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a2b      	ldr	r2, [pc, #172]	; (8004fa0 <TIM_Base_SetConfig+0x11c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01f      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2a      	ldr	r2, [pc, #168]	; (8004fa4 <TIM_Base_SetConfig+0x120>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01b      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a29      	ldr	r2, [pc, #164]	; (8004fa8 <TIM_Base_SetConfig+0x124>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d017      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a28      	ldr	r2, [pc, #160]	; (8004fac <TIM_Base_SetConfig+0x128>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a27      	ldr	r2, [pc, #156]	; (8004fb0 <TIM_Base_SetConfig+0x12c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d00f      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a26      	ldr	r2, [pc, #152]	; (8004fb4 <TIM_Base_SetConfig+0x130>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00b      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a25      	ldr	r2, [pc, #148]	; (8004fb8 <TIM_Base_SetConfig+0x134>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d007      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a24      	ldr	r2, [pc, #144]	; (8004fbc <TIM_Base_SetConfig+0x138>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <TIM_Base_SetConfig+0x13c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d108      	bne.n	8004f48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <TIM_Base_SetConfig+0x114>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0xf8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <TIM_Base_SetConfig+0x124>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d103      	bne.n	8004f84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	615a      	str	r2, [r3, #20]
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40000400 	.word	0x40000400
 8004fa0:	40000800 	.word	0x40000800
 8004fa4:	40000c00 	.word	0x40000c00
 8004fa8:	40010400 	.word	0x40010400
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800
 8004fb8:	40001800 	.word	0x40001800
 8004fbc:	40001c00 	.word	0x40001c00
 8004fc0:	40002000 	.word	0x40002000

08004fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0303 	bic.w	r3, r3, #3
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0302 	bic.w	r3, r3, #2
 800500c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a20      	ldr	r2, [pc, #128]	; (800509c <TIM_OC1_SetConfig+0xd8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d003      	beq.n	8005028 <TIM_OC1_SetConfig+0x64>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <TIM_OC1_SetConfig+0xdc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d10c      	bne.n	8005042 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0308 	bic.w	r3, r3, #8
 800502e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f023 0304 	bic.w	r3, r3, #4
 8005040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a15      	ldr	r2, [pc, #84]	; (800509c <TIM_OC1_SetConfig+0xd8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_OC1_SetConfig+0x8e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a14      	ldr	r2, [pc, #80]	; (80050a0 <TIM_OC1_SetConfig+0xdc>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d111      	bne.n	8005076 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	621a      	str	r2, [r3, #32]
}
 8005090:	bf00      	nop
 8005092:	371c      	adds	r7, #28
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40010000 	.word	0x40010000
 80050a0:	40010400 	.word	0x40010400

080050a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0210 	bic.w	r2, r3, #16
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f023 0320 	bic.w	r3, r3, #32
 80050ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a22      	ldr	r2, [pc, #136]	; (8005188 <TIM_OC2_SetConfig+0xe4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_OC2_SetConfig+0x68>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a21      	ldr	r2, [pc, #132]	; (800518c <TIM_OC2_SetConfig+0xe8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10d      	bne.n	8005128 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005126:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a17      	ldr	r2, [pc, #92]	; (8005188 <TIM_OC2_SetConfig+0xe4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC2_SetConfig+0x94>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a16      	ldr	r2, [pc, #88]	; (800518c <TIM_OC2_SetConfig+0xe8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d113      	bne.n	8005160 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800513e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40010000 	.word	0x40010000
 800518c:	40010400 	.word	0x40010400

08005190 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a21      	ldr	r2, [pc, #132]	; (8005270 <TIM_OC3_SetConfig+0xe0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC3_SetConfig+0x66>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a20      	ldr	r2, [pc, #128]	; (8005274 <TIM_OC3_SetConfig+0xe4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10d      	bne.n	8005212 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	021b      	lsls	r3, r3, #8
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <TIM_OC3_SetConfig+0xe0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d003      	beq.n	8005222 <TIM_OC3_SetConfig+0x92>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a15      	ldr	r2, [pc, #84]	; (8005274 <TIM_OC3_SetConfig+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d113      	bne.n	800524a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	621a      	str	r2, [r3, #32]
}
 8005264:	bf00      	nop
 8005266:	371c      	adds	r7, #28
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40010000 	.word	0x40010000
 8005274:	40010400 	.word	0x40010400

08005278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005278:	b480      	push	{r7}
 800527a:	b087      	sub	sp, #28
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	031b      	lsls	r3, r3, #12
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a12      	ldr	r2, [pc, #72]	; (800531c <TIM_OC4_SetConfig+0xa4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d003      	beq.n	80052e0 <TIM_OC4_SetConfig+0x68>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a11      	ldr	r2, [pc, #68]	; (8005320 <TIM_OC4_SetConfig+0xa8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d109      	bne.n	80052f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	019b      	lsls	r3, r3, #6
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40010400 	.word	0x40010400

08005324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f023 0201 	bic.w	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800534e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4313      	orrs	r3, r2
 8005358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 030a 	bic.w	r3, r3, #10
 8005360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005382:	b480      	push	{r7}
 8005384:	b087      	sub	sp, #28
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	f023 0210 	bic.w	r2, r3, #16
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	031b      	lsls	r3, r3, #12
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	621a      	str	r2, [r3, #32]
}
 80053d6:	bf00      	nop
 80053d8:	371c      	adds	r7, #28
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	f043 0307 	orr.w	r3, r3, #7
 8005404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	609a      	str	r2, [r3, #8]
}
 800540c:	bf00      	nop
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	021a      	lsls	r2, r3, #8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	431a      	orrs	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4313      	orrs	r3, r2
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	609a      	str	r2, [r3, #8]
}
 800544c:	bf00      	nop
 800544e:	371c      	adds	r7, #28
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 031f 	and.w	r3, r3, #31
 800546a:	2201      	movs	r2, #1
 800546c:	fa02 f303 	lsl.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1a      	ldr	r2, [r3, #32]
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	43db      	mvns	r3, r3
 800547a:	401a      	ands	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	431a      	orrs	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e05a      	b.n	8005572 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a21      	ldr	r2, [pc, #132]	; (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d022      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005508:	d01d      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1d      	ldr	r2, [pc, #116]	; (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d018      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1a      	ldr	r2, [pc, #104]	; (800558c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00e      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a18      	ldr	r2, [pc, #96]	; (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d009      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a17      	ldr	r2, [pc, #92]	; (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d004      	beq.n	8005546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a15      	ldr	r2, [pc, #84]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d10c      	bne.n	8005560 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800554c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4313      	orrs	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40010400 	.word	0x40010400
 8005594:	40014000 	.word	0x40014000
 8005598:	40001800 	.word	0x40001800

0800559c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <invSqrt>:
  * @author         Guo_Hui_Lin
  * @param[in]      输入
  * @retval         输入值开方的倒数
  */
float invSqrt(float num)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfnum = 0.5f * num;
 80055ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80055d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80055d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055da:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = num;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 80055e2:	f107 0310 	add.w	r3, r7, #16
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i >> 1);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	105a      	asrs	r2, r3, #1
 80055ee:	4b12      	ldr	r3, [pc, #72]	; (8005638 <invSqrt+0x74>)
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 80055f4:	f107 030c 	add.w	r3, r7, #12
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfnum * y * y));
 80055fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8005600:	edd7 7a05 	vldr	s15, [r7, #20]
 8005604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005608:	edd7 7a04 	vldr	s15, [r7, #16]
 800560c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005610:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005614:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005618:	edd7 7a04 	vldr	s15, [r7, #16]
 800561c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005620:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	ee07 3a90 	vmov	s15, r3
}
 800562a:	eeb0 0a67 	vmov.f32	s0, s15
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	5f3759df 	.word	0x5f3759df

0800563c <limit_control>:
  * @param	需要限幅的变量
  * @param	限幅值
  * @retval 限幅值之内的值
  */
float limit_control(float input, float limit)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	ed87 0a01 	vstr	s0, [r7, #4]
 8005646:	edc7 0a00 	vstr	s1, [r7]
	float limit_output = input;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]
	if(input > limit) limit_output = limit;
 800564e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005652:	edd7 7a00 	vldr	s15, [r7]
 8005656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800565a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800565e:	dd02      	ble.n	8005666 <limit_control+0x2a>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e010      	b.n	8005688 <limit_control+0x4c>
	else if(input < (-1 * limit)) limit_output = (-1 * limit);
 8005666:	edd7 7a00 	vldr	s15, [r7]
 800566a:	eef1 7a67 	vneg.f32	s15, s15
 800566e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	d505      	bpl.n	8005688 <limit_control+0x4c>
 800567c:	edd7 7a00 	vldr	s15, [r7]
 8005680:	eef1 7a67 	vneg.f32	s15, s15
 8005684:	edc7 7a03 	vstr	s15, [r7, #12]

	return limit_output;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	ee07 3a90 	vmov	s15, r3
}
 800568e:	eeb0 0a67 	vmov.f32	s0, s15
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <BMI088_Acc_WriteReg>:
#define SPI_GYRO_ENABLE() 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET)
#define SPI_GYRO_DISABLE() 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET)

/*--------BMI088基础读写函数--------*/
void BMI088_Acc_WriteReg(uint8_t addr, uint8_t data)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	460a      	mov	r2, r1
 80056a6:	71fb      	strb	r3, [r7, #7]
 80056a8:	4613      	mov	r3, r2
 80056aa:	71bb      	strb	r3, [r7, #6]
	SPI_ACC_ENABLE();
 80056ac:	2200      	movs	r2, #0
 80056ae:	2110      	movs	r1, #16
 80056b0:	4811      	ldr	r0, [pc, #68]	; (80056f8 <BMI088_Acc_WriteReg+0x5c>)
 80056b2:	f7fc fd53 	bl	800215c <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr & BMI088_SPI_WRITE_CODE);
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 80056c0:	f107 010f 	add.w	r1, r7, #15
 80056c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056c8:	2201      	movs	r2, #1
 80056ca:	480c      	ldr	r0, [pc, #48]	; (80056fc <BMI088_Acc_WriteReg+0x60>)
 80056cc:	f7fe fa1f 	bl	8003b0e <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 80056d0:	1db9      	adds	r1, r7, #6
 80056d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056d6:	2201      	movs	r2, #1
 80056d8:	4808      	ldr	r0, [pc, #32]	; (80056fc <BMI088_Acc_WriteReg+0x60>)
 80056da:	f7fe fa18 	bl	8003b0e <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_Delay(1);
 80056de:	2001      	movs	r0, #1
 80056e0:	f7fc fa52 	bl	8001b88 <HAL_Delay>
	SPI_ACC_DISABLE();
 80056e4:	2201      	movs	r2, #1
 80056e6:	2110      	movs	r1, #16
 80056e8:	4803      	ldr	r0, [pc, #12]	; (80056f8 <BMI088_Acc_WriteReg+0x5c>)
 80056ea:	f7fc fd37 	bl	800215c <HAL_GPIO_WritePin>
}
 80056ee:	bf00      	nop
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40020000 	.word	0x40020000
 80056fc:	2000019c 	.word	0x2000019c

08005700 <BMI088_Gyro_WriteReg>:

void BMI088_Gyro_WriteReg(uint8_t addr, uint8_t data)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	460a      	mov	r2, r1
 800570a:	71fb      	strb	r3, [r7, #7]
 800570c:	4613      	mov	r3, r2
 800570e:	71bb      	strb	r3, [r7, #6]
	SPI_GYRO_ENABLE();
 8005710:	2200      	movs	r2, #0
 8005712:	2101      	movs	r1, #1
 8005714:	480f      	ldr	r0, [pc, #60]	; (8005754 <BMI088_Gyro_WriteReg+0x54>)
 8005716:	f7fc fd21 	bl	800215c <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr & BMI088_SPI_WRITE_CODE);
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005720:	b2db      	uxtb	r3, r3
 8005722:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8005724:	f107 010f 	add.w	r1, r7, #15
 8005728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800572c:	2201      	movs	r2, #1
 800572e:	480a      	ldr	r0, [pc, #40]	; (8005758 <BMI088_Gyro_WriteReg+0x58>)
 8005730:	f7fe f9ed 	bl	8003b0e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8005734:	1db9      	adds	r1, r7, #6
 8005736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800573a:	2201      	movs	r2, #1
 800573c:	4806      	ldr	r0, [pc, #24]	; (8005758 <BMI088_Gyro_WriteReg+0x58>)
 800573e:	f7fe f9e6 	bl	8003b0e <HAL_SPI_Transmit>

	SPI_GYRO_DISABLE();
 8005742:	2201      	movs	r2, #1
 8005744:	2101      	movs	r1, #1
 8005746:	4803      	ldr	r0, [pc, #12]	; (8005754 <BMI088_Gyro_WriteReg+0x54>)
 8005748:	f7fc fd08 	bl	800215c <HAL_GPIO_WritePin>
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40020400 	.word	0x40020400
 8005758:	2000019c 	.word	0x2000019c

0800575c <BMI088_Acc_ReadReg>:

void BMI088_Acc_ReadReg(uint8_t addr, uint8_t *pdata, uint8_t len)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	6039      	str	r1, [r7, #0]
 8005766:	71fb      	strb	r3, [r7, #7]
 8005768:	4613      	mov	r3, r2
 800576a:	71bb      	strb	r3, [r7, #6]
	SPI_ACC_ENABLE();
 800576c:	2200      	movs	r2, #0
 800576e:	2110      	movs	r1, #16
 8005770:	4814      	ldr	r0, [pc, #80]	; (80057c4 <BMI088_Acc_ReadReg+0x68>)
 8005772:	f7fc fcf3 	bl	800215c <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr | BMI088_SPI_READ_CODE);
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800577c:	b2db      	uxtb	r3, r3
 800577e:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8005780:	f107 010f 	add.w	r1, r7, #15
 8005784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005788:	2201      	movs	r2, #1
 800578a:	480f      	ldr	r0, [pc, #60]	; (80057c8 <BMI088_Acc_ReadReg+0x6c>)
 800578c:	f7fe f9bf 	bl	8003b0e <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_SPI_Receive(&hspi1, &pTxData, 1, 1000);
 8005790:	f107 010f 	add.w	r1, r7, #15
 8005794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005798:	2201      	movs	r2, #1
 800579a:	480b      	ldr	r0, [pc, #44]	; (80057c8 <BMI088_Acc_ReadReg+0x6c>)
 800579c:	f7fe faf3 	bl	8003d86 <HAL_SPI_Receive>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_RX);
	HAL_SPI_Receive(&hspi1, pdata, len, 0XFFFF);
 80057a0:	79bb      	ldrb	r3, [r7, #6]
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	4807      	ldr	r0, [pc, #28]	; (80057c8 <BMI088_Acc_ReadReg+0x6c>)
 80057ac:	f7fe faeb 	bl	8003d86 <HAL_SPI_Receive>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_RX);

	SPI_ACC_DISABLE();
 80057b0:	2201      	movs	r2, #1
 80057b2:	2110      	movs	r1, #16
 80057b4:	4803      	ldr	r0, [pc, #12]	; (80057c4 <BMI088_Acc_ReadReg+0x68>)
 80057b6:	f7fc fcd1 	bl	800215c <HAL_GPIO_WritePin>

}
 80057ba:	bf00      	nop
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40020000 	.word	0x40020000
 80057c8:	2000019c 	.word	0x2000019c

080057cc <BMI088_Gyro_ReadReg>:

void BMI088_Gyro_ReadReg(uint8_t addr, uint8_t *pdata, uint8_t len)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	6039      	str	r1, [r7, #0]
 80057d6:	71fb      	strb	r3, [r7, #7]
 80057d8:	4613      	mov	r3, r2
 80057da:	71bb      	strb	r3, [r7, #6]
	SPI_GYRO_ENABLE();
 80057dc:	2200      	movs	r2, #0
 80057de:	2101      	movs	r1, #1
 80057e0:	4810      	ldr	r0, [pc, #64]	; (8005824 <BMI088_Gyro_ReadReg+0x58>)
 80057e2:	f7fc fcbb 	bl	800215c <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr | BMI088_SPI_READ_CODE);
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 80057f0:	f107 010f 	add.w	r1, r7, #15
 80057f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057f8:	2201      	movs	r2, #1
 80057fa:	480b      	ldr	r0, [pc, #44]	; (8005828 <BMI088_Gyro_ReadReg+0x5c>)
 80057fc:	f7fe f987 	bl	8003b0e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pdata, len, 1000);
 8005800:	79bb      	ldrb	r3, [r7, #6]
 8005802:	b29a      	uxth	r2, r3
 8005804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	4807      	ldr	r0, [pc, #28]	; (8005828 <BMI088_Gyro_ReadReg+0x5c>)
 800580c:	f7fe fabb 	bl	8003d86 <HAL_SPI_Receive>

	SPI_GYRO_DISABLE();
 8005810:	2201      	movs	r2, #1
 8005812:	2101      	movs	r1, #1
 8005814:	4803      	ldr	r0, [pc, #12]	; (8005824 <BMI088_Gyro_ReadReg+0x58>)
 8005816:	f7fc fca1 	bl	800215c <HAL_GPIO_WritePin>
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40020400 	.word	0x40020400
 8005828:	2000019c 	.word	0x2000019c

0800582c <BMI088_Acc_ReadID>:
/*--------BMI088数据读取函数--------*/
uint8_t BMI088_Acc_ReadID(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
	uint8_t ID;
	BMI088_Acc_ReadReg(BMI088_ACC_CHIP_ID, &ID, 1);
 8005832:	1dfb      	adds	r3, r7, #7
 8005834:	2201      	movs	r2, #1
 8005836:	4619      	mov	r1, r3
 8005838:	2000      	movs	r0, #0
 800583a:	f7ff ff8f 	bl	800575c <BMI088_Acc_ReadReg>

	return ID;
 800583e:	79fb      	ldrb	r3, [r7, #7]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <BMI088_Gyro_ReadID>:

uint8_t BMI088_Gyro_ReadID(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
	uint8_t ID;
	BMI088_Gyro_ReadReg(BMI088_GYRO_CHIP_ID, &ID, 1);
 800584e:	1dfb      	adds	r3, r7, #7
 8005850:	2201      	movs	r2, #1
 8005852:	4619      	mov	r1, r3
 8005854:	2000      	movs	r0, #0
 8005856:	f7ff ffb9 	bl	80057cc <BMI088_Gyro_ReadReg>

	return ID;
 800585a:	79fb      	ldrb	r3, [r7, #7]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <BMI088_Get_Temperature>:

float BMI088_Get_Temperature(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
	uint8_t buff[2];
	uint16_t temp_uint11;
	int16_t temp_int11;

	BMI088_Acc_ReadReg(BMI088_TEMP_M, buff, 2);
 800586a:	463b      	mov	r3, r7
 800586c:	2202      	movs	r2, #2
 800586e:	4619      	mov	r1, r3
 8005870:	2022      	movs	r0, #34	; 0x22
 8005872:	f7ff ff73 	bl	800575c <BMI088_Acc_ReadReg>
	temp_uint11 = (buff[0] << 3) + (buff[1] >> 5);
 8005876:	783b      	ldrb	r3, [r7, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	b29a      	uxth	r2, r3
 800587e:	787b      	ldrb	r3, [r7, #1]
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	b2db      	uxtb	r3, r3
 8005884:	b29b      	uxth	r3, r3
 8005886:	4413      	add	r3, r2
 8005888:	80bb      	strh	r3, [r7, #4]
	if (temp_uint11 > 1023)
 800588a:	88bb      	ldrh	r3, [r7, #4]
 800588c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005890:	d305      	bcc.n	800589e <BMI088_Get_Temperature+0x3a>
	{
		temp_int11 = temp_uint11 - 2048;
 8005892:	88bb      	ldrh	r3, [r7, #4]
 8005894:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005898:	b29b      	uxth	r3, r3
 800589a:	80fb      	strh	r3, [r7, #6]
 800589c:	e001      	b.n	80058a2 <BMI088_Get_Temperature+0x3e>
	}
	else
	{
		temp_int11 = temp_uint11;
 800589e:	88bb      	ldrh	r3, [r7, #4]
 80058a0:	80fb      	strh	r3, [r7, #6]
	}

	return (temp_int11 * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET);
 80058a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ae:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80058b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058b6:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 80058ba:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80058be:	eeb0 0a67 	vmov.f32	s0, s15
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <BMI088_Getdata_Acc_raw>:
//raw
void BMI088_Getdata_Acc_raw(int16_t *accdata)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	BMI088_Acc_ReadReg(BMI088_ACCEL_XOUT_L, buff, 6);
 80058d0:	f107 0308 	add.w	r3, r7, #8
 80058d4:	2206      	movs	r2, #6
 80058d6:	4619      	mov	r1, r3
 80058d8:	2012      	movs	r0, #18
 80058da:	f7ff ff3f 	bl	800575c <BMI088_Acc_ReadReg>
	accdata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 80058de:	7a7b      	ldrb	r3, [r7, #9]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	b21a      	sxth	r2, r3
 80058e4:	7a3b      	ldrb	r3, [r7, #8]
 80058e6:	b21b      	sxth	r3, r3
 80058e8:	4313      	orrs	r3, r2
 80058ea:	b21a      	sxth	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	801a      	strh	r2, [r3, #0]
	accdata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 80058f0:	7afb      	ldrb	r3, [r7, #11]
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	b219      	sxth	r1, r3
 80058f6:	7abb      	ldrb	r3, [r7, #10]
 80058f8:	b21a      	sxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3302      	adds	r3, #2
 80058fe:	430a      	orrs	r2, r1
 8005900:	b212      	sxth	r2, r2
 8005902:	801a      	strh	r2, [r3, #0]
	accdata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 8005904:	7b7b      	ldrb	r3, [r7, #13]
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	b219      	sxth	r1, r3
 800590a:	7b3b      	ldrb	r3, [r7, #12]
 800590c:	b21a      	sxth	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	3304      	adds	r3, #4
 8005912:	430a      	orrs	r2, r1
 8005914:	b212      	sxth	r2, r2
 8005916:	801a      	strh	r2, [r3, #0]
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <BMI088_Getdata_Gyro_raw>:
//rad / s
void BMI088_Getdata_Gyro_raw(int16_t *gyrodata)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	BMI088_Gyro_ReadReg(BMI088_GYRO_X_L, buff, 6);
 8005928:	f107 0308 	add.w	r3, r7, #8
 800592c:	2206      	movs	r2, #6
 800592e:	4619      	mov	r1, r3
 8005930:	2002      	movs	r0, #2
 8005932:	f7ff ff4b 	bl	80057cc <BMI088_Gyro_ReadReg>
	gyrodata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 8005936:	7a7b      	ldrb	r3, [r7, #9]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	b21a      	sxth	r2, r3
 800593c:	7a3b      	ldrb	r3, [r7, #8]
 800593e:	b21b      	sxth	r3, r3
 8005940:	4313      	orrs	r3, r2
 8005942:	b21a      	sxth	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	801a      	strh	r2, [r3, #0]
	gyrodata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 8005948:	7afb      	ldrb	r3, [r7, #11]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	b219      	sxth	r1, r3
 800594e:	7abb      	ldrb	r3, [r7, #10]
 8005950:	b21a      	sxth	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3302      	adds	r3, #2
 8005956:	430a      	orrs	r2, r1
 8005958:	b212      	sxth	r2, r2
 800595a:	801a      	strh	r2, [r3, #0]
	gyrodata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 800595c:	7b7b      	ldrb	r3, [r7, #13]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	b219      	sxth	r1, r3
 8005962:	7b3b      	ldrb	r3, [r7, #12]
 8005964:	b21a      	sxth	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3304      	adds	r3, #4
 800596a:	430a      	orrs	r2, r1
 800596c:	b212      	sxth	r2, r2
 800596e:	801a      	strh	r2, [r3, #0]
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <BMI088_Getdata_Acc>:
//m_2/s
void BMI088_Getdata_Acc(float *accdata)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	int16_t tempbuff = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	81fb      	strh	r3, [r7, #14]
	BMI088_Acc_ReadReg(BMI088_ACCEL_XOUT_L, buff, 6);
 8005984:	f107 0308 	add.w	r3, r7, #8
 8005988:	2206      	movs	r2, #6
 800598a:	4619      	mov	r1, r3
 800598c:	2012      	movs	r0, #18
 800598e:	f7ff fee5 	bl	800575c <BMI088_Acc_ReadReg>
	tempbuff = (int16_t)( (buff[1] << 8) | buff[0] );
 8005992:	7a7b      	ldrb	r3, [r7, #9]
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	b21a      	sxth	r2, r3
 8005998:	7a3b      	ldrb	r3, [r7, #8]
 800599a:	b21b      	sxth	r3, r3
 800599c:	4313      	orrs	r3, r2
 800599e:	81fb      	strh	r3, [r7, #14]
	accdata[0] = tempbuff * BMI088_ACCEL_3G_SEN;
 80059a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059a4:	ee07 3a90 	vmov	s15, r3
 80059a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ac:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005a18 <BMI088_Getdata_Acc+0xa0>
 80059b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[3] << 8) | buff[2] );
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	b21a      	sxth	r2, r3
 80059c0:	7abb      	ldrb	r3, [r7, #10]
 80059c2:	b21b      	sxth	r3, r3
 80059c4:	4313      	orrs	r3, r2
 80059c6:	81fb      	strh	r3, [r7, #14]
	accdata[1] = tempbuff * BMI088_ACCEL_3G_SEN;
 80059c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059cc:	ee07 3a90 	vmov	s15, r3
 80059d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005a18 <BMI088_Getdata_Acc+0xa0>
 80059dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059e0:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[5] << 8) | buff[4] );
 80059e4:	7b7b      	ldrb	r3, [r7, #13]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	b21a      	sxth	r2, r3
 80059ea:	7b3b      	ldrb	r3, [r7, #12]
 80059ec:	b21b      	sxth	r3, r3
 80059ee:	4313      	orrs	r3, r2
 80059f0:	81fb      	strh	r3, [r7, #14]
	accdata[2] = tempbuff * BMI088_ACCEL_3G_SEN;
 80059f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3308      	adds	r3, #8
 8005a02:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005a18 <BMI088_Getdata_Acc+0xa0>
 8005a06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a0a:	edc3 7a00 	vstr	s15, [r3]
}
 8005a0e:	bf00      	nop
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	3a6b41e7 	.word	0x3a6b41e7

08005a1c <BMI088_Getdata_Gyro>:
//rad / s
void BMI088_Getdata_Gyro(float *gyrodata)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	int16_t tempbuff = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	81fb      	strh	r3, [r7, #14]
	BMI088_Gyro_ReadReg(BMI088_GYRO_X_L, buff, 6);
 8005a28:	f107 0308 	add.w	r3, r7, #8
 8005a2c:	2206      	movs	r2, #6
 8005a2e:	4619      	mov	r1, r3
 8005a30:	2002      	movs	r0, #2
 8005a32:	f7ff fecb 	bl	80057cc <BMI088_Gyro_ReadReg>
	tempbuff = (int16_t)( (buff[1] << 8) | buff[0] );
 8005a36:	7a7b      	ldrb	r3, [r7, #9]
 8005a38:	021b      	lsls	r3, r3, #8
 8005a3a:	b21a      	sxth	r2, r3
 8005a3c:	7a3b      	ldrb	r3, [r7, #8]
 8005a3e:	b21b      	sxth	r3, r3
 8005a40:	4313      	orrs	r3, r2
 8005a42:	81fb      	strh	r3, [r7, #14]
	gyrodata[0] = tempbuff * BMI088_GYRO_2000_SEN;
 8005a44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a48:	ee07 3a90 	vmov	s15, r3
 8005a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a50:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005abc <BMI088_Getdata_Gyro+0xa0>
 8005a54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[3] << 8) | buff[2] );
 8005a5e:	7afb      	ldrb	r3, [r7, #11]
 8005a60:	021b      	lsls	r3, r3, #8
 8005a62:	b21a      	sxth	r2, r3
 8005a64:	7abb      	ldrb	r3, [r7, #10]
 8005a66:	b21b      	sxth	r3, r3
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	81fb      	strh	r3, [r7, #14]
	gyrodata[1] = tempbuff * BMI088_GYRO_2000_SEN;
 8005a6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005abc <BMI088_Getdata_Gyro+0xa0>
 8005a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a84:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[5] << 8) | buff[4] );
 8005a88:	7b7b      	ldrb	r3, [r7, #13]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	b21a      	sxth	r2, r3
 8005a8e:	7b3b      	ldrb	r3, [r7, #12]
 8005a90:	b21b      	sxth	r3, r3
 8005a92:	4313      	orrs	r3, r2
 8005a94:	81fb      	strh	r3, [r7, #14]
	gyrodata[2] = tempbuff * BMI088_GYRO_2000_SEN;
 8005a96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a9a:	ee07 3a90 	vmov	s15, r3
 8005a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005abc <BMI088_Getdata_Gyro+0xa0>
 8005aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005aae:	edc3 7a00 	vstr	s15, [r3]
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	3a8ba058 	.word	0x3a8ba058

08005ac0 <BMI088_Acc_Init>:
/*--------BMI088初始化函数--------*/
IMU_ERROR_Typedef BMI088_Acc_Init(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t ID;
	uint8_t BMI088_Acc_Init_Data[6][2] = {
 8005ac6:	4a21      	ldr	r2, [pc, #132]	; (8005b4c <BMI088_Acc_Init+0x8c>)
 8005ac8:	463b      	mov	r3, r7
 8005aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8005acc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			{BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE},//加速度正常工作模式
			{BMI088_ACC_RANGE, BMI088_ACC_RANGE_3G},//设置范围为+-3G
			{BMI088_ACC_CONF, BMI088_ACC_NORMAL | BMI088_ACC_800_HZ | BMI088_ACC_CONF_MUST_Set},//设置采样， 输出频率1600HZ
			{BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_OFF},
	};
    ID = BMI088_Acc_ReadID();
 8005ad0:	f7ff feac 	bl	800582c <BMI088_Acc_ReadID>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	73bb      	strb	r3, [r7, #14]
    if (ID != BMI088_ACC_CHIP_ID_VALUE)
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	2b1e      	cmp	r3, #30
 8005adc:	d006      	beq.n	8005aec <BMI088_Acc_Init+0x2c>
    {
    	HAL_Delay(100);
 8005ade:	2064      	movs	r0, #100	; 0x64
 8005ae0:	f7fc f852 	bl	8001b88 <HAL_Delay>
    	ID = BMI088_Acc_ReadID();
 8005ae4:	f7ff fea2 	bl	800582c <BMI088_Acc_ReadID>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73bb      	strb	r3, [r7, #14]
    }

    if (ID == BMI088_ACC_CHIP_ID_VALUE)
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
 8005aee:	2b1e      	cmp	r3, #30
 8005af0:	d126      	bne.n	8005b40 <BMI088_Acc_Init+0x80>
    {
    	BMI088_Acc_WriteReg(BMI088_Acc_Init_Data[0][0], BMI088_Acc_Init_Data[0][1]);
 8005af2:	783b      	ldrb	r3, [r7, #0]
 8005af4:	787a      	ldrb	r2, [r7, #1]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff fdcf 	bl	800569c <BMI088_Acc_WriteReg>
    	HAL_Delay(50);
 8005afe:	2032      	movs	r0, #50	; 0x32
 8005b00:	f7fc f842 	bl	8001b88 <HAL_Delay>


    	for(i = 1; i < 5; i++)
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
 8005b08:	e015      	b.n	8005b36 <BMI088_Acc_Init+0x76>
    	{
    		BMI088_Acc_WriteReg(BMI088_Acc_Init_Data[i][0], BMI088_Acc_Init_Data[i][1]);
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	3310      	adds	r3, #16
 8005b10:	443b      	add	r3, r7
 8005b12:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	3310      	adds	r3, #16
 8005b1c:	443b      	add	r3, r7
 8005b1e:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f7ff fdb9 	bl	800569c <BMI088_Acc_WriteReg>
    		HAL_Delay(5);
 8005b2a:	2005      	movs	r0, #5
 8005b2c:	f7fc f82c 	bl	8001b88 <HAL_Delay>
    	for(i = 1; i < 5; i++)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	3301      	adds	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d9e6      	bls.n	8005b0a <BMI088_Acc_Init+0x4a>
    	}


    	return IMU_NO_ERROR;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e000      	b.n	8005b42 <BMI088_Acc_Init+0x82>
    }
    else
    {
    	return IMU_ACC_ERROR;
 8005b40:	2301      	movs	r3, #1
    }

}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	08009eac 	.word	0x08009eac

08005b50 <BMI088_Gyro_Init>:

IMU_ERROR_Typedef BMI088_Gyro_Init(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t ID;
	uint8_t BMI088_Gyro_Init_Data[4][2] = {
 8005b56:	4a21      	ldr	r2, [pc, #132]	; (8005bdc <BMI088_Gyro_Init+0x8c>)
 8005b58:	1d3b      	adds	r3, r7, #4
 8005b5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b5e:	e883 0003 	stmia.w	r3, {r0, r1}
			{BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE},//软件复位，清空所用寄存器
			{BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE},//陀螺仪正常工作模式
			{BMI088_GYRO_RANGE, BMI088_GYRO_2000},//设置范围为+-2000°/s
			{BMI088_GYRO_BANDWIDTH, BMI088_GYRO_2000_532_HZ},//2000Hz输出频率，532Hz滤波器带宽
	};
    ID = BMI088_Gyro_ReadID();
 8005b62:	f7ff fe71 	bl	8005848 <BMI088_Gyro_ReadID>
 8005b66:	4603      	mov	r3, r0
 8005b68:	73bb      	strb	r3, [r7, #14]
    if (ID != BMI088_GYRO_CHIP_ID_VALUE)
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	2b0f      	cmp	r3, #15
 8005b6e:	d006      	beq.n	8005b7e <BMI088_Gyro_Init+0x2e>
    {
    	HAL_Delay(100);
 8005b70:	2064      	movs	r0, #100	; 0x64
 8005b72:	f7fc f809 	bl	8001b88 <HAL_Delay>
    	ID = BMI088_Gyro_ReadID();
 8005b76:	f7ff fe67 	bl	8005848 <BMI088_Gyro_ReadID>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	73bb      	strb	r3, [r7, #14]
    }

    if (ID == BMI088_GYRO_CHIP_ID_VALUE)
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
 8005b80:	2b0f      	cmp	r3, #15
 8005b82:	d126      	bne.n	8005bd2 <BMI088_Gyro_Init+0x82>
    {
    	BMI088_Gyro_WriteReg(BMI088_Gyro_Init_Data[0][0], BMI088_Gyro_Init_Data[0][1]);
 8005b84:	793b      	ldrb	r3, [r7, #4]
 8005b86:	797a      	ldrb	r2, [r7, #5]
 8005b88:	4611      	mov	r1, r2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fdb8 	bl	8005700 <BMI088_Gyro_WriteReg>
    	HAL_Delay(50);
 8005b90:	2032      	movs	r0, #50	; 0x32
 8005b92:	f7fb fff9 	bl	8001b88 <HAL_Delay>
    	for(i = 1; i < 4; i++)
 8005b96:	2301      	movs	r3, #1
 8005b98:	73fb      	strb	r3, [r7, #15]
 8005b9a:	e015      	b.n	8005bc8 <BMI088_Gyro_Init+0x78>
    	{
    		BMI088_Gyro_WriteReg(BMI088_Gyro_Init_Data[i][0], BMI088_Gyro_Init_Data[i][1]);
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	3310      	adds	r3, #16
 8005ba2:	443b      	add	r3, r7
 8005ba4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	3310      	adds	r3, #16
 8005bae:	443b      	add	r3, r7
 8005bb0:	f813 3c0b 	ldrb.w	r3, [r3, #-11]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	4610      	mov	r0, r2
 8005bb8:	f7ff fda2 	bl	8005700 <BMI088_Gyro_WriteReg>
    		HAL_Delay(5);
 8005bbc:	2005      	movs	r0, #5
 8005bbe:	f7fb ffe3 	bl	8001b88 <HAL_Delay>
    	for(i = 1; i < 4; i++)
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	73fb      	strb	r3, [r7, #15]
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d9e6      	bls.n	8005b9c <BMI088_Gyro_Init+0x4c>
    	}

    	return IMU_NO_ERROR;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e000      	b.n	8005bd4 <BMI088_Gyro_Init+0x84>
    }
    else
    {
    	return IMU_GYRO_ERROR;
 8005bd2:	2302      	movs	r3, #2
    }
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	08009eb8 	.word	0x08009eb8

08005be0 <BMI088_Init>:



IMU_ERROR_Typedef BMI088_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
	uint8_t bmi088_error = IMU_NO_ERROR;
 8005be6:	2300      	movs	r3, #0
 8005be8:	71fb      	strb	r3, [r7, #7]
	bmi088_error |= BMI088_Gyro_Init();
 8005bea:	f7ff ffb1 	bl	8005b50 <BMI088_Gyro_Init>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	71fb      	strb	r3, [r7, #7]
	bmi088_error |= BMI088_Acc_Init();
 8005bf8:	f7ff ff62 	bl	8005ac0 <BMI088_Acc_Init>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	461a      	mov	r2, r3
 8005c00:	79fb      	ldrb	r3, [r7, #7]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	71fb      	strb	r3, [r7, #7]
	return bmi088_error;
 8005c06:	79fb      	ldrb	r3, [r7, #7]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <IMU_Init>:
static void Get_Gyro_StaticError(void);
static void IMU_GetInit_Angle(void);
static void Init_Quaternions(void);
static void IMU_GetData(void);
IMU_ERROR_Typedef IMU_Init(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
	IMU_ERROR_Typedef imu_error = IMU_NO_ERROR;
 8005c16:	2300      	movs	r3, #0
 8005c18:	71fb      	strb	r3, [r7, #7]
	imu_error |= BMI088_Init();
 8005c1a:	f7ff ffe1 	bl	8005be0 <BMI088_Init>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	71fb      	strb	r3, [r7, #7]
	imu_error |= IST8310_Init();
 8005c28:	f001 fa50 	bl	80070cc <IST8310_Init>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	461a      	mov	r2, r3
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
	Get_Gyro_StaticError();
 8005c36:	f000 f807 	bl	8005c48 <Get_Gyro_StaticError>
	Init_Quaternions();
 8005c3a:	f000 f9cf 	bl	8005fdc <Init_Quaternions>

	return imu_error;
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <Get_Gyro_StaticError>:

static void Get_Gyro_StaticError(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
	const uint16_t SAMPLES_COUNT = 500;
 8005c4e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005c52:	81bb      	strh	r3, [r7, #12]
	int16_t gyro_error_data[3];
	uint16_t i;
	for (i = 0; i < SAMPLES_COUNT; i++)
 8005c54:	2300      	movs	r3, #0
 8005c56:	81fb      	strh	r3, [r7, #14]
 8005c58:	e030      	b.n	8005cbc <Get_Gyro_StaticError+0x74>
	{
		BMI088_Getdata_Gyro_raw(gyro_error_data);
 8005c5a:	1d3b      	adds	r3, r7, #4
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fe5f 	bl	8005920 <BMI088_Getdata_Gyro_raw>
		g_imu_struct.gx_offset += gyro_error_data[0];
 8005c62:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005c64:	ed93 7a05 	vldr	s14, [r3, #20]
 8005c68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005c6c:	ee07 3a90 	vmov	s15, r3
 8005c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c78:	4b28      	ldr	r3, [pc, #160]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005c7a:	edc3 7a05 	vstr	s15, [r3, #20]
		g_imu_struct.gy_offset += gyro_error_data[1];
 8005c7e:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005c80:	ed93 7a06 	vldr	s14, [r3, #24]
 8005c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c94:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005c96:	edc3 7a06 	vstr	s15, [r3, #24]
		g_imu_struct.gz_offset += gyro_error_data[2];
 8005c9a:	4b20      	ldr	r3, [pc, #128]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005c9c:	ed93 7a07 	vldr	s14, [r3, #28]
 8005ca0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005ca4:	ee07 3a90 	vmov	s15, r3
 8005ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb0:	4b1a      	ldr	r3, [pc, #104]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005cb2:	edc3 7a07 	vstr	s15, [r3, #28]
	for (i = 0; i < SAMPLES_COUNT; i++)
 8005cb6:	89fb      	ldrh	r3, [r7, #14]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	81fb      	strh	r3, [r7, #14]
 8005cbc:	89fa      	ldrh	r2, [r7, #14]
 8005cbe:	89bb      	ldrh	r3, [r7, #12]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d3ca      	bcc.n	8005c5a <Get_Gyro_StaticError+0x12>
	}
	 g_imu_struct.gx_offset /=  SAMPLES_COUNT;
 8005cc4:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005cc6:	edd3 6a05 	vldr	s13, [r3, #20]
 8005cca:	89bb      	ldrh	r3, [r7, #12]
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cd8:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005cda:	edc3 7a05 	vstr	s15, [r3, #20]
	 g_imu_struct.gy_offset /=  SAMPLES_COUNT;
 8005cde:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005ce0:	edd3 6a06 	vldr	s13, [r3, #24]
 8005ce4:	89bb      	ldrh	r3, [r7, #12]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005cf4:	edc3 7a06 	vstr	s15, [r3, #24]
	 g_imu_struct.gz_offset /=  SAMPLES_COUNT;
 8005cf8:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005cfa:	edd3 6a07 	vldr	s13, [r3, #28]
 8005cfe:	89bb      	ldrh	r3, [r7, #12]
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <Get_Gyro_StaticError+0xd4>)
 8005d0e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	2000000c 	.word	0x2000000c

08005d20 <IMU_GetInit_Angle>:

static void IMU_GetInit_Angle(void)
{
 8005d20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005d24:	b08a      	sub	sp, #40	; 0x28
 8005d26:	af00      	add	r7, sp, #0

	float temp = 0;
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24

	float roll;
	float pitch;
	float yaw;

	IMU_GetData();
 8005d2e:	f000 fbcb 	bl	80064c8 <IMU_GetData>

	float ax = g_imu_struct.ax_raw;
 8005d32:	4ba9      	ldr	r3, [pc, #676]	; (8005fd8 <IMU_GetInit_Angle+0x2b8>)
 8005d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d40:	edc7 7a08 	vstr	s15, [r7, #32]
	float ay = g_imu_struct.ay_raw;
 8005d44:	4ba4      	ldr	r3, [pc, #656]	; (8005fd8 <IMU_GetInit_Angle+0x2b8>)
 8005d46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d52:	edc7 7a07 	vstr	s15, [r7, #28]
	float az = g_imu_struct.az_raw;
 8005d56:	4ba0      	ldr	r3, [pc, #640]	; (8005fd8 <IMU_GetInit_Angle+0x2b8>)
 8005d58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d5c:	ee07 3a90 	vmov	s15, r3
 8005d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d64:	edc7 7a06 	vstr	s15, [r7, #24]
	float mx = g_imu_struct.mx_raw;
 8005d68:	4b9b      	ldr	r3, [pc, #620]	; (8005fd8 <IMU_GetInit_Angle+0x2b8>)
 8005d6a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d76:	edc7 7a05 	vstr	s15, [r7, #20]
	float my = g_imu_struct.my_raw;
 8005d7a:	4b97      	ldr	r3, [pc, #604]	; (8005fd8 <IMU_GetInit_Angle+0x2b8>)
 8005d7c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005d80:	ee07 3a90 	vmov	s15, r3
 8005d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d88:	edc7 7a04 	vstr	s15, [r7, #16]
	float mz = g_imu_struct.mz_raw;
 8005d8c:	4b92      	ldr	r3, [pc, #584]	; (8005fd8 <IMU_GetInit_Angle+0x2b8>)
 8005d8e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d9a:	edc7 7a03 	vstr	s15, [r7, #12]

	temp = 1 / invSqrt( pow(ay, 2) + pow(az, 2));
 8005d9e:	69f8      	ldr	r0, [r7, #28]
 8005da0:	f7fa fb76 	bl	8000490 <__aeabi_f2d>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	ed9f 1b89 	vldr	d1, [pc, #548]	; 8005fd0 <IMU_GetInit_Angle+0x2b0>
 8005dac:	ec43 2b10 	vmov	d0, r2, r3
 8005db0:	f001 ff0a 	bl	8007bc8 <pow>
 8005db4:	ec55 4b10 	vmov	r4, r5, d0
 8005db8:	69b8      	ldr	r0, [r7, #24]
 8005dba:	f7fa fb69 	bl	8000490 <__aeabi_f2d>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8005fd0 <IMU_GetInit_Angle+0x2b0>
 8005dc6:	ec43 2b10 	vmov	d0, r2, r3
 8005dca:	f001 fefd 	bl	8007bc8 <pow>
 8005dce:	ec53 2b10 	vmov	r2, r3, d0
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	f7fa f9fd 	bl	80001d4 <__adddf3>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	f7fa fe85 	bl	8000af0 <__aeabi_d2f>
 8005de6:	4603      	mov	r3, r0
 8005de8:	ee00 3a10 	vmov	s0, r3
 8005dec:	f7ff fbea 	bl	80055c4 <invSqrt>
 8005df0:	eeb0 7a40 	vmov.f32	s14, s0
 8005df4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dfc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	roll = atan2f(ay, az);
 8005e00:	edd7 0a06 	vldr	s1, [r7, #24]
 8005e04:	ed97 0a07 	vldr	s0, [r7, #28]
 8005e08:	f001 ffa6 	bl	8007d58 <atan2f>
 8005e0c:	ed87 0a02 	vstr	s0, [r7, #8]
	pitch = -atan2f(ax, temp);
 8005e10:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8005e14:	ed97 0a08 	vldr	s0, [r7, #32]
 8005e18:	f001 ff9e 	bl	8007d58 <atan2f>
 8005e1c:	eef0 7a40 	vmov.f32	s15, s0
 8005e20:	eef1 7a67 	vneg.f32	s15, s15
 8005e24:	edc7 7a01 	vstr	s15, [r7, #4]

	mx = mx * cos(roll) + my * sin(roll) * sin(pitch) + mz * sin(roll) * cos(pitch);
 8005e28:	6978      	ldr	r0, [r7, #20]
 8005e2a:	f7fa fb31 	bl	8000490 <__aeabi_f2d>
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	68b8      	ldr	r0, [r7, #8]
 8005e34:	f7fa fb2c 	bl	8000490 <__aeabi_f2d>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	ec43 2b10 	vmov	d0, r2, r3
 8005e40:	f001 fe16 	bl	8007a70 <cos>
 8005e44:	ec53 2b10 	vmov	r2, r3, d0
 8005e48:	4620      	mov	r0, r4
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f7fa fb78 	bl	8000540 <__aeabi_dmul>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4690      	mov	r8, r2
 8005e56:	4699      	mov	r9, r3
 8005e58:	6938      	ldr	r0, [r7, #16]
 8005e5a:	f7fa fb19 	bl	8000490 <__aeabi_f2d>
 8005e5e:	4604      	mov	r4, r0
 8005e60:	460d      	mov	r5, r1
 8005e62:	68b8      	ldr	r0, [r7, #8]
 8005e64:	f7fa fb14 	bl	8000490 <__aeabi_f2d>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	ec43 2b10 	vmov	d0, r2, r3
 8005e70:	f001 fe52 	bl	8007b18 <sin>
 8005e74:	ec53 2b10 	vmov	r2, r3, d0
 8005e78:	4620      	mov	r0, r4
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	f7fa fb60 	bl	8000540 <__aeabi_dmul>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4614      	mov	r4, r2
 8005e86:	461d      	mov	r5, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7fa fb01 	bl	8000490 <__aeabi_f2d>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	ec43 2b10 	vmov	d0, r2, r3
 8005e96:	f001 fe3f 	bl	8007b18 <sin>
 8005e9a:	ec53 2b10 	vmov	r2, r3, d0
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	4629      	mov	r1, r5
 8005ea2:	f7fa fb4d 	bl	8000540 <__aeabi_dmul>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4640      	mov	r0, r8
 8005eac:	4649      	mov	r1, r9
 8005eae:	f7fa f991 	bl	80001d4 <__adddf3>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4690      	mov	r8, r2
 8005eb8:	4699      	mov	r9, r3
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7fa fae8 	bl	8000490 <__aeabi_f2d>
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	68b8      	ldr	r0, [r7, #8]
 8005ec6:	f7fa fae3 	bl	8000490 <__aeabi_f2d>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	ec43 2b10 	vmov	d0, r2, r3
 8005ed2:	f001 fe21 	bl	8007b18 <sin>
 8005ed6:	ec53 2b10 	vmov	r2, r3, d0
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f7fa fb2f 	bl	8000540 <__aeabi_dmul>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4614      	mov	r4, r2
 8005ee8:	461d      	mov	r5, r3
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fa fad0 	bl	8000490 <__aeabi_f2d>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	ec43 2b10 	vmov	d0, r2, r3
 8005ef8:	f001 fdba 	bl	8007a70 <cos>
 8005efc:	ec53 2b10 	vmov	r2, r3, d0
 8005f00:	4620      	mov	r0, r4
 8005f02:	4629      	mov	r1, r5
 8005f04:	f7fa fb1c 	bl	8000540 <__aeabi_dmul>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	4649      	mov	r1, r9
 8005f10:	f7fa f960 	bl	80001d4 <__adddf3>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	f7fa fde8 	bl	8000af0 <__aeabi_d2f>
 8005f20:	4603      	mov	r3, r0
 8005f22:	617b      	str	r3, [r7, #20]
	my = my * cos(pitch) - mz * sin(pitch);
 8005f24:	6938      	ldr	r0, [r7, #16]
 8005f26:	f7fa fab3 	bl	8000490 <__aeabi_f2d>
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	460d      	mov	r5, r1
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fa faae 	bl	8000490 <__aeabi_f2d>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	ec43 2b10 	vmov	d0, r2, r3
 8005f3c:	f001 fd98 	bl	8007a70 <cos>
 8005f40:	ec53 2b10 	vmov	r2, r3, d0
 8005f44:	4620      	mov	r0, r4
 8005f46:	4629      	mov	r1, r5
 8005f48:	f7fa fafa 	bl	8000540 <__aeabi_dmul>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4690      	mov	r8, r2
 8005f52:	4699      	mov	r9, r3
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f7fa fa9b 	bl	8000490 <__aeabi_f2d>
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	460d      	mov	r5, r1
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fa fa96 	bl	8000490 <__aeabi_f2d>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	ec43 2b10 	vmov	d0, r2, r3
 8005f6c:	f001 fdd4 	bl	8007b18 <sin>
 8005f70:	ec53 2b10 	vmov	r2, r3, d0
 8005f74:	4620      	mov	r0, r4
 8005f76:	4629      	mov	r1, r5
 8005f78:	f7fa fae2 	bl	8000540 <__aeabi_dmul>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4640      	mov	r0, r8
 8005f82:	4649      	mov	r1, r9
 8005f84:	f7fa f924 	bl	80001d0 <__aeabi_dsub>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	4619      	mov	r1, r3
 8005f90:	f7fa fdae 	bl	8000af0 <__aeabi_d2f>
 8005f94:	4603      	mov	r3, r0
 8005f96:	613b      	str	r3, [r7, #16]
	yaw = -atan2f(my, mx);//此处为负结果才是正确的
 8005f98:	edd7 0a05 	vldr	s1, [r7, #20]
 8005f9c:	ed97 0a04 	vldr	s0, [r7, #16]
 8005fa0:	f001 feda 	bl	8007d58 <atan2f>
 8005fa4:	eef0 7a40 	vmov.f32	s15, s0
 8005fa8:	eef1 7a67 	vneg.f32	s15, s15
 8005fac:	edc7 7a00 	vstr	s15, [r7]

	g_imu_struct.roll = roll;
 8005fb0:	4a09      	ldr	r2, [pc, #36]	; (8005fd8 <IMU_GetInit_Angle+0x2b8>)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6293      	str	r3, [r2, #40]	; 0x28
    g_imu_struct.pitch = pitch;
 8005fb6:	4a08      	ldr	r2, [pc, #32]	; (8005fd8 <IMU_GetInit_Angle+0x2b8>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	62d3      	str	r3, [r2, #44]	; 0x2c
    g_imu_struct.yaw = yaw;
 8005fbc:	4a06      	ldr	r2, [pc, #24]	; (8005fd8 <IMU_GetInit_Angle+0x2b8>)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6313      	str	r3, [r2, #48]	; 0x30

}
 8005fc2:	bf00      	nop
 8005fc4:	3728      	adds	r7, #40	; 0x28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005fcc:	f3af 8000 	nop.w
 8005fd0:	00000000 	.word	0x00000000
 8005fd4:	40000000 	.word	0x40000000
 8005fd8:	2000000c 	.word	0x2000000c

08005fdc <Init_Quaternions>:

static void Init_Quaternions(void)
{
 8005fdc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
	float roll;
	float pitch;
	float yaw;

	IMU_GetInit_Angle();
 8005fe4:	f7ff fe9c 	bl	8005d20 <IMU_GetInit_Angle>

	roll = g_imu_struct.roll;
 8005fe8:	4bf5      	ldr	r3, [pc, #980]	; (80063c0 <Init_Quaternions+0x3e4>)
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	60fb      	str	r3, [r7, #12]
	pitch = g_imu_struct.pitch;
 8005fee:	4bf4      	ldr	r3, [pc, #976]	; (80063c0 <Init_Quaternions+0x3e4>)
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	60bb      	str	r3, [r7, #8]
	yaw = g_imu_struct.yaw;
 8005ff4:	4bf2      	ldr	r3, [pc, #968]	; (80063c0 <Init_Quaternions+0x3e4>)
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	607b      	str	r3, [r7, #4]


	g_imu_struct.quat.q0 = cos(roll / 2)*cos(pitch / 2)*cos(yaw / 2) + sin(roll / 2)*sin(pitch / 2)*sin(yaw / 2);
 8005ffa:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ffe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006002:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006006:	ee16 0a90 	vmov	r0, s13
 800600a:	f7fa fa41 	bl	8000490 <__aeabi_f2d>
 800600e:	4602      	mov	r2, r0
 8006010:	460b      	mov	r3, r1
 8006012:	ec43 2b10 	vmov	d0, r2, r3
 8006016:	f001 fd2b 	bl	8007a70 <cos>
 800601a:	ec55 4b10 	vmov	r4, r5, d0
 800601e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006022:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006026:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800602a:	ee16 0a90 	vmov	r0, s13
 800602e:	f7fa fa2f 	bl	8000490 <__aeabi_f2d>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	ec43 2b10 	vmov	d0, r2, r3
 800603a:	f001 fd19 	bl	8007a70 <cos>
 800603e:	ec53 2b10 	vmov	r2, r3, d0
 8006042:	4620      	mov	r0, r4
 8006044:	4629      	mov	r1, r5
 8006046:	f7fa fa7b 	bl	8000540 <__aeabi_dmul>
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	4614      	mov	r4, r2
 8006050:	461d      	mov	r5, r3
 8006052:	edd7 7a01 	vldr	s15, [r7, #4]
 8006056:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800605a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800605e:	ee16 0a90 	vmov	r0, s13
 8006062:	f7fa fa15 	bl	8000490 <__aeabi_f2d>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	ec43 2b10 	vmov	d0, r2, r3
 800606e:	f001 fcff 	bl	8007a70 <cos>
 8006072:	ec53 2b10 	vmov	r2, r3, d0
 8006076:	4620      	mov	r0, r4
 8006078:	4629      	mov	r1, r5
 800607a:	f7fa fa61 	bl	8000540 <__aeabi_dmul>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4614      	mov	r4, r2
 8006084:	461d      	mov	r5, r3
 8006086:	edd7 7a03 	vldr	s15, [r7, #12]
 800608a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800608e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006092:	ee16 0a90 	vmov	r0, s13
 8006096:	f7fa f9fb 	bl	8000490 <__aeabi_f2d>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	ec43 2b10 	vmov	d0, r2, r3
 80060a2:	f001 fd39 	bl	8007b18 <sin>
 80060a6:	ec59 8b10 	vmov	r8, r9, d0
 80060aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80060ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80060b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060b6:	ee16 0a90 	vmov	r0, s13
 80060ba:	f7fa f9e9 	bl	8000490 <__aeabi_f2d>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	ec43 2b10 	vmov	d0, r2, r3
 80060c6:	f001 fd27 	bl	8007b18 <sin>
 80060ca:	ec53 2b10 	vmov	r2, r3, d0
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	f7fa fa35 	bl	8000540 <__aeabi_dmul>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4690      	mov	r8, r2
 80060dc:	4699      	mov	r9, r3
 80060de:	edd7 7a01 	vldr	s15, [r7, #4]
 80060e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80060e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060ea:	ee16 0a90 	vmov	r0, s13
 80060ee:	f7fa f9cf 	bl	8000490 <__aeabi_f2d>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	ec43 2b10 	vmov	d0, r2, r3
 80060fa:	f001 fd0d 	bl	8007b18 <sin>
 80060fe:	ec53 2b10 	vmov	r2, r3, d0
 8006102:	4640      	mov	r0, r8
 8006104:	4649      	mov	r1, r9
 8006106:	f7fa fa1b 	bl	8000540 <__aeabi_dmul>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4620      	mov	r0, r4
 8006110:	4629      	mov	r1, r5
 8006112:	f7fa f85f 	bl	80001d4 <__adddf3>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4610      	mov	r0, r2
 800611c:	4619      	mov	r1, r3
 800611e:	f7fa fce7 	bl	8000af0 <__aeabi_d2f>
 8006122:	4603      	mov	r3, r0
 8006124:	4aa6      	ldr	r2, [pc, #664]	; (80063c0 <Init_Quaternions+0x3e4>)
 8006126:	6353      	str	r3, [r2, #52]	; 0x34
	g_imu_struct.quat.q1 = sin(roll / 2)*cos(pitch / 2)*cos(yaw / 2) - cos(roll / 2)*sin(pitch / 2)*sin(yaw / 2);
 8006128:	edd7 7a03 	vldr	s15, [r7, #12]
 800612c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006130:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006134:	ee16 0a90 	vmov	r0, s13
 8006138:	f7fa f9aa 	bl	8000490 <__aeabi_f2d>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	ec43 2b10 	vmov	d0, r2, r3
 8006144:	f001 fce8 	bl	8007b18 <sin>
 8006148:	ec55 4b10 	vmov	r4, r5, d0
 800614c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006150:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006154:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006158:	ee16 0a90 	vmov	r0, s13
 800615c:	f7fa f998 	bl	8000490 <__aeabi_f2d>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	ec43 2b10 	vmov	d0, r2, r3
 8006168:	f001 fc82 	bl	8007a70 <cos>
 800616c:	ec53 2b10 	vmov	r2, r3, d0
 8006170:	4620      	mov	r0, r4
 8006172:	4629      	mov	r1, r5
 8006174:	f7fa f9e4 	bl	8000540 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4614      	mov	r4, r2
 800617e:	461d      	mov	r5, r3
 8006180:	edd7 7a01 	vldr	s15, [r7, #4]
 8006184:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006188:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800618c:	ee16 0a90 	vmov	r0, s13
 8006190:	f7fa f97e 	bl	8000490 <__aeabi_f2d>
 8006194:	4602      	mov	r2, r0
 8006196:	460b      	mov	r3, r1
 8006198:	ec43 2b10 	vmov	d0, r2, r3
 800619c:	f001 fc68 	bl	8007a70 <cos>
 80061a0:	ec53 2b10 	vmov	r2, r3, d0
 80061a4:	4620      	mov	r0, r4
 80061a6:	4629      	mov	r1, r5
 80061a8:	f7fa f9ca 	bl	8000540 <__aeabi_dmul>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4614      	mov	r4, r2
 80061b2:	461d      	mov	r5, r3
 80061b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80061b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80061bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061c0:	ee16 0a90 	vmov	r0, s13
 80061c4:	f7fa f964 	bl	8000490 <__aeabi_f2d>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	ec43 2b10 	vmov	d0, r2, r3
 80061d0:	f001 fc4e 	bl	8007a70 <cos>
 80061d4:	ec59 8b10 	vmov	r8, r9, d0
 80061d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80061dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80061e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061e4:	ee16 0a90 	vmov	r0, s13
 80061e8:	f7fa f952 	bl	8000490 <__aeabi_f2d>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	ec43 2b10 	vmov	d0, r2, r3
 80061f4:	f001 fc90 	bl	8007b18 <sin>
 80061f8:	ec53 2b10 	vmov	r2, r3, d0
 80061fc:	4640      	mov	r0, r8
 80061fe:	4649      	mov	r1, r9
 8006200:	f7fa f99e 	bl	8000540 <__aeabi_dmul>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4690      	mov	r8, r2
 800620a:	4699      	mov	r9, r3
 800620c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006210:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006214:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006218:	ee16 0a90 	vmov	r0, s13
 800621c:	f7fa f938 	bl	8000490 <__aeabi_f2d>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	ec43 2b10 	vmov	d0, r2, r3
 8006228:	f001 fc76 	bl	8007b18 <sin>
 800622c:	ec53 2b10 	vmov	r2, r3, d0
 8006230:	4640      	mov	r0, r8
 8006232:	4649      	mov	r1, r9
 8006234:	f7fa f984 	bl	8000540 <__aeabi_dmul>
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	4620      	mov	r0, r4
 800623e:	4629      	mov	r1, r5
 8006240:	f7f9 ffc6 	bl	80001d0 <__aeabi_dsub>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4610      	mov	r0, r2
 800624a:	4619      	mov	r1, r3
 800624c:	f7fa fc50 	bl	8000af0 <__aeabi_d2f>
 8006250:	4603      	mov	r3, r0
 8006252:	4a5b      	ldr	r2, [pc, #364]	; (80063c0 <Init_Quaternions+0x3e4>)
 8006254:	6393      	str	r3, [r2, #56]	; 0x38
	g_imu_struct.quat.q2 = cos(roll / 2)*sin(pitch / 2)*cos(yaw / 2) + sin(roll / 2)*cos(pitch / 2)*sin(yaw / 2);
 8006256:	edd7 7a03 	vldr	s15, [r7, #12]
 800625a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800625e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006262:	ee16 0a90 	vmov	r0, s13
 8006266:	f7fa f913 	bl	8000490 <__aeabi_f2d>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	ec43 2b10 	vmov	d0, r2, r3
 8006272:	f001 fbfd 	bl	8007a70 <cos>
 8006276:	ec55 4b10 	vmov	r4, r5, d0
 800627a:	edd7 7a02 	vldr	s15, [r7, #8]
 800627e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006282:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006286:	ee16 0a90 	vmov	r0, s13
 800628a:	f7fa f901 	bl	8000490 <__aeabi_f2d>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	ec43 2b10 	vmov	d0, r2, r3
 8006296:	f001 fc3f 	bl	8007b18 <sin>
 800629a:	ec53 2b10 	vmov	r2, r3, d0
 800629e:	4620      	mov	r0, r4
 80062a0:	4629      	mov	r1, r5
 80062a2:	f7fa f94d 	bl	8000540 <__aeabi_dmul>
 80062a6:	4602      	mov	r2, r0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4614      	mov	r4, r2
 80062ac:	461d      	mov	r5, r3
 80062ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80062b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062ba:	ee16 0a90 	vmov	r0, s13
 80062be:	f7fa f8e7 	bl	8000490 <__aeabi_f2d>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	ec43 2b10 	vmov	d0, r2, r3
 80062ca:	f001 fbd1 	bl	8007a70 <cos>
 80062ce:	ec53 2b10 	vmov	r2, r3, d0
 80062d2:	4620      	mov	r0, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	f7fa f933 	bl	8000540 <__aeabi_dmul>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4614      	mov	r4, r2
 80062e0:	461d      	mov	r5, r3
 80062e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80062e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062ee:	ee16 0a90 	vmov	r0, s13
 80062f2:	f7fa f8cd 	bl	8000490 <__aeabi_f2d>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	ec43 2b10 	vmov	d0, r2, r3
 80062fe:	f001 fc0b 	bl	8007b18 <sin>
 8006302:	ec59 8b10 	vmov	r8, r9, d0
 8006306:	edd7 7a02 	vldr	s15, [r7, #8]
 800630a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800630e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006312:	ee16 0a90 	vmov	r0, s13
 8006316:	f7fa f8bb 	bl	8000490 <__aeabi_f2d>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	ec43 2b10 	vmov	d0, r2, r3
 8006322:	f001 fba5 	bl	8007a70 <cos>
 8006326:	ec53 2b10 	vmov	r2, r3, d0
 800632a:	4640      	mov	r0, r8
 800632c:	4649      	mov	r1, r9
 800632e:	f7fa f907 	bl	8000540 <__aeabi_dmul>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4690      	mov	r8, r2
 8006338:	4699      	mov	r9, r3
 800633a:	edd7 7a01 	vldr	s15, [r7, #4]
 800633e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006342:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006346:	ee16 0a90 	vmov	r0, s13
 800634a:	f7fa f8a1 	bl	8000490 <__aeabi_f2d>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	ec43 2b10 	vmov	d0, r2, r3
 8006356:	f001 fbdf 	bl	8007b18 <sin>
 800635a:	ec53 2b10 	vmov	r2, r3, d0
 800635e:	4640      	mov	r0, r8
 8006360:	4649      	mov	r1, r9
 8006362:	f7fa f8ed 	bl	8000540 <__aeabi_dmul>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4620      	mov	r0, r4
 800636c:	4629      	mov	r1, r5
 800636e:	f7f9 ff31 	bl	80001d4 <__adddf3>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4610      	mov	r0, r2
 8006378:	4619      	mov	r1, r3
 800637a:	f7fa fbb9 	bl	8000af0 <__aeabi_d2f>
 800637e:	4603      	mov	r3, r0
 8006380:	4a0f      	ldr	r2, [pc, #60]	; (80063c0 <Init_Quaternions+0x3e4>)
 8006382:	63d3      	str	r3, [r2, #60]	; 0x3c
	g_imu_struct.quat.q3 = cos(roll / 2)*cos(pitch / 2)*sin(yaw / 2) + sin(roll / 2)*sin(pitch / 2)*cos(yaw / 2);
 8006384:	edd7 7a03 	vldr	s15, [r7, #12]
 8006388:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800638c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006390:	ee16 0a90 	vmov	r0, s13
 8006394:	f7fa f87c 	bl	8000490 <__aeabi_f2d>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	ec43 2b10 	vmov	d0, r2, r3
 80063a0:	f001 fb66 	bl	8007a70 <cos>
 80063a4:	ec55 4b10 	vmov	r4, r5, d0
 80063a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80063ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80063b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063b4:	ee16 0a90 	vmov	r0, s13
 80063b8:	f7fa f86a 	bl	8000490 <__aeabi_f2d>
 80063bc:	e002      	b.n	80063c4 <Init_Quaternions+0x3e8>
 80063be:	bf00      	nop
 80063c0:	2000000c 	.word	0x2000000c
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	ec43 2b10 	vmov	d0, r2, r3
 80063cc:	f001 fb50 	bl	8007a70 <cos>
 80063d0:	ec53 2b10 	vmov	r2, r3, d0
 80063d4:	4620      	mov	r0, r4
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7fa f8b2 	bl	8000540 <__aeabi_dmul>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4614      	mov	r4, r2
 80063e2:	461d      	mov	r5, r3
 80063e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80063e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80063ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063f0:	ee16 0a90 	vmov	r0, s13
 80063f4:	f7fa f84c 	bl	8000490 <__aeabi_f2d>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	ec43 2b10 	vmov	d0, r2, r3
 8006400:	f001 fb8a 	bl	8007b18 <sin>
 8006404:	ec53 2b10 	vmov	r2, r3, d0
 8006408:	4620      	mov	r0, r4
 800640a:	4629      	mov	r1, r5
 800640c:	f7fa f898 	bl	8000540 <__aeabi_dmul>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4614      	mov	r4, r2
 8006416:	461d      	mov	r5, r3
 8006418:	edd7 7a03 	vldr	s15, [r7, #12]
 800641c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006420:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006424:	ee16 0a90 	vmov	r0, s13
 8006428:	f7fa f832 	bl	8000490 <__aeabi_f2d>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	ec43 2b10 	vmov	d0, r2, r3
 8006434:	f001 fb70 	bl	8007b18 <sin>
 8006438:	ec59 8b10 	vmov	r8, r9, d0
 800643c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006440:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006444:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006448:	ee16 0a90 	vmov	r0, s13
 800644c:	f7fa f820 	bl	8000490 <__aeabi_f2d>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	ec43 2b10 	vmov	d0, r2, r3
 8006458:	f001 fb5e 	bl	8007b18 <sin>
 800645c:	ec53 2b10 	vmov	r2, r3, d0
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7fa f86c 	bl	8000540 <__aeabi_dmul>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4690      	mov	r8, r2
 800646e:	4699      	mov	r9, r3
 8006470:	edd7 7a01 	vldr	s15, [r7, #4]
 8006474:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006478:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800647c:	ee16 0a90 	vmov	r0, s13
 8006480:	f7fa f806 	bl	8000490 <__aeabi_f2d>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	ec43 2b10 	vmov	d0, r2, r3
 800648c:	f001 faf0 	bl	8007a70 <cos>
 8006490:	ec53 2b10 	vmov	r2, r3, d0
 8006494:	4640      	mov	r0, r8
 8006496:	4649      	mov	r1, r9
 8006498:	f7fa f852 	bl	8000540 <__aeabi_dmul>
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	4620      	mov	r0, r4
 80064a2:	4629      	mov	r1, r5
 80064a4:	f7f9 fe96 	bl	80001d4 <__adddf3>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	f7fa fb1e 	bl	8000af0 <__aeabi_d2f>
 80064b4:	4603      	mov	r3, r0
 80064b6:	4a03      	ldr	r2, [pc, #12]	; (80064c4 <Init_Quaternions+0x4e8>)
 80064b8:	6413      	str	r3, [r2, #64]	; 0x40


}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80064c4:	2000000c 	.word	0x2000000c

080064c8 <IMU_GetData>:
static void IMU_GetData(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
	int16_t accdata[3];
	int16_t gyrodata[3];
	int16_t magdata[3];
	BMI088_Getdata_Acc_raw(accdata);
 80064ce:	f107 0310 	add.w	r3, r7, #16
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff f9f8 	bl	80058c8 <BMI088_Getdata_Acc_raw>
	BMI088_Getdata_Gyro_raw(gyrodata);
 80064d8:	f107 0308 	add.w	r3, r7, #8
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff fa1f 	bl	8005920 <BMI088_Getdata_Gyro_raw>
	IST8310_Getdata_Mag_raw(magdata);
 80064e2:	463b      	mov	r3, r7
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fe25 	bl	8007134 <IST8310_Getdata_Mag_raw>
	g_imu_struct.temperature =  BMI088_Get_Temperature();
 80064ea:	f7ff f9bb 	bl	8005864 <BMI088_Get_Temperature>
 80064ee:	eef0 7a40 	vmov.f32	s15, s0
 80064f2:	4b15      	ldr	r3, [pc, #84]	; (8006548 <IMU_GetData+0x80>)
 80064f4:	edc3 7a08 	vstr	s15, [r3, #32]
	g_imu_struct.ax_raw = accdata[0];
 80064f8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80064fc:	4b12      	ldr	r3, [pc, #72]	; (8006548 <IMU_GetData+0x80>)
 80064fe:	801a      	strh	r2, [r3, #0]
	g_imu_struct.ay_raw = accdata[1];
 8006500:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006504:	4b10      	ldr	r3, [pc, #64]	; (8006548 <IMU_GetData+0x80>)
 8006506:	805a      	strh	r2, [r3, #2]
	g_imu_struct.az_raw = accdata[2];
 8006508:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800650c:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <IMU_GetData+0x80>)
 800650e:	809a      	strh	r2, [r3, #4]
	g_imu_struct.gx_raw = gyrodata[0];
 8006510:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006514:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <IMU_GetData+0x80>)
 8006516:	80da      	strh	r2, [r3, #6]
	g_imu_struct.gy_raw = gyrodata[1];
 8006518:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <IMU_GetData+0x80>)
 800651e:	811a      	strh	r2, [r3, #8]
	g_imu_struct.gz_raw = gyrodata[2];
 8006520:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006524:	4b08      	ldr	r3, [pc, #32]	; (8006548 <IMU_GetData+0x80>)
 8006526:	815a      	strh	r2, [r3, #10]
	g_imu_struct.mx_raw = magdata[0];
 8006528:	f9b7 2000 	ldrsh.w	r2, [r7]
 800652c:	4b06      	ldr	r3, [pc, #24]	; (8006548 <IMU_GetData+0x80>)
 800652e:	819a      	strh	r2, [r3, #12]
	g_imu_struct.my_raw = magdata[1];
 8006530:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006534:	4b04      	ldr	r3, [pc, #16]	; (8006548 <IMU_GetData+0x80>)
 8006536:	81da      	strh	r2, [r3, #14]
	g_imu_struct.mz_raw = magdata[2];
 8006538:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800653c:	4b02      	ldr	r3, [pc, #8]	; (8006548 <IMU_GetData+0x80>)
 800653e:	821a      	strh	r2, [r3, #16]
}
 8006540:	bf00      	nop
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	2000000c 	.word	0x2000000c
 800654c:	00000000 	.word	0x00000000

08006550 <IMU_Data_Fusion_Mahony>:

//三传感器显式互补滤波数据融合解算姿态
void IMU_Data_Fusion_Mahony(float dt, float *roll, float *pitch, float *yaw)
{
 8006550:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006554:	b0b0      	sub	sp, #192	; 0xc0
 8006556:	af00      	add	r7, sp, #0
 8006558:	ed87 0a03 	vstr	s0, [r7, #12]
 800655c:	60b8      	str	r0, [r7, #8]
 800655e:	6079      	str	r1, [r7, #4]
 8006560:	603a      	str	r2, [r7, #0]
	float gx_rad, gy_rad, gz_rad;

	//四元数转余弦矩阵中间变量
	float g1, g2, g3, g4, g5;

	IMU_GetData();
 8006562:	f7ff ffb1 	bl	80064c8 <IMU_GetData>
	float ax = g_imu_struct.ax_raw;
 8006566:	4bf3      	ldr	r3, [pc, #972]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 8006568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006574:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float ay = g_imu_struct.ay_raw;
 8006578:	4bee      	ldr	r3, [pc, #952]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 800657a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006586:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	float az = g_imu_struct.az_raw;
 800658a:	4bea      	ldr	r3, [pc, #936]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 800658c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006590:	ee07 3a90 	vmov	s15, r3
 8006594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006598:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float mx = g_imu_struct.mx_raw;
 800659c:	4be5      	ldr	r3, [pc, #916]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 800659e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065aa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float my = g_imu_struct.my_raw;
 80065ae:	4be1      	ldr	r3, [pc, #900]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80065b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065bc:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float mz = g_imu_struct.mz_raw;
 80065c0:	4bdc      	ldr	r3, [pc, #880]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80065c2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ce:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	float q0 = g_imu_struct.quat.q0;
 80065d2:	4bd8      	ldr	r3, [pc, #864]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80065d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float q1 = g_imu_struct.quat.q1;
 80065da:	4bd6      	ldr	r3, [pc, #856]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float q2 = g_imu_struct.quat.q2;
 80065e2:	4bd4      	ldr	r3, [pc, #848]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float q3 = g_imu_struct.quat.q3;
 80065ea:	4bd2      	ldr	r3, [pc, #840]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    float q0q0 = q0 * q0;
 80065f2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80065f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065fa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    float q0q1 = q0 * q1;
 80065fe:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006602:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float q0q2 = q0 * q2;
 800660e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006612:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float q0q3 = q0 * q3;
 800661e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006622:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 800662e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006632:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006636:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 800663a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800663e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006646:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 800664a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800664e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006656:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float q2q2 = q2 * q2;
 800665a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800665e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006662:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    float q2q3 = q2 * q3;
 8006666:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800666a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800666e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006672:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float q3q3 = q3 * q3;
 8006676:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800667a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800667e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	//更新数据

	//零漂补偿并弧度制陀螺仪数据
	gx_rad = (g_imu_struct.gx_raw - g_imu_struct.gx_offset) * BMI088_GYRO_2000_SEN;
 8006682:	4bac      	ldr	r3, [pc, #688]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 8006684:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006688:	ee07 3a90 	vmov	s15, r3
 800668c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006690:	4ba8      	ldr	r3, [pc, #672]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 8006692:	edd3 7a05 	vldr	s15, [r3, #20]
 8006696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800669a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8006938 <IMU_Data_Fusion_Mahony+0x3e8>
 800669e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066a2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	gy_rad = (g_imu_struct.gy_raw - g_imu_struct.gy_offset) * BMI088_GYRO_2000_SEN;
 80066a6:	4ba3      	ldr	r3, [pc, #652]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80066a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066ac:	ee07 3a90 	vmov	s15, r3
 80066b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066b4:	4b9f      	ldr	r3, [pc, #636]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80066b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80066ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066be:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8006938 <IMU_Data_Fusion_Mahony+0x3e8>
 80066c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066c6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	gz_rad = (g_imu_struct.gz_raw - g_imu_struct.gz_offset) * BMI088_GYRO_2000_SEN;
 80066ca:	4b9a      	ldr	r3, [pc, #616]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80066cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80066d0:	ee07 3a90 	vmov	s15, r3
 80066d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066d8:	4b96      	ldr	r3, [pc, #600]	; (8006934 <IMU_Data_Fusion_Mahony+0x3e4>)
 80066da:	edd3 7a07 	vldr	s15, [r3, #28]
 80066de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066e2:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006938 <IMU_Data_Fusion_Mahony+0x3e8>
 80066e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066ea:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	//加速度归一化
	norm_temp = invSqrt(ax * ax + ay * ay + az * az);
 80066ee:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80066f2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80066f6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80066fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80066fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006702:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006706:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800670a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800670e:	eeb0 0a67 	vmov.f32	s0, s15
 8006712:	f7fe ff57 	bl	80055c4 <invSqrt>
 8006716:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	ax = ax * norm_temp;
 800671a:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800671e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006726:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	ay = ay * norm_temp;
 800672a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800672e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006736:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	az = az * norm_temp;
 800673a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800673e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006746:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	//磁力计归一化
#ifdef IST8310_IN_WORK
    norm_temp = invSqrt(mx * mx + my * my + mz * mz);
 800674a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800674e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006752:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8006756:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800675a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800675e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8006762:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800676a:	eeb0 0a67 	vmov.f32	s0, s15
 800676e:	f7fe ff29 	bl	80055c4 <invSqrt>
 8006772:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
    mx = mx * norm_temp;
 8006776:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800677a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800677e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006782:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    my = my * norm_temp;
 8006786:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800678a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    mz = mz * norm_temp;
 8006796:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800679a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800679e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a2:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    mx = 0;
    my = 0;
    mz = 0;
#endif
	//用陀螺仪的数据计算物体坐标系重力分量
    vx = 2.0f * (q1q3 - q0q2);
 80067a6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80067aa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80067ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067b6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    vy = 2.0f * (q0q1 + q2q3);
 80067ba:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80067be:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80067c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80067ca:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    vz = q0q0 - q1q1 - q2q2 + q3q3;
 80067ce:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80067d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80067d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80067da:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80067de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80067e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067ea:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	//用陀螺仪的数据计算物体坐标系磁力分量
    hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 80067ee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80067f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80067f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80067fa:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80067fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006802:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006806:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800680a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800680e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8006812:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006816:	ed97 6a20 	vldr	s12, [r7, #128]	; 0x80
 800681a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800681e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800682a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800682e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006832:	ed97 6a1f 	vldr	s12, [r7, #124]	; 0x7c
 8006836:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800683a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800683e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006846:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 800684a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800684e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006852:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8006856:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800685a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006862:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8006866:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800686a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800686e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8006872:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006876:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800687a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800687e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006882:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006886:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800688a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800688e:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 8006892:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8006896:	ee76 7a67 	vsub.f32	s15, s12, s15
 800689a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800689e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068a2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 80068a6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80068aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80068ae:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80068b2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80068b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80068ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068be:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80068c2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80068c6:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 80068ca:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80068ce:	ee76 7a27 	vadd.f32	s15, s12, s15
 80068d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068da:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80068de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80068e2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80068e6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80068ea:	ee36 6a67 	vsub.f32	s12, s12, s15
 80068ee:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80068f2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80068f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068fe:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    bx = sqrt((hx * hx) + (hy * hy));
 8006902:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006906:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800690a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800690e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006916:	ee17 0a90 	vmov	r0, s15
 800691a:	f7f9 fdb9 	bl	8000490 <__aeabi_f2d>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	ec43 2b10 	vmov	d0, r2, r3
 8006926:	f001 f9bf 	bl	8007ca8 <sqrt>
 800692a:	ec53 2b10 	vmov	r2, r3, d0
 800692e:	4610      	mov	r0, r2
 8006930:	4619      	mov	r1, r3
 8006932:	e003      	b.n	800693c <IMU_Data_Fusion_Mahony+0x3ec>
 8006934:	2000000c 	.word	0x2000000c
 8006938:	3a8ba058 	.word	0x3a8ba058
 800693c:	f7fa f8d8 	bl	8000af0 <__aeabi_d2f>
 8006940:	4603      	mov	r3, r0
 8006942:	647b      	str	r3, [r7, #68]	; 0x44
    bz = hz;
 8006944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006946:	643b      	str	r3, [r7, #64]	; 0x40


    wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 8006948:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800694c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006950:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006954:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006958:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800695c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006960:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006968:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800696c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006970:	ed97 6a1f 	vldr	s12, [r7, #124]	; 0x7c
 8006974:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006978:	ee76 7a67 	vsub.f32	s15, s12, s15
 800697c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006984:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 8006988:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800698c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006990:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8006994:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006998:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800699c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069a0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80069a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80069a8:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 80069ac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80069b0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80069b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069bc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 80069c0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80069c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80069c8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80069cc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80069d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80069dc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80069e0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80069e4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80069e8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80069ec:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80069f0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80069f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069fc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    //求姿态误差
    ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8006a00:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8006a04:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a0c:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8006a10:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a1c:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8006a20:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006a24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006a28:	ed97 6a2a 	vldr	s12, [r7, #168]	; 0xa8
 8006a2c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006a30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006a34:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a3c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8006a40:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8006a44:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006a48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a4c:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8006a50:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a5c:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8006a60:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006a64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006a68:	ed97 6a2c 	vldr	s12, [r7, #176]	; 0xb0
 8006a6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006a70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006a74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a7c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8006a80:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8006a84:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006a88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a8c:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8006a90:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006a94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a9c:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8006aa0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006aa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006aa8:	ed97 6a2b 	vldr	s12, [r7, #172]	; 0xac
 8006aac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006ab0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006ab4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006abc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28


	//误差积分
	ex_sum += Ki * dt * ex;
 8006ac0:	4beb      	ldr	r3, [pc, #940]	; (8006e70 <IMU_Data_Fusion_Mahony+0x920>)
 8006ac2:	ed93 7a00 	vldr	s14, [r3]
 8006ac6:	edd7 7a03 	vldr	s15, [r7, #12]
 8006aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ace:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ad6:	4be7      	ldr	r3, [pc, #924]	; (8006e74 <IMU_Data_Fusion_Mahony+0x924>)
 8006ad8:	edd3 7a00 	vldr	s15, [r3]
 8006adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ae0:	4be4      	ldr	r3, [pc, #912]	; (8006e74 <IMU_Data_Fusion_Mahony+0x924>)
 8006ae2:	edc3 7a00 	vstr	s15, [r3]
	ey_sum += Ki * dt * ey;
 8006ae6:	4be2      	ldr	r3, [pc, #904]	; (8006e70 <IMU_Data_Fusion_Mahony+0x920>)
 8006ae8:	ed93 7a00 	vldr	s14, [r3]
 8006aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8006af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006af4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006afc:	4bde      	ldr	r3, [pc, #888]	; (8006e78 <IMU_Data_Fusion_Mahony+0x928>)
 8006afe:	edd3 7a00 	vldr	s15, [r3]
 8006b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b06:	4bdc      	ldr	r3, [pc, #880]	; (8006e78 <IMU_Data_Fusion_Mahony+0x928>)
 8006b08:	edc3 7a00 	vstr	s15, [r3]
	ez_sum += Ki * dt * ez;
 8006b0c:	4bd8      	ldr	r3, [pc, #864]	; (8006e70 <IMU_Data_Fusion_Mahony+0x920>)
 8006b0e:	ed93 7a00 	vldr	s14, [r3]
 8006b12:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b22:	4bd6      	ldr	r3, [pc, #856]	; (8006e7c <IMU_Data_Fusion_Mahony+0x92c>)
 8006b24:	edd3 7a00 	vldr	s15, [r3]
 8006b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b2c:	4bd3      	ldr	r3, [pc, #844]	; (8006e7c <IMU_Data_Fusion_Mahony+0x92c>)
 8006b2e:	edc3 7a00 	vstr	s15, [r3]
	//互补滤波
	gx_rad = gx_rad + Kp * ex + ex_sum;
 8006b32:	4bd3      	ldr	r3, [pc, #844]	; (8006e80 <IMU_Data_Fusion_Mahony+0x930>)
 8006b34:	ed93 7a00 	vldr	s14, [r3]
 8006b38:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b48:	4bca      	ldr	r3, [pc, #808]	; (8006e74 <IMU_Data_Fusion_Mahony+0x924>)
 8006b4a:	edd3 7a00 	vldr	s15, [r3]
 8006b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b52:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	gy_rad = gy_rad + Kp * ey + ey_sum;
 8006b56:	4bca      	ldr	r3, [pc, #808]	; (8006e80 <IMU_Data_Fusion_Mahony+0x930>)
 8006b58:	ed93 7a00 	vldr	s14, [r3]
 8006b5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006b60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b64:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b6c:	4bc2      	ldr	r3, [pc, #776]	; (8006e78 <IMU_Data_Fusion_Mahony+0x928>)
 8006b6e:	edd3 7a00 	vldr	s15, [r3]
 8006b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b76:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	gz_rad = gz_rad + Kp * ez + ez_sum;
 8006b7a:	4bc1      	ldr	r3, [pc, #772]	; (8006e80 <IMU_Data_Fusion_Mahony+0x930>)
 8006b7c:	ed93 7a00 	vldr	s14, [r3]
 8006b80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8006b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b88:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b90:	4bba      	ldr	r3, [pc, #744]	; (8006e7c <IMU_Data_Fusion_Mahony+0x92c>)
 8006b92:	edd3 7a00 	vldr	s15, [r3]
 8006b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b9a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
//    now_update = HAL_GetTick(); //ms
//    halfperiod = ((float)(now_update - last_update) / 2000.0f);
//    last_update = now_update;

	//解四元数微分方程更新四元数
	q0 = q0 +  0.5 * dt *(-gx_rad * q1 - gy_rad * q2 - gz_rad * q3);
 8006b9e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006ba2:	f7f9 fc75 	bl	8000490 <__aeabi_f2d>
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	460d      	mov	r5, r1
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7f9 fc70 	bl	8000490 <__aeabi_f2d>
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	4bb3      	ldr	r3, [pc, #716]	; (8006e84 <IMU_Data_Fusion_Mahony+0x934>)
 8006bb6:	f7f9 fcc3 	bl	8000540 <__aeabi_dmul>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4690      	mov	r8, r2
 8006bc0:	4699      	mov	r9, r3
 8006bc2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006bc6:	eeb1 7a67 	vneg.f32	s14, s15
 8006bca:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bd2:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006bd6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006be2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006be6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bf2:	ee17 0a90 	vmov	r0, s15
 8006bf6:	f7f9 fc4b 	bl	8000490 <__aeabi_f2d>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4649      	mov	r1, r9
 8006c02:	f7f9 fc9d 	bl	8000540 <__aeabi_dmul>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	f7f9 fae1 	bl	80001d4 <__adddf3>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4610      	mov	r0, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	f7f9 ff69 	bl	8000af0 <__aeabi_d2f>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	q1 = q1 +  0.5 * dt *( gx_rad * q0 - gy_rad * q3 + gz_rad * q2);
 8006c24:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006c28:	f7f9 fc32 	bl	8000490 <__aeabi_f2d>
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	460d      	mov	r5, r1
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7f9 fc2d 	bl	8000490 <__aeabi_f2d>
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	4b92      	ldr	r3, [pc, #584]	; (8006e84 <IMU_Data_Fusion_Mahony+0x934>)
 8006c3c:	f7f9 fc80 	bl	8000540 <__aeabi_dmul>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4690      	mov	r8, r2
 8006c46:	4699      	mov	r9, r3
 8006c48:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8006c4c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c54:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006c58:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c64:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006c68:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c74:	ee17 0a90 	vmov	r0, s15
 8006c78:	f7f9 fc0a 	bl	8000490 <__aeabi_f2d>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4640      	mov	r0, r8
 8006c82:	4649      	mov	r1, r9
 8006c84:	f7f9 fc5c 	bl	8000540 <__aeabi_dmul>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	4629      	mov	r1, r5
 8006c90:	f7f9 faa0 	bl	80001d4 <__adddf3>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f7f9 ff28 	bl	8000af0 <__aeabi_d2f>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	q2 = q2 +  0.5 * dt *( gx_rad * q3 + gy_rad * q0 - gz_rad * q1);
 8006ca6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8006caa:	f7f9 fbf1 	bl	8000490 <__aeabi_f2d>
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7f9 fbec 	bl	8000490 <__aeabi_f2d>
 8006cb8:	f04f 0200 	mov.w	r2, #0
 8006cbc:	4b71      	ldr	r3, [pc, #452]	; (8006e84 <IMU_Data_Fusion_Mahony+0x934>)
 8006cbe:	f7f9 fc3f 	bl	8000540 <__aeabi_dmul>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4690      	mov	r8, r2
 8006cc8:	4699      	mov	r9, r3
 8006cca:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8006cce:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cd6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006cda:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ce6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006cea:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cf6:	ee17 0a90 	vmov	r0, s15
 8006cfa:	f7f9 fbc9 	bl	8000490 <__aeabi_f2d>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	f7f9 fc1b 	bl	8000540 <__aeabi_dmul>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4620      	mov	r0, r4
 8006d10:	4629      	mov	r1, r5
 8006d12:	f7f9 fa5f 	bl	80001d4 <__adddf3>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f7f9 fee7 	bl	8000af0 <__aeabi_d2f>
 8006d22:	4603      	mov	r3, r0
 8006d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	q3 = q3 +  0.5 * dt *(-gx_rad * q2 + gy_rad * q1 + gz_rad * q0);
 8006d28:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006d2c:	f7f9 fbb0 	bl	8000490 <__aeabi_f2d>
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7f9 fbab 	bl	8000490 <__aeabi_f2d>
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	4b51      	ldr	r3, [pc, #324]	; (8006e84 <IMU_Data_Fusion_Mahony+0x934>)
 8006d40:	f7f9 fbfe 	bl	8000540 <__aeabi_dmul>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4690      	mov	r8, r2
 8006d4a:	4699      	mov	r9, r3
 8006d4c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006d50:	eeb1 7a67 	vneg.f32	s14, s15
 8006d54:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006d58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d5c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006d60:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d6c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006d70:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d7c:	ee17 0a90 	vmov	r0, s15
 8006d80:	f7f9 fb86 	bl	8000490 <__aeabi_f2d>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4640      	mov	r0, r8
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	f7f9 fbd8 	bl	8000540 <__aeabi_dmul>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 fa1c 	bl	80001d4 <__adddf3>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4610      	mov	r0, r2
 8006da2:	4619      	mov	r1, r3
 8006da4:	f7f9 fea4 	bl	8000af0 <__aeabi_d2f>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	//四元数归一化
	norm_temp = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8006dae:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006db2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006db6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006dba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006dbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006dc2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006dc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006dca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006dce:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006dd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dda:	eeb0 0a67 	vmov.f32	s0, s15
 8006dde:	f7fe fbf1 	bl	80055c4 <invSqrt>
 8006de2:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	q0 = q0 * norm_temp;
 8006de6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006dea:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	q1 = q1 * norm_temp;
 8006df6:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006dfa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e02:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	q2 = q2 * norm_temp;
 8006e06:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8006e0a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e12:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	q3 = q3 * norm_temp;
 8006e16:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8006e1a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	//将更新后的四元数存到到g_imu_struct中
	g_imu_struct.quat.q0 = q0;
 8006e26:	4a18      	ldr	r2, [pc, #96]	; (8006e88 <IMU_Data_Fusion_Mahony+0x938>)
 8006e28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006e2c:	6353      	str	r3, [r2, #52]	; 0x34
	g_imu_struct.quat.q1 = q1;
 8006e2e:	4a16      	ldr	r2, [pc, #88]	; (8006e88 <IMU_Data_Fusion_Mahony+0x938>)
 8006e30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e34:	6393      	str	r3, [r2, #56]	; 0x38
	g_imu_struct.quat.q2 = q2;
 8006e36:	4a14      	ldr	r2, [pc, #80]	; (8006e88 <IMU_Data_Fusion_Mahony+0x938>)
 8006e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e3c:	63d3      	str	r3, [r2, #60]	; 0x3c
	g_imu_struct.quat.q3 = q3;
 8006e3e:	4a12      	ldr	r2, [pc, #72]	; (8006e88 <IMU_Data_Fusion_Mahony+0x938>)
 8006e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e44:	6413      	str	r3, [r2, #64]	; 0x40
	//四元数转旋转矩阵
	g1 = 2.0f * (q1 * q3 - q0 * q2);
 8006e46:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006e4a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e52:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8006e56:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006e66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	g2 = 2.0f * (q0 * q1 + q2 * q3);
 8006e6a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006e6e:	e00d      	b.n	8006e8c <IMU_Data_Fusion_Mahony+0x93c>
 8006e70:	20000050 	.word	0x20000050
 8006e74:	20000288 	.word	0x20000288
 8006e78:	2000028c 	.word	0x2000028c
 8006e7c:	20000290 	.word	0x20000290
 8006e80:	20000054 	.word	0x20000054
 8006e84:	3fe00000 	.word	0x3fe00000
 8006e88:	2000000c 	.word	0x2000000c
 8006e8c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006e90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e94:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8006e98:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ea4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006ea8:	edc7 7a08 	vstr	s15, [r7, #32]
	g3 = q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3;
 8006eac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006eb0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006eb4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006eb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ebc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ec0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006ec4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ec8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ecc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006ed0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ed8:	edc7 7a07 	vstr	s15, [r7, #28]
	g4 = 2.0f * (q1 * q2 + q0 * q3);
 8006edc:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006ee0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006ee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ee8:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8006eec:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ef8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006efc:	edc7 7a06 	vstr	s15, [r7, #24]
	g5 = q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3;
 8006f00:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006f04:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006f08:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006f0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006f10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006f14:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006f18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006f1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f20:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006f24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f2c:	edc7 7a05 	vstr	s15, [r7, #20]

	*roll = atan2f(g2,g3) * 57.29578;
 8006f30:	edd7 0a07 	vldr	s1, [r7, #28]
 8006f34:	ed97 0a08 	vldr	s0, [r7, #32]
 8006f38:	f000 ff0e 	bl	8007d58 <atan2f>
 8006f3c:	ee10 3a10 	vmov	r3, s0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7f9 faa5 	bl	8000490 <__aeabi_f2d>
 8006f46:	a324      	add	r3, pc, #144	; (adr r3, 8006fd8 <IMU_Data_Fusion_Mahony+0xa88>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 faf8 	bl	8000540 <__aeabi_dmul>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4610      	mov	r0, r2
 8006f56:	4619      	mov	r1, r3
 8006f58:	f7f9 fdca 	bl	8000af0 <__aeabi_d2f>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	601a      	str	r2, [r3, #0]
	*pitch = -asinf(g1) * 57.29578;
 8006f62:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8006f66:	f000 fecb 	bl	8007d00 <asinf>
 8006f6a:	eef0 7a40 	vmov.f32	s15, s0
 8006f6e:	eef1 7a67 	vneg.f32	s15, s15
 8006f72:	ee17 3a90 	vmov	r3, s15
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7f9 fa8a 	bl	8000490 <__aeabi_f2d>
 8006f7c:	a316      	add	r3, pc, #88	; (adr r3, 8006fd8 <IMU_Data_Fusion_Mahony+0xa88>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 fadd 	bl	8000540 <__aeabi_dmul>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	f7f9 fdaf 	bl	8000af0 <__aeabi_d2f>
 8006f92:	4602      	mov	r2, r0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	601a      	str	r2, [r3, #0]
	*yaw = atan2f(g4, g5) * 57.29578;
 8006f98:	edd7 0a05 	vldr	s1, [r7, #20]
 8006f9c:	ed97 0a06 	vldr	s0, [r7, #24]
 8006fa0:	f000 feda 	bl	8007d58 <atan2f>
 8006fa4:	ee10 3a10 	vmov	r3, s0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7f9 fa71 	bl	8000490 <__aeabi_f2d>
 8006fae:	a30a      	add	r3, pc, #40	; (adr r3, 8006fd8 <IMU_Data_Fusion_Mahony+0xa88>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 fac4 	bl	8000540 <__aeabi_dmul>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4610      	mov	r0, r2
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f7f9 fd96 	bl	8000af0 <__aeabi_d2f>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	601a      	str	r2, [r3, #0]

}
 8006fca:	bf00      	nop
 8006fcc:	37c0      	adds	r7, #192	; 0xc0
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006fd4:	f3af 8000 	nop.w
 8006fd8:	1e7967cb 	.word	0x1e7967cb
 8006fdc:	404ca5dc 	.word	0x404ca5dc

08006fe0 <IMU_Temperature_Compensate>:

void IMU_Temperature_Compensate(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
			.limit.max_err_input = 100,
			.limit.max_i_out = IMU_TEMP_PWM_MAX - 100,
			.limit.max_total_out = IMU_TEMP_PWM_MAX
	};

	real_temp = BMI088_Get_Temperature();
 8006fe6:	f7fe fc3d 	bl	8005864 <BMI088_Get_Temperature>
 8006fea:	ed87 0a02 	vstr	s0, [r7, #8]
	temp_pid_out = Pid_Calculate(&s_temp_pidstruct, real_temp, IMU_MAX_TEMP_SET);
 8006fee:	eddf 0a11 	vldr	s1, [pc, #68]	; 8007034 <IMU_Temperature_Compensate+0x54>
 8006ff2:	ed97 0a02 	vldr	s0, [r7, #8]
 8006ff6:	4810      	ldr	r0, [pc, #64]	; (8007038 <IMU_Temperature_Compensate+0x58>)
 8006ff8:	f000 fc68 	bl	80078cc <Pid_Calculate>
 8006ffc:	ed87 0a01 	vstr	s0, [r7, #4]
	if(temp_pid_out < 0)
 8007000:	edd7 7a01 	vldr	s15, [r7, #4]
 8007004:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700c:	d502      	bpl.n	8007014 <IMU_Temperature_Compensate+0x34>
	{
		temp_pwm = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	81fb      	strh	r3, [r7, #14]
 8007012:	e006      	b.n	8007022 <IMU_Temperature_Compensate+0x42>
	}
	else
	{
		temp_pwm =  (uint16_t)temp_pid_out;
 8007014:	edd7 7a01 	vldr	s15, [r7, #4]
 8007018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701c:	ee17 3a90 	vmov	r3, s15
 8007020:	81fb      	strh	r3, [r7, #14]
	}
	__HAL_TIM_SetCompare(&htim10, TIM_CHANNEL_1, temp_pwm);
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <IMU_Temperature_Compensate+0x5c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	89fa      	ldrh	r2, [r7, #14]
 8007028:	635a      	str	r2, [r3, #52]	; 0x34
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	42200000 	.word	0x42200000
 8007038:	20000058 	.word	0x20000058
 800703c:	2000023c 	.word	0x2000023c

08007040 <IST8310_WriteReg>:
  * @param   reg_add:寄存器地址
	* @param	 reg_data:要写入的数据
  * @retval
  */
void IST8310_WriteReg(uint8_t reg_add,uint8_t reg_dat)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af04      	add	r7, sp, #16
 8007046:	4603      	mov	r3, r0
 8007048:	460a      	mov	r2, r1
 800704a:	71fb      	strb	r3, [r7, #7]
 800704c:	4613      	mov	r3, r2
 800704e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS << 1, reg_add, I2C_MEMADD_SIZE_8BIT, &reg_dat, 1, 0xff);
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	b29a      	uxth	r2, r3
 8007054:	23ff      	movs	r3, #255	; 0xff
 8007056:	9302      	str	r3, [sp, #8]
 8007058:	2301      	movs	r3, #1
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	1dbb      	adds	r3, r7, #6
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	2301      	movs	r3, #1
 8007062:	211c      	movs	r1, #28
 8007064:	4803      	ldr	r0, [pc, #12]	; (8007074 <IST8310_WriteReg+0x34>)
 8007066:	f7fb fa09 	bl	800247c <HAL_I2C_Mem_Write>
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	20000114 	.word	0x20000114

08007078 <IST8310_ReadData>:
	* @param	 *pdata:存储数据的缓存区
	* @param	 len:要读取的数据量
  * @retval
  */
void IST8310_ReadData(uint8_t reg_add,uint8_t *pdata,uint8_t len)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af04      	add	r7, sp, #16
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
 8007084:	4613      	mov	r3, r2
 8007086:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS << 1, reg_add, I2C_MEMADD_SIZE_8BIT, pdata, len, 0xff);
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	b29a      	uxth	r2, r3
 800708c:	79bb      	ldrb	r3, [r7, #6]
 800708e:	b29b      	uxth	r3, r3
 8007090:	21ff      	movs	r1, #255	; 0xff
 8007092:	9102      	str	r1, [sp, #8]
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2301      	movs	r3, #1
 800709c:	211c      	movs	r1, #28
 800709e:	4803      	ldr	r0, [pc, #12]	; (80070ac <IST8310_ReadData+0x34>)
 80070a0:	f7fb fae6 	bl	8002670 <HAL_I2C_Mem_Read>
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000114 	.word	0x20000114

080070b0 <IST8310_ReadID>:
/**
  * @brief   读取mpu6050的ID
  * @retval  Status_OK正常 | Status_ERROR错误
  */
uint8_t IST8310_ReadID(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
	uint8_t ID;
	IST8310_ReadData(IST8310_WHO_AM_I, &ID, 1);
 80070b6:	1dfb      	adds	r3, r7, #7
 80070b8:	2201      	movs	r2, #1
 80070ba:	4619      	mov	r1, r3
 80070bc:	2000      	movs	r0, #0
 80070be:	f7ff ffdb 	bl	8007078 <IST8310_ReadData>
	return ID;
 80070c2:	79fb      	ldrb	r3, [r7, #7]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <IST8310_Init>:

IMU_ERROR_Typedef IST8310_Init(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
	if(IST8310_ReadID() == IST8310_WHO_AM_I_VALUE)
 80070d0:	f7ff ffee 	bl	80070b0 <IST8310_ReadID>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b10      	cmp	r3, #16
 80070d8:	d126      	bne.n	8007128 <IST8310_Init+0x5c>
	{
		//重启IST8310
		HAL_GPIO_WritePin(GPIOG, IST8310_RST_PIN, GPIO_PIN_RESET);
 80070da:	2200      	movs	r2, #0
 80070dc:	2140      	movs	r1, #64	; 0x40
 80070de:	4814      	ldr	r0, [pc, #80]	; (8007130 <IST8310_Init+0x64>)
 80070e0:	f7fb f83c 	bl	800215c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80070e4:	2032      	movs	r0, #50	; 0x32
 80070e6:	f7fa fd4f 	bl	8001b88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, IST8310_RST_PIN, GPIO_PIN_SET);
 80070ea:	2201      	movs	r2, #1
 80070ec:	2140      	movs	r1, #64	; 0x40
 80070ee:	4810      	ldr	r0, [pc, #64]	; (8007130 <IST8310_Init+0x64>)
 80070f0:	f7fb f834 	bl	800215c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80070f4:	2032      	movs	r0, #50	; 0x32
 80070f6:	f7fa fd47 	bl	8001b88 <HAL_Delay>
		//不开启中断
		IST8310_WriteReg(IST8310_CNTL2_ADDR, 0x00);
 80070fa:	2100      	movs	r1, #0
 80070fc:	200b      	movs	r0, #11
 80070fe:	f7ff ff9f 	bl	8007040 <IST8310_WriteReg>
		HAL_Delay(150);
 8007102:	2096      	movs	r0, #150	; 0x96
 8007104:	f7fa fd40 	bl	8001b88 <HAL_Delay>
		//四次采样平均
		IST8310_WriteReg(IST8310_AVGCNTL_ADDR, IST8310_AVGCNTL_FOURTH);
 8007108:	2112      	movs	r1, #18
 800710a:	2041      	movs	r0, #65	; 0x41
 800710c:	f7ff ff98 	bl	8007040 <IST8310_WriteReg>
		HAL_Delay(150);
 8007110:	2096      	movs	r0, #150	; 0x96
 8007112:	f7fa fd39 	bl	8001b88 <HAL_Delay>
		//连续采样，200HZ输出模式
		IST8310_WriteReg(IST8310_CNTL1_ADDR, IST8310_CNTL1_CONTINUE);
 8007116:	210b      	movs	r1, #11
 8007118:	200a      	movs	r0, #10
 800711a:	f7ff ff91 	bl	8007040 <IST8310_WriteReg>
		HAL_Delay(150);
 800711e:	2096      	movs	r0, #150	; 0x96
 8007120:	f7fa fd32 	bl	8001b88 <HAL_Delay>

    	return IMU_NO_ERROR;
 8007124:	2300      	movs	r3, #0
 8007126:	e000      	b.n	800712a <IST8310_Init+0x5e>
	}
	else
	{
		return IMU_MAG_ERROR;
 8007128:	2304      	movs	r3, #4
	}
}
 800712a:	4618      	mov	r0, r3
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	40021800 	.word	0x40021800

08007134 <IST8310_Getdata_Mag_raw>:

void IST8310_Getdata_Mag_raw(int16_t *magdata)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	IST8310_ReadData(IST8310_DATA_XL_ADDR, buff, 6);
 800713c:	f107 0308 	add.w	r3, r7, #8
 8007140:	2206      	movs	r2, #6
 8007142:	4619      	mov	r1, r3
 8007144:	2003      	movs	r0, #3
 8007146:	f7ff ff97 	bl	8007078 <IST8310_ReadData>
	magdata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 800714a:	7a7b      	ldrb	r3, [r7, #9]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	b21a      	sxth	r2, r3
 8007150:	7a3b      	ldrb	r3, [r7, #8]
 8007152:	b21b      	sxth	r3, r3
 8007154:	4313      	orrs	r3, r2
 8007156:	b21a      	sxth	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	801a      	strh	r2, [r3, #0]
	magdata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	b219      	sxth	r1, r3
 8007162:	7abb      	ldrb	r3, [r7, #10]
 8007164:	b21a      	sxth	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3302      	adds	r3, #2
 800716a:	430a      	orrs	r2, r1
 800716c:	b212      	sxth	r2, r2
 800716e:	801a      	strh	r2, [r3, #0]
	magdata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 8007170:	7b7b      	ldrb	r3, [r7, #13]
 8007172:	021b      	lsls	r3, r3, #8
 8007174:	b219      	sxth	r1, r3
 8007176:	7b3b      	ldrb	r3, [r7, #12]
 8007178:	b21a      	sxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3304      	adds	r3, #4
 800717e:	430a      	orrs	r2, r1
 8007180:	b212      	sxth	r2, r2
 8007182:	801a      	strh	r2, [r3, #0]
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <IST8310_Getdata_Mag>:

void IST8310_Getdata_Mag(float *magdata)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	int16_t tempbuff = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	81fb      	strh	r3, [r7, #14]
	IST8310_ReadData(IST8310_DATA_XL_ADDR, buff, 6);
 8007198:	f107 0308 	add.w	r3, r7, #8
 800719c:	2206      	movs	r2, #6
 800719e:	4619      	mov	r1, r3
 80071a0:	2003      	movs	r0, #3
 80071a2:	f7ff ff69 	bl	8007078 <IST8310_ReadData>
	tempbuff = (int16_t)( (buff[1] << 8) | buff[0] );
 80071a6:	7a7b      	ldrb	r3, [r7, #9]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	b21a      	sxth	r2, r3
 80071ac:	7a3b      	ldrb	r3, [r7, #8]
 80071ae:	b21b      	sxth	r3, r3
 80071b0:	4313      	orrs	r3, r2
 80071b2:	81fb      	strh	r3, [r7, #14]
	magdata[0] = tempbuff * MAG_SEN;
 80071b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071c0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800722c <IST8310_Getdata_Mag+0xa0>
 80071c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[3] << 8) | buff[2] );
 80071ce:	7afb      	ldrb	r3, [r7, #11]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	b21a      	sxth	r2, r3
 80071d4:	7abb      	ldrb	r3, [r7, #10]
 80071d6:	b21b      	sxth	r3, r3
 80071d8:	4313      	orrs	r3, r2
 80071da:	81fb      	strh	r3, [r7, #14]
	magdata[1] = tempbuff * MAG_SEN;
 80071dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80071e0:	ee07 3a90 	vmov	s15, r3
 80071e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3304      	adds	r3, #4
 80071ec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800722c <IST8310_Getdata_Mag+0xa0>
 80071f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071f4:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[5] << 8) | buff[4] );
 80071f8:	7b7b      	ldrb	r3, [r7, #13]
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	b21a      	sxth	r2, r3
 80071fe:	7b3b      	ldrb	r3, [r7, #12]
 8007200:	b21b      	sxth	r3, r3
 8007202:	4313      	orrs	r3, r2
 8007204:	81fb      	strh	r3, [r7, #14]
	magdata[2] = tempbuff * MAG_SEN;
 8007206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3308      	adds	r3, #8
 8007216:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800722c <IST8310_Getdata_Mag+0xa0>
 800721a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800721e:	edc3 7a00 	vstr	s15, [r3]

}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	3e99999a 	.word	0x3e99999a

08007230 <OLED_I2C_Start>:
  * @brief  I2C开始
  * @param  无
  * @retval 无
  */
void OLED_I2C_Start(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 8007234:	2201      	movs	r2, #1
 8007236:	2101      	movs	r1, #1
 8007238:	4809      	ldr	r0, [pc, #36]	; (8007260 <OLED_I2C_Start+0x30>)
 800723a:	f7fa ff8f 	bl	800215c <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 800723e:	2201      	movs	r2, #1
 8007240:	2102      	movs	r1, #2
 8007242:	4807      	ldr	r0, [pc, #28]	; (8007260 <OLED_I2C_Start+0x30>)
 8007244:	f7fa ff8a 	bl	800215c <HAL_GPIO_WritePin>
	OLED_W_SDA(0);
 8007248:	2200      	movs	r2, #0
 800724a:	2101      	movs	r1, #1
 800724c:	4804      	ldr	r0, [pc, #16]	; (8007260 <OLED_I2C_Start+0x30>)
 800724e:	f7fa ff85 	bl	800215c <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8007252:	2200      	movs	r2, #0
 8007254:	2102      	movs	r1, #2
 8007256:	4802      	ldr	r0, [pc, #8]	; (8007260 <OLED_I2C_Start+0x30>)
 8007258:	f7fa ff80 	bl	800215c <HAL_GPIO_WritePin>
}
 800725c:	bf00      	nop
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40021400 	.word	0x40021400

08007264 <OLED_I2C_Stop>:
  * @brief  I2C停止
  * @param  无
  * @retval 无
  */
void OLED_I2C_Stop(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8007268:	2200      	movs	r2, #0
 800726a:	2101      	movs	r1, #1
 800726c:	4807      	ldr	r0, [pc, #28]	; (800728c <OLED_I2C_Stop+0x28>)
 800726e:	f7fa ff75 	bl	800215c <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8007272:	2201      	movs	r2, #1
 8007274:	2102      	movs	r1, #2
 8007276:	4805      	ldr	r0, [pc, #20]	; (800728c <OLED_I2C_Stop+0x28>)
 8007278:	f7fa ff70 	bl	800215c <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 800727c:	2201      	movs	r2, #1
 800727e:	2101      	movs	r1, #1
 8007280:	4802      	ldr	r0, [pc, #8]	; (800728c <OLED_I2C_Stop+0x28>)
 8007282:	f7fa ff6b 	bl	800215c <HAL_GPIO_WritePin>
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	40021400 	.word	0x40021400

08007290 <OLED_I2C_SendByte>:
  * @brief  I2C发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	4603      	mov	r3, r0
 8007298:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 800729a:	2300      	movs	r3, #0
 800729c:	73fb      	strb	r3, [r7, #15]
 800729e:	e01b      	b.n	80072d8 <OLED_I2C_SendByte+0x48>
	{
		OLED_W_SDA(Byte & (0x80 >> i));
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	2280      	movs	r2, #128	; 0x80
 80072a4:	fa42 f303 	asr.w	r3, r2, r3
 80072a8:	b25a      	sxtb	r2, r3
 80072aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ae:	4013      	ands	r3, r2
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	2101      	movs	r1, #1
 80072b8:	4810      	ldr	r0, [pc, #64]	; (80072fc <OLED_I2C_SendByte+0x6c>)
 80072ba:	f7fa ff4f 	bl	800215c <HAL_GPIO_WritePin>
		OLED_W_SCL(1);
 80072be:	2201      	movs	r2, #1
 80072c0:	2102      	movs	r1, #2
 80072c2:	480e      	ldr	r0, [pc, #56]	; (80072fc <OLED_I2C_SendByte+0x6c>)
 80072c4:	f7fa ff4a 	bl	800215c <HAL_GPIO_WritePin>
		OLED_W_SCL(0);
 80072c8:	2200      	movs	r2, #0
 80072ca:	2102      	movs	r1, #2
 80072cc:	480b      	ldr	r0, [pc, #44]	; (80072fc <OLED_I2C_SendByte+0x6c>)
 80072ce:	f7fa ff45 	bl	800215c <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	3301      	adds	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	2b07      	cmp	r3, #7
 80072dc:	d9e0      	bls.n	80072a0 <OLED_I2C_SendByte+0x10>
	}
	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 80072de:	2201      	movs	r2, #1
 80072e0:	2102      	movs	r1, #2
 80072e2:	4806      	ldr	r0, [pc, #24]	; (80072fc <OLED_I2C_SendByte+0x6c>)
 80072e4:	f7fa ff3a 	bl	800215c <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 80072e8:	2200      	movs	r2, #0
 80072ea:	2102      	movs	r1, #2
 80072ec:	4803      	ldr	r0, [pc, #12]	; (80072fc <OLED_I2C_SendByte+0x6c>)
 80072ee:	f7fa ff35 	bl	800215c <HAL_GPIO_WritePin>
}
 80072f2:	bf00      	nop
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40021400 	.word	0x40021400

08007300 <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 800730a:	f7ff ff91 	bl	8007230 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 800730e:	2078      	movs	r0, #120	; 0x78
 8007310:	f7ff ffbe 	bl	8007290 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//写命令
 8007314:	2000      	movs	r0, #0
 8007316:	f7ff ffbb 	bl	8007290 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command); 
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff ffb7 	bl	8007290 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8007322:	f7ff ff9f 	bl	8007264 <OLED_I2C_Stop>
}
 8007326:	bf00      	nop
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	4603      	mov	r3, r0
 8007336:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 8007338:	f7ff ff7a 	bl	8007230 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 800733c:	2078      	movs	r0, #120	; 0x78
 800733e:	f7ff ffa7 	bl	8007290 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//写数据
 8007342:	2040      	movs	r0, #64	; 0x40
 8007344:	f7ff ffa4 	bl	8007290 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 8007348:	79fb      	ldrb	r3, [r7, #7]
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff ffa0 	bl	8007290 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8007350:	f7ff ff88 	bl	8007264 <OLED_I2C_Stop>
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	460a      	mov	r2, r1
 8007366:	71fb      	strb	r3, [r7, #7]
 8007368:	4613      	mov	r3, r2
 800736a:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8007372:	b2db      	uxtb	r3, r3
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff ffc3 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置低4位
 800737a:	79bb      	ldrb	r3, [r7, #6]
 800737c:	091b      	lsrs	r3, r3, #4
 800737e:	b2db      	uxtb	r3, r3
 8007380:	f043 0310 	orr.w	r3, r3, #16
 8007384:	b2db      	uxtb	r3, r3
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff ffba 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置高4位
 800738c:	79bb      	ldrb	r3, [r7, #6]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	b2db      	uxtb	r3, r3
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff ffb3 	bl	8007300 <OLED_WriteCommand>
}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b082      	sub	sp, #8
 80073a6:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 80073a8:	2300      	movs	r3, #0
 80073aa:	71bb      	strb	r3, [r7, #6]
 80073ac:	e014      	b.n	80073d8 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 80073ae:	79bb      	ldrb	r3, [r7, #6]
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff ffd2 	bl	800735c <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 80073b8:	2300      	movs	r3, #0
 80073ba:	71fb      	strb	r3, [r7, #7]
 80073bc:	e005      	b.n	80073ca <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 80073be:	2000      	movs	r0, #0
 80073c0:	f7ff ffb5 	bl	800732e <OLED_WriteData>
		for(i = 0; i < 128; i++)
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	3301      	adds	r3, #1
 80073c8:	71fb      	strb	r3, [r7, #7]
 80073ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	daf5      	bge.n	80073be <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 80073d2:	79bb      	ldrb	r3, [r7, #6]
 80073d4:	3301      	adds	r3, #1
 80073d6:	71bb      	strb	r3, [r7, #6]
 80073d8:	79bb      	ldrb	r3, [r7, #6]
 80073da:	2b07      	cmp	r3, #7
 80073dc:	d9e7      	bls.n	80073ae <OLED_Clear+0xc>
		}
	}
}
 80073de:	bf00      	nop
 80073e0:	bf00      	nop
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	71fb      	strb	r3, [r7, #7]
 80073f2:	460b      	mov	r3, r1
 80073f4:	71bb      	strb	r3, [r7, #6]
 80073f6:	4613      	mov	r3, r2
 80073f8:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	b2da      	uxtb	r2, r3
 8007404:	79bb      	ldrb	r3, [r7, #6]
 8007406:	3b01      	subs	r3, #1
 8007408:	b2db      	uxtb	r3, r3
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	b2db      	uxtb	r3, r3
 800740e:	4619      	mov	r1, r3
 8007410:	4610      	mov	r0, r2
 8007412:	f7ff ffa3 	bl	800735c <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
 800741a:	e00e      	b.n	800743a <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 800741c:	797b      	ldrb	r3, [r7, #5]
 800741e:	f1a3 0220 	sub.w	r2, r3, #32
 8007422:	7bfb      	ldrb	r3, [r7, #15]
 8007424:	491c      	ldr	r1, [pc, #112]	; (8007498 <OLED_ShowChar+0xb0>)
 8007426:	0112      	lsls	r2, r2, #4
 8007428:	440a      	add	r2, r1
 800742a:	4413      	add	r3, r2
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff ff7d 	bl	800732e <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	3301      	adds	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b07      	cmp	r3, #7
 800743e:	d9ed      	bls.n	800741c <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	3b01      	subs	r3, #1
 8007444:	b2db      	uxtb	r3, r3
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	b2db      	uxtb	r3, r3
 800744a:	3301      	adds	r3, #1
 800744c:	b2da      	uxtb	r2, r3
 800744e:	79bb      	ldrb	r3, [r7, #6]
 8007450:	3b01      	subs	r3, #1
 8007452:	b2db      	uxtb	r3, r3
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	b2db      	uxtb	r3, r3
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f7ff ff7e 	bl	800735c <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8007460:	2300      	movs	r3, #0
 8007462:	73fb      	strb	r3, [r7, #15]
 8007464:	e00f      	b.n	8007486 <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 8007466:	797b      	ldrb	r3, [r7, #5]
 8007468:	f1a3 0220 	sub.w	r2, r3, #32
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	3308      	adds	r3, #8
 8007470:	4909      	ldr	r1, [pc, #36]	; (8007498 <OLED_ShowChar+0xb0>)
 8007472:	0112      	lsls	r2, r2, #4
 8007474:	440a      	add	r2, r1
 8007476:	4413      	add	r3, r2
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f7ff ff57 	bl	800732e <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	3301      	adds	r3, #1
 8007484:	73fb      	strb	r3, [r7, #15]
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	2b07      	cmp	r3, #7
 800748a:	d9ec      	bls.n	8007466 <OLED_ShowChar+0x7e>
	}
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	08009ed8 	.word	0x08009ed8

0800749c <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	603a      	str	r2, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
 80074a8:	460b      	mov	r3, r1
 80074aa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]
 80074b0:	e00e      	b.n	80074d0 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 80074b2:	79ba      	ldrb	r2, [r7, #6]
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	4413      	add	r3, r2
 80074b8:	b2d9      	uxtb	r1, r3
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	4413      	add	r3, r2
 80074c0:	781a      	ldrb	r2, [r3, #0]
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff ff8f 	bl	80073e8 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	3301      	adds	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1ea      	bne.n	80074b2 <OLED_ShowString+0x16>
	}
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <OLED_Pow>:
/**
  * @brief  OLED次方函数
  * @retval 返回值等于X的Y次方
  */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 80074f0:	2301      	movs	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
	while (Y--)
 80074f4:	e004      	b.n	8007500 <OLED_Pow+0x1a>
	{
		Result *= X;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	1e5a      	subs	r2, r3, #1
 8007504:	603a      	str	r2, [r7, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f5      	bne.n	80074f6 <OLED_Pow+0x10>
	}
	return Result;
 800750a:	68fb      	ldr	r3, [r7, #12]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <OLED_ShowNum>:
  * @param  Number 要显示的数字，范围：0~4294967295
  * @param  Length 要显示数字的长度，范围：1~10
  * @retval 无
  */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8007518:	b590      	push	{r4, r7, lr}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	603a      	str	r2, [r7, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	4603      	mov	r3, r0
 8007524:	71fb      	strb	r3, [r7, #7]
 8007526:	460b      	mov	r3, r1
 8007528:	71bb      	strb	r3, [r7, #6]
 800752a:	4613      	mov	r3, r2
 800752c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)							
 800752e:	2300      	movs	r3, #0
 8007530:	73fb      	strb	r3, [r7, #15]
 8007532:	e023      	b.n	800757c <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8007534:	79ba      	ldrb	r2, [r7, #6]
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	4413      	add	r3, r2
 800753a:	b2dc      	uxtb	r4, r3
 800753c:	797a      	ldrb	r2, [r7, #5]
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	4619      	mov	r1, r3
 8007546:	200a      	movs	r0, #10
 8007548:	f7ff ffcd 	bl	80074e6 <OLED_Pow>
 800754c:	4602      	mov	r2, r0
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	fbb3 f1f2 	udiv	r1, r3, r2
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <OLED_ShowNum+0x78>)
 8007556:	fba3 2301 	umull	r2, r3, r3, r1
 800755a:	08da      	lsrs	r2, r3, #3
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	1aca      	subs	r2, r1, r3
 8007566:	b2d3      	uxtb	r3, r2
 8007568:	3330      	adds	r3, #48	; 0x30
 800756a:	b2da      	uxtb	r2, r3
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	4621      	mov	r1, r4
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff ff39 	bl	80073e8 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	3301      	adds	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
 800757c:	7bfa      	ldrb	r2, [r7, #15]
 800757e:	797b      	ldrb	r3, [r7, #5]
 8007580:	429a      	cmp	r2, r3
 8007582:	d3d7      	bcc.n	8007534 <OLED_ShowNum+0x1c>
	}
}
 8007584:	bf00      	nop
 8007586:	bf00      	nop
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	bd90      	pop	{r4, r7, pc}
 800758e:	bf00      	nop
 8007590:	cccccccd 	.word	0xcccccccd

08007594 <OLED_ShowSignedNum>:
  * @param  Number 要显示的数字，范围：-2147483648~2147483647
  * @param  Length 要显示数字的长度，范围：1~10
  * @retval 无
  */
void OLED_ShowSignedNum(uint8_t Line, uint8_t Column, int32_t Number, uint8_t Length)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	603a      	str	r2, [r7, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	71fb      	strb	r3, [r7, #7]
 80075a2:	460b      	mov	r3, r1
 80075a4:	71bb      	strb	r3, [r7, #6]
 80075a6:	4613      	mov	r3, r2
 80075a8:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint32_t Number1;
	if (Number >= 0)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	db08      	blt.n	80075c2 <OLED_ShowSignedNum+0x2e>
	{
		OLED_ShowChar(Line, Column, '+');
 80075b0:	79b9      	ldrb	r1, [r7, #6]
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	222b      	movs	r2, #43	; 0x2b
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff ff16 	bl	80073e8 <OLED_ShowChar>
		Number1 = Number;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	60bb      	str	r3, [r7, #8]
 80075c0:	e008      	b.n	80075d4 <OLED_ShowSignedNum+0x40>
	}
	else
	{
		OLED_ShowChar(Line, Column, '-');
 80075c2:	79b9      	ldrb	r1, [r7, #6]
 80075c4:	79fb      	ldrb	r3, [r7, #7]
 80075c6:	222d      	movs	r2, #45	; 0x2d
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff ff0d 	bl	80073e8 <OLED_ShowChar>
		Number1 = -Number;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	425b      	negs	r3, r3
 80075d2:	60bb      	str	r3, [r7, #8]
	}
	for (i = 0; i < Length; i++)							
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
 80075d8:	e025      	b.n	8007626 <OLED_ShowSignedNum+0x92>
	{
		OLED_ShowChar(Line, Column + i + 1, Number1 / OLED_Pow(10, Length - i - 1) % 10 + '0');
 80075da:	79ba      	ldrb	r2, [r7, #6]
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	4413      	add	r3, r2
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	3301      	adds	r3, #1
 80075e4:	b2dc      	uxtb	r4, r3
 80075e6:	797a      	ldrb	r2, [r7, #5]
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	4619      	mov	r1, r3
 80075f0:	200a      	movs	r0, #10
 80075f2:	f7ff ff78 	bl	80074e6 <OLED_Pow>
 80075f6:	4602      	mov	r2, r0
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80075fe:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <OLED_ShowSignedNum+0xa4>)
 8007600:	fba3 2301 	umull	r2, r3, r3, r1
 8007604:	08da      	lsrs	r2, r3, #3
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	1aca      	subs	r2, r1, r3
 8007610:	b2d3      	uxtb	r3, r2
 8007612:	3330      	adds	r3, #48	; 0x30
 8007614:	b2da      	uxtb	r2, r3
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	4621      	mov	r1, r4
 800761a:	4618      	mov	r0, r3
 800761c:	f7ff fee4 	bl	80073e8 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 8007620:	7bfb      	ldrb	r3, [r7, #15]
 8007622:	3301      	adds	r3, #1
 8007624:	73fb      	strb	r3, [r7, #15]
 8007626:	7bfa      	ldrb	r2, [r7, #15]
 8007628:	797b      	ldrb	r3, [r7, #5]
 800762a:	429a      	cmp	r2, r3
 800762c:	d3d5      	bcc.n	80075da <OLED_ShowSignedNum+0x46>
	}
}
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	bd90      	pop	{r4, r7, pc}
 8007638:	cccccccd 	.word	0xcccccccd

0800763c <OLED_ShowHexNum>:
  * @param  Number 要显示的数字，范围：0~0xFFFFFFFF
  * @param  Length 要显示数字的长度，范围：1~8
  * @retval 无
  */
void OLED_ShowHexNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	603a      	str	r2, [r7, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	4603      	mov	r3, r0
 8007648:	71fb      	strb	r3, [r7, #7]
 800764a:	460b      	mov	r3, r1
 800764c:	71bb      	strb	r3, [r7, #6]
 800764e:	4613      	mov	r3, r2
 8007650:	717b      	strb	r3, [r7, #5]
	uint8_t i, SingleNumber;
	for (i = 0; i < Length; i++)							
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
 8007656:	e02c      	b.n	80076b2 <OLED_ShowHexNum+0x76>
	{
		SingleNumber = Number / OLED_Pow(16, Length - i - 1) % 16;
 8007658:	797a      	ldrb	r2, [r7, #5]
 800765a:	7bfb      	ldrb	r3, [r7, #15]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	4619      	mov	r1, r3
 8007662:	2010      	movs	r0, #16
 8007664:	f7ff ff3f 	bl	80074e6 <OLED_Pow>
 8007668:	4602      	mov	r2, r0
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f003 030f 	and.w	r3, r3, #15
 8007676:	73bb      	strb	r3, [r7, #14]
		if (SingleNumber < 10)
 8007678:	7bbb      	ldrb	r3, [r7, #14]
 800767a:	2b09      	cmp	r3, #9
 800767c:	d80b      	bhi.n	8007696 <OLED_ShowHexNum+0x5a>
		{
			OLED_ShowChar(Line, Column + i, SingleNumber + '0');
 800767e:	79ba      	ldrb	r2, [r7, #6]
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	4413      	add	r3, r2
 8007684:	b2d9      	uxtb	r1, r3
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	3330      	adds	r3, #48	; 0x30
 800768a:	b2da      	uxtb	r2, r3
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff feaa 	bl	80073e8 <OLED_ShowChar>
 8007694:	e00a      	b.n	80076ac <OLED_ShowHexNum+0x70>
		}
		else
		{
			OLED_ShowChar(Line, Column + i, SingleNumber - 10 + 'A');
 8007696:	79ba      	ldrb	r2, [r7, #6]
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	4413      	add	r3, r2
 800769c:	b2d9      	uxtb	r1, r3
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	3337      	adds	r3, #55	; 0x37
 80076a2:	b2da      	uxtb	r2, r3
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fe9e 	bl	80073e8 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	3301      	adds	r3, #1
 80076b0:	73fb      	strb	r3, [r7, #15]
 80076b2:	7bfa      	ldrb	r2, [r7, #15]
 80076b4:	797b      	ldrb	r3, [r7, #5]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d3ce      	bcc.n	8007658 <OLED_ShowHexNum+0x1c>
		}
	}
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <OLED_ShowBinNum>:
  * @param  Number 要显示的数字，范围：0~1111 1111 1111 1111
  * @param  Length 要显示数字的长度，范围：1~16
  * @retval 无
  */
void OLED_ShowBinNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	603a      	str	r2, [r7, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	71fb      	strb	r3, [r7, #7]
 80076d2:	460b      	mov	r3, r1
 80076d4:	71bb      	strb	r3, [r7, #6]
 80076d6:	4613      	mov	r3, r2
 80076d8:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)							
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
 80076de:	e01d      	b.n	800771c <OLED_ShowBinNum+0x58>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(2, Length - i - 1) % 2 + '0');
 80076e0:	79ba      	ldrb	r2, [r7, #6]
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	4413      	add	r3, r2
 80076e6:	b2dc      	uxtb	r4, r3
 80076e8:	797a      	ldrb	r2, [r7, #5]
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	3b01      	subs	r3, #1
 80076f0:	4619      	mov	r1, r3
 80076f2:	2002      	movs	r0, #2
 80076f4:	f7ff fef7 	bl	80074e6 <OLED_Pow>
 80076f8:	4602      	mov	r2, r0
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007700:	b2db      	uxtb	r3, r3
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	b2db      	uxtb	r3, r3
 8007708:	3330      	adds	r3, #48	; 0x30
 800770a:	b2da      	uxtb	r2, r3
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	4621      	mov	r1, r4
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fe69 	bl	80073e8 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	3301      	adds	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
 800771c:	7bfa      	ldrb	r2, [r7, #15]
 800771e:	797b      	ldrb	r3, [r7, #5]
 8007720:	429a      	cmp	r2, r3
 8007722:	d3dd      	bcc.n	80076e0 <OLED_ShowBinNum+0x1c>
	}
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	bd90      	pop	{r4, r7, pc}
	...

08007730 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 8007736:	2300      	movs	r3, #0
 8007738:	607b      	str	r3, [r7, #4]
 800773a:	e00c      	b.n	8007756 <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 800773c:	2300      	movs	r3, #0
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	e002      	b.n	8007748 <OLED_Init+0x18>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	603b      	str	r3, [r7, #0]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800774e:	d3f8      	bcc.n	8007742 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3301      	adds	r3, #1
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800775c:	d3ee      	bcc.n	800773c <OLED_Init+0xc>
	}
	OLED_W_SCL(1);
 800775e:	2201      	movs	r2, #1
 8007760:	2102      	movs	r1, #2
 8007762:	4829      	ldr	r0, [pc, #164]	; (8007808 <OLED_Init+0xd8>)
 8007764:	f7fa fcfa 	bl	800215c <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8007768:	2201      	movs	r2, #1
 800776a:	2101      	movs	r1, #1
 800776c:	4826      	ldr	r0, [pc, #152]	; (8007808 <OLED_Init+0xd8>)
 800776e:	f7fa fcf5 	bl	800215c <HAL_GPIO_WritePin>
	//OLED_I2C_Init();			//端口初始化
	
	OLED_WriteCommand(0xAE);	//关闭显示
 8007772:	20ae      	movs	r0, #174	; 0xae
 8007774:	f7ff fdc4 	bl	8007300 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 8007778:	20d5      	movs	r0, #213	; 0xd5
 800777a:	f7ff fdc1 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 800777e:	2080      	movs	r0, #128	; 0x80
 8007780:	f7ff fdbe 	bl	8007300 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 8007784:	20a8      	movs	r0, #168	; 0xa8
 8007786:	f7ff fdbb 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 800778a:	203f      	movs	r0, #63	; 0x3f
 800778c:	f7ff fdb8 	bl	8007300 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 8007790:	20d3      	movs	r0, #211	; 0xd3
 8007792:	f7ff fdb5 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8007796:	2000      	movs	r0, #0
 8007798:	f7ff fdb2 	bl	8007300 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 800779c:	2040      	movs	r0, #64	; 0x40
 800779e:	f7ff fdaf 	bl	8007300 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 80077a2:	20a1      	movs	r0, #161	; 0xa1
 80077a4:	f7ff fdac 	bl	8007300 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 80077a8:	20c8      	movs	r0, #200	; 0xc8
 80077aa:	f7ff fda9 	bl	8007300 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 80077ae:	20da      	movs	r0, #218	; 0xda
 80077b0:	f7ff fda6 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 80077b4:	2012      	movs	r0, #18
 80077b6:	f7ff fda3 	bl	8007300 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 80077ba:	2081      	movs	r0, #129	; 0x81
 80077bc:	f7ff fda0 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 80077c0:	20cf      	movs	r0, #207	; 0xcf
 80077c2:	f7ff fd9d 	bl	8007300 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 80077c6:	20d9      	movs	r0, #217	; 0xd9
 80077c8:	f7ff fd9a 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 80077cc:	20f1      	movs	r0, #241	; 0xf1
 80077ce:	f7ff fd97 	bl	8007300 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 80077d2:	20db      	movs	r0, #219	; 0xdb
 80077d4:	f7ff fd94 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 80077d8:	2030      	movs	r0, #48	; 0x30
 80077da:	f7ff fd91 	bl	8007300 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 80077de:	20a4      	movs	r0, #164	; 0xa4
 80077e0:	f7ff fd8e 	bl	8007300 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 80077e4:	20a6      	movs	r0, #166	; 0xa6
 80077e6:	f7ff fd8b 	bl	8007300 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 80077ea:	208d      	movs	r0, #141	; 0x8d
 80077ec:	f7ff fd88 	bl	8007300 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 80077f0:	2014      	movs	r0, #20
 80077f2:	f7ff fd85 	bl	8007300 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 80077f6:	20af      	movs	r0, #175	; 0xaf
 80077f8:	f7ff fd82 	bl	8007300 <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 80077fc:	f7ff fdd1 	bl	80073a2 <OLED_Clear>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	40021400 	.word	0x40021400

0800780c <OLED_Showfloat>:
		OLED_ShowString(4, 1, "->->->->->->->->-");
	}
}

void OLED_Showfloat(uint8_t Line, uint8_t Column, float Number, uint8_t integer_length, uint8_t decimal_length)
{
 800780c:	b590      	push	{r4, r7, lr}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	4604      	mov	r4, r0
 8007814:	4608      	mov	r0, r1
 8007816:	ed87 0a00 	vstr	s0, [r7]
 800781a:	4611      	mov	r1, r2
 800781c:	461a      	mov	r2, r3
 800781e:	4623      	mov	r3, r4
 8007820:	71fb      	strb	r3, [r7, #7]
 8007822:	4603      	mov	r3, r0
 8007824:	71bb      	strb	r3, [r7, #6]
 8007826:	460b      	mov	r3, r1
 8007828:	717b      	strb	r3, [r7, #5]
 800782a:	4613      	mov	r3, r2
 800782c:	713b      	strb	r3, [r7, #4]
	int16_t number_integer;
	int16_t number_decimals;
	float temp;
	uint8_t i;
	number_integer = (int16_t)Number;
 800782e:	edd7 7a00 	vldr	s15, [r7]
 8007832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007836:	ee17 3a90 	vmov	r3, s15
 800783a:	823b      	strh	r3, [r7, #16]
	temp = Number - number_integer;
 800783c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007840:	ee07 3a90 	vmov	s15, r3
 8007844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007848:	ed97 7a00 	vldr	s14, [r7]
 800784c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007850:	edc7 7a05 	vstr	s15, [r7, #20]
	for(i = 0; i < decimal_length; i++)
 8007854:	2300      	movs	r3, #0
 8007856:	74fb      	strb	r3, [r7, #19]
 8007858:	e00a      	b.n	8007870 <OLED_Showfloat+0x64>
	{
		temp *= 10;
 800785a:	edd7 7a05 	vldr	s15, [r7, #20]
 800785e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8007862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007866:	edc7 7a05 	vstr	s15, [r7, #20]
	for(i = 0; i < decimal_length; i++)
 800786a:	7cfb      	ldrb	r3, [r7, #19]
 800786c:	3301      	adds	r3, #1
 800786e:	74fb      	strb	r3, [r7, #19]
 8007870:	7cfa      	ldrb	r2, [r7, #19]
 8007872:	793b      	ldrb	r3, [r7, #4]
 8007874:	429a      	cmp	r2, r3
 8007876:	d3f0      	bcc.n	800785a <OLED_Showfloat+0x4e>
	}
	number_decimals = (int16_t)temp;
 8007878:	edd7 7a05 	vldr	s15, [r7, #20]
 800787c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007880:	ee17 3a90 	vmov	r3, s15
 8007884:	81fb      	strh	r3, [r7, #14]
	OLED_ShowSignedNum(Line, Column, number_integer, integer_length);
 8007886:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800788a:	797b      	ldrb	r3, [r7, #5]
 800788c:	79b9      	ldrb	r1, [r7, #6]
 800788e:	79f8      	ldrb	r0, [r7, #7]
 8007890:	f7ff fe80 	bl	8007594 <OLED_ShowSignedNum>
	OLED_ShowChar(Line, Column + integer_length + 1, '.');
 8007894:	79ba      	ldrb	r2, [r7, #6]
 8007896:	797b      	ldrb	r3, [r7, #5]
 8007898:	4413      	add	r3, r2
 800789a:	b2db      	uxtb	r3, r3
 800789c:	3301      	adds	r3, #1
 800789e:	b2d9      	uxtb	r1, r3
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	222e      	movs	r2, #46	; 0x2e
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff fd9f 	bl	80073e8 <OLED_ShowChar>
	OLED_ShowNum(Line, Column + integer_length + 2, number_decimals, decimal_length);
 80078aa:	79ba      	ldrb	r2, [r7, #6]
 80078ac:	797b      	ldrb	r3, [r7, #5]
 80078ae:	4413      	add	r3, r2
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	3302      	adds	r3, #2
 80078b4:	b2d9      	uxtb	r1, r3
 80078b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80078ba:	793b      	ldrb	r3, [r7, #4]
 80078bc:	79f8      	ldrb	r0, [r7, #7]
 80078be:	f7ff fe2b 	bl	8007518 <OLED_ShowNum>


}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd90      	pop	{r4, r7, pc}
	...

080078cc <Pid_Calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output
  */
float Pid_Calculate(PID_Typedef *pid, float get, float set)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80078d8:	edc7 0a01 	vstr	s1, [r7, #4]
//	uint8_t flag = 0;
	//get input
	pid->input.get = get;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	605a      	str	r2, [r3, #4]
	pid->input.set = set;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]
	pid->input.last_err = pid->input.err;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	60da      	str	r2, [r3, #12]
	pid->input.err = set - get;
 80078f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80078f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80078f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	edc3 7a02 	vstr	s15, [r3, #8]

	//input limit

	if ((pid->limit.max_err_input != 0) && (fabs(pid->input.err) > pid->limit.max_err_input))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007908:	eef5 7a40 	vcmp.f32	s15, #0.0
 800790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007910:	d00f      	beq.n	8007932 <Pid_Calculate+0x66>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	edd3 7a02 	vldr	s15, [r3, #8]
 8007918:	eeb0 7ae7 	vabs.f32	s14, s15
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8007922:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800792a:	dd02      	ble.n	8007932 <Pid_Calculate+0x66>
		return 0;
 800792c:	f04f 0300 	mov.w	r3, #0
 8007930:	e062      	b.n	80079f8 <Pid_Calculate+0x12c>

	//output calculate
	pid->output.p_out  = pid->param.Kp * pid->input.err;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	ed93 7a05 	vldr	s14, [r3, #20]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	edd3 7a02 	vldr	s15, [r3, #8]
 800793e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	edc3 7a08 	vstr	s15, [r3, #32]
	pid->output.i_out += pid->param.Ki * pid->input.err;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	edd3 6a06 	vldr	s13, [r3, #24]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	edd3 7a02 	vldr	s15, [r3, #8]
 800795a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800795e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pid->output.d_out  = pid->param.Kd * (pid->input.err - pid->input.last_err) * 1000;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	ed93 7a07 	vldr	s14, [r3, #28]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	edd3 6a02 	vldr	s13, [r3, #8]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	edd3 7a03 	vldr	s15, [r3, #12]
 800797a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800797e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007982:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007a08 <Pid_Calculate+0x13c>
 8007986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	//output limit
	pid->output.i_out	  = limit_control(pid->output.i_out, pid->limit.max_i_out);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800799c:	eef0 0a47 	vmov.f32	s1, s14
 80079a0:	eeb0 0a67 	vmov.f32	s0, s15
 80079a4:	f7fd fe4a 	bl	800563c <limit_control>
 80079a8:	eef0 7a40 	vmov.f32	s15, s0
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	pid->output.total_out = pid->output.p_out + pid->output.i_out + pid->output.d_out;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	ed93 7a08 	vldr	s14, [r3, #32]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80079be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80079c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid->output.total_out = limit_control(pid->output.total_out, pid->limit.max_total_out);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80079de:	eef0 0a47 	vmov.f32	s1, s14
 80079e2:	eeb0 0a67 	vmov.f32	s0, s15
 80079e6:	f7fd fe29 	bl	800563c <limit_control>
 80079ea:	eef0 7a40 	vmov.f32	s15, s0
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	return pid->output.total_out;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eeb0 0a67 	vmov.f32	s0, s15
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	447a0000 	.word	0x447a0000

08007a0c <__errno>:
 8007a0c:	4b01      	ldr	r3, [pc, #4]	; (8007a14 <__errno+0x8>)
 8007a0e:	6818      	ldr	r0, [r3, #0]
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	20000094 	.word	0x20000094

08007a18 <__libc_init_array>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4d0d      	ldr	r5, [pc, #52]	; (8007a50 <__libc_init_array+0x38>)
 8007a1c:	4c0d      	ldr	r4, [pc, #52]	; (8007a54 <__libc_init_array+0x3c>)
 8007a1e:	1b64      	subs	r4, r4, r5
 8007a20:	10a4      	asrs	r4, r4, #2
 8007a22:	2600      	movs	r6, #0
 8007a24:	42a6      	cmp	r6, r4
 8007a26:	d109      	bne.n	8007a3c <__libc_init_array+0x24>
 8007a28:	4d0b      	ldr	r5, [pc, #44]	; (8007a58 <__libc_init_array+0x40>)
 8007a2a:	4c0c      	ldr	r4, [pc, #48]	; (8007a5c <__libc_init_array+0x44>)
 8007a2c:	f002 fa14 	bl	8009e58 <_init>
 8007a30:	1b64      	subs	r4, r4, r5
 8007a32:	10a4      	asrs	r4, r4, #2
 8007a34:	2600      	movs	r6, #0
 8007a36:	42a6      	cmp	r6, r4
 8007a38:	d105      	bne.n	8007a46 <__libc_init_array+0x2e>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a40:	4798      	blx	r3
 8007a42:	3601      	adds	r6, #1
 8007a44:	e7ee      	b.n	8007a24 <__libc_init_array+0xc>
 8007a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a4a:	4798      	blx	r3
 8007a4c:	3601      	adds	r6, #1
 8007a4e:	e7f2      	b.n	8007a36 <__libc_init_array+0x1e>
 8007a50:	0800a718 	.word	0x0800a718
 8007a54:	0800a718 	.word	0x0800a718
 8007a58:	0800a718 	.word	0x0800a718
 8007a5c:	0800a71c 	.word	0x0800a71c

08007a60 <memset>:
 8007a60:	4402      	add	r2, r0
 8007a62:	4603      	mov	r3, r0
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d100      	bne.n	8007a6a <memset+0xa>
 8007a68:	4770      	bx	lr
 8007a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6e:	e7f9      	b.n	8007a64 <memset+0x4>

08007a70 <cos>:
 8007a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a72:	ec53 2b10 	vmov	r2, r3, d0
 8007a76:	4826      	ldr	r0, [pc, #152]	; (8007b10 <cos+0xa0>)
 8007a78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a7c:	4281      	cmp	r1, r0
 8007a7e:	dc06      	bgt.n	8007a8e <cos+0x1e>
 8007a80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007b08 <cos+0x98>
 8007a84:	b005      	add	sp, #20
 8007a86:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a8a:	f001 bae1 	b.w	8009050 <__kernel_cos>
 8007a8e:	4821      	ldr	r0, [pc, #132]	; (8007b14 <cos+0xa4>)
 8007a90:	4281      	cmp	r1, r0
 8007a92:	dd09      	ble.n	8007aa8 <cos+0x38>
 8007a94:	ee10 0a10 	vmov	r0, s0
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f7f8 fb99 	bl	80001d0 <__aeabi_dsub>
 8007a9e:	ec41 0b10 	vmov	d0, r0, r1
 8007aa2:	b005      	add	sp, #20
 8007aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007aa8:	4668      	mov	r0, sp
 8007aaa:	f000 fe89 	bl	80087c0 <__ieee754_rem_pio2>
 8007aae:	f000 0003 	and.w	r0, r0, #3
 8007ab2:	2801      	cmp	r0, #1
 8007ab4:	d00b      	beq.n	8007ace <cos+0x5e>
 8007ab6:	2802      	cmp	r0, #2
 8007ab8:	d016      	beq.n	8007ae8 <cos+0x78>
 8007aba:	b9e0      	cbnz	r0, 8007af6 <cos+0x86>
 8007abc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ac0:	ed9d 0b00 	vldr	d0, [sp]
 8007ac4:	f001 fac4 	bl	8009050 <__kernel_cos>
 8007ac8:	ec51 0b10 	vmov	r0, r1, d0
 8007acc:	e7e7      	b.n	8007a9e <cos+0x2e>
 8007ace:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ad2:	ed9d 0b00 	vldr	d0, [sp]
 8007ad6:	f001 fed3 	bl	8009880 <__kernel_sin>
 8007ada:	ec53 2b10 	vmov	r2, r3, d0
 8007ade:	ee10 0a10 	vmov	r0, s0
 8007ae2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ae6:	e7da      	b.n	8007a9e <cos+0x2e>
 8007ae8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007aec:	ed9d 0b00 	vldr	d0, [sp]
 8007af0:	f001 faae 	bl	8009050 <__kernel_cos>
 8007af4:	e7f1      	b.n	8007ada <cos+0x6a>
 8007af6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007afa:	ed9d 0b00 	vldr	d0, [sp]
 8007afe:	2001      	movs	r0, #1
 8007b00:	f001 febe 	bl	8009880 <__kernel_sin>
 8007b04:	e7e0      	b.n	8007ac8 <cos+0x58>
 8007b06:	bf00      	nop
	...
 8007b10:	3fe921fb 	.word	0x3fe921fb
 8007b14:	7fefffff 	.word	0x7fefffff

08007b18 <sin>:
 8007b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b1a:	ec53 2b10 	vmov	r2, r3, d0
 8007b1e:	4828      	ldr	r0, [pc, #160]	; (8007bc0 <sin+0xa8>)
 8007b20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b24:	4281      	cmp	r1, r0
 8007b26:	dc07      	bgt.n	8007b38 <sin+0x20>
 8007b28:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007bb8 <sin+0xa0>
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	b005      	add	sp, #20
 8007b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b34:	f001 bea4 	b.w	8009880 <__kernel_sin>
 8007b38:	4822      	ldr	r0, [pc, #136]	; (8007bc4 <sin+0xac>)
 8007b3a:	4281      	cmp	r1, r0
 8007b3c:	dd09      	ble.n	8007b52 <sin+0x3a>
 8007b3e:	ee10 0a10 	vmov	r0, s0
 8007b42:	4619      	mov	r1, r3
 8007b44:	f7f8 fb44 	bl	80001d0 <__aeabi_dsub>
 8007b48:	ec41 0b10 	vmov	d0, r0, r1
 8007b4c:	b005      	add	sp, #20
 8007b4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b52:	4668      	mov	r0, sp
 8007b54:	f000 fe34 	bl	80087c0 <__ieee754_rem_pio2>
 8007b58:	f000 0003 	and.w	r0, r0, #3
 8007b5c:	2801      	cmp	r0, #1
 8007b5e:	d00c      	beq.n	8007b7a <sin+0x62>
 8007b60:	2802      	cmp	r0, #2
 8007b62:	d011      	beq.n	8007b88 <sin+0x70>
 8007b64:	b9f0      	cbnz	r0, 8007ba4 <sin+0x8c>
 8007b66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b6a:	ed9d 0b00 	vldr	d0, [sp]
 8007b6e:	2001      	movs	r0, #1
 8007b70:	f001 fe86 	bl	8009880 <__kernel_sin>
 8007b74:	ec51 0b10 	vmov	r0, r1, d0
 8007b78:	e7e6      	b.n	8007b48 <sin+0x30>
 8007b7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b7e:	ed9d 0b00 	vldr	d0, [sp]
 8007b82:	f001 fa65 	bl	8009050 <__kernel_cos>
 8007b86:	e7f5      	b.n	8007b74 <sin+0x5c>
 8007b88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007b8c:	ed9d 0b00 	vldr	d0, [sp]
 8007b90:	2001      	movs	r0, #1
 8007b92:	f001 fe75 	bl	8009880 <__kernel_sin>
 8007b96:	ec53 2b10 	vmov	r2, r3, d0
 8007b9a:	ee10 0a10 	vmov	r0, s0
 8007b9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ba2:	e7d1      	b.n	8007b48 <sin+0x30>
 8007ba4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ba8:	ed9d 0b00 	vldr	d0, [sp]
 8007bac:	f001 fa50 	bl	8009050 <__kernel_cos>
 8007bb0:	e7f1      	b.n	8007b96 <sin+0x7e>
 8007bb2:	bf00      	nop
 8007bb4:	f3af 8000 	nop.w
	...
 8007bc0:	3fe921fb 	.word	0x3fe921fb
 8007bc4:	7fefffff 	.word	0x7fefffff

08007bc8 <pow>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	ed2d 8b02 	vpush	{d8}
 8007bce:	eeb0 8a40 	vmov.f32	s16, s0
 8007bd2:	eef0 8a60 	vmov.f32	s17, s1
 8007bd6:	ec55 4b11 	vmov	r4, r5, d1
 8007bda:	f000 f8c1 	bl	8007d60 <__ieee754_pow>
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	4629      	mov	r1, r5
 8007be6:	ec57 6b10 	vmov	r6, r7, d0
 8007bea:	f7f8 ff43 	bl	8000a74 <__aeabi_dcmpun>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d13b      	bne.n	8007c6a <pow+0xa2>
 8007bf2:	ec51 0b18 	vmov	r0, r1, d8
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f7f8 ff09 	bl	8000a10 <__aeabi_dcmpeq>
 8007bfe:	b1b8      	cbz	r0, 8007c30 <pow+0x68>
 8007c00:	2200      	movs	r2, #0
 8007c02:	2300      	movs	r3, #0
 8007c04:	4620      	mov	r0, r4
 8007c06:	4629      	mov	r1, r5
 8007c08:	f7f8 ff02 	bl	8000a10 <__aeabi_dcmpeq>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d146      	bne.n	8007c9e <pow+0xd6>
 8007c10:	ec45 4b10 	vmov	d0, r4, r5
 8007c14:	f001 ff2b 	bl	8009a6e <finite>
 8007c18:	b338      	cbz	r0, 8007c6a <pow+0xa2>
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4629      	mov	r1, r5
 8007c22:	f7f8 feff 	bl	8000a24 <__aeabi_dcmplt>
 8007c26:	b300      	cbz	r0, 8007c6a <pow+0xa2>
 8007c28:	f7ff fef0 	bl	8007a0c <__errno>
 8007c2c:	2322      	movs	r3, #34	; 0x22
 8007c2e:	e01b      	b.n	8007c68 <pow+0xa0>
 8007c30:	ec47 6b10 	vmov	d0, r6, r7
 8007c34:	f001 ff1b 	bl	8009a6e <finite>
 8007c38:	b9e0      	cbnz	r0, 8007c74 <pow+0xac>
 8007c3a:	eeb0 0a48 	vmov.f32	s0, s16
 8007c3e:	eef0 0a68 	vmov.f32	s1, s17
 8007c42:	f001 ff14 	bl	8009a6e <finite>
 8007c46:	b1a8      	cbz	r0, 8007c74 <pow+0xac>
 8007c48:	ec45 4b10 	vmov	d0, r4, r5
 8007c4c:	f001 ff0f 	bl	8009a6e <finite>
 8007c50:	b180      	cbz	r0, 8007c74 <pow+0xac>
 8007c52:	4632      	mov	r2, r6
 8007c54:	463b      	mov	r3, r7
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7f8 ff0b 	bl	8000a74 <__aeabi_dcmpun>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d0e2      	beq.n	8007c28 <pow+0x60>
 8007c62:	f7ff fed3 	bl	8007a0c <__errno>
 8007c66:	2321      	movs	r3, #33	; 0x21
 8007c68:	6003      	str	r3, [r0, #0]
 8007c6a:	ecbd 8b02 	vpop	{d8}
 8007c6e:	ec47 6b10 	vmov	d0, r6, r7
 8007c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c74:	2200      	movs	r2, #0
 8007c76:	2300      	movs	r3, #0
 8007c78:	4630      	mov	r0, r6
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	f7f8 fec8 	bl	8000a10 <__aeabi_dcmpeq>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d0f2      	beq.n	8007c6a <pow+0xa2>
 8007c84:	eeb0 0a48 	vmov.f32	s0, s16
 8007c88:	eef0 0a68 	vmov.f32	s1, s17
 8007c8c:	f001 feef 	bl	8009a6e <finite>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d0ea      	beq.n	8007c6a <pow+0xa2>
 8007c94:	ec45 4b10 	vmov	d0, r4, r5
 8007c98:	f001 fee9 	bl	8009a6e <finite>
 8007c9c:	e7c3      	b.n	8007c26 <pow+0x5e>
 8007c9e:	4f01      	ldr	r7, [pc, #4]	; (8007ca4 <pow+0xdc>)
 8007ca0:	2600      	movs	r6, #0
 8007ca2:	e7e2      	b.n	8007c6a <pow+0xa2>
 8007ca4:	3ff00000 	.word	0x3ff00000

08007ca8 <sqrt>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	ed2d 8b02 	vpush	{d8}
 8007cae:	ec55 4b10 	vmov	r4, r5, d0
 8007cb2:	f000 ff91 	bl	8008bd8 <__ieee754_sqrt>
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	462b      	mov	r3, r5
 8007cba:	4620      	mov	r0, r4
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	eeb0 8a40 	vmov.f32	s16, s0
 8007cc2:	eef0 8a60 	vmov.f32	s17, s1
 8007cc6:	f7f8 fed5 	bl	8000a74 <__aeabi_dcmpun>
 8007cca:	b990      	cbnz	r0, 8007cf2 <sqrt+0x4a>
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2300      	movs	r3, #0
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f7f8 fea6 	bl	8000a24 <__aeabi_dcmplt>
 8007cd8:	b158      	cbz	r0, 8007cf2 <sqrt+0x4a>
 8007cda:	f7ff fe97 	bl	8007a0c <__errno>
 8007cde:	2321      	movs	r3, #33	; 0x21
 8007ce0:	6003      	str	r3, [r0, #0]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	4619      	mov	r1, r3
 8007cea:	f7f8 fd53 	bl	8000794 <__aeabi_ddiv>
 8007cee:	ec41 0b18 	vmov	d8, r0, r1
 8007cf2:	eeb0 0a48 	vmov.f32	s0, s16
 8007cf6:	eef0 0a68 	vmov.f32	s1, s17
 8007cfa:	ecbd 8b02 	vpop	{d8}
 8007cfe:	bd38      	pop	{r3, r4, r5, pc}

08007d00 <asinf>:
 8007d00:	b508      	push	{r3, lr}
 8007d02:	ed2d 8b02 	vpush	{d8}
 8007d06:	eeb0 8a40 	vmov.f32	s16, s0
 8007d0a:	f001 f817 	bl	8008d3c <__ieee754_asinf>
 8007d0e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d16:	eef0 8a40 	vmov.f32	s17, s0
 8007d1a:	d615      	bvs.n	8007d48 <asinf+0x48>
 8007d1c:	eeb0 0a48 	vmov.f32	s0, s16
 8007d20:	f002 f88c 	bl	8009e3c <fabsf>
 8007d24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007d28:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d30:	dd0a      	ble.n	8007d48 <asinf+0x48>
 8007d32:	f7ff fe6b 	bl	8007a0c <__errno>
 8007d36:	ecbd 8b02 	vpop	{d8}
 8007d3a:	2321      	movs	r3, #33	; 0x21
 8007d3c:	6003      	str	r3, [r0, #0]
 8007d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d42:	4804      	ldr	r0, [pc, #16]	; (8007d54 <asinf+0x54>)
 8007d44:	f002 b882 	b.w	8009e4c <nanf>
 8007d48:	eeb0 0a68 	vmov.f32	s0, s17
 8007d4c:	ecbd 8b02 	vpop	{d8}
 8007d50:	bd08      	pop	{r3, pc}
 8007d52:	bf00      	nop
 8007d54:	0800a4c8 	.word	0x0800a4c8

08007d58 <atan2f>:
 8007d58:	f001 b8d6 	b.w	8008f08 <__ieee754_atan2f>
 8007d5c:	0000      	movs	r0, r0
	...

08007d60 <__ieee754_pow>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	ed2d 8b06 	vpush	{d8-d10}
 8007d68:	b089      	sub	sp, #36	; 0x24
 8007d6a:	ed8d 1b00 	vstr	d1, [sp]
 8007d6e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007d72:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007d76:	ea58 0102 	orrs.w	r1, r8, r2
 8007d7a:	ec57 6b10 	vmov	r6, r7, d0
 8007d7e:	d115      	bne.n	8007dac <__ieee754_pow+0x4c>
 8007d80:	19b3      	adds	r3, r6, r6
 8007d82:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007d86:	4152      	adcs	r2, r2
 8007d88:	4299      	cmp	r1, r3
 8007d8a:	4b89      	ldr	r3, [pc, #548]	; (8007fb0 <__ieee754_pow+0x250>)
 8007d8c:	4193      	sbcs	r3, r2
 8007d8e:	f080 84d2 	bcs.w	8008736 <__ieee754_pow+0x9d6>
 8007d92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d96:	4630      	mov	r0, r6
 8007d98:	4639      	mov	r1, r7
 8007d9a:	f7f8 fa1b 	bl	80001d4 <__adddf3>
 8007d9e:	ec41 0b10 	vmov	d0, r0, r1
 8007da2:	b009      	add	sp, #36	; 0x24
 8007da4:	ecbd 8b06 	vpop	{d8-d10}
 8007da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dac:	4b81      	ldr	r3, [pc, #516]	; (8007fb4 <__ieee754_pow+0x254>)
 8007dae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007db2:	429c      	cmp	r4, r3
 8007db4:	ee10 aa10 	vmov	sl, s0
 8007db8:	463d      	mov	r5, r7
 8007dba:	dc06      	bgt.n	8007dca <__ieee754_pow+0x6a>
 8007dbc:	d101      	bne.n	8007dc2 <__ieee754_pow+0x62>
 8007dbe:	2e00      	cmp	r6, #0
 8007dc0:	d1e7      	bne.n	8007d92 <__ieee754_pow+0x32>
 8007dc2:	4598      	cmp	r8, r3
 8007dc4:	dc01      	bgt.n	8007dca <__ieee754_pow+0x6a>
 8007dc6:	d10f      	bne.n	8007de8 <__ieee754_pow+0x88>
 8007dc8:	b172      	cbz	r2, 8007de8 <__ieee754_pow+0x88>
 8007dca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007dce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007dd2:	ea55 050a 	orrs.w	r5, r5, sl
 8007dd6:	d1dc      	bne.n	8007d92 <__ieee754_pow+0x32>
 8007dd8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ddc:	18db      	adds	r3, r3, r3
 8007dde:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007de2:	4152      	adcs	r2, r2
 8007de4:	429d      	cmp	r5, r3
 8007de6:	e7d0      	b.n	8007d8a <__ieee754_pow+0x2a>
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	da3b      	bge.n	8007e64 <__ieee754_pow+0x104>
 8007dec:	4b72      	ldr	r3, [pc, #456]	; (8007fb8 <__ieee754_pow+0x258>)
 8007dee:	4598      	cmp	r8, r3
 8007df0:	dc51      	bgt.n	8007e96 <__ieee754_pow+0x136>
 8007df2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007df6:	4598      	cmp	r8, r3
 8007df8:	f340 84ac 	ble.w	8008754 <__ieee754_pow+0x9f4>
 8007dfc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e04:	2b14      	cmp	r3, #20
 8007e06:	dd0f      	ble.n	8007e28 <__ieee754_pow+0xc8>
 8007e08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007e0c:	fa22 f103 	lsr.w	r1, r2, r3
 8007e10:	fa01 f303 	lsl.w	r3, r1, r3
 8007e14:	4293      	cmp	r3, r2
 8007e16:	f040 849d 	bne.w	8008754 <__ieee754_pow+0x9f4>
 8007e1a:	f001 0101 	and.w	r1, r1, #1
 8007e1e:	f1c1 0302 	rsb	r3, r1, #2
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	b182      	cbz	r2, 8007e48 <__ieee754_pow+0xe8>
 8007e26:	e05f      	b.n	8007ee8 <__ieee754_pow+0x188>
 8007e28:	2a00      	cmp	r2, #0
 8007e2a:	d15b      	bne.n	8007ee4 <__ieee754_pow+0x184>
 8007e2c:	f1c3 0314 	rsb	r3, r3, #20
 8007e30:	fa48 f103 	asr.w	r1, r8, r3
 8007e34:	fa01 f303 	lsl.w	r3, r1, r3
 8007e38:	4543      	cmp	r3, r8
 8007e3a:	f040 8488 	bne.w	800874e <__ieee754_pow+0x9ee>
 8007e3e:	f001 0101 	and.w	r1, r1, #1
 8007e42:	f1c1 0302 	rsb	r3, r1, #2
 8007e46:	9304      	str	r3, [sp, #16]
 8007e48:	4b5c      	ldr	r3, [pc, #368]	; (8007fbc <__ieee754_pow+0x25c>)
 8007e4a:	4598      	cmp	r8, r3
 8007e4c:	d132      	bne.n	8007eb4 <__ieee754_pow+0x154>
 8007e4e:	f1b9 0f00 	cmp.w	r9, #0
 8007e52:	f280 8478 	bge.w	8008746 <__ieee754_pow+0x9e6>
 8007e56:	4959      	ldr	r1, [pc, #356]	; (8007fbc <__ieee754_pow+0x25c>)
 8007e58:	4632      	mov	r2, r6
 8007e5a:	463b      	mov	r3, r7
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	f7f8 fc99 	bl	8000794 <__aeabi_ddiv>
 8007e62:	e79c      	b.n	8007d9e <__ieee754_pow+0x3e>
 8007e64:	2300      	movs	r3, #0
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	d13d      	bne.n	8007ee8 <__ieee754_pow+0x188>
 8007e6c:	4b51      	ldr	r3, [pc, #324]	; (8007fb4 <__ieee754_pow+0x254>)
 8007e6e:	4598      	cmp	r8, r3
 8007e70:	d1ea      	bne.n	8007e48 <__ieee754_pow+0xe8>
 8007e72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007e76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007e7a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e7e:	f000 845a 	beq.w	8008736 <__ieee754_pow+0x9d6>
 8007e82:	4b4f      	ldr	r3, [pc, #316]	; (8007fc0 <__ieee754_pow+0x260>)
 8007e84:	429c      	cmp	r4, r3
 8007e86:	dd08      	ble.n	8007e9a <__ieee754_pow+0x13a>
 8007e88:	f1b9 0f00 	cmp.w	r9, #0
 8007e8c:	f2c0 8457 	blt.w	800873e <__ieee754_pow+0x9de>
 8007e90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e94:	e783      	b.n	8007d9e <__ieee754_pow+0x3e>
 8007e96:	2302      	movs	r3, #2
 8007e98:	e7e5      	b.n	8007e66 <__ieee754_pow+0x106>
 8007e9a:	f1b9 0f00 	cmp.w	r9, #0
 8007e9e:	f04f 0000 	mov.w	r0, #0
 8007ea2:	f04f 0100 	mov.w	r1, #0
 8007ea6:	f6bf af7a 	bge.w	8007d9e <__ieee754_pow+0x3e>
 8007eaa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007eae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007eb2:	e774      	b.n	8007d9e <__ieee754_pow+0x3e>
 8007eb4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007eb8:	d106      	bne.n	8007ec8 <__ieee754_pow+0x168>
 8007eba:	4632      	mov	r2, r6
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	f7f8 fb3d 	bl	8000540 <__aeabi_dmul>
 8007ec6:	e76a      	b.n	8007d9e <__ieee754_pow+0x3e>
 8007ec8:	4b3e      	ldr	r3, [pc, #248]	; (8007fc4 <__ieee754_pow+0x264>)
 8007eca:	4599      	cmp	r9, r3
 8007ecc:	d10c      	bne.n	8007ee8 <__ieee754_pow+0x188>
 8007ece:	2d00      	cmp	r5, #0
 8007ed0:	db0a      	blt.n	8007ee8 <__ieee754_pow+0x188>
 8007ed2:	ec47 6b10 	vmov	d0, r6, r7
 8007ed6:	b009      	add	sp, #36	; 0x24
 8007ed8:	ecbd 8b06 	vpop	{d8-d10}
 8007edc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee0:	f000 be7a 	b.w	8008bd8 <__ieee754_sqrt>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	ec47 6b10 	vmov	d0, r6, r7
 8007eec:	f001 fdb6 	bl	8009a5c <fabs>
 8007ef0:	ec51 0b10 	vmov	r0, r1, d0
 8007ef4:	f1ba 0f00 	cmp.w	sl, #0
 8007ef8:	d129      	bne.n	8007f4e <__ieee754_pow+0x1ee>
 8007efa:	b124      	cbz	r4, 8007f06 <__ieee754_pow+0x1a6>
 8007efc:	4b2f      	ldr	r3, [pc, #188]	; (8007fbc <__ieee754_pow+0x25c>)
 8007efe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d123      	bne.n	8007f4e <__ieee754_pow+0x1ee>
 8007f06:	f1b9 0f00 	cmp.w	r9, #0
 8007f0a:	da05      	bge.n	8007f18 <__ieee754_pow+0x1b8>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	2000      	movs	r0, #0
 8007f12:	492a      	ldr	r1, [pc, #168]	; (8007fbc <__ieee754_pow+0x25c>)
 8007f14:	f7f8 fc3e 	bl	8000794 <__aeabi_ddiv>
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	f6bf af40 	bge.w	8007d9e <__ieee754_pow+0x3e>
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007f24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007f28:	4323      	orrs	r3, r4
 8007f2a:	d108      	bne.n	8007f3e <__ieee754_pow+0x1de>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4610      	mov	r0, r2
 8007f32:	4619      	mov	r1, r3
 8007f34:	f7f8 f94c 	bl	80001d0 <__aeabi_dsub>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	e78f      	b.n	8007e5e <__ieee754_pow+0xfe>
 8007f3e:	9b04      	ldr	r3, [sp, #16]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	f47f af2c 	bne.w	8007d9e <__ieee754_pow+0x3e>
 8007f46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	e727      	b.n	8007d9e <__ieee754_pow+0x3e>
 8007f4e:	0feb      	lsrs	r3, r5, #31
 8007f50:	3b01      	subs	r3, #1
 8007f52:	9306      	str	r3, [sp, #24]
 8007f54:	9a06      	ldr	r2, [sp, #24]
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	d102      	bne.n	8007f62 <__ieee754_pow+0x202>
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	463b      	mov	r3, r7
 8007f60:	e7e6      	b.n	8007f30 <__ieee754_pow+0x1d0>
 8007f62:	4b19      	ldr	r3, [pc, #100]	; (8007fc8 <__ieee754_pow+0x268>)
 8007f64:	4598      	cmp	r8, r3
 8007f66:	f340 80fb 	ble.w	8008160 <__ieee754_pow+0x400>
 8007f6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007f6e:	4598      	cmp	r8, r3
 8007f70:	4b13      	ldr	r3, [pc, #76]	; (8007fc0 <__ieee754_pow+0x260>)
 8007f72:	dd0c      	ble.n	8007f8e <__ieee754_pow+0x22e>
 8007f74:	429c      	cmp	r4, r3
 8007f76:	dc0f      	bgt.n	8007f98 <__ieee754_pow+0x238>
 8007f78:	f1b9 0f00 	cmp.w	r9, #0
 8007f7c:	da0f      	bge.n	8007f9e <__ieee754_pow+0x23e>
 8007f7e:	2000      	movs	r0, #0
 8007f80:	b009      	add	sp, #36	; 0x24
 8007f82:	ecbd 8b06 	vpop	{d8-d10}
 8007f86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8a:	f001 bd5e 	b.w	8009a4a <__math_oflow>
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	dbf2      	blt.n	8007f78 <__ieee754_pow+0x218>
 8007f92:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <__ieee754_pow+0x25c>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	dd19      	ble.n	8007fcc <__ieee754_pow+0x26c>
 8007f98:	f1b9 0f00 	cmp.w	r9, #0
 8007f9c:	dcef      	bgt.n	8007f7e <__ieee754_pow+0x21e>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	b009      	add	sp, #36	; 0x24
 8007fa2:	ecbd 8b06 	vpop	{d8-d10}
 8007fa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007faa:	f001 bd45 	b.w	8009a38 <__math_uflow>
 8007fae:	bf00      	nop
 8007fb0:	fff00000 	.word	0xfff00000
 8007fb4:	7ff00000 	.word	0x7ff00000
 8007fb8:	433fffff 	.word	0x433fffff
 8007fbc:	3ff00000 	.word	0x3ff00000
 8007fc0:	3fefffff 	.word	0x3fefffff
 8007fc4:	3fe00000 	.word	0x3fe00000
 8007fc8:	41e00000 	.word	0x41e00000
 8007fcc:	4b60      	ldr	r3, [pc, #384]	; (8008150 <__ieee754_pow+0x3f0>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f7f8 f8fe 	bl	80001d0 <__aeabi_dsub>
 8007fd4:	a354      	add	r3, pc, #336	; (adr r3, 8008128 <__ieee754_pow+0x3c8>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	4604      	mov	r4, r0
 8007fdc:	460d      	mov	r5, r1
 8007fde:	f7f8 faaf 	bl	8000540 <__aeabi_dmul>
 8007fe2:	a353      	add	r3, pc, #332	; (adr r3, 8008130 <__ieee754_pow+0x3d0>)
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	4606      	mov	r6, r0
 8007fea:	460f      	mov	r7, r1
 8007fec:	4620      	mov	r0, r4
 8007fee:	4629      	mov	r1, r5
 8007ff0:	f7f8 faa6 	bl	8000540 <__aeabi_dmul>
 8007ff4:	4b57      	ldr	r3, [pc, #348]	; (8008154 <__ieee754_pow+0x3f4>)
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	468b      	mov	fp, r1
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4629      	mov	r1, r5
 8008000:	f7f8 fa9e 	bl	8000540 <__aeabi_dmul>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	a14b      	add	r1, pc, #300	; (adr r1, 8008138 <__ieee754_pow+0x3d8>)
 800800a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800800e:	f7f8 f8df 	bl	80001d0 <__aeabi_dsub>
 8008012:	4622      	mov	r2, r4
 8008014:	462b      	mov	r3, r5
 8008016:	f7f8 fa93 	bl	8000540 <__aeabi_dmul>
 800801a:	4602      	mov	r2, r0
 800801c:	460b      	mov	r3, r1
 800801e:	2000      	movs	r0, #0
 8008020:	494d      	ldr	r1, [pc, #308]	; (8008158 <__ieee754_pow+0x3f8>)
 8008022:	f7f8 f8d5 	bl	80001d0 <__aeabi_dsub>
 8008026:	4622      	mov	r2, r4
 8008028:	4680      	mov	r8, r0
 800802a:	4689      	mov	r9, r1
 800802c:	462b      	mov	r3, r5
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fa85 	bl	8000540 <__aeabi_dmul>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4640      	mov	r0, r8
 800803c:	4649      	mov	r1, r9
 800803e:	f7f8 fa7f 	bl	8000540 <__aeabi_dmul>
 8008042:	a33f      	add	r3, pc, #252	; (adr r3, 8008140 <__ieee754_pow+0x3e0>)
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f7f8 fa7a 	bl	8000540 <__aeabi_dmul>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4650      	mov	r0, sl
 8008052:	4659      	mov	r1, fp
 8008054:	f7f8 f8bc 	bl	80001d0 <__aeabi_dsub>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4680      	mov	r8, r0
 800805e:	4689      	mov	r9, r1
 8008060:	4630      	mov	r0, r6
 8008062:	4639      	mov	r1, r7
 8008064:	f7f8 f8b6 	bl	80001d4 <__adddf3>
 8008068:	2000      	movs	r0, #0
 800806a:	4632      	mov	r2, r6
 800806c:	463b      	mov	r3, r7
 800806e:	4604      	mov	r4, r0
 8008070:	460d      	mov	r5, r1
 8008072:	f7f8 f8ad 	bl	80001d0 <__aeabi_dsub>
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4640      	mov	r0, r8
 800807c:	4649      	mov	r1, r9
 800807e:	f7f8 f8a7 	bl	80001d0 <__aeabi_dsub>
 8008082:	9b04      	ldr	r3, [sp, #16]
 8008084:	9a06      	ldr	r2, [sp, #24]
 8008086:	3b01      	subs	r3, #1
 8008088:	4313      	orrs	r3, r2
 800808a:	4682      	mov	sl, r0
 800808c:	468b      	mov	fp, r1
 800808e:	f040 81e7 	bne.w	8008460 <__ieee754_pow+0x700>
 8008092:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008148 <__ieee754_pow+0x3e8>
 8008096:	eeb0 8a47 	vmov.f32	s16, s14
 800809a:	eef0 8a67 	vmov.f32	s17, s15
 800809e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080a2:	2600      	movs	r6, #0
 80080a4:	4632      	mov	r2, r6
 80080a6:	463b      	mov	r3, r7
 80080a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080ac:	f7f8 f890 	bl	80001d0 <__aeabi_dsub>
 80080b0:	4622      	mov	r2, r4
 80080b2:	462b      	mov	r3, r5
 80080b4:	f7f8 fa44 	bl	8000540 <__aeabi_dmul>
 80080b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080bc:	4680      	mov	r8, r0
 80080be:	4689      	mov	r9, r1
 80080c0:	4650      	mov	r0, sl
 80080c2:	4659      	mov	r1, fp
 80080c4:	f7f8 fa3c 	bl	8000540 <__aeabi_dmul>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	4640      	mov	r0, r8
 80080ce:	4649      	mov	r1, r9
 80080d0:	f7f8 f880 	bl	80001d4 <__adddf3>
 80080d4:	4632      	mov	r2, r6
 80080d6:	463b      	mov	r3, r7
 80080d8:	4680      	mov	r8, r0
 80080da:	4689      	mov	r9, r1
 80080dc:	4620      	mov	r0, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	f7f8 fa2e 	bl	8000540 <__aeabi_dmul>
 80080e4:	460b      	mov	r3, r1
 80080e6:	4604      	mov	r4, r0
 80080e8:	460d      	mov	r5, r1
 80080ea:	4602      	mov	r2, r0
 80080ec:	4649      	mov	r1, r9
 80080ee:	4640      	mov	r0, r8
 80080f0:	f7f8 f870 	bl	80001d4 <__adddf3>
 80080f4:	4b19      	ldr	r3, [pc, #100]	; (800815c <__ieee754_pow+0x3fc>)
 80080f6:	4299      	cmp	r1, r3
 80080f8:	ec45 4b19 	vmov	d9, r4, r5
 80080fc:	4606      	mov	r6, r0
 80080fe:	460f      	mov	r7, r1
 8008100:	468b      	mov	fp, r1
 8008102:	f340 82f1 	ble.w	80086e8 <__ieee754_pow+0x988>
 8008106:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800810a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800810e:	4303      	orrs	r3, r0
 8008110:	f000 81e4 	beq.w	80084dc <__ieee754_pow+0x77c>
 8008114:	ec51 0b18 	vmov	r0, r1, d8
 8008118:	2200      	movs	r2, #0
 800811a:	2300      	movs	r3, #0
 800811c:	f7f8 fc82 	bl	8000a24 <__aeabi_dcmplt>
 8008120:	3800      	subs	r0, #0
 8008122:	bf18      	it	ne
 8008124:	2001      	movne	r0, #1
 8008126:	e72b      	b.n	8007f80 <__ieee754_pow+0x220>
 8008128:	60000000 	.word	0x60000000
 800812c:	3ff71547 	.word	0x3ff71547
 8008130:	f85ddf44 	.word	0xf85ddf44
 8008134:	3e54ae0b 	.word	0x3e54ae0b
 8008138:	55555555 	.word	0x55555555
 800813c:	3fd55555 	.word	0x3fd55555
 8008140:	652b82fe 	.word	0x652b82fe
 8008144:	3ff71547 	.word	0x3ff71547
 8008148:	00000000 	.word	0x00000000
 800814c:	bff00000 	.word	0xbff00000
 8008150:	3ff00000 	.word	0x3ff00000
 8008154:	3fd00000 	.word	0x3fd00000
 8008158:	3fe00000 	.word	0x3fe00000
 800815c:	408fffff 	.word	0x408fffff
 8008160:	4bd5      	ldr	r3, [pc, #852]	; (80084b8 <__ieee754_pow+0x758>)
 8008162:	402b      	ands	r3, r5
 8008164:	2200      	movs	r2, #0
 8008166:	b92b      	cbnz	r3, 8008174 <__ieee754_pow+0x414>
 8008168:	4bd4      	ldr	r3, [pc, #848]	; (80084bc <__ieee754_pow+0x75c>)
 800816a:	f7f8 f9e9 	bl	8000540 <__aeabi_dmul>
 800816e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008172:	460c      	mov	r4, r1
 8008174:	1523      	asrs	r3, r4, #20
 8008176:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800817a:	4413      	add	r3, r2
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	4bd0      	ldr	r3, [pc, #832]	; (80084c0 <__ieee754_pow+0x760>)
 8008180:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008184:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008188:	429c      	cmp	r4, r3
 800818a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800818e:	dd08      	ble.n	80081a2 <__ieee754_pow+0x442>
 8008190:	4bcc      	ldr	r3, [pc, #816]	; (80084c4 <__ieee754_pow+0x764>)
 8008192:	429c      	cmp	r4, r3
 8008194:	f340 8162 	ble.w	800845c <__ieee754_pow+0x6fc>
 8008198:	9b05      	ldr	r3, [sp, #20]
 800819a:	3301      	adds	r3, #1
 800819c:	9305      	str	r3, [sp, #20]
 800819e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80081a2:	2400      	movs	r4, #0
 80081a4:	00e3      	lsls	r3, r4, #3
 80081a6:	9307      	str	r3, [sp, #28]
 80081a8:	4bc7      	ldr	r3, [pc, #796]	; (80084c8 <__ieee754_pow+0x768>)
 80081aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081ae:	ed93 7b00 	vldr	d7, [r3]
 80081b2:	4629      	mov	r1, r5
 80081b4:	ec53 2b17 	vmov	r2, r3, d7
 80081b8:	eeb0 9a47 	vmov.f32	s18, s14
 80081bc:	eef0 9a67 	vmov.f32	s19, s15
 80081c0:	4682      	mov	sl, r0
 80081c2:	f7f8 f805 	bl	80001d0 <__aeabi_dsub>
 80081c6:	4652      	mov	r2, sl
 80081c8:	4606      	mov	r6, r0
 80081ca:	460f      	mov	r7, r1
 80081cc:	462b      	mov	r3, r5
 80081ce:	ec51 0b19 	vmov	r0, r1, d9
 80081d2:	f7f7 ffff 	bl	80001d4 <__adddf3>
 80081d6:	4602      	mov	r2, r0
 80081d8:	460b      	mov	r3, r1
 80081da:	2000      	movs	r0, #0
 80081dc:	49bb      	ldr	r1, [pc, #748]	; (80084cc <__ieee754_pow+0x76c>)
 80081de:	f7f8 fad9 	bl	8000794 <__aeabi_ddiv>
 80081e2:	ec41 0b1a 	vmov	d10, r0, r1
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	4630      	mov	r0, r6
 80081ec:	4639      	mov	r1, r7
 80081ee:	f7f8 f9a7 	bl	8000540 <__aeabi_dmul>
 80081f2:	2300      	movs	r3, #0
 80081f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80081fe:	46ab      	mov	fp, r5
 8008200:	106d      	asrs	r5, r5, #1
 8008202:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008206:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800820a:	ec41 0b18 	vmov	d8, r0, r1
 800820e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008212:	2200      	movs	r2, #0
 8008214:	4640      	mov	r0, r8
 8008216:	4649      	mov	r1, r9
 8008218:	4614      	mov	r4, r2
 800821a:	461d      	mov	r5, r3
 800821c:	f7f8 f990 	bl	8000540 <__aeabi_dmul>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4630      	mov	r0, r6
 8008226:	4639      	mov	r1, r7
 8008228:	f7f7 ffd2 	bl	80001d0 <__aeabi_dsub>
 800822c:	ec53 2b19 	vmov	r2, r3, d9
 8008230:	4606      	mov	r6, r0
 8008232:	460f      	mov	r7, r1
 8008234:	4620      	mov	r0, r4
 8008236:	4629      	mov	r1, r5
 8008238:	f7f7 ffca 	bl	80001d0 <__aeabi_dsub>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4650      	mov	r0, sl
 8008242:	4659      	mov	r1, fp
 8008244:	f7f7 ffc4 	bl	80001d0 <__aeabi_dsub>
 8008248:	4642      	mov	r2, r8
 800824a:	464b      	mov	r3, r9
 800824c:	f7f8 f978 	bl	8000540 <__aeabi_dmul>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4630      	mov	r0, r6
 8008256:	4639      	mov	r1, r7
 8008258:	f7f7 ffba 	bl	80001d0 <__aeabi_dsub>
 800825c:	ec53 2b1a 	vmov	r2, r3, d10
 8008260:	f7f8 f96e 	bl	8000540 <__aeabi_dmul>
 8008264:	ec53 2b18 	vmov	r2, r3, d8
 8008268:	ec41 0b19 	vmov	d9, r0, r1
 800826c:	ec51 0b18 	vmov	r0, r1, d8
 8008270:	f7f8 f966 	bl	8000540 <__aeabi_dmul>
 8008274:	a37c      	add	r3, pc, #496	; (adr r3, 8008468 <__ieee754_pow+0x708>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	4604      	mov	r4, r0
 800827c:	460d      	mov	r5, r1
 800827e:	f7f8 f95f 	bl	8000540 <__aeabi_dmul>
 8008282:	a37b      	add	r3, pc, #492	; (adr r3, 8008470 <__ieee754_pow+0x710>)
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f7f7 ffa4 	bl	80001d4 <__adddf3>
 800828c:	4622      	mov	r2, r4
 800828e:	462b      	mov	r3, r5
 8008290:	f7f8 f956 	bl	8000540 <__aeabi_dmul>
 8008294:	a378      	add	r3, pc, #480	; (adr r3, 8008478 <__ieee754_pow+0x718>)
 8008296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829a:	f7f7 ff9b 	bl	80001d4 <__adddf3>
 800829e:	4622      	mov	r2, r4
 80082a0:	462b      	mov	r3, r5
 80082a2:	f7f8 f94d 	bl	8000540 <__aeabi_dmul>
 80082a6:	a376      	add	r3, pc, #472	; (adr r3, 8008480 <__ieee754_pow+0x720>)
 80082a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ac:	f7f7 ff92 	bl	80001d4 <__adddf3>
 80082b0:	4622      	mov	r2, r4
 80082b2:	462b      	mov	r3, r5
 80082b4:	f7f8 f944 	bl	8000540 <__aeabi_dmul>
 80082b8:	a373      	add	r3, pc, #460	; (adr r3, 8008488 <__ieee754_pow+0x728>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f7 ff89 	bl	80001d4 <__adddf3>
 80082c2:	4622      	mov	r2, r4
 80082c4:	462b      	mov	r3, r5
 80082c6:	f7f8 f93b 	bl	8000540 <__aeabi_dmul>
 80082ca:	a371      	add	r3, pc, #452	; (adr r3, 8008490 <__ieee754_pow+0x730>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f7 ff80 	bl	80001d4 <__adddf3>
 80082d4:	4622      	mov	r2, r4
 80082d6:	4606      	mov	r6, r0
 80082d8:	460f      	mov	r7, r1
 80082da:	462b      	mov	r3, r5
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f7f8 f92e 	bl	8000540 <__aeabi_dmul>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f8 f928 	bl	8000540 <__aeabi_dmul>
 80082f0:	4642      	mov	r2, r8
 80082f2:	4604      	mov	r4, r0
 80082f4:	460d      	mov	r5, r1
 80082f6:	464b      	mov	r3, r9
 80082f8:	ec51 0b18 	vmov	r0, r1, d8
 80082fc:	f7f7 ff6a 	bl	80001d4 <__adddf3>
 8008300:	ec53 2b19 	vmov	r2, r3, d9
 8008304:	f7f8 f91c 	bl	8000540 <__aeabi_dmul>
 8008308:	4622      	mov	r2, r4
 800830a:	462b      	mov	r3, r5
 800830c:	f7f7 ff62 	bl	80001d4 <__adddf3>
 8008310:	4642      	mov	r2, r8
 8008312:	4682      	mov	sl, r0
 8008314:	468b      	mov	fp, r1
 8008316:	464b      	mov	r3, r9
 8008318:	4640      	mov	r0, r8
 800831a:	4649      	mov	r1, r9
 800831c:	f7f8 f910 	bl	8000540 <__aeabi_dmul>
 8008320:	4b6b      	ldr	r3, [pc, #428]	; (80084d0 <__ieee754_pow+0x770>)
 8008322:	2200      	movs	r2, #0
 8008324:	4606      	mov	r6, r0
 8008326:	460f      	mov	r7, r1
 8008328:	f7f7 ff54 	bl	80001d4 <__adddf3>
 800832c:	4652      	mov	r2, sl
 800832e:	465b      	mov	r3, fp
 8008330:	f7f7 ff50 	bl	80001d4 <__adddf3>
 8008334:	2000      	movs	r0, #0
 8008336:	4604      	mov	r4, r0
 8008338:	460d      	mov	r5, r1
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4640      	mov	r0, r8
 8008340:	4649      	mov	r1, r9
 8008342:	f7f8 f8fd 	bl	8000540 <__aeabi_dmul>
 8008346:	4b62      	ldr	r3, [pc, #392]	; (80084d0 <__ieee754_pow+0x770>)
 8008348:	4680      	mov	r8, r0
 800834a:	4689      	mov	r9, r1
 800834c:	2200      	movs	r2, #0
 800834e:	4620      	mov	r0, r4
 8008350:	4629      	mov	r1, r5
 8008352:	f7f7 ff3d 	bl	80001d0 <__aeabi_dsub>
 8008356:	4632      	mov	r2, r6
 8008358:	463b      	mov	r3, r7
 800835a:	f7f7 ff39 	bl	80001d0 <__aeabi_dsub>
 800835e:	4602      	mov	r2, r0
 8008360:	460b      	mov	r3, r1
 8008362:	4650      	mov	r0, sl
 8008364:	4659      	mov	r1, fp
 8008366:	f7f7 ff33 	bl	80001d0 <__aeabi_dsub>
 800836a:	ec53 2b18 	vmov	r2, r3, d8
 800836e:	f7f8 f8e7 	bl	8000540 <__aeabi_dmul>
 8008372:	4622      	mov	r2, r4
 8008374:	4606      	mov	r6, r0
 8008376:	460f      	mov	r7, r1
 8008378:	462b      	mov	r3, r5
 800837a:	ec51 0b19 	vmov	r0, r1, d9
 800837e:	f7f8 f8df 	bl	8000540 <__aeabi_dmul>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	f7f7 ff23 	bl	80001d4 <__adddf3>
 800838e:	4606      	mov	r6, r0
 8008390:	460f      	mov	r7, r1
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	4640      	mov	r0, r8
 8008398:	4649      	mov	r1, r9
 800839a:	f7f7 ff1b 	bl	80001d4 <__adddf3>
 800839e:	a33e      	add	r3, pc, #248	; (adr r3, 8008498 <__ieee754_pow+0x738>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	2000      	movs	r0, #0
 80083a6:	4604      	mov	r4, r0
 80083a8:	460d      	mov	r5, r1
 80083aa:	f7f8 f8c9 	bl	8000540 <__aeabi_dmul>
 80083ae:	4642      	mov	r2, r8
 80083b0:	ec41 0b18 	vmov	d8, r0, r1
 80083b4:	464b      	mov	r3, r9
 80083b6:	4620      	mov	r0, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	f7f7 ff09 	bl	80001d0 <__aeabi_dsub>
 80083be:	4602      	mov	r2, r0
 80083c0:	460b      	mov	r3, r1
 80083c2:	4630      	mov	r0, r6
 80083c4:	4639      	mov	r1, r7
 80083c6:	f7f7 ff03 	bl	80001d0 <__aeabi_dsub>
 80083ca:	a335      	add	r3, pc, #212	; (adr r3, 80084a0 <__ieee754_pow+0x740>)
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f7f8 f8b6 	bl	8000540 <__aeabi_dmul>
 80083d4:	a334      	add	r3, pc, #208	; (adr r3, 80084a8 <__ieee754_pow+0x748>)
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	4606      	mov	r6, r0
 80083dc:	460f      	mov	r7, r1
 80083de:	4620      	mov	r0, r4
 80083e0:	4629      	mov	r1, r5
 80083e2:	f7f8 f8ad 	bl	8000540 <__aeabi_dmul>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f7 fef1 	bl	80001d4 <__adddf3>
 80083f2:	9a07      	ldr	r2, [sp, #28]
 80083f4:	4b37      	ldr	r3, [pc, #220]	; (80084d4 <__ieee754_pow+0x774>)
 80083f6:	4413      	add	r3, r2
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f7f7 feea 	bl	80001d4 <__adddf3>
 8008400:	4682      	mov	sl, r0
 8008402:	9805      	ldr	r0, [sp, #20]
 8008404:	468b      	mov	fp, r1
 8008406:	f7f8 f831 	bl	800046c <__aeabi_i2d>
 800840a:	9a07      	ldr	r2, [sp, #28]
 800840c:	4b32      	ldr	r3, [pc, #200]	; (80084d8 <__ieee754_pow+0x778>)
 800840e:	4413      	add	r3, r2
 8008410:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008414:	4606      	mov	r6, r0
 8008416:	460f      	mov	r7, r1
 8008418:	4652      	mov	r2, sl
 800841a:	465b      	mov	r3, fp
 800841c:	ec51 0b18 	vmov	r0, r1, d8
 8008420:	f7f7 fed8 	bl	80001d4 <__adddf3>
 8008424:	4642      	mov	r2, r8
 8008426:	464b      	mov	r3, r9
 8008428:	f7f7 fed4 	bl	80001d4 <__adddf3>
 800842c:	4632      	mov	r2, r6
 800842e:	463b      	mov	r3, r7
 8008430:	f7f7 fed0 	bl	80001d4 <__adddf3>
 8008434:	2000      	movs	r0, #0
 8008436:	4632      	mov	r2, r6
 8008438:	463b      	mov	r3, r7
 800843a:	4604      	mov	r4, r0
 800843c:	460d      	mov	r5, r1
 800843e:	f7f7 fec7 	bl	80001d0 <__aeabi_dsub>
 8008442:	4642      	mov	r2, r8
 8008444:	464b      	mov	r3, r9
 8008446:	f7f7 fec3 	bl	80001d0 <__aeabi_dsub>
 800844a:	ec53 2b18 	vmov	r2, r3, d8
 800844e:	f7f7 febf 	bl	80001d0 <__aeabi_dsub>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4650      	mov	r0, sl
 8008458:	4659      	mov	r1, fp
 800845a:	e610      	b.n	800807e <__ieee754_pow+0x31e>
 800845c:	2401      	movs	r4, #1
 800845e:	e6a1      	b.n	80081a4 <__ieee754_pow+0x444>
 8008460:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80084b0 <__ieee754_pow+0x750>
 8008464:	e617      	b.n	8008096 <__ieee754_pow+0x336>
 8008466:	bf00      	nop
 8008468:	4a454eef 	.word	0x4a454eef
 800846c:	3fca7e28 	.word	0x3fca7e28
 8008470:	93c9db65 	.word	0x93c9db65
 8008474:	3fcd864a 	.word	0x3fcd864a
 8008478:	a91d4101 	.word	0xa91d4101
 800847c:	3fd17460 	.word	0x3fd17460
 8008480:	518f264d 	.word	0x518f264d
 8008484:	3fd55555 	.word	0x3fd55555
 8008488:	db6fabff 	.word	0xdb6fabff
 800848c:	3fdb6db6 	.word	0x3fdb6db6
 8008490:	33333303 	.word	0x33333303
 8008494:	3fe33333 	.word	0x3fe33333
 8008498:	e0000000 	.word	0xe0000000
 800849c:	3feec709 	.word	0x3feec709
 80084a0:	dc3a03fd 	.word	0xdc3a03fd
 80084a4:	3feec709 	.word	0x3feec709
 80084a8:	145b01f5 	.word	0x145b01f5
 80084ac:	be3e2fe0 	.word	0xbe3e2fe0
 80084b0:	00000000 	.word	0x00000000
 80084b4:	3ff00000 	.word	0x3ff00000
 80084b8:	7ff00000 	.word	0x7ff00000
 80084bc:	43400000 	.word	0x43400000
 80084c0:	0003988e 	.word	0x0003988e
 80084c4:	000bb679 	.word	0x000bb679
 80084c8:	0800a4d0 	.word	0x0800a4d0
 80084cc:	3ff00000 	.word	0x3ff00000
 80084d0:	40080000 	.word	0x40080000
 80084d4:	0800a4f0 	.word	0x0800a4f0
 80084d8:	0800a4e0 	.word	0x0800a4e0
 80084dc:	a3b5      	add	r3, pc, #724	; (adr r3, 80087b4 <__ieee754_pow+0xa54>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	4640      	mov	r0, r8
 80084e4:	4649      	mov	r1, r9
 80084e6:	f7f7 fe75 	bl	80001d4 <__adddf3>
 80084ea:	4622      	mov	r2, r4
 80084ec:	ec41 0b1a 	vmov	d10, r0, r1
 80084f0:	462b      	mov	r3, r5
 80084f2:	4630      	mov	r0, r6
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f7 fe6b 	bl	80001d0 <__aeabi_dsub>
 80084fa:	4602      	mov	r2, r0
 80084fc:	460b      	mov	r3, r1
 80084fe:	ec51 0b1a 	vmov	r0, r1, d10
 8008502:	f7f8 faad 	bl	8000a60 <__aeabi_dcmpgt>
 8008506:	2800      	cmp	r0, #0
 8008508:	f47f ae04 	bne.w	8008114 <__ieee754_pow+0x3b4>
 800850c:	4aa4      	ldr	r2, [pc, #656]	; (80087a0 <__ieee754_pow+0xa40>)
 800850e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008512:	4293      	cmp	r3, r2
 8008514:	f340 8108 	ble.w	8008728 <__ieee754_pow+0x9c8>
 8008518:	151b      	asrs	r3, r3, #20
 800851a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800851e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008522:	fa4a f303 	asr.w	r3, sl, r3
 8008526:	445b      	add	r3, fp
 8008528:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800852c:	4e9d      	ldr	r6, [pc, #628]	; (80087a4 <__ieee754_pow+0xa44>)
 800852e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008532:	4116      	asrs	r6, r2
 8008534:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008538:	2000      	movs	r0, #0
 800853a:	ea23 0106 	bic.w	r1, r3, r6
 800853e:	f1c2 0214 	rsb	r2, r2, #20
 8008542:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008546:	fa4a fa02 	asr.w	sl, sl, r2
 800854a:	f1bb 0f00 	cmp.w	fp, #0
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4620      	mov	r0, r4
 8008554:	4629      	mov	r1, r5
 8008556:	bfb8      	it	lt
 8008558:	f1ca 0a00 	rsblt	sl, sl, #0
 800855c:	f7f7 fe38 	bl	80001d0 <__aeabi_dsub>
 8008560:	ec41 0b19 	vmov	d9, r0, r1
 8008564:	4642      	mov	r2, r8
 8008566:	464b      	mov	r3, r9
 8008568:	ec51 0b19 	vmov	r0, r1, d9
 800856c:	f7f7 fe32 	bl	80001d4 <__adddf3>
 8008570:	a37b      	add	r3, pc, #492	; (adr r3, 8008760 <__ieee754_pow+0xa00>)
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	2000      	movs	r0, #0
 8008578:	4604      	mov	r4, r0
 800857a:	460d      	mov	r5, r1
 800857c:	f7f7 ffe0 	bl	8000540 <__aeabi_dmul>
 8008580:	ec53 2b19 	vmov	r2, r3, d9
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	4620      	mov	r0, r4
 800858a:	4629      	mov	r1, r5
 800858c:	f7f7 fe20 	bl	80001d0 <__aeabi_dsub>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4640      	mov	r0, r8
 8008596:	4649      	mov	r1, r9
 8008598:	f7f7 fe1a 	bl	80001d0 <__aeabi_dsub>
 800859c:	a372      	add	r3, pc, #456	; (adr r3, 8008768 <__ieee754_pow+0xa08>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f7f7 ffcd 	bl	8000540 <__aeabi_dmul>
 80085a6:	a372      	add	r3, pc, #456	; (adr r3, 8008770 <__ieee754_pow+0xa10>)
 80085a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ac:	4680      	mov	r8, r0
 80085ae:	4689      	mov	r9, r1
 80085b0:	4620      	mov	r0, r4
 80085b2:	4629      	mov	r1, r5
 80085b4:	f7f7 ffc4 	bl	8000540 <__aeabi_dmul>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4640      	mov	r0, r8
 80085be:	4649      	mov	r1, r9
 80085c0:	f7f7 fe08 	bl	80001d4 <__adddf3>
 80085c4:	4604      	mov	r4, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	4630      	mov	r0, r6
 80085ce:	4639      	mov	r1, r7
 80085d0:	f7f7 fe00 	bl	80001d4 <__adddf3>
 80085d4:	4632      	mov	r2, r6
 80085d6:	463b      	mov	r3, r7
 80085d8:	4680      	mov	r8, r0
 80085da:	4689      	mov	r9, r1
 80085dc:	f7f7 fdf8 	bl	80001d0 <__aeabi_dsub>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4620      	mov	r0, r4
 80085e6:	4629      	mov	r1, r5
 80085e8:	f7f7 fdf2 	bl	80001d0 <__aeabi_dsub>
 80085ec:	4642      	mov	r2, r8
 80085ee:	4606      	mov	r6, r0
 80085f0:	460f      	mov	r7, r1
 80085f2:	464b      	mov	r3, r9
 80085f4:	4640      	mov	r0, r8
 80085f6:	4649      	mov	r1, r9
 80085f8:	f7f7 ffa2 	bl	8000540 <__aeabi_dmul>
 80085fc:	a35e      	add	r3, pc, #376	; (adr r3, 8008778 <__ieee754_pow+0xa18>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	4604      	mov	r4, r0
 8008604:	460d      	mov	r5, r1
 8008606:	f7f7 ff9b 	bl	8000540 <__aeabi_dmul>
 800860a:	a35d      	add	r3, pc, #372	; (adr r3, 8008780 <__ieee754_pow+0xa20>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f7f7 fdde 	bl	80001d0 <__aeabi_dsub>
 8008614:	4622      	mov	r2, r4
 8008616:	462b      	mov	r3, r5
 8008618:	f7f7 ff92 	bl	8000540 <__aeabi_dmul>
 800861c:	a35a      	add	r3, pc, #360	; (adr r3, 8008788 <__ieee754_pow+0xa28>)
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	f7f7 fdd7 	bl	80001d4 <__adddf3>
 8008626:	4622      	mov	r2, r4
 8008628:	462b      	mov	r3, r5
 800862a:	f7f7 ff89 	bl	8000540 <__aeabi_dmul>
 800862e:	a358      	add	r3, pc, #352	; (adr r3, 8008790 <__ieee754_pow+0xa30>)
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f7f7 fdcc 	bl	80001d0 <__aeabi_dsub>
 8008638:	4622      	mov	r2, r4
 800863a:	462b      	mov	r3, r5
 800863c:	f7f7 ff80 	bl	8000540 <__aeabi_dmul>
 8008640:	a355      	add	r3, pc, #340	; (adr r3, 8008798 <__ieee754_pow+0xa38>)
 8008642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008646:	f7f7 fdc5 	bl	80001d4 <__adddf3>
 800864a:	4622      	mov	r2, r4
 800864c:	462b      	mov	r3, r5
 800864e:	f7f7 ff77 	bl	8000540 <__aeabi_dmul>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4640      	mov	r0, r8
 8008658:	4649      	mov	r1, r9
 800865a:	f7f7 fdb9 	bl	80001d0 <__aeabi_dsub>
 800865e:	4604      	mov	r4, r0
 8008660:	460d      	mov	r5, r1
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4640      	mov	r0, r8
 8008668:	4649      	mov	r1, r9
 800866a:	f7f7 ff69 	bl	8000540 <__aeabi_dmul>
 800866e:	2200      	movs	r2, #0
 8008670:	ec41 0b19 	vmov	d9, r0, r1
 8008674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008678:	4620      	mov	r0, r4
 800867a:	4629      	mov	r1, r5
 800867c:	f7f7 fda8 	bl	80001d0 <__aeabi_dsub>
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	ec51 0b19 	vmov	r0, r1, d9
 8008688:	f7f8 f884 	bl	8000794 <__aeabi_ddiv>
 800868c:	4632      	mov	r2, r6
 800868e:	4604      	mov	r4, r0
 8008690:	460d      	mov	r5, r1
 8008692:	463b      	mov	r3, r7
 8008694:	4640      	mov	r0, r8
 8008696:	4649      	mov	r1, r9
 8008698:	f7f7 ff52 	bl	8000540 <__aeabi_dmul>
 800869c:	4632      	mov	r2, r6
 800869e:	463b      	mov	r3, r7
 80086a0:	f7f7 fd98 	bl	80001d4 <__adddf3>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4620      	mov	r0, r4
 80086aa:	4629      	mov	r1, r5
 80086ac:	f7f7 fd90 	bl	80001d0 <__aeabi_dsub>
 80086b0:	4642      	mov	r2, r8
 80086b2:	464b      	mov	r3, r9
 80086b4:	f7f7 fd8c 	bl	80001d0 <__aeabi_dsub>
 80086b8:	460b      	mov	r3, r1
 80086ba:	4602      	mov	r2, r0
 80086bc:	493a      	ldr	r1, [pc, #232]	; (80087a8 <__ieee754_pow+0xa48>)
 80086be:	2000      	movs	r0, #0
 80086c0:	f7f7 fd86 	bl	80001d0 <__aeabi_dsub>
 80086c4:	ec41 0b10 	vmov	d0, r0, r1
 80086c8:	ee10 3a90 	vmov	r3, s1
 80086cc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80086d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086d4:	da2b      	bge.n	800872e <__ieee754_pow+0x9ce>
 80086d6:	4650      	mov	r0, sl
 80086d8:	f001 fa56 	bl	8009b88 <scalbn>
 80086dc:	ec51 0b10 	vmov	r0, r1, d0
 80086e0:	ec53 2b18 	vmov	r2, r3, d8
 80086e4:	f7ff bbed 	b.w	8007ec2 <__ieee754_pow+0x162>
 80086e8:	4b30      	ldr	r3, [pc, #192]	; (80087ac <__ieee754_pow+0xa4c>)
 80086ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80086ee:	429e      	cmp	r6, r3
 80086f0:	f77f af0c 	ble.w	800850c <__ieee754_pow+0x7ac>
 80086f4:	4b2e      	ldr	r3, [pc, #184]	; (80087b0 <__ieee754_pow+0xa50>)
 80086f6:	440b      	add	r3, r1
 80086f8:	4303      	orrs	r3, r0
 80086fa:	d009      	beq.n	8008710 <__ieee754_pow+0x9b0>
 80086fc:	ec51 0b18 	vmov	r0, r1, d8
 8008700:	2200      	movs	r2, #0
 8008702:	2300      	movs	r3, #0
 8008704:	f7f8 f98e 	bl	8000a24 <__aeabi_dcmplt>
 8008708:	3800      	subs	r0, #0
 800870a:	bf18      	it	ne
 800870c:	2001      	movne	r0, #1
 800870e:	e447      	b.n	8007fa0 <__ieee754_pow+0x240>
 8008710:	4622      	mov	r2, r4
 8008712:	462b      	mov	r3, r5
 8008714:	f7f7 fd5c 	bl	80001d0 <__aeabi_dsub>
 8008718:	4642      	mov	r2, r8
 800871a:	464b      	mov	r3, r9
 800871c:	f7f8 f996 	bl	8000a4c <__aeabi_dcmpge>
 8008720:	2800      	cmp	r0, #0
 8008722:	f43f aef3 	beq.w	800850c <__ieee754_pow+0x7ac>
 8008726:	e7e9      	b.n	80086fc <__ieee754_pow+0x99c>
 8008728:	f04f 0a00 	mov.w	sl, #0
 800872c:	e71a      	b.n	8008564 <__ieee754_pow+0x804>
 800872e:	ec51 0b10 	vmov	r0, r1, d0
 8008732:	4619      	mov	r1, r3
 8008734:	e7d4      	b.n	80086e0 <__ieee754_pow+0x980>
 8008736:	491c      	ldr	r1, [pc, #112]	; (80087a8 <__ieee754_pow+0xa48>)
 8008738:	2000      	movs	r0, #0
 800873a:	f7ff bb30 	b.w	8007d9e <__ieee754_pow+0x3e>
 800873e:	2000      	movs	r0, #0
 8008740:	2100      	movs	r1, #0
 8008742:	f7ff bb2c 	b.w	8007d9e <__ieee754_pow+0x3e>
 8008746:	4630      	mov	r0, r6
 8008748:	4639      	mov	r1, r7
 800874a:	f7ff bb28 	b.w	8007d9e <__ieee754_pow+0x3e>
 800874e:	9204      	str	r2, [sp, #16]
 8008750:	f7ff bb7a 	b.w	8007e48 <__ieee754_pow+0xe8>
 8008754:	2300      	movs	r3, #0
 8008756:	f7ff bb64 	b.w	8007e22 <__ieee754_pow+0xc2>
 800875a:	bf00      	nop
 800875c:	f3af 8000 	nop.w
 8008760:	00000000 	.word	0x00000000
 8008764:	3fe62e43 	.word	0x3fe62e43
 8008768:	fefa39ef 	.word	0xfefa39ef
 800876c:	3fe62e42 	.word	0x3fe62e42
 8008770:	0ca86c39 	.word	0x0ca86c39
 8008774:	be205c61 	.word	0xbe205c61
 8008778:	72bea4d0 	.word	0x72bea4d0
 800877c:	3e663769 	.word	0x3e663769
 8008780:	c5d26bf1 	.word	0xc5d26bf1
 8008784:	3ebbbd41 	.word	0x3ebbbd41
 8008788:	af25de2c 	.word	0xaf25de2c
 800878c:	3f11566a 	.word	0x3f11566a
 8008790:	16bebd93 	.word	0x16bebd93
 8008794:	3f66c16c 	.word	0x3f66c16c
 8008798:	5555553e 	.word	0x5555553e
 800879c:	3fc55555 	.word	0x3fc55555
 80087a0:	3fe00000 	.word	0x3fe00000
 80087a4:	000fffff 	.word	0x000fffff
 80087a8:	3ff00000 	.word	0x3ff00000
 80087ac:	4090cbff 	.word	0x4090cbff
 80087b0:	3f6f3400 	.word	0x3f6f3400
 80087b4:	652b82fe 	.word	0x652b82fe
 80087b8:	3c971547 	.word	0x3c971547
 80087bc:	00000000 	.word	0x00000000

080087c0 <__ieee754_rem_pio2>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	ed2d 8b02 	vpush	{d8}
 80087c8:	ec55 4b10 	vmov	r4, r5, d0
 80087cc:	4bca      	ldr	r3, [pc, #808]	; (8008af8 <__ieee754_rem_pio2+0x338>)
 80087ce:	b08b      	sub	sp, #44	; 0x2c
 80087d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80087d4:	4598      	cmp	r8, r3
 80087d6:	4682      	mov	sl, r0
 80087d8:	9502      	str	r5, [sp, #8]
 80087da:	dc08      	bgt.n	80087ee <__ieee754_rem_pio2+0x2e>
 80087dc:	2200      	movs	r2, #0
 80087de:	2300      	movs	r3, #0
 80087e0:	ed80 0b00 	vstr	d0, [r0]
 80087e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80087e8:	f04f 0b00 	mov.w	fp, #0
 80087ec:	e028      	b.n	8008840 <__ieee754_rem_pio2+0x80>
 80087ee:	4bc3      	ldr	r3, [pc, #780]	; (8008afc <__ieee754_rem_pio2+0x33c>)
 80087f0:	4598      	cmp	r8, r3
 80087f2:	dc78      	bgt.n	80088e6 <__ieee754_rem_pio2+0x126>
 80087f4:	9b02      	ldr	r3, [sp, #8]
 80087f6:	4ec2      	ldr	r6, [pc, #776]	; (8008b00 <__ieee754_rem_pio2+0x340>)
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	ee10 0a10 	vmov	r0, s0
 80087fe:	a3b0      	add	r3, pc, #704	; (adr r3, 8008ac0 <__ieee754_rem_pio2+0x300>)
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	4629      	mov	r1, r5
 8008806:	dd39      	ble.n	800887c <__ieee754_rem_pio2+0xbc>
 8008808:	f7f7 fce2 	bl	80001d0 <__aeabi_dsub>
 800880c:	45b0      	cmp	r8, r6
 800880e:	4604      	mov	r4, r0
 8008810:	460d      	mov	r5, r1
 8008812:	d01b      	beq.n	800884c <__ieee754_rem_pio2+0x8c>
 8008814:	a3ac      	add	r3, pc, #688	; (adr r3, 8008ac8 <__ieee754_rem_pio2+0x308>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	f7f7 fcd9 	bl	80001d0 <__aeabi_dsub>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
 8008822:	e9ca 2300 	strd	r2, r3, [sl]
 8008826:	4620      	mov	r0, r4
 8008828:	4629      	mov	r1, r5
 800882a:	f7f7 fcd1 	bl	80001d0 <__aeabi_dsub>
 800882e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008ac8 <__ieee754_rem_pio2+0x308>)
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f7f7 fccc 	bl	80001d0 <__aeabi_dsub>
 8008838:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800883c:	f04f 0b01 	mov.w	fp, #1
 8008840:	4658      	mov	r0, fp
 8008842:	b00b      	add	sp, #44	; 0x2c
 8008844:	ecbd 8b02 	vpop	{d8}
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008ad0 <__ieee754_rem_pio2+0x310>)
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	f7f7 fcbd 	bl	80001d0 <__aeabi_dsub>
 8008856:	a3a0      	add	r3, pc, #640	; (adr r3, 8008ad8 <__ieee754_rem_pio2+0x318>)
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	4604      	mov	r4, r0
 800885e:	460d      	mov	r5, r1
 8008860:	f7f7 fcb6 	bl	80001d0 <__aeabi_dsub>
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	e9ca 2300 	strd	r2, r3, [sl]
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 fcae 	bl	80001d0 <__aeabi_dsub>
 8008874:	a398      	add	r3, pc, #608	; (adr r3, 8008ad8 <__ieee754_rem_pio2+0x318>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	e7db      	b.n	8008834 <__ieee754_rem_pio2+0x74>
 800887c:	f7f7 fcaa 	bl	80001d4 <__adddf3>
 8008880:	45b0      	cmp	r8, r6
 8008882:	4604      	mov	r4, r0
 8008884:	460d      	mov	r5, r1
 8008886:	d016      	beq.n	80088b6 <__ieee754_rem_pio2+0xf6>
 8008888:	a38f      	add	r3, pc, #572	; (adr r3, 8008ac8 <__ieee754_rem_pio2+0x308>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	f7f7 fca1 	bl	80001d4 <__adddf3>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	e9ca 2300 	strd	r2, r3, [sl]
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fc97 	bl	80001d0 <__aeabi_dsub>
 80088a2:	a389      	add	r3, pc, #548	; (adr r3, 8008ac8 <__ieee754_rem_pio2+0x308>)
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	f7f7 fc94 	bl	80001d4 <__adddf3>
 80088ac:	f04f 3bff 	mov.w	fp, #4294967295
 80088b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088b4:	e7c4      	b.n	8008840 <__ieee754_rem_pio2+0x80>
 80088b6:	a386      	add	r3, pc, #536	; (adr r3, 8008ad0 <__ieee754_rem_pio2+0x310>)
 80088b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088bc:	f7f7 fc8a 	bl	80001d4 <__adddf3>
 80088c0:	a385      	add	r3, pc, #532	; (adr r3, 8008ad8 <__ieee754_rem_pio2+0x318>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	4604      	mov	r4, r0
 80088c8:	460d      	mov	r5, r1
 80088ca:	f7f7 fc83 	bl	80001d4 <__adddf3>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	e9ca 2300 	strd	r2, r3, [sl]
 80088d6:	4620      	mov	r0, r4
 80088d8:	4629      	mov	r1, r5
 80088da:	f7f7 fc79 	bl	80001d0 <__aeabi_dsub>
 80088de:	a37e      	add	r3, pc, #504	; (adr r3, 8008ad8 <__ieee754_rem_pio2+0x318>)
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	e7e0      	b.n	80088a8 <__ieee754_rem_pio2+0xe8>
 80088e6:	4b87      	ldr	r3, [pc, #540]	; (8008b04 <__ieee754_rem_pio2+0x344>)
 80088e8:	4598      	cmp	r8, r3
 80088ea:	f300 80d9 	bgt.w	8008aa0 <__ieee754_rem_pio2+0x2e0>
 80088ee:	f001 f8b5 	bl	8009a5c <fabs>
 80088f2:	ec55 4b10 	vmov	r4, r5, d0
 80088f6:	ee10 0a10 	vmov	r0, s0
 80088fa:	a379      	add	r3, pc, #484	; (adr r3, 8008ae0 <__ieee754_rem_pio2+0x320>)
 80088fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008900:	4629      	mov	r1, r5
 8008902:	f7f7 fe1d 	bl	8000540 <__aeabi_dmul>
 8008906:	4b80      	ldr	r3, [pc, #512]	; (8008b08 <__ieee754_rem_pio2+0x348>)
 8008908:	2200      	movs	r2, #0
 800890a:	f7f7 fc63 	bl	80001d4 <__adddf3>
 800890e:	f7f8 f8c7 	bl	8000aa0 <__aeabi_d2iz>
 8008912:	4683      	mov	fp, r0
 8008914:	f7f7 fdaa 	bl	800046c <__aeabi_i2d>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	ec43 2b18 	vmov	d8, r2, r3
 8008920:	a367      	add	r3, pc, #412	; (adr r3, 8008ac0 <__ieee754_rem_pio2+0x300>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fe0b 	bl	8000540 <__aeabi_dmul>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4620      	mov	r0, r4
 8008930:	4629      	mov	r1, r5
 8008932:	f7f7 fc4d 	bl	80001d0 <__aeabi_dsub>
 8008936:	a364      	add	r3, pc, #400	; (adr r3, 8008ac8 <__ieee754_rem_pio2+0x308>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	4606      	mov	r6, r0
 800893e:	460f      	mov	r7, r1
 8008940:	ec51 0b18 	vmov	r0, r1, d8
 8008944:	f7f7 fdfc 	bl	8000540 <__aeabi_dmul>
 8008948:	f1bb 0f1f 	cmp.w	fp, #31
 800894c:	4604      	mov	r4, r0
 800894e:	460d      	mov	r5, r1
 8008950:	dc0d      	bgt.n	800896e <__ieee754_rem_pio2+0x1ae>
 8008952:	4b6e      	ldr	r3, [pc, #440]	; (8008b0c <__ieee754_rem_pio2+0x34c>)
 8008954:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895c:	4543      	cmp	r3, r8
 800895e:	d006      	beq.n	800896e <__ieee754_rem_pio2+0x1ae>
 8008960:	4622      	mov	r2, r4
 8008962:	462b      	mov	r3, r5
 8008964:	4630      	mov	r0, r6
 8008966:	4639      	mov	r1, r7
 8008968:	f7f7 fc32 	bl	80001d0 <__aeabi_dsub>
 800896c:	e00f      	b.n	800898e <__ieee754_rem_pio2+0x1ce>
 800896e:	462b      	mov	r3, r5
 8008970:	4622      	mov	r2, r4
 8008972:	4630      	mov	r0, r6
 8008974:	4639      	mov	r1, r7
 8008976:	f7f7 fc2b 	bl	80001d0 <__aeabi_dsub>
 800897a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800897e:	9303      	str	r3, [sp, #12]
 8008980:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008984:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008988:	f1b8 0f10 	cmp.w	r8, #16
 800898c:	dc02      	bgt.n	8008994 <__ieee754_rem_pio2+0x1d4>
 800898e:	e9ca 0100 	strd	r0, r1, [sl]
 8008992:	e039      	b.n	8008a08 <__ieee754_rem_pio2+0x248>
 8008994:	a34e      	add	r3, pc, #312	; (adr r3, 8008ad0 <__ieee754_rem_pio2+0x310>)
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	ec51 0b18 	vmov	r0, r1, d8
 800899e:	f7f7 fdcf 	bl	8000540 <__aeabi_dmul>
 80089a2:	4604      	mov	r4, r0
 80089a4:	460d      	mov	r5, r1
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	f7f7 fc0f 	bl	80001d0 <__aeabi_dsub>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4680      	mov	r8, r0
 80089b8:	4689      	mov	r9, r1
 80089ba:	4630      	mov	r0, r6
 80089bc:	4639      	mov	r1, r7
 80089be:	f7f7 fc07 	bl	80001d0 <__aeabi_dsub>
 80089c2:	4622      	mov	r2, r4
 80089c4:	462b      	mov	r3, r5
 80089c6:	f7f7 fc03 	bl	80001d0 <__aeabi_dsub>
 80089ca:	a343      	add	r3, pc, #268	; (adr r3, 8008ad8 <__ieee754_rem_pio2+0x318>)
 80089cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d0:	4604      	mov	r4, r0
 80089d2:	460d      	mov	r5, r1
 80089d4:	ec51 0b18 	vmov	r0, r1, d8
 80089d8:	f7f7 fdb2 	bl	8000540 <__aeabi_dmul>
 80089dc:	4622      	mov	r2, r4
 80089de:	462b      	mov	r3, r5
 80089e0:	f7f7 fbf6 	bl	80001d0 <__aeabi_dsub>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	f7f7 fbee 	bl	80001d0 <__aeabi_dsub>
 80089f4:	9a03      	ldr	r2, [sp, #12]
 80089f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	2b31      	cmp	r3, #49	; 0x31
 80089fe:	dc24      	bgt.n	8008a4a <__ieee754_rem_pio2+0x28a>
 8008a00:	e9ca 0100 	strd	r0, r1, [sl]
 8008a04:	4646      	mov	r6, r8
 8008a06:	464f      	mov	r7, r9
 8008a08:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	4642      	mov	r2, r8
 8008a10:	464b      	mov	r3, r9
 8008a12:	4639      	mov	r1, r7
 8008a14:	f7f7 fbdc 	bl	80001d0 <__aeabi_dsub>
 8008a18:	462b      	mov	r3, r5
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	f7f7 fbd8 	bl	80001d0 <__aeabi_dsub>
 8008a20:	9b02      	ldr	r3, [sp, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a28:	f6bf af0a 	bge.w	8008840 <__ieee754_rem_pio2+0x80>
 8008a2c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a30:	f8ca 3004 	str.w	r3, [sl, #4]
 8008a34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a38:	f8ca 8000 	str.w	r8, [sl]
 8008a3c:	f8ca 0008 	str.w	r0, [sl, #8]
 8008a40:	f8ca 300c 	str.w	r3, [sl, #12]
 8008a44:	f1cb 0b00 	rsb	fp, fp, #0
 8008a48:	e6fa      	b.n	8008840 <__ieee754_rem_pio2+0x80>
 8008a4a:	a327      	add	r3, pc, #156	; (adr r3, 8008ae8 <__ieee754_rem_pio2+0x328>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	ec51 0b18 	vmov	r0, r1, d8
 8008a54:	f7f7 fd74 	bl	8000540 <__aeabi_dmul>
 8008a58:	4604      	mov	r4, r0
 8008a5a:	460d      	mov	r5, r1
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f7 fbb4 	bl	80001d0 <__aeabi_dsub>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	460f      	mov	r7, r1
 8008a70:	4640      	mov	r0, r8
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f7 fbac 	bl	80001d0 <__aeabi_dsub>
 8008a78:	4622      	mov	r2, r4
 8008a7a:	462b      	mov	r3, r5
 8008a7c:	f7f7 fba8 	bl	80001d0 <__aeabi_dsub>
 8008a80:	a31b      	add	r3, pc, #108	; (adr r3, 8008af0 <__ieee754_rem_pio2+0x330>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	ec51 0b18 	vmov	r0, r1, d8
 8008a8e:	f7f7 fd57 	bl	8000540 <__aeabi_dmul>
 8008a92:	4622      	mov	r2, r4
 8008a94:	462b      	mov	r3, r5
 8008a96:	f7f7 fb9b 	bl	80001d0 <__aeabi_dsub>
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	e75f      	b.n	8008960 <__ieee754_rem_pio2+0x1a0>
 8008aa0:	4b1b      	ldr	r3, [pc, #108]	; (8008b10 <__ieee754_rem_pio2+0x350>)
 8008aa2:	4598      	cmp	r8, r3
 8008aa4:	dd36      	ble.n	8008b14 <__ieee754_rem_pio2+0x354>
 8008aa6:	ee10 2a10 	vmov	r2, s0
 8008aaa:	462b      	mov	r3, r5
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fb8e 	bl	80001d0 <__aeabi_dsub>
 8008ab4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ab8:	e9ca 0100 	strd	r0, r1, [sl]
 8008abc:	e694      	b.n	80087e8 <__ieee754_rem_pio2+0x28>
 8008abe:	bf00      	nop
 8008ac0:	54400000 	.word	0x54400000
 8008ac4:	3ff921fb 	.word	0x3ff921fb
 8008ac8:	1a626331 	.word	0x1a626331
 8008acc:	3dd0b461 	.word	0x3dd0b461
 8008ad0:	1a600000 	.word	0x1a600000
 8008ad4:	3dd0b461 	.word	0x3dd0b461
 8008ad8:	2e037073 	.word	0x2e037073
 8008adc:	3ba3198a 	.word	0x3ba3198a
 8008ae0:	6dc9c883 	.word	0x6dc9c883
 8008ae4:	3fe45f30 	.word	0x3fe45f30
 8008ae8:	2e000000 	.word	0x2e000000
 8008aec:	3ba3198a 	.word	0x3ba3198a
 8008af0:	252049c1 	.word	0x252049c1
 8008af4:	397b839a 	.word	0x397b839a
 8008af8:	3fe921fb 	.word	0x3fe921fb
 8008afc:	4002d97b 	.word	0x4002d97b
 8008b00:	3ff921fb 	.word	0x3ff921fb
 8008b04:	413921fb 	.word	0x413921fb
 8008b08:	3fe00000 	.word	0x3fe00000
 8008b0c:	0800a500 	.word	0x0800a500
 8008b10:	7fefffff 	.word	0x7fefffff
 8008b14:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008b18:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008b1c:	ee10 0a10 	vmov	r0, s0
 8008b20:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008b24:	ee10 6a10 	vmov	r6, s0
 8008b28:	460f      	mov	r7, r1
 8008b2a:	f7f7 ffb9 	bl	8000aa0 <__aeabi_d2iz>
 8008b2e:	f7f7 fc9d 	bl	800046c <__aeabi_i2d>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4630      	mov	r0, r6
 8008b38:	4639      	mov	r1, r7
 8008b3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b3e:	f7f7 fb47 	bl	80001d0 <__aeabi_dsub>
 8008b42:	4b23      	ldr	r3, [pc, #140]	; (8008bd0 <__ieee754_rem_pio2+0x410>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	f7f7 fcfb 	bl	8000540 <__aeabi_dmul>
 8008b4a:	460f      	mov	r7, r1
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	f7f7 ffa7 	bl	8000aa0 <__aeabi_d2iz>
 8008b52:	f7f7 fc8b 	bl	800046c <__aeabi_i2d>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b62:	f7f7 fb35 	bl	80001d0 <__aeabi_dsub>
 8008b66:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <__ieee754_rem_pio2+0x410>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f7f7 fce9 	bl	8000540 <__aeabi_dmul>
 8008b6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b72:	ad04      	add	r5, sp, #16
 8008b74:	f04f 0803 	mov.w	r8, #3
 8008b78:	46a9      	mov	r9, r5
 8008b7a:	2600      	movs	r6, #0
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	4632      	mov	r2, r6
 8008b80:	463b      	mov	r3, r7
 8008b82:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008b86:	46c3      	mov	fp, r8
 8008b88:	3d08      	subs	r5, #8
 8008b8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008b8e:	f7f7 ff3f 	bl	8000a10 <__aeabi_dcmpeq>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d1f3      	bne.n	8008b7e <__ieee754_rem_pio2+0x3be>
 8008b96:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <__ieee754_rem_pio2+0x414>)
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4622      	mov	r2, r4
 8008ba0:	465b      	mov	r3, fp
 8008ba2:	4651      	mov	r1, sl
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	f000 fb1b 	bl	80091e0 <__kernel_rem_pio2>
 8008baa:	9b02      	ldr	r3, [sp, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	4683      	mov	fp, r0
 8008bb0:	f6bf ae46 	bge.w	8008840 <__ieee754_rem_pio2+0x80>
 8008bb4:	e9da 2100 	ldrd	r2, r1, [sl]
 8008bb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bbc:	e9ca 2300 	strd	r2, r3, [sl]
 8008bc0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008bc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bc8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008bcc:	e73a      	b.n	8008a44 <__ieee754_rem_pio2+0x284>
 8008bce:	bf00      	nop
 8008bd0:	41700000 	.word	0x41700000
 8008bd4:	0800a580 	.word	0x0800a580

08008bd8 <__ieee754_sqrt>:
 8008bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bdc:	ec55 4b10 	vmov	r4, r5, d0
 8008be0:	4e55      	ldr	r6, [pc, #340]	; (8008d38 <__ieee754_sqrt+0x160>)
 8008be2:	43ae      	bics	r6, r5
 8008be4:	ee10 0a10 	vmov	r0, s0
 8008be8:	ee10 3a10 	vmov	r3, s0
 8008bec:	462a      	mov	r2, r5
 8008bee:	4629      	mov	r1, r5
 8008bf0:	d110      	bne.n	8008c14 <__ieee754_sqrt+0x3c>
 8008bf2:	ee10 2a10 	vmov	r2, s0
 8008bf6:	462b      	mov	r3, r5
 8008bf8:	f7f7 fca2 	bl	8000540 <__aeabi_dmul>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4620      	mov	r0, r4
 8008c02:	4629      	mov	r1, r5
 8008c04:	f7f7 fae6 	bl	80001d4 <__adddf3>
 8008c08:	4604      	mov	r4, r0
 8008c0a:	460d      	mov	r5, r1
 8008c0c:	ec45 4b10 	vmov	d0, r4, r5
 8008c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c14:	2d00      	cmp	r5, #0
 8008c16:	dc10      	bgt.n	8008c3a <__ieee754_sqrt+0x62>
 8008c18:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c1c:	4330      	orrs	r0, r6
 8008c1e:	d0f5      	beq.n	8008c0c <__ieee754_sqrt+0x34>
 8008c20:	b15d      	cbz	r5, 8008c3a <__ieee754_sqrt+0x62>
 8008c22:	ee10 2a10 	vmov	r2, s0
 8008c26:	462b      	mov	r3, r5
 8008c28:	ee10 0a10 	vmov	r0, s0
 8008c2c:	f7f7 fad0 	bl	80001d0 <__aeabi_dsub>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	f7f7 fdae 	bl	8000794 <__aeabi_ddiv>
 8008c38:	e7e6      	b.n	8008c08 <__ieee754_sqrt+0x30>
 8008c3a:	1512      	asrs	r2, r2, #20
 8008c3c:	d074      	beq.n	8008d28 <__ieee754_sqrt+0x150>
 8008c3e:	07d4      	lsls	r4, r2, #31
 8008c40:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008c44:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008c4c:	bf5e      	ittt	pl
 8008c4e:	0fda      	lsrpl	r2, r3, #31
 8008c50:	005b      	lslpl	r3, r3, #1
 8008c52:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008c56:	2400      	movs	r4, #0
 8008c58:	0fda      	lsrs	r2, r3, #31
 8008c5a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008c5e:	107f      	asrs	r7, r7, #1
 8008c60:	005b      	lsls	r3, r3, #1
 8008c62:	2516      	movs	r5, #22
 8008c64:	4620      	mov	r0, r4
 8008c66:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008c6a:	1886      	adds	r6, r0, r2
 8008c6c:	428e      	cmp	r6, r1
 8008c6e:	bfde      	ittt	le
 8008c70:	1b89      	suble	r1, r1, r6
 8008c72:	18b0      	addle	r0, r6, r2
 8008c74:	18a4      	addle	r4, r4, r2
 8008c76:	0049      	lsls	r1, r1, #1
 8008c78:	3d01      	subs	r5, #1
 8008c7a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008c7e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008c82:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c86:	d1f0      	bne.n	8008c6a <__ieee754_sqrt+0x92>
 8008c88:	462a      	mov	r2, r5
 8008c8a:	f04f 0e20 	mov.w	lr, #32
 8008c8e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008c92:	4281      	cmp	r1, r0
 8008c94:	eb06 0c05 	add.w	ip, r6, r5
 8008c98:	dc02      	bgt.n	8008ca0 <__ieee754_sqrt+0xc8>
 8008c9a:	d113      	bne.n	8008cc4 <__ieee754_sqrt+0xec>
 8008c9c:	459c      	cmp	ip, r3
 8008c9e:	d811      	bhi.n	8008cc4 <__ieee754_sqrt+0xec>
 8008ca0:	f1bc 0f00 	cmp.w	ip, #0
 8008ca4:	eb0c 0506 	add.w	r5, ip, r6
 8008ca8:	da43      	bge.n	8008d32 <__ieee754_sqrt+0x15a>
 8008caa:	2d00      	cmp	r5, #0
 8008cac:	db41      	blt.n	8008d32 <__ieee754_sqrt+0x15a>
 8008cae:	f100 0801 	add.w	r8, r0, #1
 8008cb2:	1a09      	subs	r1, r1, r0
 8008cb4:	459c      	cmp	ip, r3
 8008cb6:	bf88      	it	hi
 8008cb8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008cbc:	eba3 030c 	sub.w	r3, r3, ip
 8008cc0:	4432      	add	r2, r6
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008cc8:	f1be 0e01 	subs.w	lr, lr, #1
 8008ccc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008cd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008cd4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008cd8:	d1db      	bne.n	8008c92 <__ieee754_sqrt+0xba>
 8008cda:	430b      	orrs	r3, r1
 8008cdc:	d006      	beq.n	8008cec <__ieee754_sqrt+0x114>
 8008cde:	1c50      	adds	r0, r2, #1
 8008ce0:	bf13      	iteet	ne
 8008ce2:	3201      	addne	r2, #1
 8008ce4:	3401      	addeq	r4, #1
 8008ce6:	4672      	moveq	r2, lr
 8008ce8:	f022 0201 	bicne.w	r2, r2, #1
 8008cec:	1063      	asrs	r3, r4, #1
 8008cee:	0852      	lsrs	r2, r2, #1
 8008cf0:	07e1      	lsls	r1, r4, #31
 8008cf2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008cf6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008cfa:	bf48      	it	mi
 8008cfc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008d00:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008d04:	4614      	mov	r4, r2
 8008d06:	e781      	b.n	8008c0c <__ieee754_sqrt+0x34>
 8008d08:	0ad9      	lsrs	r1, r3, #11
 8008d0a:	3815      	subs	r0, #21
 8008d0c:	055b      	lsls	r3, r3, #21
 8008d0e:	2900      	cmp	r1, #0
 8008d10:	d0fa      	beq.n	8008d08 <__ieee754_sqrt+0x130>
 8008d12:	02cd      	lsls	r5, r1, #11
 8008d14:	d50a      	bpl.n	8008d2c <__ieee754_sqrt+0x154>
 8008d16:	f1c2 0420 	rsb	r4, r2, #32
 8008d1a:	fa23 f404 	lsr.w	r4, r3, r4
 8008d1e:	1e55      	subs	r5, r2, #1
 8008d20:	4093      	lsls	r3, r2
 8008d22:	4321      	orrs	r1, r4
 8008d24:	1b42      	subs	r2, r0, r5
 8008d26:	e78a      	b.n	8008c3e <__ieee754_sqrt+0x66>
 8008d28:	4610      	mov	r0, r2
 8008d2a:	e7f0      	b.n	8008d0e <__ieee754_sqrt+0x136>
 8008d2c:	0049      	lsls	r1, r1, #1
 8008d2e:	3201      	adds	r2, #1
 8008d30:	e7ef      	b.n	8008d12 <__ieee754_sqrt+0x13a>
 8008d32:	4680      	mov	r8, r0
 8008d34:	e7bd      	b.n	8008cb2 <__ieee754_sqrt+0xda>
 8008d36:	bf00      	nop
 8008d38:	7ff00000 	.word	0x7ff00000

08008d3c <__ieee754_asinf>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	ee10 5a10 	vmov	r5, s0
 8008d42:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008d46:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008d4a:	ed2d 8b04 	vpush	{d8-d9}
 8008d4e:	d10c      	bne.n	8008d6a <__ieee754_asinf+0x2e>
 8008d50:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8008ec8 <__ieee754_asinf+0x18c>
 8008d54:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8008ecc <__ieee754_asinf+0x190>
 8008d58:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008d5c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008d60:	eeb0 0a67 	vmov.f32	s0, s15
 8008d64:	ecbd 8b04 	vpop	{d8-d9}
 8008d68:	bd38      	pop	{r3, r4, r5, pc}
 8008d6a:	dd04      	ble.n	8008d76 <__ieee754_asinf+0x3a>
 8008d6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008d70:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008d74:	e7f6      	b.n	8008d64 <__ieee754_asinf+0x28>
 8008d76:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008d7a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008d7e:	da0b      	bge.n	8008d98 <__ieee754_asinf+0x5c>
 8008d80:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008d84:	da52      	bge.n	8008e2c <__ieee754_asinf+0xf0>
 8008d86:	eddf 7a52 	vldr	s15, [pc, #328]	; 8008ed0 <__ieee754_asinf+0x194>
 8008d8a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008d8e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d96:	dce5      	bgt.n	8008d64 <__ieee754_asinf+0x28>
 8008d98:	f001 f850 	bl	8009e3c <fabsf>
 8008d9c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8008da0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008da4:	ee20 8a08 	vmul.f32	s16, s0, s16
 8008da8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8008ed4 <__ieee754_asinf+0x198>
 8008dac:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8008ed8 <__ieee754_asinf+0x19c>
 8008db0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8008edc <__ieee754_asinf+0x1a0>
 8008db4:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008db8:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008ee0 <__ieee754_asinf+0x1a4>
 8008dbc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008dc0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008ee4 <__ieee754_asinf+0x1a8>
 8008dc4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008dc8:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008ee8 <__ieee754_asinf+0x1ac>
 8008dcc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008dd0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008eec <__ieee754_asinf+0x1b0>
 8008dd4:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008dd8:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008ef0 <__ieee754_asinf+0x1b4>
 8008ddc:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008de0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008ef4 <__ieee754_asinf+0x1b8>
 8008de4:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008de8:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008ef8 <__ieee754_asinf+0x1bc>
 8008dec:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008df0:	eeb0 0a48 	vmov.f32	s0, s16
 8008df4:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008df8:	f000 f926 	bl	8009048 <__ieee754_sqrtf>
 8008dfc:	4b3f      	ldr	r3, [pc, #252]	; (8008efc <__ieee754_asinf+0x1c0>)
 8008dfe:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008e02:	429c      	cmp	r4, r3
 8008e04:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008e08:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e0c:	dd3d      	ble.n	8008e8a <__ieee754_asinf+0x14e>
 8008e0e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008e12:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008f00 <__ieee754_asinf+0x1c4>
 8008e16:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008e1a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008ecc <__ieee754_asinf+0x190>
 8008e1e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	bfd8      	it	le
 8008e26:	eeb1 0a40 	vnegle.f32	s0, s0
 8008e2a:	e79b      	b.n	8008d64 <__ieee754_asinf+0x28>
 8008e2c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008e30:	eddf 6a28 	vldr	s13, [pc, #160]	; 8008ed4 <__ieee754_asinf+0x198>
 8008e34:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008ed8 <__ieee754_asinf+0x19c>
 8008e38:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8008eec <__ieee754_asinf+0x1b0>
 8008e3c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008e40:	eddf 6a27 	vldr	s13, [pc, #156]	; 8008ee0 <__ieee754_asinf+0x1a4>
 8008e44:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008e48:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008ee4 <__ieee754_asinf+0x1a8>
 8008e4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e50:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008ee8 <__ieee754_asinf+0x1ac>
 8008e54:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008e58:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008edc <__ieee754_asinf+0x1a0>
 8008e5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e60:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008ef0 <__ieee754_asinf+0x1b4>
 8008e64:	eee7 6a86 	vfma.f32	s13, s15, s12
 8008e68:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8008ef4 <__ieee754_asinf+0x1b8>
 8008e6c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008e70:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008ef8 <__ieee754_asinf+0x1bc>
 8008e74:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008e78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e7c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008e80:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8008e84:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008e88:	e76c      	b.n	8008d64 <__ieee754_asinf+0x28>
 8008e8a:	ee10 3a10 	vmov	r3, s0
 8008e8e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008e92:	f023 030f 	bic.w	r3, r3, #15
 8008e96:	ee07 3a10 	vmov	s14, r3
 8008e9a:	eea7 8a47 	vfms.f32	s16, s14, s14
 8008e9e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008ea2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008ea6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8008eaa:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008ec8 <__ieee754_asinf+0x18c>
 8008eae:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8008eb2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8008eb6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008f04 <__ieee754_asinf+0x1c8>
 8008eba:	eeb0 6a40 	vmov.f32	s12, s0
 8008ebe:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008ec2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008ec6:	e7aa      	b.n	8008e1e <__ieee754_asinf+0xe2>
 8008ec8:	b33bbd2e 	.word	0xb33bbd2e
 8008ecc:	3fc90fdb 	.word	0x3fc90fdb
 8008ed0:	7149f2ca 	.word	0x7149f2ca
 8008ed4:	3811ef08 	.word	0x3811ef08
 8008ed8:	3a4f7f04 	.word	0x3a4f7f04
 8008edc:	3e2aaaab 	.word	0x3e2aaaab
 8008ee0:	bd241146 	.word	0xbd241146
 8008ee4:	3e4e0aa8 	.word	0x3e4e0aa8
 8008ee8:	bea6b090 	.word	0xbea6b090
 8008eec:	3d9dc62e 	.word	0x3d9dc62e
 8008ef0:	bf303361 	.word	0xbf303361
 8008ef4:	4001572d 	.word	0x4001572d
 8008ef8:	c019d139 	.word	0xc019d139
 8008efc:	3f799999 	.word	0x3f799999
 8008f00:	333bbd2e 	.word	0x333bbd2e
 8008f04:	3f490fdb 	.word	0x3f490fdb

08008f08 <__ieee754_atan2f>:
 8008f08:	ee10 2a90 	vmov	r2, s1
 8008f0c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008f10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008f14:	b510      	push	{r4, lr}
 8008f16:	eef0 7a40 	vmov.f32	s15, s0
 8008f1a:	dc06      	bgt.n	8008f2a <__ieee754_atan2f+0x22>
 8008f1c:	ee10 0a10 	vmov	r0, s0
 8008f20:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008f24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008f28:	dd04      	ble.n	8008f34 <__ieee754_atan2f+0x2c>
 8008f2a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008f2e:	eeb0 0a67 	vmov.f32	s0, s15
 8008f32:	bd10      	pop	{r4, pc}
 8008f34:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008f38:	d103      	bne.n	8008f42 <__ieee754_atan2f+0x3a>
 8008f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f3e:	f000 bea9 	b.w	8009c94 <atanf>
 8008f42:	1794      	asrs	r4, r2, #30
 8008f44:	f004 0402 	and.w	r4, r4, #2
 8008f48:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008f4c:	b943      	cbnz	r3, 8008f60 <__ieee754_atan2f+0x58>
 8008f4e:	2c02      	cmp	r4, #2
 8008f50:	d05e      	beq.n	8009010 <__ieee754_atan2f+0x108>
 8008f52:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009024 <__ieee754_atan2f+0x11c>
 8008f56:	2c03      	cmp	r4, #3
 8008f58:	bf08      	it	eq
 8008f5a:	eef0 7a47 	vmoveq.f32	s15, s14
 8008f5e:	e7e6      	b.n	8008f2e <__ieee754_atan2f+0x26>
 8008f60:	b941      	cbnz	r1, 8008f74 <__ieee754_atan2f+0x6c>
 8008f62:	eddf 7a31 	vldr	s15, [pc, #196]	; 8009028 <__ieee754_atan2f+0x120>
 8008f66:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800902c <__ieee754_atan2f+0x124>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	bfb8      	it	lt
 8008f6e:	eef0 7a40 	vmovlt.f32	s15, s0
 8008f72:	e7dc      	b.n	8008f2e <__ieee754_atan2f+0x26>
 8008f74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008f78:	d110      	bne.n	8008f9c <__ieee754_atan2f+0x94>
 8008f7a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008f7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f82:	d107      	bne.n	8008f94 <__ieee754_atan2f+0x8c>
 8008f84:	2c02      	cmp	r4, #2
 8008f86:	d846      	bhi.n	8009016 <__ieee754_atan2f+0x10e>
 8008f88:	4b29      	ldr	r3, [pc, #164]	; (8009030 <__ieee754_atan2f+0x128>)
 8008f8a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f8e:	edd4 7a00 	vldr	s15, [r4]
 8008f92:	e7cc      	b.n	8008f2e <__ieee754_atan2f+0x26>
 8008f94:	2c02      	cmp	r4, #2
 8008f96:	d841      	bhi.n	800901c <__ieee754_atan2f+0x114>
 8008f98:	4b26      	ldr	r3, [pc, #152]	; (8009034 <__ieee754_atan2f+0x12c>)
 8008f9a:	e7f6      	b.n	8008f8a <__ieee754_atan2f+0x82>
 8008f9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008fa0:	d0df      	beq.n	8008f62 <__ieee754_atan2f+0x5a>
 8008fa2:	1a5b      	subs	r3, r3, r1
 8008fa4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008fa8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008fac:	da1a      	bge.n	8008fe4 <__ieee754_atan2f+0xdc>
 8008fae:	2a00      	cmp	r2, #0
 8008fb0:	da01      	bge.n	8008fb6 <__ieee754_atan2f+0xae>
 8008fb2:	313c      	adds	r1, #60	; 0x3c
 8008fb4:	db19      	blt.n	8008fea <__ieee754_atan2f+0xe2>
 8008fb6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008fba:	f000 ff3f 	bl	8009e3c <fabsf>
 8008fbe:	f000 fe69 	bl	8009c94 <atanf>
 8008fc2:	eef0 7a40 	vmov.f32	s15, s0
 8008fc6:	2c01      	cmp	r4, #1
 8008fc8:	d012      	beq.n	8008ff0 <__ieee754_atan2f+0xe8>
 8008fca:	2c02      	cmp	r4, #2
 8008fcc:	d017      	beq.n	8008ffe <__ieee754_atan2f+0xf6>
 8008fce:	2c00      	cmp	r4, #0
 8008fd0:	d0ad      	beq.n	8008f2e <__ieee754_atan2f+0x26>
 8008fd2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8009038 <__ieee754_atan2f+0x130>
 8008fd6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008fda:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800903c <__ieee754_atan2f+0x134>
 8008fde:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008fe2:	e7a4      	b.n	8008f2e <__ieee754_atan2f+0x26>
 8008fe4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8009028 <__ieee754_atan2f+0x120>
 8008fe8:	e7ed      	b.n	8008fc6 <__ieee754_atan2f+0xbe>
 8008fea:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009040 <__ieee754_atan2f+0x138>
 8008fee:	e7ea      	b.n	8008fc6 <__ieee754_atan2f+0xbe>
 8008ff0:	ee17 3a90 	vmov	r3, s15
 8008ff4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	e797      	b.n	8008f2e <__ieee754_atan2f+0x26>
 8008ffe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8009038 <__ieee754_atan2f+0x130>
 8009002:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009006:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800903c <__ieee754_atan2f+0x134>
 800900a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800900e:	e78e      	b.n	8008f2e <__ieee754_atan2f+0x26>
 8009010:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800903c <__ieee754_atan2f+0x134>
 8009014:	e78b      	b.n	8008f2e <__ieee754_atan2f+0x26>
 8009016:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8009044 <__ieee754_atan2f+0x13c>
 800901a:	e788      	b.n	8008f2e <__ieee754_atan2f+0x26>
 800901c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009040 <__ieee754_atan2f+0x138>
 8009020:	e785      	b.n	8008f2e <__ieee754_atan2f+0x26>
 8009022:	bf00      	nop
 8009024:	c0490fdb 	.word	0xc0490fdb
 8009028:	3fc90fdb 	.word	0x3fc90fdb
 800902c:	bfc90fdb 	.word	0xbfc90fdb
 8009030:	0800a688 	.word	0x0800a688
 8009034:	0800a694 	.word	0x0800a694
 8009038:	33bbbd2e 	.word	0x33bbbd2e
 800903c:	40490fdb 	.word	0x40490fdb
 8009040:	00000000 	.word	0x00000000
 8009044:	3f490fdb 	.word	0x3f490fdb

08009048 <__ieee754_sqrtf>:
 8009048:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800904c:	4770      	bx	lr
	...

08009050 <__kernel_cos>:
 8009050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	ec57 6b10 	vmov	r6, r7, d0
 8009058:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800905c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009060:	ed8d 1b00 	vstr	d1, [sp]
 8009064:	da07      	bge.n	8009076 <__kernel_cos+0x26>
 8009066:	ee10 0a10 	vmov	r0, s0
 800906a:	4639      	mov	r1, r7
 800906c:	f7f7 fd18 	bl	8000aa0 <__aeabi_d2iz>
 8009070:	2800      	cmp	r0, #0
 8009072:	f000 8088 	beq.w	8009186 <__kernel_cos+0x136>
 8009076:	4632      	mov	r2, r6
 8009078:	463b      	mov	r3, r7
 800907a:	4630      	mov	r0, r6
 800907c:	4639      	mov	r1, r7
 800907e:	f7f7 fa5f 	bl	8000540 <__aeabi_dmul>
 8009082:	4b51      	ldr	r3, [pc, #324]	; (80091c8 <__kernel_cos+0x178>)
 8009084:	2200      	movs	r2, #0
 8009086:	4604      	mov	r4, r0
 8009088:	460d      	mov	r5, r1
 800908a:	f7f7 fa59 	bl	8000540 <__aeabi_dmul>
 800908e:	a340      	add	r3, pc, #256	; (adr r3, 8009190 <__kernel_cos+0x140>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	4682      	mov	sl, r0
 8009096:	468b      	mov	fp, r1
 8009098:	4620      	mov	r0, r4
 800909a:	4629      	mov	r1, r5
 800909c:	f7f7 fa50 	bl	8000540 <__aeabi_dmul>
 80090a0:	a33d      	add	r3, pc, #244	; (adr r3, 8009198 <__kernel_cos+0x148>)
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	f7f7 f895 	bl	80001d4 <__adddf3>
 80090aa:	4622      	mov	r2, r4
 80090ac:	462b      	mov	r3, r5
 80090ae:	f7f7 fa47 	bl	8000540 <__aeabi_dmul>
 80090b2:	a33b      	add	r3, pc, #236	; (adr r3, 80091a0 <__kernel_cos+0x150>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 f88a 	bl	80001d0 <__aeabi_dsub>
 80090bc:	4622      	mov	r2, r4
 80090be:	462b      	mov	r3, r5
 80090c0:	f7f7 fa3e 	bl	8000540 <__aeabi_dmul>
 80090c4:	a338      	add	r3, pc, #224	; (adr r3, 80091a8 <__kernel_cos+0x158>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f7f7 f883 	bl	80001d4 <__adddf3>
 80090ce:	4622      	mov	r2, r4
 80090d0:	462b      	mov	r3, r5
 80090d2:	f7f7 fa35 	bl	8000540 <__aeabi_dmul>
 80090d6:	a336      	add	r3, pc, #216	; (adr r3, 80091b0 <__kernel_cos+0x160>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	f7f7 f878 	bl	80001d0 <__aeabi_dsub>
 80090e0:	4622      	mov	r2, r4
 80090e2:	462b      	mov	r3, r5
 80090e4:	f7f7 fa2c 	bl	8000540 <__aeabi_dmul>
 80090e8:	a333      	add	r3, pc, #204	; (adr r3, 80091b8 <__kernel_cos+0x168>)
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f7f7 f871 	bl	80001d4 <__adddf3>
 80090f2:	4622      	mov	r2, r4
 80090f4:	462b      	mov	r3, r5
 80090f6:	f7f7 fa23 	bl	8000540 <__aeabi_dmul>
 80090fa:	4622      	mov	r2, r4
 80090fc:	462b      	mov	r3, r5
 80090fe:	f7f7 fa1f 	bl	8000540 <__aeabi_dmul>
 8009102:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009106:	4604      	mov	r4, r0
 8009108:	460d      	mov	r5, r1
 800910a:	4630      	mov	r0, r6
 800910c:	4639      	mov	r1, r7
 800910e:	f7f7 fa17 	bl	8000540 <__aeabi_dmul>
 8009112:	460b      	mov	r3, r1
 8009114:	4602      	mov	r2, r0
 8009116:	4629      	mov	r1, r5
 8009118:	4620      	mov	r0, r4
 800911a:	f7f7 f859 	bl	80001d0 <__aeabi_dsub>
 800911e:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <__kernel_cos+0x17c>)
 8009120:	4598      	cmp	r8, r3
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	dc10      	bgt.n	800914a <__kernel_cos+0xfa>
 8009128:	4602      	mov	r2, r0
 800912a:	460b      	mov	r3, r1
 800912c:	4650      	mov	r0, sl
 800912e:	4659      	mov	r1, fp
 8009130:	f7f7 f84e 	bl	80001d0 <__aeabi_dsub>
 8009134:	460b      	mov	r3, r1
 8009136:	4926      	ldr	r1, [pc, #152]	; (80091d0 <__kernel_cos+0x180>)
 8009138:	4602      	mov	r2, r0
 800913a:	2000      	movs	r0, #0
 800913c:	f7f7 f848 	bl	80001d0 <__aeabi_dsub>
 8009140:	ec41 0b10 	vmov	d0, r0, r1
 8009144:	b003      	add	sp, #12
 8009146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800914a:	4b22      	ldr	r3, [pc, #136]	; (80091d4 <__kernel_cos+0x184>)
 800914c:	4920      	ldr	r1, [pc, #128]	; (80091d0 <__kernel_cos+0x180>)
 800914e:	4598      	cmp	r8, r3
 8009150:	bfcc      	ite	gt
 8009152:	4d21      	ldrgt	r5, [pc, #132]	; (80091d8 <__kernel_cos+0x188>)
 8009154:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009158:	2400      	movs	r4, #0
 800915a:	4622      	mov	r2, r4
 800915c:	462b      	mov	r3, r5
 800915e:	2000      	movs	r0, #0
 8009160:	f7f7 f836 	bl	80001d0 <__aeabi_dsub>
 8009164:	4622      	mov	r2, r4
 8009166:	4680      	mov	r8, r0
 8009168:	4689      	mov	r9, r1
 800916a:	462b      	mov	r3, r5
 800916c:	4650      	mov	r0, sl
 800916e:	4659      	mov	r1, fp
 8009170:	f7f7 f82e 	bl	80001d0 <__aeabi_dsub>
 8009174:	4632      	mov	r2, r6
 8009176:	463b      	mov	r3, r7
 8009178:	f7f7 f82a 	bl	80001d0 <__aeabi_dsub>
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	e7da      	b.n	800913c <__kernel_cos+0xec>
 8009186:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80091c0 <__kernel_cos+0x170>
 800918a:	e7db      	b.n	8009144 <__kernel_cos+0xf4>
 800918c:	f3af 8000 	nop.w
 8009190:	be8838d4 	.word	0xbe8838d4
 8009194:	bda8fae9 	.word	0xbda8fae9
 8009198:	bdb4b1c4 	.word	0xbdb4b1c4
 800919c:	3e21ee9e 	.word	0x3e21ee9e
 80091a0:	809c52ad 	.word	0x809c52ad
 80091a4:	3e927e4f 	.word	0x3e927e4f
 80091a8:	19cb1590 	.word	0x19cb1590
 80091ac:	3efa01a0 	.word	0x3efa01a0
 80091b0:	16c15177 	.word	0x16c15177
 80091b4:	3f56c16c 	.word	0x3f56c16c
 80091b8:	5555554c 	.word	0x5555554c
 80091bc:	3fa55555 	.word	0x3fa55555
 80091c0:	00000000 	.word	0x00000000
 80091c4:	3ff00000 	.word	0x3ff00000
 80091c8:	3fe00000 	.word	0x3fe00000
 80091cc:	3fd33332 	.word	0x3fd33332
 80091d0:	3ff00000 	.word	0x3ff00000
 80091d4:	3fe90000 	.word	0x3fe90000
 80091d8:	3fd20000 	.word	0x3fd20000
 80091dc:	00000000 	.word	0x00000000

080091e0 <__kernel_rem_pio2>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	ed2d 8b02 	vpush	{d8}
 80091e8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80091ec:	f112 0f14 	cmn.w	r2, #20
 80091f0:	9308      	str	r3, [sp, #32]
 80091f2:	9101      	str	r1, [sp, #4]
 80091f4:	4bc4      	ldr	r3, [pc, #784]	; (8009508 <__kernel_rem_pio2+0x328>)
 80091f6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80091f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80091fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091fe:	9302      	str	r3, [sp, #8]
 8009200:	9b08      	ldr	r3, [sp, #32]
 8009202:	f103 33ff 	add.w	r3, r3, #4294967295
 8009206:	bfa8      	it	ge
 8009208:	1ed4      	subge	r4, r2, #3
 800920a:	9306      	str	r3, [sp, #24]
 800920c:	bfb2      	itee	lt
 800920e:	2400      	movlt	r4, #0
 8009210:	2318      	movge	r3, #24
 8009212:	fb94 f4f3 	sdivge	r4, r4, r3
 8009216:	f06f 0317 	mvn.w	r3, #23
 800921a:	fb04 3303 	mla	r3, r4, r3, r3
 800921e:	eb03 0a02 	add.w	sl, r3, r2
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	9a06      	ldr	r2, [sp, #24]
 8009226:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80094f8 <__kernel_rem_pio2+0x318>
 800922a:	eb03 0802 	add.w	r8, r3, r2
 800922e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009230:	1aa7      	subs	r7, r4, r2
 8009232:	ae22      	add	r6, sp, #136	; 0x88
 8009234:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009238:	2500      	movs	r5, #0
 800923a:	4545      	cmp	r5, r8
 800923c:	dd13      	ble.n	8009266 <__kernel_rem_pio2+0x86>
 800923e:	9b08      	ldr	r3, [sp, #32]
 8009240:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80094f8 <__kernel_rem_pio2+0x318>
 8009244:	aa22      	add	r2, sp, #136	; 0x88
 8009246:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800924a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	9b02      	ldr	r3, [sp, #8]
 8009254:	4598      	cmp	r8, r3
 8009256:	dc2f      	bgt.n	80092b8 <__kernel_rem_pio2+0xd8>
 8009258:	ed8d 8b04 	vstr	d8, [sp, #16]
 800925c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009260:	462f      	mov	r7, r5
 8009262:	2600      	movs	r6, #0
 8009264:	e01b      	b.n	800929e <__kernel_rem_pio2+0xbe>
 8009266:	42ef      	cmn	r7, r5
 8009268:	d407      	bmi.n	800927a <__kernel_rem_pio2+0x9a>
 800926a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800926e:	f7f7 f8fd 	bl	800046c <__aeabi_i2d>
 8009272:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009276:	3501      	adds	r5, #1
 8009278:	e7df      	b.n	800923a <__kernel_rem_pio2+0x5a>
 800927a:	ec51 0b18 	vmov	r0, r1, d8
 800927e:	e7f8      	b.n	8009272 <__kernel_rem_pio2+0x92>
 8009280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009284:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009288:	f7f7 f95a 	bl	8000540 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009294:	f7f6 ff9e 	bl	80001d4 <__adddf3>
 8009298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800929c:	3601      	adds	r6, #1
 800929e:	9b06      	ldr	r3, [sp, #24]
 80092a0:	429e      	cmp	r6, r3
 80092a2:	f1a7 0708 	sub.w	r7, r7, #8
 80092a6:	ddeb      	ble.n	8009280 <__kernel_rem_pio2+0xa0>
 80092a8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80092ac:	f108 0801 	add.w	r8, r8, #1
 80092b0:	ecab 7b02 	vstmia	fp!, {d7}
 80092b4:	3508      	adds	r5, #8
 80092b6:	e7cc      	b.n	8009252 <__kernel_rem_pio2+0x72>
 80092b8:	9b02      	ldr	r3, [sp, #8]
 80092ba:	aa0e      	add	r2, sp, #56	; 0x38
 80092bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80092c0:	930d      	str	r3, [sp, #52]	; 0x34
 80092c2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80092c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80092c8:	9c02      	ldr	r4, [sp, #8]
 80092ca:	930c      	str	r3, [sp, #48]	; 0x30
 80092cc:	00e3      	lsls	r3, r4, #3
 80092ce:	930a      	str	r3, [sp, #40]	; 0x28
 80092d0:	ab9a      	add	r3, sp, #616	; 0x268
 80092d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80092da:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80092de:	ab72      	add	r3, sp, #456	; 0x1c8
 80092e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80092e4:	46c3      	mov	fp, r8
 80092e6:	46a1      	mov	r9, r4
 80092e8:	f1b9 0f00 	cmp.w	r9, #0
 80092ec:	f1a5 0508 	sub.w	r5, r5, #8
 80092f0:	dc77      	bgt.n	80093e2 <__kernel_rem_pio2+0x202>
 80092f2:	ec47 6b10 	vmov	d0, r6, r7
 80092f6:	4650      	mov	r0, sl
 80092f8:	f000 fc46 	bl	8009b88 <scalbn>
 80092fc:	ec57 6b10 	vmov	r6, r7, d0
 8009300:	2200      	movs	r2, #0
 8009302:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009306:	ee10 0a10 	vmov	r0, s0
 800930a:	4639      	mov	r1, r7
 800930c:	f7f7 f918 	bl	8000540 <__aeabi_dmul>
 8009310:	ec41 0b10 	vmov	d0, r0, r1
 8009314:	f000 fbb8 	bl	8009a88 <floor>
 8009318:	4b7c      	ldr	r3, [pc, #496]	; (800950c <__kernel_rem_pio2+0x32c>)
 800931a:	ec51 0b10 	vmov	r0, r1, d0
 800931e:	2200      	movs	r2, #0
 8009320:	f7f7 f90e 	bl	8000540 <__aeabi_dmul>
 8009324:	4602      	mov	r2, r0
 8009326:	460b      	mov	r3, r1
 8009328:	4630      	mov	r0, r6
 800932a:	4639      	mov	r1, r7
 800932c:	f7f6 ff50 	bl	80001d0 <__aeabi_dsub>
 8009330:	460f      	mov	r7, r1
 8009332:	4606      	mov	r6, r0
 8009334:	f7f7 fbb4 	bl	8000aa0 <__aeabi_d2iz>
 8009338:	9004      	str	r0, [sp, #16]
 800933a:	f7f7 f897 	bl	800046c <__aeabi_i2d>
 800933e:	4602      	mov	r2, r0
 8009340:	460b      	mov	r3, r1
 8009342:	4630      	mov	r0, r6
 8009344:	4639      	mov	r1, r7
 8009346:	f7f6 ff43 	bl	80001d0 <__aeabi_dsub>
 800934a:	f1ba 0f00 	cmp.w	sl, #0
 800934e:	4606      	mov	r6, r0
 8009350:	460f      	mov	r7, r1
 8009352:	dd6d      	ble.n	8009430 <__kernel_rem_pio2+0x250>
 8009354:	1e62      	subs	r2, r4, #1
 8009356:	ab0e      	add	r3, sp, #56	; 0x38
 8009358:	9d04      	ldr	r5, [sp, #16]
 800935a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800935e:	f1ca 0118 	rsb	r1, sl, #24
 8009362:	fa40 f301 	asr.w	r3, r0, r1
 8009366:	441d      	add	r5, r3
 8009368:	408b      	lsls	r3, r1
 800936a:	1ac0      	subs	r0, r0, r3
 800936c:	ab0e      	add	r3, sp, #56	; 0x38
 800936e:	9504      	str	r5, [sp, #16]
 8009370:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009374:	f1ca 0317 	rsb	r3, sl, #23
 8009378:	fa40 fb03 	asr.w	fp, r0, r3
 800937c:	f1bb 0f00 	cmp.w	fp, #0
 8009380:	dd65      	ble.n	800944e <__kernel_rem_pio2+0x26e>
 8009382:	9b04      	ldr	r3, [sp, #16]
 8009384:	2200      	movs	r2, #0
 8009386:	3301      	adds	r3, #1
 8009388:	9304      	str	r3, [sp, #16]
 800938a:	4615      	mov	r5, r2
 800938c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009390:	4294      	cmp	r4, r2
 8009392:	f300 809c 	bgt.w	80094ce <__kernel_rem_pio2+0x2ee>
 8009396:	f1ba 0f00 	cmp.w	sl, #0
 800939a:	dd07      	ble.n	80093ac <__kernel_rem_pio2+0x1cc>
 800939c:	f1ba 0f01 	cmp.w	sl, #1
 80093a0:	f000 80c0 	beq.w	8009524 <__kernel_rem_pio2+0x344>
 80093a4:	f1ba 0f02 	cmp.w	sl, #2
 80093a8:	f000 80c6 	beq.w	8009538 <__kernel_rem_pio2+0x358>
 80093ac:	f1bb 0f02 	cmp.w	fp, #2
 80093b0:	d14d      	bne.n	800944e <__kernel_rem_pio2+0x26e>
 80093b2:	4632      	mov	r2, r6
 80093b4:	463b      	mov	r3, r7
 80093b6:	4956      	ldr	r1, [pc, #344]	; (8009510 <__kernel_rem_pio2+0x330>)
 80093b8:	2000      	movs	r0, #0
 80093ba:	f7f6 ff09 	bl	80001d0 <__aeabi_dsub>
 80093be:	4606      	mov	r6, r0
 80093c0:	460f      	mov	r7, r1
 80093c2:	2d00      	cmp	r5, #0
 80093c4:	d043      	beq.n	800944e <__kernel_rem_pio2+0x26e>
 80093c6:	4650      	mov	r0, sl
 80093c8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009500 <__kernel_rem_pio2+0x320>
 80093cc:	f000 fbdc 	bl	8009b88 <scalbn>
 80093d0:	4630      	mov	r0, r6
 80093d2:	4639      	mov	r1, r7
 80093d4:	ec53 2b10 	vmov	r2, r3, d0
 80093d8:	f7f6 fefa 	bl	80001d0 <__aeabi_dsub>
 80093dc:	4606      	mov	r6, r0
 80093de:	460f      	mov	r7, r1
 80093e0:	e035      	b.n	800944e <__kernel_rem_pio2+0x26e>
 80093e2:	4b4c      	ldr	r3, [pc, #304]	; (8009514 <__kernel_rem_pio2+0x334>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	4630      	mov	r0, r6
 80093e8:	4639      	mov	r1, r7
 80093ea:	f7f7 f8a9 	bl	8000540 <__aeabi_dmul>
 80093ee:	f7f7 fb57 	bl	8000aa0 <__aeabi_d2iz>
 80093f2:	f7f7 f83b 	bl	800046c <__aeabi_i2d>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	ec43 2b18 	vmov	d8, r2, r3
 80093fe:	4b46      	ldr	r3, [pc, #280]	; (8009518 <__kernel_rem_pio2+0x338>)
 8009400:	2200      	movs	r2, #0
 8009402:	f7f7 f89d 	bl	8000540 <__aeabi_dmul>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4630      	mov	r0, r6
 800940c:	4639      	mov	r1, r7
 800940e:	f7f6 fedf 	bl	80001d0 <__aeabi_dsub>
 8009412:	f7f7 fb45 	bl	8000aa0 <__aeabi_d2iz>
 8009416:	e9d5 2300 	ldrd	r2, r3, [r5]
 800941a:	f84b 0b04 	str.w	r0, [fp], #4
 800941e:	ec51 0b18 	vmov	r0, r1, d8
 8009422:	f7f6 fed7 	bl	80001d4 <__adddf3>
 8009426:	f109 39ff 	add.w	r9, r9, #4294967295
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	e75b      	b.n	80092e8 <__kernel_rem_pio2+0x108>
 8009430:	d106      	bne.n	8009440 <__kernel_rem_pio2+0x260>
 8009432:	1e63      	subs	r3, r4, #1
 8009434:	aa0e      	add	r2, sp, #56	; 0x38
 8009436:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800943a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800943e:	e79d      	b.n	800937c <__kernel_rem_pio2+0x19c>
 8009440:	4b36      	ldr	r3, [pc, #216]	; (800951c <__kernel_rem_pio2+0x33c>)
 8009442:	2200      	movs	r2, #0
 8009444:	f7f7 fb02 	bl	8000a4c <__aeabi_dcmpge>
 8009448:	2800      	cmp	r0, #0
 800944a:	d13d      	bne.n	80094c8 <__kernel_rem_pio2+0x2e8>
 800944c:	4683      	mov	fp, r0
 800944e:	2200      	movs	r2, #0
 8009450:	2300      	movs	r3, #0
 8009452:	4630      	mov	r0, r6
 8009454:	4639      	mov	r1, r7
 8009456:	f7f7 fadb 	bl	8000a10 <__aeabi_dcmpeq>
 800945a:	2800      	cmp	r0, #0
 800945c:	f000 80c0 	beq.w	80095e0 <__kernel_rem_pio2+0x400>
 8009460:	1e65      	subs	r5, r4, #1
 8009462:	462b      	mov	r3, r5
 8009464:	2200      	movs	r2, #0
 8009466:	9902      	ldr	r1, [sp, #8]
 8009468:	428b      	cmp	r3, r1
 800946a:	da6c      	bge.n	8009546 <__kernel_rem_pio2+0x366>
 800946c:	2a00      	cmp	r2, #0
 800946e:	f000 8089 	beq.w	8009584 <__kernel_rem_pio2+0x3a4>
 8009472:	ab0e      	add	r3, sp, #56	; 0x38
 8009474:	f1aa 0a18 	sub.w	sl, sl, #24
 8009478:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80ad 	beq.w	80095dc <__kernel_rem_pio2+0x3fc>
 8009482:	4650      	mov	r0, sl
 8009484:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009500 <__kernel_rem_pio2+0x320>
 8009488:	f000 fb7e 	bl	8009b88 <scalbn>
 800948c:	ab9a      	add	r3, sp, #616	; 0x268
 800948e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009492:	ec57 6b10 	vmov	r6, r7, d0
 8009496:	00ec      	lsls	r4, r5, #3
 8009498:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800949c:	46aa      	mov	sl, r5
 800949e:	f1ba 0f00 	cmp.w	sl, #0
 80094a2:	f280 80d6 	bge.w	8009652 <__kernel_rem_pio2+0x472>
 80094a6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80094f8 <__kernel_rem_pio2+0x318>
 80094aa:	462e      	mov	r6, r5
 80094ac:	2e00      	cmp	r6, #0
 80094ae:	f2c0 8104 	blt.w	80096ba <__kernel_rem_pio2+0x4da>
 80094b2:	ab72      	add	r3, sp, #456	; 0x1c8
 80094b4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80094b8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009520 <__kernel_rem_pio2+0x340>
 80094bc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80094c0:	f04f 0800 	mov.w	r8, #0
 80094c4:	1baf      	subs	r7, r5, r6
 80094c6:	e0ea      	b.n	800969e <__kernel_rem_pio2+0x4be>
 80094c8:	f04f 0b02 	mov.w	fp, #2
 80094cc:	e759      	b.n	8009382 <__kernel_rem_pio2+0x1a2>
 80094ce:	f8d8 3000 	ldr.w	r3, [r8]
 80094d2:	b955      	cbnz	r5, 80094ea <__kernel_rem_pio2+0x30a>
 80094d4:	b123      	cbz	r3, 80094e0 <__kernel_rem_pio2+0x300>
 80094d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80094da:	f8c8 3000 	str.w	r3, [r8]
 80094de:	2301      	movs	r3, #1
 80094e0:	3201      	adds	r2, #1
 80094e2:	f108 0804 	add.w	r8, r8, #4
 80094e6:	461d      	mov	r5, r3
 80094e8:	e752      	b.n	8009390 <__kernel_rem_pio2+0x1b0>
 80094ea:	1acb      	subs	r3, r1, r3
 80094ec:	f8c8 3000 	str.w	r3, [r8]
 80094f0:	462b      	mov	r3, r5
 80094f2:	e7f5      	b.n	80094e0 <__kernel_rem_pio2+0x300>
 80094f4:	f3af 8000 	nop.w
	...
 8009504:	3ff00000 	.word	0x3ff00000
 8009508:	0800a6e0 	.word	0x0800a6e0
 800950c:	40200000 	.word	0x40200000
 8009510:	3ff00000 	.word	0x3ff00000
 8009514:	3e700000 	.word	0x3e700000
 8009518:	41700000 	.word	0x41700000
 800951c:	3fe00000 	.word	0x3fe00000
 8009520:	0800a6a0 	.word	0x0800a6a0
 8009524:	1e62      	subs	r2, r4, #1
 8009526:	ab0e      	add	r3, sp, #56	; 0x38
 8009528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009530:	a90e      	add	r1, sp, #56	; 0x38
 8009532:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009536:	e739      	b.n	80093ac <__kernel_rem_pio2+0x1cc>
 8009538:	1e62      	subs	r2, r4, #1
 800953a:	ab0e      	add	r3, sp, #56	; 0x38
 800953c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009540:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009544:	e7f4      	b.n	8009530 <__kernel_rem_pio2+0x350>
 8009546:	a90e      	add	r1, sp, #56	; 0x38
 8009548:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800954c:	3b01      	subs	r3, #1
 800954e:	430a      	orrs	r2, r1
 8009550:	e789      	b.n	8009466 <__kernel_rem_pio2+0x286>
 8009552:	3301      	adds	r3, #1
 8009554:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009558:	2900      	cmp	r1, #0
 800955a:	d0fa      	beq.n	8009552 <__kernel_rem_pio2+0x372>
 800955c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800955e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8009562:	446a      	add	r2, sp
 8009564:	3a98      	subs	r2, #152	; 0x98
 8009566:	920a      	str	r2, [sp, #40]	; 0x28
 8009568:	9a08      	ldr	r2, [sp, #32]
 800956a:	18e3      	adds	r3, r4, r3
 800956c:	18a5      	adds	r5, r4, r2
 800956e:	aa22      	add	r2, sp, #136	; 0x88
 8009570:	f104 0801 	add.w	r8, r4, #1
 8009574:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009578:	9304      	str	r3, [sp, #16]
 800957a:	9b04      	ldr	r3, [sp, #16]
 800957c:	4543      	cmp	r3, r8
 800957e:	da04      	bge.n	800958a <__kernel_rem_pio2+0x3aa>
 8009580:	461c      	mov	r4, r3
 8009582:	e6a3      	b.n	80092cc <__kernel_rem_pio2+0xec>
 8009584:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009586:	2301      	movs	r3, #1
 8009588:	e7e4      	b.n	8009554 <__kernel_rem_pio2+0x374>
 800958a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800958c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009590:	f7f6 ff6c 	bl	800046c <__aeabi_i2d>
 8009594:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800959a:	46ab      	mov	fp, r5
 800959c:	461c      	mov	r4, r3
 800959e:	f04f 0900 	mov.w	r9, #0
 80095a2:	2600      	movs	r6, #0
 80095a4:	2700      	movs	r7, #0
 80095a6:	9b06      	ldr	r3, [sp, #24]
 80095a8:	4599      	cmp	r9, r3
 80095aa:	dd06      	ble.n	80095ba <__kernel_rem_pio2+0x3da>
 80095ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ae:	e8e3 6702 	strd	r6, r7, [r3], #8
 80095b2:	f108 0801 	add.w	r8, r8, #1
 80095b6:	930a      	str	r3, [sp, #40]	; 0x28
 80095b8:	e7df      	b.n	800957a <__kernel_rem_pio2+0x39a>
 80095ba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80095be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80095c2:	f7f6 ffbd 	bl	8000540 <__aeabi_dmul>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4630      	mov	r0, r6
 80095cc:	4639      	mov	r1, r7
 80095ce:	f7f6 fe01 	bl	80001d4 <__adddf3>
 80095d2:	f109 0901 	add.w	r9, r9, #1
 80095d6:	4606      	mov	r6, r0
 80095d8:	460f      	mov	r7, r1
 80095da:	e7e4      	b.n	80095a6 <__kernel_rem_pio2+0x3c6>
 80095dc:	3d01      	subs	r5, #1
 80095de:	e748      	b.n	8009472 <__kernel_rem_pio2+0x292>
 80095e0:	ec47 6b10 	vmov	d0, r6, r7
 80095e4:	f1ca 0000 	rsb	r0, sl, #0
 80095e8:	f000 face 	bl	8009b88 <scalbn>
 80095ec:	ec57 6b10 	vmov	r6, r7, d0
 80095f0:	4ba0      	ldr	r3, [pc, #640]	; (8009874 <__kernel_rem_pio2+0x694>)
 80095f2:	ee10 0a10 	vmov	r0, s0
 80095f6:	2200      	movs	r2, #0
 80095f8:	4639      	mov	r1, r7
 80095fa:	f7f7 fa27 	bl	8000a4c <__aeabi_dcmpge>
 80095fe:	b1f8      	cbz	r0, 8009640 <__kernel_rem_pio2+0x460>
 8009600:	4b9d      	ldr	r3, [pc, #628]	; (8009878 <__kernel_rem_pio2+0x698>)
 8009602:	2200      	movs	r2, #0
 8009604:	4630      	mov	r0, r6
 8009606:	4639      	mov	r1, r7
 8009608:	f7f6 ff9a 	bl	8000540 <__aeabi_dmul>
 800960c:	f7f7 fa48 	bl	8000aa0 <__aeabi_d2iz>
 8009610:	4680      	mov	r8, r0
 8009612:	f7f6 ff2b 	bl	800046c <__aeabi_i2d>
 8009616:	4b97      	ldr	r3, [pc, #604]	; (8009874 <__kernel_rem_pio2+0x694>)
 8009618:	2200      	movs	r2, #0
 800961a:	f7f6 ff91 	bl	8000540 <__aeabi_dmul>
 800961e:	460b      	mov	r3, r1
 8009620:	4602      	mov	r2, r0
 8009622:	4639      	mov	r1, r7
 8009624:	4630      	mov	r0, r6
 8009626:	f7f6 fdd3 	bl	80001d0 <__aeabi_dsub>
 800962a:	f7f7 fa39 	bl	8000aa0 <__aeabi_d2iz>
 800962e:	1c65      	adds	r5, r4, #1
 8009630:	ab0e      	add	r3, sp, #56	; 0x38
 8009632:	f10a 0a18 	add.w	sl, sl, #24
 8009636:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800963a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800963e:	e720      	b.n	8009482 <__kernel_rem_pio2+0x2a2>
 8009640:	4630      	mov	r0, r6
 8009642:	4639      	mov	r1, r7
 8009644:	f7f7 fa2c 	bl	8000aa0 <__aeabi_d2iz>
 8009648:	ab0e      	add	r3, sp, #56	; 0x38
 800964a:	4625      	mov	r5, r4
 800964c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009650:	e717      	b.n	8009482 <__kernel_rem_pio2+0x2a2>
 8009652:	ab0e      	add	r3, sp, #56	; 0x38
 8009654:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009658:	f7f6 ff08 	bl	800046c <__aeabi_i2d>
 800965c:	4632      	mov	r2, r6
 800965e:	463b      	mov	r3, r7
 8009660:	f7f6 ff6e 	bl	8000540 <__aeabi_dmul>
 8009664:	4b84      	ldr	r3, [pc, #528]	; (8009878 <__kernel_rem_pio2+0x698>)
 8009666:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800966a:	2200      	movs	r2, #0
 800966c:	4630      	mov	r0, r6
 800966e:	4639      	mov	r1, r7
 8009670:	f7f6 ff66 	bl	8000540 <__aeabi_dmul>
 8009674:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009678:	4606      	mov	r6, r0
 800967a:	460f      	mov	r7, r1
 800967c:	e70f      	b.n	800949e <__kernel_rem_pio2+0x2be>
 800967e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009682:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009686:	f7f6 ff5b 	bl	8000540 <__aeabi_dmul>
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009692:	f7f6 fd9f 	bl	80001d4 <__adddf3>
 8009696:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800969a:	f108 0801 	add.w	r8, r8, #1
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	4598      	cmp	r8, r3
 80096a2:	dc01      	bgt.n	80096a8 <__kernel_rem_pio2+0x4c8>
 80096a4:	45b8      	cmp	r8, r7
 80096a6:	ddea      	ble.n	800967e <__kernel_rem_pio2+0x49e>
 80096a8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80096ac:	ab4a      	add	r3, sp, #296	; 0x128
 80096ae:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80096b2:	ed87 7b00 	vstr	d7, [r7]
 80096b6:	3e01      	subs	r6, #1
 80096b8:	e6f8      	b.n	80094ac <__kernel_rem_pio2+0x2cc>
 80096ba:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80096bc:	2b02      	cmp	r3, #2
 80096be:	dc0b      	bgt.n	80096d8 <__kernel_rem_pio2+0x4f8>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	dc35      	bgt.n	8009730 <__kernel_rem_pio2+0x550>
 80096c4:	d059      	beq.n	800977a <__kernel_rem_pio2+0x59a>
 80096c6:	9b04      	ldr	r3, [sp, #16]
 80096c8:	f003 0007 	and.w	r0, r3, #7
 80096cc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80096d0:	ecbd 8b02 	vpop	{d8}
 80096d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d1f3      	bne.n	80096c6 <__kernel_rem_pio2+0x4e6>
 80096de:	ab4a      	add	r3, sp, #296	; 0x128
 80096e0:	4423      	add	r3, r4
 80096e2:	9306      	str	r3, [sp, #24]
 80096e4:	461c      	mov	r4, r3
 80096e6:	469a      	mov	sl, r3
 80096e8:	9502      	str	r5, [sp, #8]
 80096ea:	9b02      	ldr	r3, [sp, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f1aa 0a08 	sub.w	sl, sl, #8
 80096f2:	dc6b      	bgt.n	80097cc <__kernel_rem_pio2+0x5ec>
 80096f4:	46aa      	mov	sl, r5
 80096f6:	f1ba 0f01 	cmp.w	sl, #1
 80096fa:	f1a4 0408 	sub.w	r4, r4, #8
 80096fe:	f300 8085 	bgt.w	800980c <__kernel_rem_pio2+0x62c>
 8009702:	9c06      	ldr	r4, [sp, #24]
 8009704:	2000      	movs	r0, #0
 8009706:	3408      	adds	r4, #8
 8009708:	2100      	movs	r1, #0
 800970a:	2d01      	cmp	r5, #1
 800970c:	f300 809d 	bgt.w	800984a <__kernel_rem_pio2+0x66a>
 8009710:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009714:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009718:	f1bb 0f00 	cmp.w	fp, #0
 800971c:	f040 809b 	bne.w	8009856 <__kernel_rem_pio2+0x676>
 8009720:	9b01      	ldr	r3, [sp, #4]
 8009722:	e9c3 5600 	strd	r5, r6, [r3]
 8009726:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800972a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800972e:	e7ca      	b.n	80096c6 <__kernel_rem_pio2+0x4e6>
 8009730:	3408      	adds	r4, #8
 8009732:	ab4a      	add	r3, sp, #296	; 0x128
 8009734:	441c      	add	r4, r3
 8009736:	462e      	mov	r6, r5
 8009738:	2000      	movs	r0, #0
 800973a:	2100      	movs	r1, #0
 800973c:	2e00      	cmp	r6, #0
 800973e:	da36      	bge.n	80097ae <__kernel_rem_pio2+0x5ce>
 8009740:	f1bb 0f00 	cmp.w	fp, #0
 8009744:	d039      	beq.n	80097ba <__kernel_rem_pio2+0x5da>
 8009746:	4602      	mov	r2, r0
 8009748:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800974c:	9c01      	ldr	r4, [sp, #4]
 800974e:	e9c4 2300 	strd	r2, r3, [r4]
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800975a:	f7f6 fd39 	bl	80001d0 <__aeabi_dsub>
 800975e:	ae4c      	add	r6, sp, #304	; 0x130
 8009760:	2401      	movs	r4, #1
 8009762:	42a5      	cmp	r5, r4
 8009764:	da2c      	bge.n	80097c0 <__kernel_rem_pio2+0x5e0>
 8009766:	f1bb 0f00 	cmp.w	fp, #0
 800976a:	d002      	beq.n	8009772 <__kernel_rem_pio2+0x592>
 800976c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009770:	4619      	mov	r1, r3
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009778:	e7a5      	b.n	80096c6 <__kernel_rem_pio2+0x4e6>
 800977a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800977e:	eb0d 0403 	add.w	r4, sp, r3
 8009782:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009786:	2000      	movs	r0, #0
 8009788:	2100      	movs	r1, #0
 800978a:	2d00      	cmp	r5, #0
 800978c:	da09      	bge.n	80097a2 <__kernel_rem_pio2+0x5c2>
 800978e:	f1bb 0f00 	cmp.w	fp, #0
 8009792:	d002      	beq.n	800979a <__kernel_rem_pio2+0x5ba>
 8009794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009798:	4619      	mov	r1, r3
 800979a:	9b01      	ldr	r3, [sp, #4]
 800979c:	e9c3 0100 	strd	r0, r1, [r3]
 80097a0:	e791      	b.n	80096c6 <__kernel_rem_pio2+0x4e6>
 80097a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80097a6:	f7f6 fd15 	bl	80001d4 <__adddf3>
 80097aa:	3d01      	subs	r5, #1
 80097ac:	e7ed      	b.n	800978a <__kernel_rem_pio2+0x5aa>
 80097ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80097b2:	f7f6 fd0f 	bl	80001d4 <__adddf3>
 80097b6:	3e01      	subs	r6, #1
 80097b8:	e7c0      	b.n	800973c <__kernel_rem_pio2+0x55c>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	e7c5      	b.n	800974c <__kernel_rem_pio2+0x56c>
 80097c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80097c4:	f7f6 fd06 	bl	80001d4 <__adddf3>
 80097c8:	3401      	adds	r4, #1
 80097ca:	e7ca      	b.n	8009762 <__kernel_rem_pio2+0x582>
 80097cc:	e9da 8900 	ldrd	r8, r9, [sl]
 80097d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80097d4:	9b02      	ldr	r3, [sp, #8]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	9302      	str	r3, [sp, #8]
 80097da:	4632      	mov	r2, r6
 80097dc:	463b      	mov	r3, r7
 80097de:	4640      	mov	r0, r8
 80097e0:	4649      	mov	r1, r9
 80097e2:	f7f6 fcf7 	bl	80001d4 <__adddf3>
 80097e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4640      	mov	r0, r8
 80097f0:	4649      	mov	r1, r9
 80097f2:	f7f6 fced 	bl	80001d0 <__aeabi_dsub>
 80097f6:	4632      	mov	r2, r6
 80097f8:	463b      	mov	r3, r7
 80097fa:	f7f6 fceb 	bl	80001d4 <__adddf3>
 80097fe:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009802:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009806:	ed8a 7b00 	vstr	d7, [sl]
 800980a:	e76e      	b.n	80096ea <__kernel_rem_pio2+0x50a>
 800980c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009810:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009814:	4640      	mov	r0, r8
 8009816:	4632      	mov	r2, r6
 8009818:	463b      	mov	r3, r7
 800981a:	4649      	mov	r1, r9
 800981c:	f7f6 fcda 	bl	80001d4 <__adddf3>
 8009820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4640      	mov	r0, r8
 800982a:	4649      	mov	r1, r9
 800982c:	f7f6 fcd0 	bl	80001d0 <__aeabi_dsub>
 8009830:	4632      	mov	r2, r6
 8009832:	463b      	mov	r3, r7
 8009834:	f7f6 fcce 	bl	80001d4 <__adddf3>
 8009838:	ed9d 7b02 	vldr	d7, [sp, #8]
 800983c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009840:	ed84 7b00 	vstr	d7, [r4]
 8009844:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009848:	e755      	b.n	80096f6 <__kernel_rem_pio2+0x516>
 800984a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800984e:	f7f6 fcc1 	bl	80001d4 <__adddf3>
 8009852:	3d01      	subs	r5, #1
 8009854:	e759      	b.n	800970a <__kernel_rem_pio2+0x52a>
 8009856:	9b01      	ldr	r3, [sp, #4]
 8009858:	9a01      	ldr	r2, [sp, #4]
 800985a:	601d      	str	r5, [r3, #0]
 800985c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009860:	605c      	str	r4, [r3, #4]
 8009862:	609f      	str	r7, [r3, #8]
 8009864:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009868:	60d3      	str	r3, [r2, #12]
 800986a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800986e:	6110      	str	r0, [r2, #16]
 8009870:	6153      	str	r3, [r2, #20]
 8009872:	e728      	b.n	80096c6 <__kernel_rem_pio2+0x4e6>
 8009874:	41700000 	.word	0x41700000
 8009878:	3e700000 	.word	0x3e700000
 800987c:	00000000 	.word	0x00000000

08009880 <__kernel_sin>:
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	ed2d 8b04 	vpush	{d8-d9}
 8009888:	eeb0 8a41 	vmov.f32	s16, s2
 800988c:	eef0 8a61 	vmov.f32	s17, s3
 8009890:	ec55 4b10 	vmov	r4, r5, d0
 8009894:	b083      	sub	sp, #12
 8009896:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800989a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800989e:	9001      	str	r0, [sp, #4]
 80098a0:	da06      	bge.n	80098b0 <__kernel_sin+0x30>
 80098a2:	ee10 0a10 	vmov	r0, s0
 80098a6:	4629      	mov	r1, r5
 80098a8:	f7f7 f8fa 	bl	8000aa0 <__aeabi_d2iz>
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d051      	beq.n	8009954 <__kernel_sin+0xd4>
 80098b0:	4622      	mov	r2, r4
 80098b2:	462b      	mov	r3, r5
 80098b4:	4620      	mov	r0, r4
 80098b6:	4629      	mov	r1, r5
 80098b8:	f7f6 fe42 	bl	8000540 <__aeabi_dmul>
 80098bc:	4682      	mov	sl, r0
 80098be:	468b      	mov	fp, r1
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4620      	mov	r0, r4
 80098c6:	4629      	mov	r1, r5
 80098c8:	f7f6 fe3a 	bl	8000540 <__aeabi_dmul>
 80098cc:	a341      	add	r3, pc, #260	; (adr r3, 80099d4 <__kernel_sin+0x154>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	4680      	mov	r8, r0
 80098d4:	4689      	mov	r9, r1
 80098d6:	4650      	mov	r0, sl
 80098d8:	4659      	mov	r1, fp
 80098da:	f7f6 fe31 	bl	8000540 <__aeabi_dmul>
 80098de:	a33f      	add	r3, pc, #252	; (adr r3, 80099dc <__kernel_sin+0x15c>)
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f7f6 fc74 	bl	80001d0 <__aeabi_dsub>
 80098e8:	4652      	mov	r2, sl
 80098ea:	465b      	mov	r3, fp
 80098ec:	f7f6 fe28 	bl	8000540 <__aeabi_dmul>
 80098f0:	a33c      	add	r3, pc, #240	; (adr r3, 80099e4 <__kernel_sin+0x164>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f6 fc6d 	bl	80001d4 <__adddf3>
 80098fa:	4652      	mov	r2, sl
 80098fc:	465b      	mov	r3, fp
 80098fe:	f7f6 fe1f 	bl	8000540 <__aeabi_dmul>
 8009902:	a33a      	add	r3, pc, #232	; (adr r3, 80099ec <__kernel_sin+0x16c>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f7f6 fc62 	bl	80001d0 <__aeabi_dsub>
 800990c:	4652      	mov	r2, sl
 800990e:	465b      	mov	r3, fp
 8009910:	f7f6 fe16 	bl	8000540 <__aeabi_dmul>
 8009914:	a337      	add	r3, pc, #220	; (adr r3, 80099f4 <__kernel_sin+0x174>)
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f7f6 fc5b 	bl	80001d4 <__adddf3>
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	4606      	mov	r6, r0
 8009922:	460f      	mov	r7, r1
 8009924:	b9eb      	cbnz	r3, 8009962 <__kernel_sin+0xe2>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4650      	mov	r0, sl
 800992c:	4659      	mov	r1, fp
 800992e:	f7f6 fe07 	bl	8000540 <__aeabi_dmul>
 8009932:	a325      	add	r3, pc, #148	; (adr r3, 80099c8 <__kernel_sin+0x148>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f7f6 fc4a 	bl	80001d0 <__aeabi_dsub>
 800993c:	4642      	mov	r2, r8
 800993e:	464b      	mov	r3, r9
 8009940:	f7f6 fdfe 	bl	8000540 <__aeabi_dmul>
 8009944:	4602      	mov	r2, r0
 8009946:	460b      	mov	r3, r1
 8009948:	4620      	mov	r0, r4
 800994a:	4629      	mov	r1, r5
 800994c:	f7f6 fc42 	bl	80001d4 <__adddf3>
 8009950:	4604      	mov	r4, r0
 8009952:	460d      	mov	r5, r1
 8009954:	ec45 4b10 	vmov	d0, r4, r5
 8009958:	b003      	add	sp, #12
 800995a:	ecbd 8b04 	vpop	{d8-d9}
 800995e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009962:	4b1b      	ldr	r3, [pc, #108]	; (80099d0 <__kernel_sin+0x150>)
 8009964:	ec51 0b18 	vmov	r0, r1, d8
 8009968:	2200      	movs	r2, #0
 800996a:	f7f6 fde9 	bl	8000540 <__aeabi_dmul>
 800996e:	4632      	mov	r2, r6
 8009970:	ec41 0b19 	vmov	d9, r0, r1
 8009974:	463b      	mov	r3, r7
 8009976:	4640      	mov	r0, r8
 8009978:	4649      	mov	r1, r9
 800997a:	f7f6 fde1 	bl	8000540 <__aeabi_dmul>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	ec51 0b19 	vmov	r0, r1, d9
 8009986:	f7f6 fc23 	bl	80001d0 <__aeabi_dsub>
 800998a:	4652      	mov	r2, sl
 800998c:	465b      	mov	r3, fp
 800998e:	f7f6 fdd7 	bl	8000540 <__aeabi_dmul>
 8009992:	ec53 2b18 	vmov	r2, r3, d8
 8009996:	f7f6 fc1b 	bl	80001d0 <__aeabi_dsub>
 800999a:	a30b      	add	r3, pc, #44	; (adr r3, 80099c8 <__kernel_sin+0x148>)
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	4606      	mov	r6, r0
 80099a2:	460f      	mov	r7, r1
 80099a4:	4640      	mov	r0, r8
 80099a6:	4649      	mov	r1, r9
 80099a8:	f7f6 fdca 	bl	8000540 <__aeabi_dmul>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4630      	mov	r0, r6
 80099b2:	4639      	mov	r1, r7
 80099b4:	f7f6 fc0e 	bl	80001d4 <__adddf3>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4620      	mov	r0, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	f7f6 fc06 	bl	80001d0 <__aeabi_dsub>
 80099c4:	e7c4      	b.n	8009950 <__kernel_sin+0xd0>
 80099c6:	bf00      	nop
 80099c8:	55555549 	.word	0x55555549
 80099cc:	3fc55555 	.word	0x3fc55555
 80099d0:	3fe00000 	.word	0x3fe00000
 80099d4:	5acfd57c 	.word	0x5acfd57c
 80099d8:	3de5d93a 	.word	0x3de5d93a
 80099dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80099e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80099e4:	57b1fe7d 	.word	0x57b1fe7d
 80099e8:	3ec71de3 	.word	0x3ec71de3
 80099ec:	19c161d5 	.word	0x19c161d5
 80099f0:	3f2a01a0 	.word	0x3f2a01a0
 80099f4:	1110f8a6 	.word	0x1110f8a6
 80099f8:	3f811111 	.word	0x3f811111

080099fc <with_errno>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	4604      	mov	r4, r0
 8009a00:	460d      	mov	r5, r1
 8009a02:	4616      	mov	r6, r2
 8009a04:	f7fe f802 	bl	8007a0c <__errno>
 8009a08:	4629      	mov	r1, r5
 8009a0a:	6006      	str	r6, [r0, #0]
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}

08009a10 <xflow>:
 8009a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a12:	4614      	mov	r4, r2
 8009a14:	461d      	mov	r5, r3
 8009a16:	b108      	cbz	r0, 8009a1c <xflow+0xc>
 8009a18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a1c:	e9cd 2300 	strd	r2, r3, [sp]
 8009a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a24:	4620      	mov	r0, r4
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7f6 fd8a 	bl	8000540 <__aeabi_dmul>
 8009a2c:	2222      	movs	r2, #34	; 0x22
 8009a2e:	b003      	add	sp, #12
 8009a30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a34:	f7ff bfe2 	b.w	80099fc <with_errno>

08009a38 <__math_uflow>:
 8009a38:	b508      	push	{r3, lr}
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a40:	f7ff ffe6 	bl	8009a10 <xflow>
 8009a44:	ec41 0b10 	vmov	d0, r0, r1
 8009a48:	bd08      	pop	{r3, pc}

08009a4a <__math_oflow>:
 8009a4a:	b508      	push	{r3, lr}
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009a52:	f7ff ffdd 	bl	8009a10 <xflow>
 8009a56:	ec41 0b10 	vmov	d0, r0, r1
 8009a5a:	bd08      	pop	{r3, pc}

08009a5c <fabs>:
 8009a5c:	ec51 0b10 	vmov	r0, r1, d0
 8009a60:	ee10 2a10 	vmov	r2, s0
 8009a64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a68:	ec43 2b10 	vmov	d0, r2, r3
 8009a6c:	4770      	bx	lr

08009a6e <finite>:
 8009a6e:	b082      	sub	sp, #8
 8009a70:	ed8d 0b00 	vstr	d0, [sp]
 8009a74:	9801      	ldr	r0, [sp, #4]
 8009a76:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009a7a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009a7e:	0fc0      	lsrs	r0, r0, #31
 8009a80:	b002      	add	sp, #8
 8009a82:	4770      	bx	lr
 8009a84:	0000      	movs	r0, r0
	...

08009a88 <floor>:
 8009a88:	ec51 0b10 	vmov	r0, r1, d0
 8009a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a90:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009a94:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009a98:	2e13      	cmp	r6, #19
 8009a9a:	ee10 5a10 	vmov	r5, s0
 8009a9e:	ee10 8a10 	vmov	r8, s0
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	dc32      	bgt.n	8009b0c <floor+0x84>
 8009aa6:	2e00      	cmp	r6, #0
 8009aa8:	da14      	bge.n	8009ad4 <floor+0x4c>
 8009aaa:	a333      	add	r3, pc, #204	; (adr r3, 8009b78 <floor+0xf0>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f7f6 fb90 	bl	80001d4 <__adddf3>
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f7f6 ffd2 	bl	8000a60 <__aeabi_dcmpgt>
 8009abc:	b138      	cbz	r0, 8009ace <floor+0x46>
 8009abe:	2c00      	cmp	r4, #0
 8009ac0:	da57      	bge.n	8009b72 <floor+0xea>
 8009ac2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009ac6:	431d      	orrs	r5, r3
 8009ac8:	d001      	beq.n	8009ace <floor+0x46>
 8009aca:	4c2d      	ldr	r4, [pc, #180]	; (8009b80 <floor+0xf8>)
 8009acc:	2500      	movs	r5, #0
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	e025      	b.n	8009b20 <floor+0x98>
 8009ad4:	4f2b      	ldr	r7, [pc, #172]	; (8009b84 <floor+0xfc>)
 8009ad6:	4137      	asrs	r7, r6
 8009ad8:	ea01 0307 	and.w	r3, r1, r7
 8009adc:	4303      	orrs	r3, r0
 8009ade:	d01f      	beq.n	8009b20 <floor+0x98>
 8009ae0:	a325      	add	r3, pc, #148	; (adr r3, 8009b78 <floor+0xf0>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fb75 	bl	80001d4 <__adddf3>
 8009aea:	2200      	movs	r2, #0
 8009aec:	2300      	movs	r3, #0
 8009aee:	f7f6 ffb7 	bl	8000a60 <__aeabi_dcmpgt>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d0eb      	beq.n	8009ace <floor+0x46>
 8009af6:	2c00      	cmp	r4, #0
 8009af8:	bfbe      	ittt	lt
 8009afa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009afe:	fa43 f606 	asrlt.w	r6, r3, r6
 8009b02:	19a4      	addlt	r4, r4, r6
 8009b04:	ea24 0407 	bic.w	r4, r4, r7
 8009b08:	2500      	movs	r5, #0
 8009b0a:	e7e0      	b.n	8009ace <floor+0x46>
 8009b0c:	2e33      	cmp	r6, #51	; 0x33
 8009b0e:	dd0b      	ble.n	8009b28 <floor+0xa0>
 8009b10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009b14:	d104      	bne.n	8009b20 <floor+0x98>
 8009b16:	ee10 2a10 	vmov	r2, s0
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	f7f6 fb5a 	bl	80001d4 <__adddf3>
 8009b20:	ec41 0b10 	vmov	d0, r0, r1
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b30:	fa23 f707 	lsr.w	r7, r3, r7
 8009b34:	4207      	tst	r7, r0
 8009b36:	d0f3      	beq.n	8009b20 <floor+0x98>
 8009b38:	a30f      	add	r3, pc, #60	; (adr r3, 8009b78 <floor+0xf0>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fb49 	bl	80001d4 <__adddf3>
 8009b42:	2200      	movs	r2, #0
 8009b44:	2300      	movs	r3, #0
 8009b46:	f7f6 ff8b 	bl	8000a60 <__aeabi_dcmpgt>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d0bf      	beq.n	8009ace <floor+0x46>
 8009b4e:	2c00      	cmp	r4, #0
 8009b50:	da02      	bge.n	8009b58 <floor+0xd0>
 8009b52:	2e14      	cmp	r6, #20
 8009b54:	d103      	bne.n	8009b5e <floor+0xd6>
 8009b56:	3401      	adds	r4, #1
 8009b58:	ea25 0507 	bic.w	r5, r5, r7
 8009b5c:	e7b7      	b.n	8009ace <floor+0x46>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009b64:	fa03 f606 	lsl.w	r6, r3, r6
 8009b68:	4435      	add	r5, r6
 8009b6a:	4545      	cmp	r5, r8
 8009b6c:	bf38      	it	cc
 8009b6e:	18e4      	addcc	r4, r4, r3
 8009b70:	e7f2      	b.n	8009b58 <floor+0xd0>
 8009b72:	2500      	movs	r5, #0
 8009b74:	462c      	mov	r4, r5
 8009b76:	e7aa      	b.n	8009ace <floor+0x46>
 8009b78:	8800759c 	.word	0x8800759c
 8009b7c:	7e37e43c 	.word	0x7e37e43c
 8009b80:	bff00000 	.word	0xbff00000
 8009b84:	000fffff 	.word	0x000fffff

08009b88 <scalbn>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	ec55 4b10 	vmov	r4, r5, d0
 8009b8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009b92:	4606      	mov	r6, r0
 8009b94:	462b      	mov	r3, r5
 8009b96:	b99a      	cbnz	r2, 8009bc0 <scalbn+0x38>
 8009b98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009b9c:	4323      	orrs	r3, r4
 8009b9e:	d036      	beq.n	8009c0e <scalbn+0x86>
 8009ba0:	4b39      	ldr	r3, [pc, #228]	; (8009c88 <scalbn+0x100>)
 8009ba2:	4629      	mov	r1, r5
 8009ba4:	ee10 0a10 	vmov	r0, s0
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f7f6 fcc9 	bl	8000540 <__aeabi_dmul>
 8009bae:	4b37      	ldr	r3, [pc, #220]	; (8009c8c <scalbn+0x104>)
 8009bb0:	429e      	cmp	r6, r3
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	460d      	mov	r5, r1
 8009bb6:	da10      	bge.n	8009bda <scalbn+0x52>
 8009bb8:	a32b      	add	r3, pc, #172	; (adr r3, 8009c68 <scalbn+0xe0>)
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	e03a      	b.n	8009c36 <scalbn+0xae>
 8009bc0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009bc4:	428a      	cmp	r2, r1
 8009bc6:	d10c      	bne.n	8009be2 <scalbn+0x5a>
 8009bc8:	ee10 2a10 	vmov	r2, s0
 8009bcc:	4620      	mov	r0, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f7f6 fb00 	bl	80001d4 <__adddf3>
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	460d      	mov	r5, r1
 8009bd8:	e019      	b.n	8009c0e <scalbn+0x86>
 8009bda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009bde:	460b      	mov	r3, r1
 8009be0:	3a36      	subs	r2, #54	; 0x36
 8009be2:	4432      	add	r2, r6
 8009be4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009be8:	428a      	cmp	r2, r1
 8009bea:	dd08      	ble.n	8009bfe <scalbn+0x76>
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	a120      	add	r1, pc, #128	; (adr r1, 8009c70 <scalbn+0xe8>)
 8009bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bf4:	da1c      	bge.n	8009c30 <scalbn+0xa8>
 8009bf6:	a120      	add	r1, pc, #128	; (adr r1, 8009c78 <scalbn+0xf0>)
 8009bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bfc:	e018      	b.n	8009c30 <scalbn+0xa8>
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	dd08      	ble.n	8009c14 <scalbn+0x8c>
 8009c02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c0e:	ec45 4b10 	vmov	d0, r4, r5
 8009c12:	bd70      	pop	{r4, r5, r6, pc}
 8009c14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009c18:	da19      	bge.n	8009c4e <scalbn+0xc6>
 8009c1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c1e:	429e      	cmp	r6, r3
 8009c20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009c24:	dd0a      	ble.n	8009c3c <scalbn+0xb4>
 8009c26:	a112      	add	r1, pc, #72	; (adr r1, 8009c70 <scalbn+0xe8>)
 8009c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1e2      	bne.n	8009bf6 <scalbn+0x6e>
 8009c30:	a30f      	add	r3, pc, #60	; (adr r3, 8009c70 <scalbn+0xe8>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7f6 fc83 	bl	8000540 <__aeabi_dmul>
 8009c3a:	e7cb      	b.n	8009bd4 <scalbn+0x4c>
 8009c3c:	a10a      	add	r1, pc, #40	; (adr r1, 8009c68 <scalbn+0xe0>)
 8009c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0b8      	beq.n	8009bb8 <scalbn+0x30>
 8009c46:	a10e      	add	r1, pc, #56	; (adr r1, 8009c80 <scalbn+0xf8>)
 8009c48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c4c:	e7b4      	b.n	8009bb8 <scalbn+0x30>
 8009c4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c52:	3236      	adds	r2, #54	; 0x36
 8009c54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4b0c      	ldr	r3, [pc, #48]	; (8009c90 <scalbn+0x108>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	e7e8      	b.n	8009c36 <scalbn+0xae>
 8009c64:	f3af 8000 	nop.w
 8009c68:	c2f8f359 	.word	0xc2f8f359
 8009c6c:	01a56e1f 	.word	0x01a56e1f
 8009c70:	8800759c 	.word	0x8800759c
 8009c74:	7e37e43c 	.word	0x7e37e43c
 8009c78:	8800759c 	.word	0x8800759c
 8009c7c:	fe37e43c 	.word	0xfe37e43c
 8009c80:	c2f8f359 	.word	0xc2f8f359
 8009c84:	81a56e1f 	.word	0x81a56e1f
 8009c88:	43500000 	.word	0x43500000
 8009c8c:	ffff3cb0 	.word	0xffff3cb0
 8009c90:	3c900000 	.word	0x3c900000

08009c94 <atanf>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	ee10 5a10 	vmov	r5, s0
 8009c9a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009c9e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8009ca2:	eef0 7a40 	vmov.f32	s15, s0
 8009ca6:	db10      	blt.n	8009cca <atanf+0x36>
 8009ca8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009cac:	dd04      	ble.n	8009cb8 <atanf+0x24>
 8009cae:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8009cb6:	bd38      	pop	{r3, r4, r5, pc}
 8009cb8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009df0 <atanf+0x15c>
 8009cbc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009df4 <atanf+0x160>
 8009cc0:	2d00      	cmp	r5, #0
 8009cc2:	bfd8      	it	le
 8009cc4:	eef0 7a40 	vmovle.f32	s15, s0
 8009cc8:	e7f3      	b.n	8009cb2 <atanf+0x1e>
 8009cca:	4b4b      	ldr	r3, [pc, #300]	; (8009df8 <atanf+0x164>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	dc10      	bgt.n	8009cf2 <atanf+0x5e>
 8009cd0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8009cd4:	da0a      	bge.n	8009cec <atanf+0x58>
 8009cd6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009dfc <atanf+0x168>
 8009cda:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ce2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cea:	dce2      	bgt.n	8009cb2 <atanf+0x1e>
 8009cec:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf0:	e013      	b.n	8009d1a <atanf+0x86>
 8009cf2:	f000 f8a3 	bl	8009e3c <fabsf>
 8009cf6:	4b42      	ldr	r3, [pc, #264]	; (8009e00 <atanf+0x16c>)
 8009cf8:	429c      	cmp	r4, r3
 8009cfa:	dc4f      	bgt.n	8009d9c <atanf+0x108>
 8009cfc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009d00:	429c      	cmp	r4, r3
 8009d02:	dc41      	bgt.n	8009d88 <atanf+0xf4>
 8009d04:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009d08:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009d0c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009d10:	2300      	movs	r3, #0
 8009d12:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009d20:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009e04 <atanf+0x170>
 8009d24:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009e08 <atanf+0x174>
 8009d28:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009e0c <atanf+0x178>
 8009d2c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009d30:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009d34:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009e10 <atanf+0x17c>
 8009d38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d3c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009e14 <atanf+0x180>
 8009d40:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d44:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009e18 <atanf+0x184>
 8009d48:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009d4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009e1c <atanf+0x188>
 8009d50:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009d54:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009e20 <atanf+0x18c>
 8009d58:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009d5c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009e24 <atanf+0x190>
 8009d60:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009d64:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009e28 <atanf+0x194>
 8009d68:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009d6c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8009e2c <atanf+0x198>
 8009d70:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009d74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009d78:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009d7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009d80:	d121      	bne.n	8009dc6 <atanf+0x132>
 8009d82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d86:	e794      	b.n	8009cb2 <atanf+0x1e>
 8009d88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009d8c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009d90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d94:	2301      	movs	r3, #1
 8009d96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009d9a:	e7be      	b.n	8009d1a <atanf+0x86>
 8009d9c:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <atanf+0x19c>)
 8009d9e:	429c      	cmp	r4, r3
 8009da0:	dc0b      	bgt.n	8009dba <atanf+0x126>
 8009da2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8009da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009daa:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009dae:	2302      	movs	r3, #2
 8009db0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009db8:	e7af      	b.n	8009d1a <atanf+0x86>
 8009dba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009dbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e7a9      	b.n	8009d1a <atanf+0x86>
 8009dc6:	4a1b      	ldr	r2, [pc, #108]	; (8009e34 <atanf+0x1a0>)
 8009dc8:	491b      	ldr	r1, [pc, #108]	; (8009e38 <atanf+0x1a4>)
 8009dca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009dce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009dd2:	ed93 0a00 	vldr	s0, [r3]
 8009dd6:	ee37 7a40 	vsub.f32	s14, s14, s0
 8009dda:	ed92 0a00 	vldr	s0, [r2]
 8009dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009de8:	bfb8      	it	lt
 8009dea:	eef1 7a67 	vneglt.f32	s15, s15
 8009dee:	e760      	b.n	8009cb2 <atanf+0x1e>
 8009df0:	3fc90fdb 	.word	0x3fc90fdb
 8009df4:	bfc90fdb 	.word	0xbfc90fdb
 8009df8:	3edfffff 	.word	0x3edfffff
 8009dfc:	7149f2ca 	.word	0x7149f2ca
 8009e00:	3f97ffff 	.word	0x3f97ffff
 8009e04:	3c8569d7 	.word	0x3c8569d7
 8009e08:	3d4bda59 	.word	0x3d4bda59
 8009e0c:	bd6ef16b 	.word	0xbd6ef16b
 8009e10:	3d886b35 	.word	0x3d886b35
 8009e14:	3dba2e6e 	.word	0x3dba2e6e
 8009e18:	3e124925 	.word	0x3e124925
 8009e1c:	3eaaaaab 	.word	0x3eaaaaab
 8009e20:	bd15a221 	.word	0xbd15a221
 8009e24:	bd9d8795 	.word	0xbd9d8795
 8009e28:	bde38e38 	.word	0xbde38e38
 8009e2c:	be4ccccd 	.word	0xbe4ccccd
 8009e30:	401bffff 	.word	0x401bffff
 8009e34:	0800a6f0 	.word	0x0800a6f0
 8009e38:	0800a700 	.word	0x0800a700

08009e3c <fabsf>:
 8009e3c:	ee10 3a10 	vmov	r3, s0
 8009e40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e44:	ee00 3a10 	vmov	s0, r3
 8009e48:	4770      	bx	lr
	...

08009e4c <nanf>:
 8009e4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e54 <nanf+0x8>
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	7fc00000 	.word	0x7fc00000

08009e58 <_init>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	bf00      	nop
 8009e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5e:	bc08      	pop	{r3}
 8009e60:	469e      	mov	lr, r3
 8009e62:	4770      	bx	lr

08009e64 <_fini>:
 8009e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e66:	bf00      	nop
 8009e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6a:	bc08      	pop	{r3}
 8009e6c:	469e      	mov	lr, r3
 8009e6e:	4770      	bx	lr
