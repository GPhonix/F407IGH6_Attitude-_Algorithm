
F407IGH6_Attitude _Algorithm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a0  08009380  08009380  00019380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c20  08009c20  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08009c20  08009c20  00019c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c28  08009c28  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c28  08009c28  00019c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c2c  08009c2c  00019c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08009c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          00000154  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000214  20000214  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011440  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ad  00000000  00000000  00031530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00033de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f20  00000000  00000000  00034e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022988  00000000  00000000  00035d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015339  00000000  00000000  000586e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce748  00000000  00000000  0006da21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013c169  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c80  00000000  00000000  0013c1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c0 	.word	0x200000c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009368 	.word	0x08009368

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c4 	.word	0x200000c4
 80001c4:	08009368 	.word	0x08009368

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	4b6c      	ldr	r3, [pc, #432]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a6b      	ldr	r2, [pc, #428]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b69      	ldr	r3, [pc, #420]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	4b65      	ldr	r3, [pc, #404]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a64      	ldr	r2, [pc, #400]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b62      	ldr	r3, [pc, #392]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	4b5e      	ldr	r3, [pc, #376]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a5d      	ldr	r2, [pc, #372]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000eec:	f043 0320 	orr.w	r3, r3, #32
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b5b      	ldr	r3, [pc, #364]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0320 	and.w	r3, r3, #32
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	4b57      	ldr	r3, [pc, #348]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a56      	ldr	r2, [pc, #344]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b54      	ldr	r3, [pc, #336]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	4b50      	ldr	r3, [pc, #320]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a4f      	ldr	r2, [pc, #316]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4b49      	ldr	r3, [pc, #292]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a48      	ldr	r2, [pc, #288]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b46      	ldr	r3, [pc, #280]	; (8001060 <MX_GPIO_Init+0x1cc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OLED_SDA_Pin|OLED_SCL_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2103      	movs	r1, #3
 8000f56:	4843      	ldr	r0, [pc, #268]	; (8001064 <MX_GPIO_Init+0x1d0>)
 8000f58:	f001 f858 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IST8310_RST_GPIO_Port, IST8310_RST_Pin, GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4841      	ldr	r0, [pc, #260]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000f62:	f001 f853 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f6c:	483f      	ldr	r0, [pc, #252]	; (800106c <MX_GPIO_Init+0x1d8>)
 8000f6e:	f001 f84d 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Accel_GPIO_Port, CS1_Accel_Pin, GPIO_PIN_SET);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2110      	movs	r1, #16
 8000f76:	483e      	ldr	r0, [pc, #248]	; (8001070 <MX_GPIO_Init+0x1dc>)
 8000f78:	f001 f848 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_Gyro_GPIO_Port, CS1_Gyro_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2101      	movs	r1, #1
 8000f80:	483c      	ldr	r0, [pc, #240]	; (8001074 <MX_GPIO_Init+0x1e0>)
 8000f82:	f001 f843 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OLED_SDA_Pin|OLED_SCL_Pin;
 8000f86:	2303      	movs	r3, #3
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4831      	ldr	r0, [pc, #196]	; (8001064 <MX_GPIO_Init+0x1d0>)
 8000f9e:	f000 fe81 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST8310_RST_Pin;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IST8310_RST_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	482b      	ldr	r0, [pc, #172]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000fba:	f000 fe73 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000fbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <MX_GPIO_Init+0x1d8>)
 8000fd8:	f000 fe64 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST8310_DRDY_Pin;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST8310_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <MX_GPIO_Init+0x1d4>)
 8000ff2:	f000 fe57 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ffa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001000:	2301      	movs	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4819      	ldr	r0, [pc, #100]	; (8001070 <MX_GPIO_Init+0x1dc>)
 800100c:	f000 fe4a 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Accel_Pin;
 8001010:	2310      	movs	r3, #16
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS1_Accel_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	4619      	mov	r1, r3
 8001026:	4812      	ldr	r0, [pc, #72]	; (8001070 <MX_GPIO_Init+0x1dc>)
 8001028:	f000 fe3c 	bl	8001ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_Gyro_Pin;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS1_Gyro_GPIO_Port, &GPIO_InitStruct);
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	4619      	mov	r1, r3
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <MX_GPIO_Init+0x1e0>)
 8001044:	f000 fe2e 	bl	8001ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2006      	movs	r0, #6
 800104e:	f000 fdf2 	bl	8001c36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001052:	2006      	movs	r0, #6
 8001054:	f000 fe0b 	bl	8001c6e <HAL_NVIC_EnableIRQ>

}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	; 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40021c00 	.word	0x40021c00
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400

08001078 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C3_Init+0x50>)
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <MX_I2C3_Init+0x54>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_I2C3_Init+0x58>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C3_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_I2C3_Init+0x50>)
 8001096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800109a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_I2C3_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_I2C3_Init+0x50>)
 80010b6:	f000 fff5 	bl	80020a4 <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 fa92 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000dc 	.word	0x200000dc
 80010cc:	40005c00 	.word	0x40005c00
 80010d0:	00061a80 	.word	0x00061a80

080010d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_I2C_MspInit+0xc4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d14b      	bne.n	800118e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_I2C_MspInit+0xc8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a27      	ldr	r2, [pc, #156]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a20      	ldr	r2, [pc, #128]	; (800119c <HAL_I2C_MspInit+0xc8>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001140:	2304      	movs	r3, #4
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <HAL_I2C_MspInit+0xcc>)
 800114c:	f000 fdaa 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001156:	2312      	movs	r3, #18
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001162:	2304      	movs	r3, #4
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <HAL_I2C_MspInit+0xd0>)
 800116e:	f000 fd99 	bl	8001ca4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_I2C_MspInit+0xc8>)
 800117c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001180:	6413      	str	r3, [r2, #64]	; 0x40
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_I2C_MspInit+0xc8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005c00 	.word	0x40005c00
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020800 	.word	0x40020800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_TIM_PeriodElapsedCallback>:
//	HAL_WWDG_Refresh(&hwwdg);
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	static uint16_t count = 0;
	if (htim->Instance == TIM2)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011b8:	d13a      	bne.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		count++;
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011c4:	801a      	strh	r2, [r3, #0]
		count %= 1000;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80011cc:	fba2 1203 	umull	r1, r2, r2, r3
 80011d0:	0992      	lsrs	r2, r2, #6
 80011d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011d6:	fb01 f202 	mul.w	r2, r1, r2
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011e0:	801a      	strh	r2, [r3, #0]
		if(count % 5 == 0)
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80011e8:	fba3 1302 	umull	r1, r3, r3, r2
 80011ec:	0899      	lsrs	r1, r3, #2
 80011ee:	460b      	mov	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d106      	bne.n	800120a <HAL_TIM_PeriodElapsedCallback+0x62>
		{
//			HAL_WWDG_Refresh(&hwwdg);
			IMU_Data_Fusion_Mahony(0.005, &g_roll, &g_pitch, &g_yaw);
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80011fe:	4912      	ldr	r1, [pc, #72]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001200:	4812      	ldr	r0, [pc, #72]	; (800124c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001202:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001250 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001206:	f004 fd0f 	bl	8005c28 <IMU_Data_Fusion_Mahony>

		}
		if(count % 500 == 0)
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001210:	fba2 1203 	umull	r1, r2, r2, r3
 8001214:	0952      	lsrs	r2, r2, #5
 8001216:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800121a:	fb01 f202 	mul.w	r2, r1, r2
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	b29b      	uxth	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d104      	bne.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			LED_TOG(LED_R);
 8001226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800122c:	f000 ff07 	bl	800203e <HAL_GPIO_TogglePin>
		}
	}
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000160 	.word	0x20000160
 800123c:	10624dd3 	.word	0x10624dd3
 8001240:	cccccccd 	.word	0xcccccccd
 8001244:	2000015c 	.word	0x2000015c
 8001248:	20000158 	.word	0x20000158
 800124c:	20000154 	.word	0x20000154
 8001250:	3ba3d70a 	.word	0x3ba3d70a
 8001254:	40021c00 	.word	0x40021c00

08001258 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == KEY_Pin)
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d128      	bne.n	80012ba <HAL_GPIO_EXTI_Callback+0x62>
	{
		if (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET)
 8001268:	2101      	movs	r1, #1
 800126a:	4816      	ldr	r0, [pc, #88]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x6c>)
 800126c:	f000 feb6 	bl	8001fdc <HAL_GPIO_ReadPin>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d121      	bne.n	80012ba <HAL_GPIO_EXTI_Callback+0x62>
		{
			g_oled_page++;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001280:	701a      	strb	r2, [r3, #0]
			g_oled_page %= 5;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_GPIO_EXTI_Callback+0x74>)
 8001288:	fba3 1302 	umull	r1, r3, r3, r2
 800128c:	0899      	lsrs	r1, r3, #2
 800128e:	460b      	mov	r3, r1
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	440b      	add	r3, r1
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x70>)
 800129a:	701a      	strb	r2, [r3, #0]
			LED_TOG(LED_B);
 800129c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x78>)
 80012a2:	f000 fecc 	bl	800203e <HAL_GPIO_TogglePin>
			OLED_Clear();
 80012a6:	f005 fba4 	bl	80069f2 <OLED_Clear>
			OLED_ShowNum(1, 14, g_oled_page, 1);
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x70>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	2301      	movs	r3, #1
 80012b2:	210e      	movs	r1, #14
 80012b4:	2001      	movs	r0, #1
 80012b6:	f005 fc57 	bl	8006b68 <OLED_ShowNum>
		}
	}
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40020000 	.word	0x40020000
 80012c8:	20000000 	.word	0x20000000
 80012cc:	cccccccd 	.word	0xcccccccd
 80012d0:	40021c00 	.word	0x40021c00

080012d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012da:	f000 fb3b 	bl	8001954 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012de:	f000 f919 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e2:	f7ff fdd7 	bl	8000e94 <MX_GPIO_Init>
  MX_TIM2_Init();
 80012e6:	f000 fa99 	bl	800181c <MX_TIM2_Init>
  MX_I2C3_Init();
 80012ea:	f7ff fec5 	bl	8001078 <MX_I2C3_Init>
  MX_SPI1_Init();
 80012ee:	f000 f981 	bl	80015f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t IMU_error = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	71fb      	strb	r3, [r7, #7]
  OLED_Init();
 80012f6:	f005 fd43 	bl	8006d80 <OLED_Init>
  IMU_error = IMU_Init();
 80012fa:	f003 fff7 	bl	80052ec <IMU_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]

  HAL_TIM_Base_Start_IT(&htim2);
 8001302:	4875      	ldr	r0, [pc, #468]	; (80014d8 <main+0x204>)
 8001304:	f003 f8ca 	bl	800449c <HAL_TIM_Base_Start_IT>
//	 HAL_Delay(50);
//	 for(uint8_t i = 0; i < 3; i++)
//	 {
//		  OLED_Showfloat(2 + i, 1, accdata[i], 4, 4);
//	 }
	  HAL_Delay(50);
 8001308:	2032      	movs	r0, #50	; 0x32
 800130a:	f000 fb95 	bl	8001a38 <HAL_Delay>
	  switch (g_oled_page)
 800130e:	4b73      	ldr	r3, [pc, #460]	; (80014dc <main+0x208>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b04      	cmp	r3, #4
 8001314:	f200 80de 	bhi.w	80014d4 <main+0x200>
 8001318:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <main+0x4c>)
 800131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131e:	bf00      	nop
 8001320:	08001335 	.word	0x08001335
 8001324:	08001379 	.word	0x08001379
 8001328:	080013c7 	.word	0x080013c7
 800132c:	0800141b 	.word	0x0800141b
 8001330:	0800146f 	.word	0x0800146f
	  {
	  case 0:
		  OLED_ShowString(1, 1, "IMU DEMO");
 8001334:	4a6a      	ldr	r2, [pc, #424]	; (80014e0 <main+0x20c>)
 8001336:	2101      	movs	r1, #1
 8001338:	2001      	movs	r0, #1
 800133a:	f005 fbd7 	bl	8006aec <OLED_ShowString>
		  OLED_ShowString(2, 1, "ERROR:");OLED_ShowBinNum(2, 7, IMU_error, 8);
 800133e:	4a69      	ldr	r2, [pc, #420]	; (80014e4 <main+0x210>)
 8001340:	2101      	movs	r1, #1
 8001342:	2002      	movs	r0, #2
 8001344:	f005 fbd2 	bl	8006aec <OLED_ShowString>
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	2308      	movs	r3, #8
 800134c:	2107      	movs	r1, #7
 800134e:	2002      	movs	r0, #2
 8001350:	f005 fce0 	bl	8006d14 <OLED_ShowBinNum>
		  OLED_ShowString(3, 1, "TEMP:"); OLED_Showfloat(3, 6, BMI088_Get_Temperature(), 4, 5);
 8001354:	4a64      	ldr	r2, [pc, #400]	; (80014e8 <main+0x214>)
 8001356:	2101      	movs	r1, #1
 8001358:	2003      	movs	r0, #3
 800135a:	f005 fbc7 	bl	8006aec <OLED_ShowString>
 800135e:	f003 fdef 	bl	8004f40 <BMI088_Get_Temperature>
 8001362:	eef0 7a40 	vmov.f32	s15, s0
 8001366:	2305      	movs	r3, #5
 8001368:	2204      	movs	r2, #4
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	2106      	movs	r1, #6
 8001370:	2003      	movs	r0, #3
 8001372:	f005 fd73 	bl	8006e5c <OLED_Showfloat>
		  break;
 8001376:	e0ae      	b.n	80014d6 <main+0x202>
	  case 1:
		  OLED_ShowString(1, 1, "Angle");
 8001378:	4a5c      	ldr	r2, [pc, #368]	; (80014ec <main+0x218>)
 800137a:	2101      	movs	r1, #1
 800137c:	2001      	movs	r0, #1
 800137e:	f005 fbb5 	bl	8006aec <OLED_ShowString>
		  OLED_Showfloat(2, 4, g_roll , 4, 4);
 8001382:	4b5b      	ldr	r3, [pc, #364]	; (80014f0 <main+0x21c>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	2304      	movs	r3, #4
 800138a:	2204      	movs	r2, #4
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	2104      	movs	r1, #4
 8001392:	2002      	movs	r0, #2
 8001394:	f005 fd62 	bl	8006e5c <OLED_Showfloat>
		  OLED_Showfloat(3, 4, g_pitch, 4, 4);
 8001398:	4b56      	ldr	r3, [pc, #344]	; (80014f4 <main+0x220>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	2304      	movs	r3, #4
 80013a0:	2204      	movs	r2, #4
 80013a2:	eeb0 0a67 	vmov.f32	s0, s15
 80013a6:	2104      	movs	r1, #4
 80013a8:	2003      	movs	r0, #3
 80013aa:	f005 fd57 	bl	8006e5c <OLED_Showfloat>
		  OLED_Showfloat(4, 4, g_yaw  , 4, 4);
 80013ae:	4b52      	ldr	r3, [pc, #328]	; (80014f8 <main+0x224>)
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	2304      	movs	r3, #4
 80013b6:	2204      	movs	r2, #4
 80013b8:	eeb0 0a67 	vmov.f32	s0, s15
 80013bc:	2104      	movs	r1, #4
 80013be:	2004      	movs	r0, #4
 80013c0:	f005 fd4c 	bl	8006e5c <OLED_Showfloat>
		  break;
 80013c4:	e087      	b.n	80014d6 <main+0x202>
	  case 2:
		  BMI088_Getdata_Acc(accdata);
 80013c6:	484d      	ldr	r0, [pc, #308]	; (80014fc <main+0x228>)
 80013c8:	f003 fe44 	bl	8005054 <BMI088_Getdata_Acc>
		  OLED_ShowString(1, 1, "A-C-C");
 80013cc:	4a4c      	ldr	r2, [pc, #304]	; (8001500 <main+0x22c>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	2001      	movs	r0, #1
 80013d2:	f005 fb8b 	bl	8006aec <OLED_ShowString>
//		  OLED_ShowHexNum(1, 12, BMI088_Acc_ReadID(), 2);
		  OLED_Showfloat(2, 1, accdata[0], 4, 4);
 80013d6:	4b49      	ldr	r3, [pc, #292]	; (80014fc <main+0x228>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	2304      	movs	r3, #4
 80013de:	2204      	movs	r2, #4
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	2101      	movs	r1, #1
 80013e6:	2002      	movs	r0, #2
 80013e8:	f005 fd38 	bl	8006e5c <OLED_Showfloat>
		  OLED_Showfloat(3, 1, accdata[1], 4, 4);
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <main+0x228>)
 80013ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f2:	2304      	movs	r3, #4
 80013f4:	2204      	movs	r2, #4
 80013f6:	eeb0 0a67 	vmov.f32	s0, s15
 80013fa:	2101      	movs	r1, #1
 80013fc:	2003      	movs	r0, #3
 80013fe:	f005 fd2d 	bl	8006e5c <OLED_Showfloat>
		  OLED_Showfloat(4, 1, accdata[2], 4, 4);
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <main+0x228>)
 8001404:	edd3 7a02 	vldr	s15, [r3, #8]
 8001408:	2304      	movs	r3, #4
 800140a:	2204      	movs	r2, #4
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	2101      	movs	r1, #1
 8001412:	2004      	movs	r0, #4
 8001414:	f005 fd22 	bl	8006e5c <OLED_Showfloat>
		  break;
 8001418:	e05d      	b.n	80014d6 <main+0x202>
	  case 3:
		  BMI088_Getdata_Gyro(gyrodata);
 800141a:	483a      	ldr	r0, [pc, #232]	; (8001504 <main+0x230>)
 800141c:	f003 fe6c 	bl	80050f8 <BMI088_Getdata_Gyro>
		  OLED_ShowString(1, 1, "G-Y-R-O");
 8001420:	4a39      	ldr	r2, [pc, #228]	; (8001508 <main+0x234>)
 8001422:	2101      	movs	r1, #1
 8001424:	2001      	movs	r0, #1
 8001426:	f005 fb61 	bl	8006aec <OLED_ShowString>
//		  OLED_ShowHexNum(1, 12, BMI088_Gyro_ReadID(), 2);
		  OLED_Showfloat(2, 1, gyrodata[0], 4, 5);
 800142a:	4b36      	ldr	r3, [pc, #216]	; (8001504 <main+0x230>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	2305      	movs	r3, #5
 8001432:	2204      	movs	r2, #4
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	2101      	movs	r1, #1
 800143a:	2002      	movs	r0, #2
 800143c:	f005 fd0e 	bl	8006e5c <OLED_Showfloat>
		  OLED_Showfloat(3, 1, gyrodata[1], 4, 5);
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <main+0x230>)
 8001442:	edd3 7a01 	vldr	s15, [r3, #4]
 8001446:	2305      	movs	r3, #5
 8001448:	2204      	movs	r2, #4
 800144a:	eeb0 0a67 	vmov.f32	s0, s15
 800144e:	2101      	movs	r1, #1
 8001450:	2003      	movs	r0, #3
 8001452:	f005 fd03 	bl	8006e5c <OLED_Showfloat>
		  OLED_Showfloat(4, 1, gyrodata[2], 4, 5);
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <main+0x230>)
 8001458:	edd3 7a02 	vldr	s15, [r3, #8]
 800145c:	2305      	movs	r3, #5
 800145e:	2204      	movs	r2, #4
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	2101      	movs	r1, #1
 8001466:	2004      	movs	r0, #4
 8001468:	f005 fcf8 	bl	8006e5c <OLED_Showfloat>
		  break;
 800146c:	e033      	b.n	80014d6 <main+0x202>
	  case 4:
		  IST8310_Getdata_Mag(magdata);
 800146e:	4827      	ldr	r0, [pc, #156]	; (800150c <main+0x238>)
 8001470:	f005 f9b4 	bl	80067dc <IST8310_Getdata_Mag>
		  OLED_ShowString(1, 1, "M-A-G");
 8001474:	4a26      	ldr	r2, [pc, #152]	; (8001510 <main+0x23c>)
 8001476:	2101      	movs	r1, #1
 8001478:	2001      	movs	r0, #1
 800147a:	f005 fb37 	bl	8006aec <OLED_ShowString>
		  OLED_ShowHexNum(1, 12, IST8310_ReadID(), 2);
 800147e:	f005 f93f 	bl	8006700 <IST8310_ReadID>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	2302      	movs	r3, #2
 8001488:	210c      	movs	r1, #12
 800148a:	2001      	movs	r0, #1
 800148c:	f005 fbfe 	bl	8006c8c <OLED_ShowHexNum>
		  OLED_Showfloat(2, 1, magdata[0], 4, 5);
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <main+0x238>)
 8001492:	edd3 7a00 	vldr	s15, [r3]
 8001496:	2305      	movs	r3, #5
 8001498:	2204      	movs	r2, #4
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	2101      	movs	r1, #1
 80014a0:	2002      	movs	r0, #2
 80014a2:	f005 fcdb 	bl	8006e5c <OLED_Showfloat>
		  OLED_Showfloat(3, 1, magdata[1], 4, 5);
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <main+0x238>)
 80014a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ac:	2305      	movs	r3, #5
 80014ae:	2204      	movs	r2, #4
 80014b0:	eeb0 0a67 	vmov.f32	s0, s15
 80014b4:	2101      	movs	r1, #1
 80014b6:	2003      	movs	r0, #3
 80014b8:	f005 fcd0 	bl	8006e5c <OLED_Showfloat>
		  OLED_Showfloat(4, 1, magdata[2], 4, 5);
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <main+0x238>)
 80014be:	edd3 7a02 	vldr	s15, [r3, #8]
 80014c2:	2305      	movs	r3, #5
 80014c4:	2204      	movs	r2, #4
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	2101      	movs	r1, #1
 80014cc:	2004      	movs	r0, #4
 80014ce:	f005 fcc5 	bl	8006e5c <OLED_Showfloat>
		  break;
 80014d2:	e000      	b.n	80014d6 <main+0x202>
	  default: break;
 80014d4:	bf00      	nop
	  HAL_Delay(50);
 80014d6:	e717      	b.n	8001308 <main+0x34>
 80014d8:	200001bc 	.word	0x200001bc
 80014dc:	20000000 	.word	0x20000000
 80014e0:	08009380 	.word	0x08009380
 80014e4:	0800938c 	.word	0x0800938c
 80014e8:	08009394 	.word	0x08009394
 80014ec:	0800939c 	.word	0x0800939c
 80014f0:	20000154 	.word	0x20000154
 80014f4:	20000158 	.word	0x20000158
 80014f8:	2000015c 	.word	0x2000015c
 80014fc:	20000130 	.word	0x20000130
 8001500:	080093a4 	.word	0x080093a4
 8001504:	2000013c 	.word	0x2000013c
 8001508:	080093ac 	.word	0x080093ac
 800150c:	20000148 	.word	0x20000148
 8001510:	080093b4 	.word	0x080093b4

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f005 fd24 	bl	8006f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <SystemClock_Config+0xcc>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <SystemClock_Config+0xcc>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <SystemClock_Config+0xcc>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <SystemClock_Config+0xd0>)
 800155e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemClock_Config+0xd0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157a:	2302      	movs	r3, #2
 800157c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800157e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001584:	2306      	movs	r3, #6
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001588:	23a8      	movs	r3, #168	; 0xa8
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800158c:	2302      	movs	r3, #2
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001590:	2304      	movs	r3, #4
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4618      	mov	r0, r3
 800159a:	f001 fd43 	bl	8003024 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015a4:	f000 f820 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2302      	movs	r3, #2
 80015ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2105      	movs	r1, #5
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 ffa4 	bl	8003514 <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015d2:	f000 f809 	bl	80015e8 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_SPI1_Init+0x64>)
 80015fa:	4a18      	ldr	r2, [pc, #96]	; (800165c <MX_SPI1_Init+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_SPI1_Init+0x64>)
 8001600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_SPI1_Init+0x64>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_SPI1_Init+0x64>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001612:	4b11      	ldr	r3, [pc, #68]	; (8001658 <MX_SPI1_Init+0x64>)
 8001614:	2202      	movs	r2, #2
 8001616:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_SPI1_Init+0x64>)
 800161a:	2201      	movs	r2, #1
 800161c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_SPI1_Init+0x64>)
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_SPI1_Init+0x64>)
 8001628:	2218      	movs	r2, #24
 800162a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <MX_SPI1_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <MX_SPI1_Init+0x64>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	; (8001658 <MX_SPI1_Init+0x64>)
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <MX_SPI1_Init+0x64>)
 8001640:	220a      	movs	r2, #10
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_SPI1_Init+0x64>)
 8001646:	f002 f931 	bl	80038ac <HAL_SPI_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001650:	f7ff ffca 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000164 	.word	0x20000164
 800165c:	40013000 	.word	0x40013000

08001660 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08a      	sub	sp, #40	; 0x28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a28      	ldr	r2, [pc, #160]	; (8001720 <HAL_SPI_MspInit+0xc0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d149      	bne.n	8001716 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_SPI_MspInit+0xc4>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a26      	ldr	r2, [pc, #152]	; (8001724 <HAL_SPI_MspInit+0xc4>)
 800168c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_SPI_MspInit+0xc4>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_SPI_MspInit+0xc4>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <HAL_SPI_MspInit+0xc4>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_SPI_MspInit+0xc4>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_SPI_MspInit+0xc4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a18      	ldr	r2, [pc, #96]	; (8001724 <HAL_SPI_MspInit+0xc4>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_SPI_MspInit+0xc4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80016d6:	2318      	movs	r3, #24
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016e6:	2305      	movs	r3, #5
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <HAL_SPI_MspInit+0xc8>)
 80016f2:	f000 fad7 	bl	8001ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001706:	2305      	movs	r3, #5
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4806      	ldr	r0, [pc, #24]	; (800172c <HAL_SPI_MspInit+0xcc>)
 8001712:	f000 fac7 	bl	8001ca4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40013000 	.word	0x40013000
 8001724:	40023800 	.word	0x40023800
 8001728:	40020400 	.word	0x40020400
 800172c:	40020000 	.word	0x40020000

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a0f      	ldr	r2, [pc, #60]	; (800177c <HAL_MspInit+0x4c>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_MspInit+0x4c>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <NMI_Handler+0x4>

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 f914 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_Pin);
 80017d8:	2001      	movs	r0, #1
 80017da:	f000 fc4b 	bl	8002074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TIM2_IRQHandler+0x10>)
 80017ea:	f002 fec7 	bl	800457c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200001bc 	.word	0x200001bc

080017f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <SystemInit+0x20>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <SystemInit+0x20>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_TIM2_Init+0x94>)
 800183a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800183e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_TIM2_Init+0x94>)
 8001842:	22a7      	movs	r2, #167	; 0xa7
 8001844:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_TIM2_Init+0x94>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_TIM2_Init+0x94>)
 800184e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001852:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_TIM2_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <MX_TIM2_Init+0x94>)
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001860:	4813      	ldr	r0, [pc, #76]	; (80018b0 <MX_TIM2_Init+0x94>)
 8001862:	f002 fdcb 	bl	80043fc <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800186c:	f7ff febc 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4619      	mov	r1, r3
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <MX_TIM2_Init+0x94>)
 800187e:	f002 ff85 	bl	800478c <HAL_TIM_ConfigClockSource>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001888:	f7ff feae 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_TIM2_Init+0x94>)
 800189a:	f003 f9a1 	bl	8004be0 <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018a4:	f7ff fea0 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200001bc 	.word	0x200001bc

080018b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c4:	d115      	bne.n	80018f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <HAL_TIM_Base_MspInit+0x48>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <HAL_TIM_Base_MspInit+0x48>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_TIM_Base_MspInit+0x48>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2100      	movs	r1, #0
 80018e6:	201c      	movs	r0, #28
 80018e8:	f000 f9a5 	bl	8001c36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018ec:	201c      	movs	r0, #28
 80018ee:	f000 f9be 	bl	8001c6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001938 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001904:	480d      	ldr	r0, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001906:	490e      	ldr	r1, [pc, #56]	; (8001940 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0b      	ldr	r2, [pc, #44]	; (8001948 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800191c:	4c0b      	ldr	r4, [pc, #44]	; (800194c <LoopFillZerobss+0x26>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800192a:	f7ff ff65 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192e:	f005 fafb 	bl	8006f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001932:	f7ff fccf 	bl	80012d4 <main>
  bx  lr    
 8001936:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001938:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800193c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001940:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001944:	08009c30 	.word	0x08009c30
  ldr r2, =_sbss
 8001948:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800194c:	20000214 	.word	0x20000214

08001950 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001950:	e7fe      	b.n	8001950 <ADC_IRQHandler>
	...

08001954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <HAL_Init+0x40>)
 800195e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001962:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_Init+0x40>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_Init+0x40>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800197c:	2003      	movs	r0, #3
 800197e:	f000 f94f 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001982:	200f      	movs	r0, #15
 8001984:	f000 f808 	bl	8001998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001988:	f7ff fed2 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023c00 	.word	0x40023c00

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x54>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_InitTick+0x58>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f967 	bl	8001c8a <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00e      	b.n	80019e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d80a      	bhi.n	80019e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f000 f92f 	bl	8001c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_InitTick+0x5c>)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000004 	.word	0x20000004
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	2000000c 	.word	0x2000000c
 8001a1c:	20000204 	.word	0x20000204

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000204 	.word	0x20000204

08001a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff ffee 	bl	8001a20 <HAL_GetTick>
 8001a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d005      	beq.n	8001a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_Delay+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5e:	bf00      	nop
 8001a60:	f7ff ffde 	bl	8001a20 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d8f7      	bhi.n	8001a60 <HAL_Delay+0x28>
  {
  }
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000000c 	.word	0x2000000c

08001a80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	60d3      	str	r3, [r2, #12]
}
 8001ab8:	bf00      	nop
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	0a1b      	lsrs	r3, r3, #8
 8001ad2:	f003 0307 	and.w	r3, r3, #7
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db0b      	blt.n	8001b0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	f003 021f 	and.w	r2, r3, #31
 8001afc:	4907      	ldr	r1, [pc, #28]	; (8001b1c <__NVIC_EnableIRQ+0x38>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2001      	movs	r0, #1
 8001b06:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f7ff ff8e 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff29 	bl	8001a80 <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff3e 	bl	8001ac8 <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff8e 	bl	8001b74 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5d 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff31 	bl	8001ae4 <__NVIC_EnableIRQ>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ffa2 	bl	8001bdc <SysTick_Config>
 8001c98:	4603      	mov	r3, r0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	; 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e16b      	b.n	8001f98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	f040 815a 	bne.w	8001f92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d005      	beq.n	8001cf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d130      	bne.n	8001d58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	2203      	movs	r2, #3
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0201 	and.w	r2, r3, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b03      	cmp	r3, #3
 8001d62:	d017      	beq.n	8001d94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d123      	bne.n	8001de8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	3208      	adds	r2, #8
 8001da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	69b9      	ldr	r1, [r7, #24]
 8001de4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0203 	and.w	r2, r3, #3
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80b4 	beq.w	8001f92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b60      	ldr	r3, [pc, #384]	; (8001fb0 <HAL_GPIO_Init+0x30c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a5f      	ldr	r2, [pc, #380]	; (8001fb0 <HAL_GPIO_Init+0x30c>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b5d      	ldr	r3, [pc, #372]	; (8001fb0 <HAL_GPIO_Init+0x30c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e46:	4a5b      	ldr	r2, [pc, #364]	; (8001fb4 <HAL_GPIO_Init+0x310>)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3302      	adds	r3, #2
 8001e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a52      	ldr	r2, [pc, #328]	; (8001fb8 <HAL_GPIO_Init+0x314>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02b      	beq.n	8001eca <HAL_GPIO_Init+0x226>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a51      	ldr	r2, [pc, #324]	; (8001fbc <HAL_GPIO_Init+0x318>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x222>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a50      	ldr	r2, [pc, #320]	; (8001fc0 <HAL_GPIO_Init+0x31c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x21e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4f      	ldr	r2, [pc, #316]	; (8001fc4 <HAL_GPIO_Init+0x320>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x21a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <HAL_GPIO_Init+0x324>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x216>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4d      	ldr	r2, [pc, #308]	; (8001fcc <HAL_GPIO_Init+0x328>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x212>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4c      	ldr	r2, [pc, #304]	; (8001fd0 <HAL_GPIO_Init+0x32c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x20e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4b      	ldr	r2, [pc, #300]	; (8001fd4 <HAL_GPIO_Init+0x330>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x20a>
 8001eaa:	2307      	movs	r3, #7
 8001eac:	e00e      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eae:	2308      	movs	r3, #8
 8001eb0:	e00c      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	e00a      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	e008      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e004      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x228>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f002 0203 	and.w	r2, r2, #3
 8001ed2:	0092      	lsls	r2, r2, #2
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001edc:	4935      	ldr	r1, [pc, #212]	; (8001fb4 <HAL_GPIO_Init+0x310>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f0e:	4a32      	ldr	r2, [pc, #200]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f38:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f8c:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <HAL_GPIO_Init+0x334>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	f67f ae90 	bls.w	8001cc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40013800 	.word	0x40013800
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020400 	.word	0x40020400
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	40021400 	.word	0x40021400
 8001fd0:	40021800 	.word	0x40021800
 8001fd4:	40021c00 	.word	0x40021c00
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	887b      	ldrh	r3, [r7, #2]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d002      	beq.n	8001ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e001      	b.n	8001ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	619a      	str	r2, [r3, #24]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002050:	887a      	ldrh	r2, [r7, #2]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4013      	ands	r3, r2
 8002056:	041a      	lsls	r2, r3, #16
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43d9      	mvns	r1, r3
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	400b      	ands	r3, r1
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	619a      	str	r2, [r3, #24]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002080:	695a      	ldr	r2, [r3, #20]
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d006      	beq.n	8002098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f8e0 	bl	8001258 <HAL_GPIO_EXTI_Callback>
  }
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40013c00 	.word	0x40013c00

080020a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e12b      	b.n	800230e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff f802 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	; 0x24
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002106:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002108:	f001 fbbc 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 800210c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4a81      	ldr	r2, [pc, #516]	; (8002318 <HAL_I2C_Init+0x274>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d807      	bhi.n	8002128 <HAL_I2C_Init+0x84>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a80      	ldr	r2, [pc, #512]	; (800231c <HAL_I2C_Init+0x278>)
 800211c:	4293      	cmp	r3, r2
 800211e:	bf94      	ite	ls
 8002120:	2301      	movls	r3, #1
 8002122:	2300      	movhi	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	e006      	b.n	8002136 <HAL_I2C_Init+0x92>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4a7d      	ldr	r2, [pc, #500]	; (8002320 <HAL_I2C_Init+0x27c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	bf94      	ite	ls
 8002130:	2301      	movls	r3, #1
 8002132:	2300      	movhi	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0e7      	b.n	800230e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4a78      	ldr	r2, [pc, #480]	; (8002324 <HAL_I2C_Init+0x280>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	0c9b      	lsrs	r3, r3, #18
 8002148:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	4a6a      	ldr	r2, [pc, #424]	; (8002318 <HAL_I2C_Init+0x274>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d802      	bhi.n	8002178 <HAL_I2C_Init+0xd4>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3301      	adds	r3, #1
 8002176:	e009      	b.n	800218c <HAL_I2C_Init+0xe8>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	4a69      	ldr	r2, [pc, #420]	; (8002328 <HAL_I2C_Init+0x284>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	3301      	adds	r3, #1
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	430b      	orrs	r3, r1
 8002192:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800219e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	495c      	ldr	r1, [pc, #368]	; (8002318 <HAL_I2C_Init+0x274>)
 80021a8:	428b      	cmp	r3, r1
 80021aa:	d819      	bhi.n	80021e0 <HAL_I2C_Init+0x13c>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e59      	subs	r1, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021c0:	400b      	ands	r3, r1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_I2C_Init+0x138>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e59      	subs	r1, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d4:	3301      	adds	r3, #1
 80021d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021da:	e051      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 80021dc:	2304      	movs	r3, #4
 80021de:	e04f      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <HAL_I2C_Init+0x168>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e58      	subs	r0, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e012      	b.n	8002232 <HAL_I2C_Init+0x18e>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1e58      	subs	r0, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	0099      	lsls	r1, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Init+0x196>
 8002236:	2301      	movs	r3, #1
 8002238:	e022      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10e      	bne.n	8002260 <HAL_I2C_Init+0x1bc>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1e58      	subs	r0, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	440b      	add	r3, r1
 8002250:	fbb0 f3f3 	udiv	r3, r0, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225e:	e00f      	b.n	8002280 <HAL_I2C_Init+0x1dc>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1e58      	subs	r0, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	0099      	lsls	r1, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	fbb0 f3f3 	udiv	r3, r0, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	6809      	ldr	r1, [r1, #0]
 8002284:	4313      	orrs	r3, r2
 8002286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69da      	ldr	r2, [r3, #28]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6911      	ldr	r1, [r2, #16]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68d2      	ldr	r2, [r2, #12]
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2220      	movs	r2, #32
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	000186a0 	.word	0x000186a0
 800231c:	001e847f 	.word	0x001e847f
 8002320:	003d08ff 	.word	0x003d08ff
 8002324:	431bde83 	.word	0x431bde83
 8002328:	10624dd3 	.word	0x10624dd3

0800232c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af02      	add	r7, sp, #8
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]
 800233e:	460b      	mov	r3, r1
 8002340:	813b      	strh	r3, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002346:	f7ff fb6b 	bl	8001a20 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	f040 80d9 	bne.w	800250c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2319      	movs	r3, #25
 8002360:	2201      	movs	r2, #1
 8002362:	496d      	ldr	r1, [pc, #436]	; (8002518 <HAL_I2C_Mem_Write+0x1ec>)
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fc7f 	bl	8002c68 <I2C_WaitOnFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
 8002372:	e0cc      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_I2C_Mem_Write+0x56>
 800237e:	2302      	movs	r3, #2
 8002380:	e0c5      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d007      	beq.n	80023a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2221      	movs	r2, #33	; 0x21
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a4d      	ldr	r2, [pc, #308]	; (800251c <HAL_I2C_Mem_Write+0x1f0>)
 80023e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ea:	88f8      	ldrh	r0, [r7, #6]
 80023ec:	893a      	ldrh	r2, [r7, #8]
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4603      	mov	r3, r0
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fab6 	bl	800296c <I2C_RequestMemoryWrite>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d052      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e081      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fd00 	bl	8002e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	2b04      	cmp	r3, #4
 8002420:	d107      	bne.n	8002432 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b04      	cmp	r3, #4
 8002472:	d11b      	bne.n	80024ac <HAL_I2C_Mem_Write+0x180>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	d017      	beq.n	80024ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1aa      	bne.n	800240a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fcec 	bl	8002e96 <I2C_WaitOnBTFFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d107      	bne.n	80024dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e016      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2220      	movs	r2, #32
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	00100002 	.word	0x00100002
 800251c:	ffff0000 	.word	0xffff0000

08002520 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	; 0x30
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	4608      	mov	r0, r1
 800252a:	4611      	mov	r1, r2
 800252c:	461a      	mov	r2, r3
 800252e:	4603      	mov	r3, r0
 8002530:	817b      	strh	r3, [r7, #10]
 8002532:	460b      	mov	r3, r1
 8002534:	813b      	strh	r3, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800253a:	f7ff fa71 	bl	8001a20 <HAL_GetTick>
 800253e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b20      	cmp	r3, #32
 800254a:	f040 8208 	bne.w	800295e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2319      	movs	r3, #25
 8002554:	2201      	movs	r2, #1
 8002556:	497b      	ldr	r1, [pc, #492]	; (8002744 <HAL_I2C_Mem_Read+0x224>)
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fb85 	bl	8002c68 <I2C_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	e1fb      	b.n	8002960 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_I2C_Mem_Read+0x56>
 8002572:	2302      	movs	r3, #2
 8002574:	e1f4      	b.n	8002960 <HAL_I2C_Mem_Read+0x440>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d007      	beq.n	800259c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2222      	movs	r2, #34	; 0x22
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a5b      	ldr	r2, [pc, #364]	; (8002748 <HAL_I2C_Mem_Read+0x228>)
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025de:	88f8      	ldrh	r0, [r7, #6]
 80025e0:	893a      	ldrh	r2, [r7, #8]
 80025e2:	8979      	ldrh	r1, [r7, #10]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4603      	mov	r3, r0
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fa52 	bl	8002a98 <I2C_RequestMemoryRead>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e1b0      	b.n	8002960 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	2b00      	cmp	r3, #0
 8002604:	d113      	bne.n	800262e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	623b      	str	r3, [r7, #32]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e184      	b.n	8002938 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002632:	2b01      	cmp	r3, #1
 8002634:	d11b      	bne.n	800266e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002644:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e164      	b.n	8002938 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002672:	2b02      	cmp	r3, #2
 8002674:	d11b      	bne.n	80026ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002684:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002694:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	e144      	b.n	8002938 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026c4:	e138      	b.n	8002938 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	f200 80f1 	bhi.w	80028b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d123      	bne.n	8002720 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 fc1b 	bl	8002f18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e139      	b.n	8002960 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800271e:	e10b      	b.n	8002938 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	2b02      	cmp	r3, #2
 8002726:	d14e      	bne.n	80027c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272e:	2200      	movs	r2, #0
 8002730:	4906      	ldr	r1, [pc, #24]	; (800274c <HAL_I2C_Mem_Read+0x22c>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fa98 	bl	8002c68 <I2C_WaitOnFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e10e      	b.n	8002960 <HAL_I2C_Mem_Read+0x440>
 8002742:	bf00      	nop
 8002744:	00100002 	.word	0x00100002
 8002748:	ffff0000 	.word	0xffff0000
 800274c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027c4:	e0b8      	b.n	8002938 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027cc:	2200      	movs	r2, #0
 80027ce:	4966      	ldr	r1, [pc, #408]	; (8002968 <HAL_I2C_Mem_Read+0x448>)
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 fa49 	bl	8002c68 <I2C_WaitOnFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0bf      	b.n	8002960 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	2200      	movs	r2, #0
 800282a:	494f      	ldr	r1, [pc, #316]	; (8002968 <HAL_I2C_Mem_Read+0x448>)
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fa1b 	bl	8002c68 <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e091      	b.n	8002960 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028b0:	e042      	b.n	8002938 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fb2e 	bl	8002f18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e04c      	b.n	8002960 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b04      	cmp	r3, #4
 8002904:	d118      	bne.n	8002938 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f aec2 	bne.w	80026c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3728      	adds	r7, #40	; 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	00010004 	.word	0x00010004

0800296c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4603      	mov	r3, r0
 800297c:	817b      	strh	r3, [r7, #10]
 800297e:	460b      	mov	r3, r1
 8002980:	813b      	strh	r3, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	2200      	movs	r2, #0
 800299e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f960 	bl	8002c68 <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029bc:	d103      	bne.n	80029c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e05f      	b.n	8002a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ca:	897b      	ldrh	r3, [r7, #10]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	492d      	ldr	r1, [pc, #180]	; (8002a94 <I2C_RequestMemoryWrite+0x128>)
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f998 	bl	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04c      	b.n	8002a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	6a39      	ldr	r1, [r7, #32]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 fa02 	bl	8002e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d107      	bne.n	8002a2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e02b      	b.n	8002a8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d105      	bne.n	8002a44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a38:	893b      	ldrh	r3, [r7, #8]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	e021      	b.n	8002a88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a44:	893b      	ldrh	r3, [r7, #8]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	6a39      	ldr	r1, [r7, #32]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f9dc 	bl	8002e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d107      	bne.n	8002a7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e005      	b.n	8002a8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	00010002 	.word	0x00010002

08002a98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ac0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 f8c2 	bl	8002c68 <I2C_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af8:	d103      	bne.n	8002b02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e0aa      	b.n	8002c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b06:	897b      	ldrh	r3, [r7, #10]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	6a3a      	ldr	r2, [r7, #32]
 8002b1a:	4952      	ldr	r1, [pc, #328]	; (8002c64 <I2C_RequestMemoryRead+0x1cc>)
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f8fa 	bl	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e097      	b.n	8002c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b44:	6a39      	ldr	r1, [r7, #32]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f964 	bl	8002e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00d      	beq.n	8002b6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d107      	bne.n	8002b6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e076      	b.n	8002c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b74:	893b      	ldrh	r3, [r7, #8]
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	611a      	str	r2, [r3, #16]
 8002b7e:	e021      	b.n	8002bc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b80:	893b      	ldrh	r3, [r7, #8]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f93e 	bl	8002e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d107      	bne.n	8002bb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e050      	b.n	8002c5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bba:	893b      	ldrh	r3, [r7, #8]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc6:	6a39      	ldr	r1, [r7, #32]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f923 	bl	8002e14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d107      	bne.n	8002bec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e035      	b.n	8002c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f82b 	bl	8002c68 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00d      	beq.n	8002c34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c26:	d103      	bne.n	8002c30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e013      	b.n	8002c5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c34:	897b      	ldrh	r3, [r7, #10]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	6a3a      	ldr	r2, [r7, #32]
 8002c48:	4906      	ldr	r1, [pc, #24]	; (8002c64 <I2C_RequestMemoryRead+0x1cc>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f863 	bl	8002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	00010002 	.word	0x00010002

08002c68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c78:	e025      	b.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c80:	d021      	beq.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c82:	f7fe fecd 	bl	8001a20 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d302      	bcc.n	8002c98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d116      	bne.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e023      	b.n	8002d0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10d      	bne.n	8002cec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	e00c      	b.n	8002d06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf0c      	ite	eq
 8002cfe:	2301      	moveq	r3, #1
 8002d00:	2300      	movne	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d0b6      	beq.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d24:	e051      	b.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d123      	bne.n	8002d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f043 0204 	orr.w	r2, r3, #4
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e046      	b.n	8002e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d021      	beq.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe fe4b 	bl	8001a20 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2220      	movs	r2, #32
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e020      	b.n	8002e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	0c1b      	lsrs	r3, r3, #16
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10c      	bne.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf14      	ite	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	2300      	moveq	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	e00b      	b.n	8002e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	43da      	mvns	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d18d      	bne.n	8002d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e20:	e02d      	b.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f8ce 	bl	8002fc4 <I2C_IsAcknowledgeFailed>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e02d      	b.n	8002e8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d021      	beq.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7fe fdf1 	bl	8001a20 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d116      	bne.n	8002e7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f043 0220 	orr.w	r2, r3, #32
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e007      	b.n	8002e8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e88:	2b80      	cmp	r3, #128	; 0x80
 8002e8a:	d1ca      	bne.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ea2:	e02d      	b.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f88d 	bl	8002fc4 <I2C_IsAcknowledgeFailed>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e02d      	b.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d021      	beq.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebc:	f7fe fdb0 	bl	8001a20 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d116      	bne.n	8002f00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e007      	b.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0304 	and.w	r3, r3, #4
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d1ca      	bne.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f24:	e042      	b.n	8002fac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d119      	bne.n	8002f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0210 	mvn.w	r2, #16
 8002f3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e029      	b.n	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f68:	f7fe fd5a 	bl	8001a20 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d302      	bcc.n	8002f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d116      	bne.n	8002fac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e007      	b.n	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb6:	2b40      	cmp	r3, #64	; 0x40
 8002fb8:	d1b5      	bne.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fda:	d11b      	bne.n	8003014 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e267      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d075      	beq.n	800312e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003042:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b04      	cmp	r3, #4
 800304c:	d00c      	beq.n	8003068 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304e:	4b85      	ldr	r3, [pc, #532]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003056:	2b08      	cmp	r3, #8
 8003058:	d112      	bne.n	8003080 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305a:	4b82      	ldr	r3, [pc, #520]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003066:	d10b      	bne.n	8003080 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003068:	4b7e      	ldr	r3, [pc, #504]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d05b      	beq.n	800312c <HAL_RCC_OscConfig+0x108>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d157      	bne.n	800312c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e242      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003088:	d106      	bne.n	8003098 <HAL_RCC_OscConfig+0x74>
 800308a:	4b76      	ldr	r3, [pc, #472]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a75      	ldr	r2, [pc, #468]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xb0>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x98>
 80030a2:	4b70      	ldr	r3, [pc, #448]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6f      	ldr	r2, [pc, #444]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b6d      	ldr	r3, [pc, #436]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6c      	ldr	r2, [pc, #432]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xb0>
 80030bc:	4b69      	ldr	r3, [pc, #420]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a68      	ldr	r2, [pc, #416]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b66      	ldr	r3, [pc, #408]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a65      	ldr	r2, [pc, #404]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe fca0 	bl	8001a20 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e4:	f7fe fc9c 	bl	8001a20 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	; 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e207      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b5b      	ldr	r3, [pc, #364]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xc0>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7fe fc8c 	bl	8001a20 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800310c:	f7fe fc88 	bl	8001a20 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	; 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1f3      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	4b51      	ldr	r3, [pc, #324]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0xe8>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800313a:	4b4a      	ldr	r3, [pc, #296]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003146:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800314e:	2b08      	cmp	r3, #8
 8003150:	d11c      	bne.n	800318c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003152:	4b44      	ldr	r3, [pc, #272]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x152>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1c7      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003176:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4937      	ldr	r1, [pc, #220]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	e03a      	b.n	8003202 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003194:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_RCC_OscConfig+0x244>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fe fc41 	bl	8001a20 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a2:	f7fe fc3d 	bl	8001a20 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1a8      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b28      	ldr	r3, [pc, #160]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4925      	ldr	r1, [pc, #148]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]
 80031d4:	e015      	b.n	8003202 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d6:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_RCC_OscConfig+0x244>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fc20 	bl	8001a20 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e4:	f7fe fc1c 	bl	8001a20 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e187      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	4b1b      	ldr	r3, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d036      	beq.n	800327c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d016      	beq.n	8003244 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_RCC_OscConfig+0x248>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321c:	f7fe fc00 	bl	8001a20 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003224:	f7fe fbfc 	bl	8001a20 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e167      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_OscConfig+0x240>)
 8003238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x200>
 8003242:	e01b      	b.n	800327c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_OscConfig+0x248>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe fbe9 	bl	8001a20 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003250:	e00e      	b.n	8003270 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003252:	f7fe fbe5 	bl	8001a20 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d907      	bls.n	8003270 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e150      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
 8003264:	40023800 	.word	0x40023800
 8003268:	42470000 	.word	0x42470000
 800326c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003270:	4b88      	ldr	r3, [pc, #544]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ea      	bne.n	8003252 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8097 	beq.w	80033b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328e:	4b81      	ldr	r3, [pc, #516]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10f      	bne.n	80032ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	4b7d      	ldr	r3, [pc, #500]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a7c      	ldr	r2, [pc, #496]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b7a      	ldr	r3, [pc, #488]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b6:	2301      	movs	r3, #1
 80032b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ba:	4b77      	ldr	r3, [pc, #476]	; (8003498 <HAL_RCC_OscConfig+0x474>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d118      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c6:	4b74      	ldr	r3, [pc, #464]	; (8003498 <HAL_RCC_OscConfig+0x474>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a73      	ldr	r2, [pc, #460]	; (8003498 <HAL_RCC_OscConfig+0x474>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d2:	f7fe fba5 	bl	8001a20 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032da:	f7fe fba1 	bl	8001a20 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e10c      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCC_OscConfig+0x474>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x2ea>
 8003300:	4b64      	ldr	r3, [pc, #400]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	4a63      	ldr	r2, [pc, #396]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6713      	str	r3, [r2, #112]	; 0x70
 800330c:	e01c      	b.n	8003348 <HAL_RCC_OscConfig+0x324>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b05      	cmp	r3, #5
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0x30c>
 8003316:	4b5f      	ldr	r3, [pc, #380]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331a:	4a5e      	ldr	r2, [pc, #376]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	6713      	str	r3, [r2, #112]	; 0x70
 8003322:	4b5c      	ldr	r3, [pc, #368]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	4a5b      	ldr	r2, [pc, #364]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6713      	str	r3, [r2, #112]	; 0x70
 800332e:	e00b      	b.n	8003348 <HAL_RCC_OscConfig+0x324>
 8003330:	4b58      	ldr	r3, [pc, #352]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	4a57      	ldr	r2, [pc, #348]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	6713      	str	r3, [r2, #112]	; 0x70
 800333c:	4b55      	ldr	r3, [pc, #340]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 800333e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003340:	4a54      	ldr	r2, [pc, #336]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003342:	f023 0304 	bic.w	r3, r3, #4
 8003346:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d015      	beq.n	800337c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fe fb66 	bl	8001a20 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	e00a      	b.n	800336e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003358:	f7fe fb62 	bl	8001a20 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e0cb      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336e:	4b49      	ldr	r3, [pc, #292]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0ee      	beq.n	8003358 <HAL_RCC_OscConfig+0x334>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7fe fb50 	bl	8001a20 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe fb4c 	bl	8001a20 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0b5      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339a:	4b3e      	ldr	r3, [pc, #248]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ee      	bne.n	8003384 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ac:	4b39      	ldr	r3, [pc, #228]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	4a38      	ldr	r2, [pc, #224]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80a1 	beq.w	8003504 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033c2:	4b34      	ldr	r3, [pc, #208]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d05c      	beq.n	8003488 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d141      	bne.n	800345a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d6:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCC_OscConfig+0x478>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe fb20 	bl	8001a20 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e4:	f7fe fb1c 	bl	8001a20 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e087      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f6:	4b27      	ldr	r3, [pc, #156]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69da      	ldr	r2, [r3, #28]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	019b      	lsls	r3, r3, #6
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	3b01      	subs	r3, #1
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	491b      	ldr	r1, [pc, #108]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 8003428:	4313      	orrs	r3, r2
 800342a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_OscConfig+0x478>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003432:	f7fe faf5 	bl	8001a20 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343a:	f7fe faf1 	bl	8001a20 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e05c      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x416>
 8003458:	e054      	b.n	8003504 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_RCC_OscConfig+0x478>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe fade 	bl	8001a20 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003468:	f7fe fada 	bl	8001a20 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e045      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <HAL_RCC_OscConfig+0x470>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x444>
 8003486:	e03d      	b.n	8003504 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e038      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
 8003494:	40023800 	.word	0x40023800
 8003498:	40007000 	.word	0x40007000
 800349c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x4ec>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d028      	beq.n	8003500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d121      	bne.n	8003500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d11a      	bne.n	8003500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034d0:	4013      	ands	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d8:	4293      	cmp	r3, r2
 80034da:	d111      	bne.n	8003500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	3b01      	subs	r3, #1
 80034ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800

08003514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0cc      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b68      	ldr	r3, [pc, #416]	; (80036cc <HAL_RCC_ClockConfig+0x1b8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d90c      	bls.n	8003550 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b65      	ldr	r3, [pc, #404]	; (80036cc <HAL_RCC_ClockConfig+0x1b8>)
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b63      	ldr	r3, [pc, #396]	; (80036cc <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e0b8      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d020      	beq.n	800359e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003568:	4b59      	ldr	r3, [pc, #356]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a58      	ldr	r2, [pc, #352]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003572:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003580:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a52      	ldr	r2, [pc, #328]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800358a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358c:	4b50      	ldr	r3, [pc, #320]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	494d      	ldr	r1, [pc, #308]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d044      	beq.n	8003634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d107      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	4b47      	ldr	r3, [pc, #284]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d119      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e07f      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d003      	beq.n	80035d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d2:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e06f      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e2:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e067      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f2:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4934      	ldr	r1, [pc, #208]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	4313      	orrs	r3, r2
 8003602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003604:	f7fe fa0c 	bl	8001a20 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	e00a      	b.n	8003622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7fe fa08 	bl	8001a20 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e04f      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 020c 	and.w	r2, r3, #12
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d1eb      	bne.n	800360c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003634:	4b25      	ldr	r3, [pc, #148]	; (80036cc <HAL_RCC_ClockConfig+0x1b8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d20c      	bcs.n	800365c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b22      	ldr	r3, [pc, #136]	; (80036cc <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d001      	beq.n	800365c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e032      	b.n	80036c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003668:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	4916      	ldr	r1, [pc, #88]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	490e      	ldr	r1, [pc, #56]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	4313      	orrs	r3, r2
 8003698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800369a:	f000 f821 	bl	80036e0 <HAL_RCC_GetSysClockFreq>
 800369e:	4602      	mov	r2, r0
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	490a      	ldr	r1, [pc, #40]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 80036ac:	5ccb      	ldrb	r3, [r1, r3]
 80036ae:	fa22 f303 	lsr.w	r3, r2, r3
 80036b2:	4a09      	ldr	r2, [pc, #36]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80036b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe f96c 	bl	8001998 <HAL_InitTick>

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023c00 	.word	0x40023c00
 80036d0:	40023800 	.word	0x40023800
 80036d4:	080093d0 	.word	0x080093d0
 80036d8:	20000004 	.word	0x20000004
 80036dc:	20000008 	.word	0x20000008

080036e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e4:	b090      	sub	sp, #64	; 0x40
 80036e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
 80036ec:	2300      	movs	r3, #0
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f0:	2300      	movs	r3, #0
 80036f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_GetSysClockFreq+0x180>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d00d      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0x40>
 8003704:	2b08      	cmp	r3, #8
 8003706:	f200 80a1 	bhi.w	800384c <HAL_RCC_GetSysClockFreq+0x16c>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x34>
 800370e:	2b04      	cmp	r3, #4
 8003710:	d003      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x3a>
 8003712:	e09b      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003714:	4b53      	ldr	r3, [pc, #332]	; (8003864 <HAL_RCC_GetSysClockFreq+0x184>)
 8003716:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003718:	e09b      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800371a:	4b53      	ldr	r3, [pc, #332]	; (8003868 <HAL_RCC_GetSysClockFreq+0x188>)
 800371c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800371e:	e098      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003720:	4b4f      	ldr	r3, [pc, #316]	; (8003860 <HAL_RCC_GetSysClockFreq+0x180>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372a:	4b4d      	ldr	r3, [pc, #308]	; (8003860 <HAL_RCC_GetSysClockFreq+0x180>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d028      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003736:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_RCC_GetSysClockFreq+0x180>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	2200      	movs	r2, #0
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	627a      	str	r2, [r7, #36]	; 0x24
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003748:	2100      	movs	r1, #0
 800374a:	4b47      	ldr	r3, [pc, #284]	; (8003868 <HAL_RCC_GetSysClockFreq+0x188>)
 800374c:	fb03 f201 	mul.w	r2, r3, r1
 8003750:	2300      	movs	r3, #0
 8003752:	fb00 f303 	mul.w	r3, r0, r3
 8003756:	4413      	add	r3, r2
 8003758:	4a43      	ldr	r2, [pc, #268]	; (8003868 <HAL_RCC_GetSysClockFreq+0x188>)
 800375a:	fba0 1202 	umull	r1, r2, r0, r2
 800375e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003760:	460a      	mov	r2, r1
 8003762:	62ba      	str	r2, [r7, #40]	; 0x28
 8003764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003766:	4413      	add	r3, r2
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376c:	2200      	movs	r2, #0
 800376e:	61bb      	str	r3, [r7, #24]
 8003770:	61fa      	str	r2, [r7, #28]
 8003772:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003776:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800377a:	f7fd fa09 	bl	8000b90 <__aeabi_uldivmod>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	4613      	mov	r3, r2
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003786:	e053      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003788:	4b35      	ldr	r3, [pc, #212]	; (8003860 <HAL_RCC_GetSysClockFreq+0x180>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	2200      	movs	r2, #0
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	617a      	str	r2, [r7, #20]
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800379a:	f04f 0b00 	mov.w	fp, #0
 800379e:	4652      	mov	r2, sl
 80037a0:	465b      	mov	r3, fp
 80037a2:	f04f 0000 	mov.w	r0, #0
 80037a6:	f04f 0100 	mov.w	r1, #0
 80037aa:	0159      	lsls	r1, r3, #5
 80037ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b0:	0150      	lsls	r0, r2, #5
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	ebb2 080a 	subs.w	r8, r2, sl
 80037ba:	eb63 090b 	sbc.w	r9, r3, fp
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037d2:	ebb2 0408 	subs.w	r4, r2, r8
 80037d6:	eb63 0509 	sbc.w	r5, r3, r9
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	00eb      	lsls	r3, r5, #3
 80037e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037e8:	00e2      	lsls	r2, r4, #3
 80037ea:	4614      	mov	r4, r2
 80037ec:	461d      	mov	r5, r3
 80037ee:	eb14 030a 	adds.w	r3, r4, sl
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	eb45 030b 	adc.w	r3, r5, fp
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003806:	4629      	mov	r1, r5
 8003808:	028b      	lsls	r3, r1, #10
 800380a:	4621      	mov	r1, r4
 800380c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003810:	4621      	mov	r1, r4
 8003812:	028a      	lsls	r2, r1, #10
 8003814:	4610      	mov	r0, r2
 8003816:	4619      	mov	r1, r3
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	2200      	movs	r2, #0
 800381c:	60bb      	str	r3, [r7, #8]
 800381e:	60fa      	str	r2, [r7, #12]
 8003820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003824:	f7fd f9b4 	bl	8000b90 <__aeabi_uldivmod>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4613      	mov	r3, r2
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_GetSysClockFreq+0x180>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	3301      	adds	r3, #1
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800384a:	e002      	b.n	8003852 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetSysClockFreq+0x184>)
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003854:	4618      	mov	r0, r3
 8003856:	3740      	adds	r7, #64	; 0x40
 8003858:	46bd      	mov	sp, r7
 800385a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800
 8003864:	00f42400 	.word	0x00f42400
 8003868:	00b71b00 	.word	0x00b71b00

0800386c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <HAL_RCC_GetHCLKFreq+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003888:	f7ff fff0 	bl	800386c <HAL_RCC_GetHCLKFreq>
 800388c:	4602      	mov	r2, r0
 800388e:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	0a9b      	lsrs	r3, r3, #10
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	4903      	ldr	r1, [pc, #12]	; (80038a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800389a:	5ccb      	ldrb	r3, [r1, r3]
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40023800 	.word	0x40023800
 80038a8:	080093e0 	.word	0x080093e0

080038ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07b      	b.n	80039b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ce:	d009      	beq.n	80038e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
 80038d6:	e005      	b.n	80038e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd feae 	bl	8001660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800391a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003968:	ea42 0103 	orr.w	r1, r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f003 0104 	and.w	r1, r3, #4
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	f003 0210 	and.w	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b088      	sub	sp, #32
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_SPI_Transmit+0x22>
 80039dc:	2302      	movs	r3, #2
 80039de:	e126      	b.n	8003c2e <HAL_SPI_Transmit+0x270>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039e8:	f7fe f81a 	bl	8001a20 <HAL_GetTick>
 80039ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d002      	beq.n	8003a04 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
 8003a00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a02:	e10b      	b.n	8003c1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_SPI_Transmit+0x52>
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a14:	e102      	b.n	8003c1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a5c:	d10f      	bne.n	8003a7e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d007      	beq.n	8003a9c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa4:	d14b      	bne.n	8003b3e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Transmit+0xf6>
 8003aae:	8afb      	ldrh	r3, [r7, #22]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d13e      	bne.n	8003b32 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	881a      	ldrh	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	1c9a      	adds	r2, r3, #2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ad8:	e02b      	b.n	8003b32 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d112      	bne.n	8003b0e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	881a      	ldrh	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	1c9a      	adds	r2, r3, #2
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b0c:	e011      	b.n	8003b32 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b0e:	f7fd ff87 	bl	8001a20 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d803      	bhi.n	8003b26 <HAL_SPI_Transmit+0x168>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d102      	bne.n	8003b2c <HAL_SPI_Transmit+0x16e>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b30:	e074      	b.n	8003c1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ce      	bne.n	8003ada <HAL_SPI_Transmit+0x11c>
 8003b3c:	e04c      	b.n	8003bd8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_SPI_Transmit+0x18e>
 8003b46:	8afb      	ldrh	r3, [r7, #22]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d140      	bne.n	8003bce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	7812      	ldrb	r2, [r2, #0]
 8003b58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b72:	e02c      	b.n	8003bce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d113      	bne.n	8003baa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	7812      	ldrb	r2, [r2, #0]
 8003b8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ba8:	e011      	b.n	8003bce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003baa:	f7fd ff39 	bl	8001a20 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d803      	bhi.n	8003bc2 <HAL_SPI_Transmit+0x204>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc0:	d102      	bne.n	8003bc8 <HAL_SPI_Transmit+0x20a>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bcc:	e026      	b.n	8003c1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1cd      	bne.n	8003b74 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	6839      	ldr	r1, [r7, #0]
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fbcb 	bl	8004378 <SPI_EndRxTxTransaction>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	77fb      	strb	r3, [r7, #31]
 8003c18:	e000      	b.n	8003c1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b088      	sub	sp, #32
 8003c3a:	af02      	add	r7, sp, #8
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	4613      	mov	r3, r2
 8003c44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c52:	d112      	bne.n	8003c7a <HAL_SPI_Receive+0x44>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10e      	bne.n	8003c7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f8f1 	bl	8003e58 <HAL_SPI_TransmitReceive>
 8003c76:	4603      	mov	r3, r0
 8003c78:	e0ea      	b.n	8003e50 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_SPI_Receive+0x52>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e0e3      	b.n	8003e50 <HAL_SPI_Receive+0x21a>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c90:	f7fd fec6 	bl	8001a20 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d002      	beq.n	8003ca8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ca6:	e0ca      	b.n	8003e3e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_SPI_Receive+0x7e>
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cb8:	e0c1      	b.n	8003e3e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	88fa      	ldrh	r2, [r7, #6]
 8003cd2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d00:	d10f      	bne.n	8003d22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b40      	cmp	r3, #64	; 0x40
 8003d2e:	d007      	beq.n	8003d40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d162      	bne.n	8003e0e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d48:	e02e      	b.n	8003da8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d115      	bne.n	8003d84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f103 020c 	add.w	r2, r3, #12
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	7812      	ldrb	r2, [r2, #0]
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d82:	e011      	b.n	8003da8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d84:	f7fd fe4c 	bl	8001a20 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d803      	bhi.n	8003d9c <HAL_SPI_Receive+0x166>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d102      	bne.n	8003da2 <HAL_SPI_Receive+0x16c>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003da6:	e04a      	b.n	8003e3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1cb      	bne.n	8003d4a <HAL_SPI_Receive+0x114>
 8003db2:	e031      	b.n	8003e18 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d113      	bne.n	8003dea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	1c9a      	adds	r2, r3, #2
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003de8:	e011      	b.n	8003e0e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dea:	f7fd fe19 	bl	8001a20 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d803      	bhi.n	8003e02 <HAL_SPI_Receive+0x1cc>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d102      	bne.n	8003e08 <HAL_SPI_Receive+0x1d2>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e0c:	e017      	b.n	8003e3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1cd      	bne.n	8003db4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	6839      	ldr	r1, [r7, #0]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 fa45 	bl	80042ac <SPI_EndRxTransaction>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
 8003e3a:	e000      	b.n	8003e3e <HAL_SPI_Receive+0x208>
  }

error :
 8003e3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	; 0x30
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e66:	2301      	movs	r3, #1
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d101      	bne.n	8003e7e <HAL_SPI_TransmitReceive+0x26>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e18a      	b.n	8004194 <HAL_SPI_TransmitReceive+0x33c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e86:	f7fd fdcb 	bl	8001a20 <HAL_GetTick>
 8003e8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e9c:	887b      	ldrh	r3, [r7, #2]
 8003e9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d00f      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x70>
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eae:	d107      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x68>
 8003eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d003      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ec6:	e15b      	b.n	8004180 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x82>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x82>
 8003ed4:	887b      	ldrh	r3, [r7, #2]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ee0:	e14e      	b.n	8004180 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d003      	beq.n	8003ef6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2205      	movs	r2, #5
 8003ef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	887a      	ldrh	r2, [r7, #2]
 8003f06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	887a      	ldrh	r2, [r7, #2]
 8003f1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d007      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f52:	d178      	bne.n	8004046 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_SPI_TransmitReceive+0x10a>
 8003f5c:	8b7b      	ldrh	r3, [r7, #26]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d166      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	881a      	ldrh	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	1c9a      	adds	r2, r3, #2
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f86:	e053      	b.n	8004030 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d11b      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x176>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d016      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x176>
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d113      	bne.n	8003fce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d119      	bne.n	8004010 <HAL_SPI_TransmitReceive+0x1b8>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d014      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800400c:	2301      	movs	r3, #1
 800400e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004010:	f7fd fd06 	bl	8001a20 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800401c:	429a      	cmp	r2, r3
 800401e:	d807      	bhi.n	8004030 <HAL_SPI_TransmitReceive+0x1d8>
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d003      	beq.n	8004030 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800402e:	e0a7      	b.n	8004180 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1a6      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x130>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403e:	b29b      	uxth	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1a1      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x130>
 8004044:	e07c      	b.n	8004140 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x1fc>
 800404e:	8b7b      	ldrh	r3, [r7, #26]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d16b      	bne.n	800412c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407a:	e057      	b.n	800412c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b02      	cmp	r3, #2
 8004088:	d11c      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x26c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d017      	beq.n	80040c4 <HAL_SPI_TransmitReceive+0x26c>
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d114      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d119      	bne.n	8004106 <HAL_SPI_TransmitReceive+0x2ae>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d014      	beq.n	8004106 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004102:	2301      	movs	r3, #1
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004106:	f7fd fc8b 	bl	8001a20 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004112:	429a      	cmp	r2, r3
 8004114:	d803      	bhi.n	800411e <HAL_SPI_TransmitReceive+0x2c6>
 8004116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411c:	d102      	bne.n	8004124 <HAL_SPI_TransmitReceive+0x2cc>
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	2b00      	cmp	r3, #0
 8004122:	d103      	bne.n	800412c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800412a:	e029      	b.n	8004180 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1a2      	bne.n	800407c <HAL_SPI_TransmitReceive+0x224>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d19d      	bne.n	800407c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004142:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f917 	bl	8004378 <SPI_EndRxTxTransaction>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800415c:	e010      	b.n	8004180 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004166:	2300      	movs	r3, #0
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	e000      	b.n	8004180 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800417e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004190:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004194:	4618      	mov	r0, r3
 8004196:	3730      	adds	r7, #48	; 0x30
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041ac:	f7fd fc38 	bl	8001a20 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	1a9b      	subs	r3, r3, r2
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	4413      	add	r3, r2
 80041ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041bc:	f7fd fc30 	bl	8001a20 <HAL_GetTick>
 80041c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041c2:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	015b      	lsls	r3, r3, #5
 80041c8:	0d1b      	lsrs	r3, r3, #20
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d2:	e054      	b.n	800427e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d050      	beq.n	800427e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041dc:	f7fd fc20 	bl	8001a20 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d902      	bls.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d13d      	bne.n	800426e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004200:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420a:	d111      	bne.n	8004230 <SPI_WaitFlagStateUntilTimeout+0x94>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004214:	d004      	beq.n	8004220 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800421e:	d107      	bne.n	8004230 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004238:	d10f      	bne.n	800425a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004258:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e017      	b.n	800429e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	3b01      	subs	r3, #1
 800427c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	429a      	cmp	r2, r3
 800429a:	d19b      	bne.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20000004 	.word	0x20000004

080042ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042c0:	d111      	bne.n	80042e6 <SPI_EndRxTransaction+0x3a>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ca:	d004      	beq.n	80042d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d107      	bne.n	80042e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ee:	d12a      	bne.n	8004346 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f8:	d012      	beq.n	8004320 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2200      	movs	r2, #0
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7ff ff49 	bl	800419c <SPI_WaitFlagStateUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d02d      	beq.n	800436c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	f043 0220 	orr.w	r2, r3, #32
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e026      	b.n	800436e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2200      	movs	r2, #0
 8004328:	2101      	movs	r1, #1
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff ff36 	bl	800419c <SPI_WaitFlagStateUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d01a      	beq.n	800436c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	f043 0220 	orr.w	r2, r3, #32
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e013      	b.n	800436e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2200      	movs	r2, #0
 800434e:	2101      	movs	r1, #1
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff ff23 	bl	800419c <SPI_WaitFlagStateUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d007      	beq.n	800436c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e000      	b.n	800436e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <SPI_EndRxTxTransaction+0x7c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <SPI_EndRxTxTransaction+0x80>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	0d5b      	lsrs	r3, r3, #21
 8004390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004394:	fb02 f303 	mul.w	r3, r2, r3
 8004398:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a2:	d112      	bne.n	80043ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2200      	movs	r2, #0
 80043ac:	2180      	movs	r1, #128	; 0x80
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff fef4 	bl	800419c <SPI_WaitFlagStateUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e00f      	b.n	80043ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e0:	2b80      	cmp	r3, #128	; 0x80
 80043e2:	d0f2      	beq.n	80043ca <SPI_EndRxTxTransaction+0x52>
 80043e4:	e000      	b.n	80043e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80043e6:	bf00      	nop
  }

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000004 	.word	0x20000004
 80043f8:	165e9f81 	.word	0x165e9f81

080043fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e041      	b.n	8004492 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fd fa46 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f000 fa96 	bl	800496c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d001      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e04e      	b.n	8004552 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0201 	orr.w	r2, r2, #1
 80044ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a23      	ldr	r2, [pc, #140]	; (8004560 <HAL_TIM_Base_Start_IT+0xc4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d022      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044de:	d01d      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <HAL_TIM_Base_Start_IT+0xc8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d018      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <HAL_TIM_Base_Start_IT+0xcc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d013      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_TIM_Base_Start_IT+0xd0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00e      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1b      	ldr	r2, [pc, #108]	; (8004570 <HAL_TIM_Base_Start_IT+0xd4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a19      	ldr	r2, [pc, #100]	; (8004574 <HAL_TIM_Base_Start_IT+0xd8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x80>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a18      	ldr	r2, [pc, #96]	; (8004578 <HAL_TIM_Base_Start_IT+0xdc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d111      	bne.n	8004540 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b06      	cmp	r3, #6
 800452c:	d010      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453e:	e007      	b.n	8004550 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40010000 	.word	0x40010000
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800
 800456c:	40000c00 	.word	0x40000c00
 8004570:	40010400 	.word	0x40010400
 8004574:	40014000 	.word	0x40014000
 8004578:	40001800 	.word	0x40001800

0800457c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d122      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	d11b      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0202 	mvn.w	r2, #2
 80045a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9b5 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f9a7 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f9b8 	bl	8004942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d122      	bne.n	800462c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d11b      	bne.n	800462c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0204 	mvn.w	r2, #4
 80045fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2202      	movs	r2, #2
 8004602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f98b 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 8004618:	e005      	b.n	8004626 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f97d 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f98e 	bl	8004942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b08      	cmp	r3, #8
 8004638:	d122      	bne.n	8004680 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b08      	cmp	r3, #8
 8004646:	d11b      	bne.n	8004680 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0208 	mvn.w	r2, #8
 8004650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2204      	movs	r2, #4
 8004656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f961 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 800466c:	e005      	b.n	800467a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f953 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f964 	bl	8004942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b10      	cmp	r3, #16
 800468c:	d122      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	f003 0310 	and.w	r3, r3, #16
 8004698:	2b10      	cmp	r3, #16
 800469a:	d11b      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0210 	mvn.w	r2, #16
 80046a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2208      	movs	r2, #8
 80046aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f937 	bl	800492e <HAL_TIM_IC_CaptureCallback>
 80046c0:	e005      	b.n	80046ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f929 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f93a 	bl	8004942 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d10e      	bne.n	8004700 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d107      	bne.n	8004700 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0201 	mvn.w	r2, #1
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fc fd54 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470a:	2b80      	cmp	r3, #128	; 0x80
 800470c:	d10e      	bne.n	800472c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	2b80      	cmp	r3, #128	; 0x80
 800471a:	d107      	bne.n	800472c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 fae0 	bl	8004cec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d10e      	bne.n	8004758 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d107      	bne.n	8004758 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8ff 	bl	8004956 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b20      	cmp	r3, #32
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b20      	cmp	r3, #32
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0220 	mvn.w	r2, #32
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 faaa 	bl	8004cd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_ConfigClockSource+0x1c>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e0b4      	b.n	8004912 <HAL_TIM_ConfigClockSource+0x186>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e0:	d03e      	beq.n	8004860 <HAL_TIM_ConfigClockSource+0xd4>
 80047e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e6:	f200 8087 	bhi.w	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 80047ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ee:	f000 8086 	beq.w	80048fe <HAL_TIM_ConfigClockSource+0x172>
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	d87f      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b70      	cmp	r3, #112	; 0x70
 80047fa:	d01a      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0xa6>
 80047fc:	2b70      	cmp	r3, #112	; 0x70
 80047fe:	d87b      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b60      	cmp	r3, #96	; 0x60
 8004802:	d050      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0x11a>
 8004804:	2b60      	cmp	r3, #96	; 0x60
 8004806:	d877      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b50      	cmp	r3, #80	; 0x50
 800480a:	d03c      	beq.n	8004886 <HAL_TIM_ConfigClockSource+0xfa>
 800480c:	2b50      	cmp	r3, #80	; 0x50
 800480e:	d873      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b40      	cmp	r3, #64	; 0x40
 8004812:	d058      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0x13a>
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d86f      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b30      	cmp	r3, #48	; 0x30
 800481a:	d064      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d86b      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004820:	2b20      	cmp	r3, #32
 8004822:	d060      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004824:	2b20      	cmp	r3, #32
 8004826:	d867      	bhi.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004828:	2b00      	cmp	r3, #0
 800482a:	d05c      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 800482c:	2b10      	cmp	r3, #16
 800482e:	d05a      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x15a>
 8004830:	e062      	b.n	80048f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6899      	ldr	r1, [r3, #8]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f000 f9ad 	bl	8004ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004854:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	609a      	str	r2, [r3, #8]
      break;
 800485e:	e04f      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	6899      	ldr	r1, [r3, #8]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f000 f996 	bl	8004ba0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004882:	609a      	str	r2, [r3, #8]
      break;
 8004884:	e03c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6859      	ldr	r1, [r3, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	461a      	mov	r2, r3
 8004894:	f000 f90a 	bl	8004aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2150      	movs	r1, #80	; 0x50
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 f963 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 80048a4:	e02c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6859      	ldr	r1, [r3, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f000 f929 	bl	8004b0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2160      	movs	r1, #96	; 0x60
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f953 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 80048c4:	e01c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	461a      	mov	r2, r3
 80048d4:	f000 f8ea 	bl	8004aac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2140      	movs	r1, #64	; 0x40
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f943 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 80048e4:	e00c      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4619      	mov	r1, r3
 80048f0:	4610      	mov	r0, r2
 80048f2:	f000 f93a 	bl	8004b6a <TIM_ITRx_SetConfig>
      break;
 80048f6:	e003      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
      break;
 80048fc:	e000      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004910:	7bfb      	ldrb	r3, [r7, #15]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a40      	ldr	r2, [pc, #256]	; (8004a80 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d013      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498a:	d00f      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3d      	ldr	r2, [pc, #244]	; (8004a84 <TIM_Base_SetConfig+0x118>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00b      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3c      	ldr	r2, [pc, #240]	; (8004a88 <TIM_Base_SetConfig+0x11c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d007      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a3b      	ldr	r2, [pc, #236]	; (8004a8c <TIM_Base_SetConfig+0x120>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d003      	beq.n	80049ac <TIM_Base_SetConfig+0x40>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a3a      	ldr	r2, [pc, #232]	; (8004a90 <TIM_Base_SetConfig+0x124>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d108      	bne.n	80049be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2f      	ldr	r2, [pc, #188]	; (8004a80 <TIM_Base_SetConfig+0x114>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d02b      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049cc:	d027      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2c      	ldr	r2, [pc, #176]	; (8004a84 <TIM_Base_SetConfig+0x118>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d023      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a2b      	ldr	r2, [pc, #172]	; (8004a88 <TIM_Base_SetConfig+0x11c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01f      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <TIM_Base_SetConfig+0x120>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01b      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <TIM_Base_SetConfig+0x124>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d017      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <TIM_Base_SetConfig+0x128>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <TIM_Base_SetConfig+0x12c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00f      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a26      	ldr	r2, [pc, #152]	; (8004a9c <TIM_Base_SetConfig+0x130>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a25      	ldr	r2, [pc, #148]	; (8004aa0 <TIM_Base_SetConfig+0x134>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a24      	ldr	r2, [pc, #144]	; (8004aa4 <TIM_Base_SetConfig+0x138>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a23      	ldr	r2, [pc, #140]	; (8004aa8 <TIM_Base_SetConfig+0x13c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <TIM_Base_SetConfig+0x114>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_Base_SetConfig+0xf8>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a0c      	ldr	r2, [pc, #48]	; (8004a90 <TIM_Base_SetConfig+0x124>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d103      	bne.n	8004a6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	615a      	str	r2, [r3, #20]
}
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40010400 	.word	0x40010400
 8004a94:	40014000 	.word	0x40014000
 8004a98:	40014400 	.word	0x40014400
 8004a9c:	40014800 	.word	0x40014800
 8004aa0:	40001800 	.word	0x40001800
 8004aa4:	40001c00 	.word	0x40001c00
 8004aa8:	40002000 	.word	0x40002000

08004aac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0201 	bic.w	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f023 030a 	bic.w	r3, r3, #10
 8004ae8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	621a      	str	r2, [r3, #32]
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b087      	sub	sp, #28
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	f023 0210 	bic.w	r2, r3, #16
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	031b      	lsls	r3, r3, #12
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f043 0307 	orr.w	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	609a      	str	r2, [r3, #8]
}
 8004b94:	bf00      	nop
 8004b96:	3714      	adds	r7, #20
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	021a      	lsls	r2, r3, #8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	609a      	str	r2, [r3, #8]
}
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d101      	bne.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e05a      	b.n	8004cae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a21      	ldr	r2, [pc, #132]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d01d      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a18      	ldr	r2, [pc, #96]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10c      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
 8004cc8:	40000c00 	.word	0x40000c00
 8004ccc:	40010400 	.word	0x40010400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40001800 	.word	0x40001800

08004cd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <invSqrt>:
  * @author         Guo_Hui_Lin
  * @param[in]      输入
  * @retval         输入值开方的倒数
  */
float invSqrt(float num)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	ed87 0a01 	vstr	s0, [r7, #4]
    float halfnum = 0.5f * num;
 8004d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d16:	edc7 7a05 	vstr	s15, [r7, #20]
    float y = num;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	613b      	str	r3, [r7, #16]
    long i = *(long *)&y;
 8004d1e:	f107 0310 	add.w	r3, r7, #16
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	60fb      	str	r3, [r7, #12]
    i = 0x5f3759df - (i >> 1);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	105a      	asrs	r2, r3, #1
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <invSqrt+0x74>)
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
    y = *(float *)&i;
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	613b      	str	r3, [r7, #16]
    y = y * (1.5f - (halfnum * y * y));
 8004d38:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d54:	edd7 7a04 	vldr	s15, [r7, #16]
 8004d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5c:	edc7 7a04 	vstr	s15, [r7, #16]
    return y;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	ee07 3a90 	vmov	s15, r3
}
 8004d66:	eeb0 0a67 	vmov.f32	s0, s15
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	5f3759df 	.word	0x5f3759df

08004d78 <BMI088_Acc_WriteReg>:
#define SPI_GYRO_ENABLE() 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET)
#define SPI_GYRO_DISABLE() 	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET)

/*--------BMI088基础读写函数--------*/
void BMI088_Acc_WriteReg(uint8_t addr, uint8_t data)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	460a      	mov	r2, r1
 8004d82:	71fb      	strb	r3, [r7, #7]
 8004d84:	4613      	mov	r3, r2
 8004d86:	71bb      	strb	r3, [r7, #6]
	SPI_ACC_ENABLE();
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2110      	movs	r1, #16
 8004d8c:	4811      	ldr	r0, [pc, #68]	; (8004dd4 <BMI088_Acc_WriteReg+0x5c>)
 8004d8e:	f7fd f93d 	bl	800200c <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr & BMI088_SPI_WRITE_CODE);
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8004d9c:	f107 010f 	add.w	r1, r7, #15
 8004da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004da4:	2201      	movs	r2, #1
 8004da6:	480c      	ldr	r0, [pc, #48]	; (8004dd8 <BMI088_Acc_WriteReg+0x60>)
 8004da8:	f7fe fe09 	bl	80039be <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004dac:	1db9      	adds	r1, r7, #6
 8004dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004db2:	2201      	movs	r2, #1
 8004db4:	4808      	ldr	r0, [pc, #32]	; (8004dd8 <BMI088_Acc_WriteReg+0x60>)
 8004db6:	f7fe fe02 	bl	80039be <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_Delay(1);
 8004dba:	2001      	movs	r0, #1
 8004dbc:	f7fc fe3c 	bl	8001a38 <HAL_Delay>
	SPI_ACC_DISABLE();
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	2110      	movs	r1, #16
 8004dc4:	4803      	ldr	r0, [pc, #12]	; (8004dd4 <BMI088_Acc_WriteReg+0x5c>)
 8004dc6:	f7fd f921 	bl	800200c <HAL_GPIO_WritePin>
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40020000 	.word	0x40020000
 8004dd8:	20000164 	.word	0x20000164

08004ddc <BMI088_Gyro_WriteReg>:

void BMI088_Gyro_WriteReg(uint8_t addr, uint8_t data)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	460a      	mov	r2, r1
 8004de6:	71fb      	strb	r3, [r7, #7]
 8004de8:	4613      	mov	r3, r2
 8004dea:	71bb      	strb	r3, [r7, #6]
	SPI_GYRO_ENABLE();
 8004dec:	2200      	movs	r2, #0
 8004dee:	2101      	movs	r1, #1
 8004df0:	480f      	ldr	r0, [pc, #60]	; (8004e30 <BMI088_Gyro_WriteReg+0x54>)
 8004df2:	f7fd f90b 	bl	800200c <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr & BMI088_SPI_WRITE_CODE);
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8004e00:	f107 010f 	add.w	r1, r7, #15
 8004e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e08:	2201      	movs	r2, #1
 8004e0a:	480a      	ldr	r0, [pc, #40]	; (8004e34 <BMI088_Gyro_WriteReg+0x58>)
 8004e0c:	f7fe fdd7 	bl	80039be <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8004e10:	1db9      	adds	r1, r7, #6
 8004e12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e16:	2201      	movs	r2, #1
 8004e18:	4806      	ldr	r0, [pc, #24]	; (8004e34 <BMI088_Gyro_WriteReg+0x58>)
 8004e1a:	f7fe fdd0 	bl	80039be <HAL_SPI_Transmit>

	SPI_GYRO_DISABLE();
 8004e1e:	2201      	movs	r2, #1
 8004e20:	2101      	movs	r1, #1
 8004e22:	4803      	ldr	r0, [pc, #12]	; (8004e30 <BMI088_Gyro_WriteReg+0x54>)
 8004e24:	f7fd f8f2 	bl	800200c <HAL_GPIO_WritePin>
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40020400 	.word	0x40020400
 8004e34:	20000164 	.word	0x20000164

08004e38 <BMI088_Acc_ReadReg>:

void BMI088_Acc_ReadReg(uint8_t addr, uint8_t *pdata, uint8_t len)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
 8004e44:	4613      	mov	r3, r2
 8004e46:	71bb      	strb	r3, [r7, #6]
	SPI_ACC_ENABLE();
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2110      	movs	r1, #16
 8004e4c:	4814      	ldr	r0, [pc, #80]	; (8004ea0 <BMI088_Acc_ReadReg+0x68>)
 8004e4e:	f7fd f8dd 	bl	800200c <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr | BMI088_SPI_READ_CODE);
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8004e5c:	f107 010f 	add.w	r1, r7, #15
 8004e60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e64:	2201      	movs	r2, #1
 8004e66:	480f      	ldr	r0, [pc, #60]	; (8004ea4 <BMI088_Acc_ReadReg+0x6c>)
 8004e68:	f7fe fda9 	bl	80039be <HAL_SPI_Transmit>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_TX);
	HAL_SPI_Receive(&hspi1, &pTxData, 1, 1000);
 8004e6c:	f107 010f 	add.w	r1, r7, #15
 8004e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e74:	2201      	movs	r2, #1
 8004e76:	480b      	ldr	r0, [pc, #44]	; (8004ea4 <BMI088_Acc_ReadReg+0x6c>)
 8004e78:	f7fe fedd 	bl	8003c36 <HAL_SPI_Receive>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_RX);
	HAL_SPI_Receive(&hspi1, pdata, len, 0XFFFF);
 8004e7c:	79bb      	ldrb	r3, [r7, #6]
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	4807      	ldr	r0, [pc, #28]	; (8004ea4 <BMI088_Acc_ReadReg+0x6c>)
 8004e88:	f7fe fed5 	bl	8003c36 <HAL_SPI_Receive>
//	while (HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_BUSY_RX);

	SPI_ACC_DISABLE();
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	2110      	movs	r1, #16
 8004e90:	4803      	ldr	r0, [pc, #12]	; (8004ea0 <BMI088_Acc_ReadReg+0x68>)
 8004e92:	f7fd f8bb 	bl	800200c <HAL_GPIO_WritePin>

}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40020000 	.word	0x40020000
 8004ea4:	20000164 	.word	0x20000164

08004ea8 <BMI088_Gyro_ReadReg>:

void BMI088_Gyro_ReadReg(uint8_t addr, uint8_t *pdata, uint8_t len)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	6039      	str	r1, [r7, #0]
 8004eb2:	71fb      	strb	r3, [r7, #7]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71bb      	strb	r3, [r7, #6]
	SPI_GYRO_ENABLE();
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4810      	ldr	r0, [pc, #64]	; (8004f00 <BMI088_Gyro_ReadReg+0x58>)
 8004ebe:	f7fd f8a5 	bl	800200c <HAL_GPIO_WritePin>

	uint8_t pTxData = (addr | BMI088_SPI_READ_CODE);
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&hspi1, &pTxData, 1, 1000);
 8004ecc:	f107 010f 	add.w	r1, r7, #15
 8004ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	480b      	ldr	r0, [pc, #44]	; (8004f04 <BMI088_Gyro_ReadReg+0x5c>)
 8004ed8:	f7fe fd71 	bl	80039be <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, pdata, len, 1000);
 8004edc:	79bb      	ldrb	r3, [r7, #6]
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ee4:	6839      	ldr	r1, [r7, #0]
 8004ee6:	4807      	ldr	r0, [pc, #28]	; (8004f04 <BMI088_Gyro_ReadReg+0x5c>)
 8004ee8:	f7fe fea5 	bl	8003c36 <HAL_SPI_Receive>

	SPI_GYRO_DISABLE();
 8004eec:	2201      	movs	r2, #1
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4803      	ldr	r0, [pc, #12]	; (8004f00 <BMI088_Gyro_ReadReg+0x58>)
 8004ef2:	f7fd f88b 	bl	800200c <HAL_GPIO_WritePin>
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40020400 	.word	0x40020400
 8004f04:	20000164 	.word	0x20000164

08004f08 <BMI088_Acc_ReadID>:
/*--------BMI088数据读取函数--------*/
uint8_t BMI088_Acc_ReadID(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
	uint8_t ID;
	BMI088_Acc_ReadReg(BMI088_ACC_CHIP_ID, &ID, 1);
 8004f0e:	1dfb      	adds	r3, r7, #7
 8004f10:	2201      	movs	r2, #1
 8004f12:	4619      	mov	r1, r3
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7ff ff8f 	bl	8004e38 <BMI088_Acc_ReadReg>

	return ID;
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <BMI088_Gyro_ReadID>:

uint8_t BMI088_Gyro_ReadID(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
	uint8_t ID;
	BMI088_Gyro_ReadReg(BMI088_GYRO_CHIP_ID, &ID, 1);
 8004f2a:	1dfb      	adds	r3, r7, #7
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	4619      	mov	r1, r3
 8004f30:	2000      	movs	r0, #0
 8004f32:	f7ff ffb9 	bl	8004ea8 <BMI088_Gyro_ReadReg>

	return ID;
 8004f36:	79fb      	ldrb	r3, [r7, #7]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <BMI088_Get_Temperature>:

float BMI088_Get_Temperature(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
	uint8_t buff[2];
	uint16_t temp_uint11;
	int16_t temp_int11;

	BMI088_Acc_ReadReg(BMI088_TEMP_M, buff, 2);
 8004f46:	463b      	mov	r3, r7
 8004f48:	2202      	movs	r2, #2
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	2022      	movs	r0, #34	; 0x22
 8004f4e:	f7ff ff73 	bl	8004e38 <BMI088_Acc_ReadReg>
	temp_uint11 = (buff[0] << 3) + (buff[1] >> 5);
 8004f52:	783b      	ldrb	r3, [r7, #0]
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	787b      	ldrb	r3, [r7, #1]
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4413      	add	r3, r2
 8004f64:	80bb      	strh	r3, [r7, #4]
	if (temp_uint11 > 1023)
 8004f66:	88bb      	ldrh	r3, [r7, #4]
 8004f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6c:	d305      	bcc.n	8004f7a <BMI088_Get_Temperature+0x3a>
	{
		temp_int11 = temp_uint11 - 2048;
 8004f6e:	88bb      	ldrh	r3, [r7, #4]
 8004f70:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	80fb      	strh	r3, [r7, #6]
 8004f78:	e001      	b.n	8004f7e <BMI088_Get_Temperature+0x3e>
	}
	else
	{
		temp_int11 = temp_uint11;
 8004f7a:	88bb      	ldrh	r3, [r7, #4]
 8004f7c:	80fb      	strh	r3, [r7, #6]
	}

	return (temp_int11 * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET);
 8004f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f8a:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8004f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f92:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8004f96:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8004f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <BMI088_Getdata_Acc_raw>:
//raw
void BMI088_Getdata_Acc_raw(int16_t *accdata)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	BMI088_Acc_ReadReg(BMI088_ACCEL_XOUT_L, buff, 6);
 8004fac:	f107 0308 	add.w	r3, r7, #8
 8004fb0:	2206      	movs	r2, #6
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	2012      	movs	r0, #18
 8004fb6:	f7ff ff3f 	bl	8004e38 <BMI088_Acc_ReadReg>
	accdata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 8004fba:	7a7b      	ldrb	r3, [r7, #9]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	b21a      	sxth	r2, r3
 8004fc0:	7a3b      	ldrb	r3, [r7, #8]
 8004fc2:	b21b      	sxth	r3, r3
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	b21a      	sxth	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	801a      	strh	r2, [r3, #0]
	accdata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 8004fcc:	7afb      	ldrb	r3, [r7, #11]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	b219      	sxth	r1, r3
 8004fd2:	7abb      	ldrb	r3, [r7, #10]
 8004fd4:	b21a      	sxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3302      	adds	r3, #2
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	b212      	sxth	r2, r2
 8004fde:	801a      	strh	r2, [r3, #0]
	accdata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 8004fe0:	7b7b      	ldrb	r3, [r7, #13]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	b219      	sxth	r1, r3
 8004fe6:	7b3b      	ldrb	r3, [r7, #12]
 8004fe8:	b21a      	sxth	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	3304      	adds	r3, #4
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	b212      	sxth	r2, r2
 8004ff2:	801a      	strh	r2, [r3, #0]
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <BMI088_Getdata_Gyro_raw>:
//rad / s
void BMI088_Getdata_Gyro_raw(int16_t *gyrodata)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	BMI088_Gyro_ReadReg(BMI088_GYRO_X_L, buff, 6);
 8005004:	f107 0308 	add.w	r3, r7, #8
 8005008:	2206      	movs	r2, #6
 800500a:	4619      	mov	r1, r3
 800500c:	2002      	movs	r0, #2
 800500e:	f7ff ff4b 	bl	8004ea8 <BMI088_Gyro_ReadReg>
	gyrodata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 8005012:	7a7b      	ldrb	r3, [r7, #9]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	b21a      	sxth	r2, r3
 8005018:	7a3b      	ldrb	r3, [r7, #8]
 800501a:	b21b      	sxth	r3, r3
 800501c:	4313      	orrs	r3, r2
 800501e:	b21a      	sxth	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	801a      	strh	r2, [r3, #0]
	gyrodata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 8005024:	7afb      	ldrb	r3, [r7, #11]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	b219      	sxth	r1, r3
 800502a:	7abb      	ldrb	r3, [r7, #10]
 800502c:	b21a      	sxth	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3302      	adds	r3, #2
 8005032:	430a      	orrs	r2, r1
 8005034:	b212      	sxth	r2, r2
 8005036:	801a      	strh	r2, [r3, #0]
	gyrodata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 8005038:	7b7b      	ldrb	r3, [r7, #13]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	b219      	sxth	r1, r3
 800503e:	7b3b      	ldrb	r3, [r7, #12]
 8005040:	b21a      	sxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3304      	adds	r3, #4
 8005046:	430a      	orrs	r2, r1
 8005048:	b212      	sxth	r2, r2
 800504a:	801a      	strh	r2, [r3, #0]
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <BMI088_Getdata_Acc>:
//m_2/s
void BMI088_Getdata_Acc(float *accdata)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	int16_t tempbuff = 0;
 800505c:	2300      	movs	r3, #0
 800505e:	81fb      	strh	r3, [r7, #14]
	BMI088_Acc_ReadReg(BMI088_ACCEL_XOUT_L, buff, 6);
 8005060:	f107 0308 	add.w	r3, r7, #8
 8005064:	2206      	movs	r2, #6
 8005066:	4619      	mov	r1, r3
 8005068:	2012      	movs	r0, #18
 800506a:	f7ff fee5 	bl	8004e38 <BMI088_Acc_ReadReg>
	tempbuff = (int16_t)( (buff[1] << 8) | buff[0] );
 800506e:	7a7b      	ldrb	r3, [r7, #9]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	b21a      	sxth	r2, r3
 8005074:	7a3b      	ldrb	r3, [r7, #8]
 8005076:	b21b      	sxth	r3, r3
 8005078:	4313      	orrs	r3, r2
 800507a:	81fb      	strh	r3, [r7, #14]
	accdata[0] = tempbuff * BMI088_ACCEL_3G_SEN;
 800507c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005080:	ee07 3a90 	vmov	s15, r3
 8005084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005088:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80050f4 <BMI088_Getdata_Acc+0xa0>
 800508c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[3] << 8) | buff[2] );
 8005096:	7afb      	ldrb	r3, [r7, #11]
 8005098:	021b      	lsls	r3, r3, #8
 800509a:	b21a      	sxth	r2, r3
 800509c:	7abb      	ldrb	r3, [r7, #10]
 800509e:	b21b      	sxth	r3, r3
 80050a0:	4313      	orrs	r3, r2
 80050a2:	81fb      	strh	r3, [r7, #14]
	accdata[1] = tempbuff * BMI088_ACCEL_3G_SEN;
 80050a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050a8:	ee07 3a90 	vmov	s15, r3
 80050ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
 80050b4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80050f4 <BMI088_Getdata_Acc+0xa0>
 80050b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050bc:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[5] << 8) | buff[4] );
 80050c0:	7b7b      	ldrb	r3, [r7, #13]
 80050c2:	021b      	lsls	r3, r3, #8
 80050c4:	b21a      	sxth	r2, r3
 80050c6:	7b3b      	ldrb	r3, [r7, #12]
 80050c8:	b21b      	sxth	r3, r3
 80050ca:	4313      	orrs	r3, r2
 80050cc:	81fb      	strh	r3, [r7, #14]
	accdata[2] = tempbuff * BMI088_ACCEL_3G_SEN;
 80050ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3308      	adds	r3, #8
 80050de:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80050f4 <BMI088_Getdata_Acc+0xa0>
 80050e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050e6:	edc3 7a00 	vstr	s15, [r3]
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	3a6b41e7 	.word	0x3a6b41e7

080050f8 <BMI088_Getdata_Gyro>:
//rad / s
void BMI088_Getdata_Gyro(float *gyrodata)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	int16_t tempbuff = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	81fb      	strh	r3, [r7, #14]
	BMI088_Gyro_ReadReg(BMI088_GYRO_X_L, buff, 6);
 8005104:	f107 0308 	add.w	r3, r7, #8
 8005108:	2206      	movs	r2, #6
 800510a:	4619      	mov	r1, r3
 800510c:	2002      	movs	r0, #2
 800510e:	f7ff fecb 	bl	8004ea8 <BMI088_Gyro_ReadReg>
	tempbuff = (int16_t)( (buff[1] << 8) | buff[0] );
 8005112:	7a7b      	ldrb	r3, [r7, #9]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	b21a      	sxth	r2, r3
 8005118:	7a3b      	ldrb	r3, [r7, #8]
 800511a:	b21b      	sxth	r3, r3
 800511c:	4313      	orrs	r3, r2
 800511e:	81fb      	strh	r3, [r7, #14]
	gyrodata[0] = tempbuff * BMI088_GYRO_2000_SEN;
 8005120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800512c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005198 <BMI088_Getdata_Gyro+0xa0>
 8005130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[3] << 8) | buff[2] );
 800513a:	7afb      	ldrb	r3, [r7, #11]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	b21a      	sxth	r2, r3
 8005140:	7abb      	ldrb	r3, [r7, #10]
 8005142:	b21b      	sxth	r3, r3
 8005144:	4313      	orrs	r3, r2
 8005146:	81fb      	strh	r3, [r7, #14]
	gyrodata[1] = tempbuff * BMI088_GYRO_2000_SEN;
 8005148:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005198 <BMI088_Getdata_Gyro+0xa0>
 800515c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005160:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[5] << 8) | buff[4] );
 8005164:	7b7b      	ldrb	r3, [r7, #13]
 8005166:	021b      	lsls	r3, r3, #8
 8005168:	b21a      	sxth	r2, r3
 800516a:	7b3b      	ldrb	r3, [r7, #12]
 800516c:	b21b      	sxth	r3, r3
 800516e:	4313      	orrs	r3, r2
 8005170:	81fb      	strh	r3, [r7, #14]
	gyrodata[2] = tempbuff * BMI088_GYRO_2000_SEN;
 8005172:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3308      	adds	r3, #8
 8005182:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005198 <BMI088_Getdata_Gyro+0xa0>
 8005186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800518a:	edc3 7a00 	vstr	s15, [r3]
}
 800518e:	bf00      	nop
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	3a8ba058 	.word	0x3a8ba058

0800519c <BMI088_Acc_Init>:
/*--------BMI088初始化函数--------*/
IMU_ERROR_Typedef BMI088_Acc_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t ID;
	uint8_t BMI088_Acc_Init_Data[6][2] = {
 80051a2:	4a21      	ldr	r2, [pc, #132]	; (8005228 <BMI088_Acc_Init+0x8c>)
 80051a4:	463b      	mov	r3, r7
 80051a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80051a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			{BMI088_ACC_PWR_CONF, BMI088_ACC_PWR_ACTIVE_MODE},//加速度正常工作模式
			{BMI088_ACC_RANGE, BMI088_ACC_RANGE_3G},//设置范围为+-3G
			{BMI088_ACC_CONF, BMI088_ACC_NORMAL | BMI088_ACC_800_HZ | BMI088_ACC_CONF_MUST_Set},//设置采样， 输出频率1600HZ
			{BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_OFF},
	};
    ID = BMI088_Acc_ReadID();
 80051ac:	f7ff feac 	bl	8004f08 <BMI088_Acc_ReadID>
 80051b0:	4603      	mov	r3, r0
 80051b2:	73bb      	strb	r3, [r7, #14]
    if (ID != BMI088_ACC_CHIP_ID_VALUE)
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	2b1e      	cmp	r3, #30
 80051b8:	d006      	beq.n	80051c8 <BMI088_Acc_Init+0x2c>
    {
    	HAL_Delay(100);
 80051ba:	2064      	movs	r0, #100	; 0x64
 80051bc:	f7fc fc3c 	bl	8001a38 <HAL_Delay>
    	ID = BMI088_Acc_ReadID();
 80051c0:	f7ff fea2 	bl	8004f08 <BMI088_Acc_ReadID>
 80051c4:	4603      	mov	r3, r0
 80051c6:	73bb      	strb	r3, [r7, #14]
    }

    if (ID == BMI088_ACC_CHIP_ID_VALUE)
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	2b1e      	cmp	r3, #30
 80051cc:	d126      	bne.n	800521c <BMI088_Acc_Init+0x80>
    {
    	BMI088_Acc_WriteReg(BMI088_Acc_Init_Data[0][0], BMI088_Acc_Init_Data[0][1]);
 80051ce:	783b      	ldrb	r3, [r7, #0]
 80051d0:	787a      	ldrb	r2, [r7, #1]
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fdcf 	bl	8004d78 <BMI088_Acc_WriteReg>
    	HAL_Delay(50);
 80051da:	2032      	movs	r0, #50	; 0x32
 80051dc:	f7fc fc2c 	bl	8001a38 <HAL_Delay>


    	for(i = 1; i < 5; i++)
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
 80051e4:	e015      	b.n	8005212 <BMI088_Acc_Init+0x76>
    	{
    		BMI088_Acc_WriteReg(BMI088_Acc_Init_Data[i][0], BMI088_Acc_Init_Data[i][1]);
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	3310      	adds	r3, #16
 80051ec:	443b      	add	r3, r7
 80051ee:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	3310      	adds	r3, #16
 80051f8:	443b      	add	r3, r7
 80051fa:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f7ff fdb9 	bl	8004d78 <BMI088_Acc_WriteReg>
    		HAL_Delay(5);
 8005206:	2005      	movs	r0, #5
 8005208:	f7fc fc16 	bl	8001a38 <HAL_Delay>
    	for(i = 1; i < 5; i++)
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	3301      	adds	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d9e6      	bls.n	80051e6 <BMI088_Acc_Init+0x4a>
    	}


    	return IMU_NO_ERROR;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <BMI088_Acc_Init+0x82>
    }
    else
    {
    	return IMU_ACC_ERROR;
 800521c:	2301      	movs	r3, #1
    }

}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	080093bc 	.word	0x080093bc

0800522c <BMI088_Gyro_Init>:

IMU_ERROR_Typedef BMI088_Gyro_Init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t ID;
	uint8_t BMI088_Gyro_Init_Data[4][2] = {
 8005232:	4a21      	ldr	r2, [pc, #132]	; (80052b8 <BMI088_Gyro_Init+0x8c>)
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800523a:	e883 0003 	stmia.w	r3, {r0, r1}
			{BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE},//软件复位，清空所用寄存器
			{BMI088_GYRO_LPM1, BMI088_GYRO_NORMAL_MODE},//陀螺仪正常工作模式
			{BMI088_GYRO_RANGE, BMI088_GYRO_2000},//设置范围为+-2000°/s
			{BMI088_GYRO_BANDWIDTH, BMI088_GYRO_2000_532_HZ},//2000Hz输出频率，532Hz滤波器带宽
	};
    ID = BMI088_Gyro_ReadID();
 800523e:	f7ff fe71 	bl	8004f24 <BMI088_Gyro_ReadID>
 8005242:	4603      	mov	r3, r0
 8005244:	73bb      	strb	r3, [r7, #14]
    if (ID != BMI088_GYRO_CHIP_ID_VALUE)
 8005246:	7bbb      	ldrb	r3, [r7, #14]
 8005248:	2b0f      	cmp	r3, #15
 800524a:	d006      	beq.n	800525a <BMI088_Gyro_Init+0x2e>
    {
    	HAL_Delay(100);
 800524c:	2064      	movs	r0, #100	; 0x64
 800524e:	f7fc fbf3 	bl	8001a38 <HAL_Delay>
    	ID = BMI088_Gyro_ReadID();
 8005252:	f7ff fe67 	bl	8004f24 <BMI088_Gyro_ReadID>
 8005256:	4603      	mov	r3, r0
 8005258:	73bb      	strb	r3, [r7, #14]
    }

    if (ID == BMI088_GYRO_CHIP_ID_VALUE)
 800525a:	7bbb      	ldrb	r3, [r7, #14]
 800525c:	2b0f      	cmp	r3, #15
 800525e:	d126      	bne.n	80052ae <BMI088_Gyro_Init+0x82>
    {
    	BMI088_Gyro_WriteReg(BMI088_Gyro_Init_Data[0][0], BMI088_Gyro_Init_Data[0][1]);
 8005260:	793b      	ldrb	r3, [r7, #4]
 8005262:	797a      	ldrb	r2, [r7, #5]
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fdb8 	bl	8004ddc <BMI088_Gyro_WriteReg>
    	HAL_Delay(50);
 800526c:	2032      	movs	r0, #50	; 0x32
 800526e:	f7fc fbe3 	bl	8001a38 <HAL_Delay>
    	for(i = 1; i < 4; i++)
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e015      	b.n	80052a4 <BMI088_Gyro_Init+0x78>
    	{
    		BMI088_Gyro_WriteReg(BMI088_Gyro_Init_Data[i][0], BMI088_Gyro_Init_Data[i][1]);
 8005278:	7bfb      	ldrb	r3, [r7, #15]
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	3310      	adds	r3, #16
 800527e:	443b      	add	r3, r7
 8005280:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	3310      	adds	r3, #16
 800528a:	443b      	add	r3, r7
 800528c:	f813 3c0b 	ldrb.w	r3, [r3, #-11]
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f7ff fda2 	bl	8004ddc <BMI088_Gyro_WriteReg>
    		HAL_Delay(5);
 8005298:	2005      	movs	r0, #5
 800529a:	f7fc fbcd 	bl	8001a38 <HAL_Delay>
    	for(i = 1; i < 4; i++)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	3301      	adds	r3, #1
 80052a2:	73fb      	strb	r3, [r7, #15]
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d9e6      	bls.n	8005278 <BMI088_Gyro_Init+0x4c>
    	}

    	return IMU_NO_ERROR;
 80052aa:	2300      	movs	r3, #0
 80052ac:	e000      	b.n	80052b0 <BMI088_Gyro_Init+0x84>
    }
    else
    {
    	return IMU_GYRO_ERROR;
 80052ae:	2302      	movs	r3, #2
    }
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	080093c8 	.word	0x080093c8

080052bc <BMI088_Init>:



IMU_ERROR_Typedef BMI088_Init(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
	uint8_t bmi088_error = IMU_NO_ERROR;
 80052c2:	2300      	movs	r3, #0
 80052c4:	71fb      	strb	r3, [r7, #7]
	bmi088_error |= BMI088_Gyro_Init();
 80052c6:	f7ff ffb1 	bl	800522c <BMI088_Gyro_Init>
 80052ca:	4603      	mov	r3, r0
 80052cc:	461a      	mov	r2, r3
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	71fb      	strb	r3, [r7, #7]
	bmi088_error |= BMI088_Acc_Init();
 80052d4:	f7ff ff62 	bl	800519c <BMI088_Acc_Init>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	4313      	orrs	r3, r2
 80052e0:	71fb      	strb	r3, [r7, #7]
	return bmi088_error;
 80052e2:	79fb      	ldrb	r3, [r7, #7]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <IMU_Init>:
static void Get_Gyro_StaticError(void);
static void IMU_GetInit_Angle(void);
static void Init_Quaternions(void);
static void IMU_GetData(void);
IMU_ERROR_Typedef IMU_Init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
	IMU_ERROR_Typedef imu_error = IMU_NO_ERROR;
 80052f2:	2300      	movs	r3, #0
 80052f4:	71fb      	strb	r3, [r7, #7]
	imu_error |= BMI088_Init();
 80052f6:	f7ff ffe1 	bl	80052bc <BMI088_Init>
 80052fa:	4603      	mov	r3, r0
 80052fc:	461a      	mov	r2, r3
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	4313      	orrs	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
	imu_error |= IST8310_Init();
 8005304:	f001 fa0a 	bl	800671c <IST8310_Init>
 8005308:	4603      	mov	r3, r0
 800530a:	461a      	mov	r2, r3
 800530c:	79fb      	ldrb	r3, [r7, #7]
 800530e:	4313      	orrs	r3, r2
 8005310:	71fb      	strb	r3, [r7, #7]
	Get_Gyro_StaticError();
 8005312:	f000 f807 	bl	8005324 <Get_Gyro_StaticError>
	Init_Quaternions();
 8005316:	f000 f9cd 	bl	80056b4 <Init_Quaternions>

	return imu_error;
 800531a:	79fb      	ldrb	r3, [r7, #7]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <Get_Gyro_StaticError>:

static void Get_Gyro_StaticError(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
	const uint16_t SAMPLES_COUNT = 500;
 800532a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800532e:	81bb      	strh	r3, [r7, #12]
	int16_t gyro_error_data[3];
	uint16_t i;
	for (i = 0; i < SAMPLES_COUNT; i++)
 8005330:	2300      	movs	r3, #0
 8005332:	81fb      	strh	r3, [r7, #14]
 8005334:	e030      	b.n	8005398 <Get_Gyro_StaticError+0x74>
	{
		BMI088_Getdata_Gyro_raw(gyro_error_data);
 8005336:	1d3b      	adds	r3, r7, #4
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fe5f 	bl	8004ffc <BMI088_Getdata_Gyro_raw>
		g_imu_struct.gx_offset += gyro_error_data[0];
 800533e:	4b2e      	ldr	r3, [pc, #184]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 8005340:	ed93 7a05 	vldr	s14, [r3, #20]
 8005344:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005354:	4b28      	ldr	r3, [pc, #160]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 8005356:	edc3 7a05 	vstr	s15, [r3, #20]
		g_imu_struct.gy_offset += gyro_error_data[1];
 800535a:	4b27      	ldr	r3, [pc, #156]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 800535c:	ed93 7a06 	vldr	s14, [r3, #24]
 8005360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800536c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005370:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 8005372:	edc3 7a06 	vstr	s15, [r3, #24]
		g_imu_struct.gz_offset += gyro_error_data[2];
 8005376:	4b20      	ldr	r3, [pc, #128]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 8005378:	ed93 7a07 	vldr	s14, [r3, #28]
 800537c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005380:	ee07 3a90 	vmov	s15, r3
 8005384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 800538e:	edc3 7a07 	vstr	s15, [r3, #28]
	for (i = 0; i < SAMPLES_COUNT; i++)
 8005392:	89fb      	ldrh	r3, [r7, #14]
 8005394:	3301      	adds	r3, #1
 8005396:	81fb      	strh	r3, [r7, #14]
 8005398:	89fa      	ldrh	r2, [r7, #14]
 800539a:	89bb      	ldrh	r3, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d3ca      	bcc.n	8005336 <Get_Gyro_StaticError+0x12>
	}
	 g_imu_struct.gx_offset /=  SAMPLES_COUNT;
 80053a0:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 80053a2:	edd3 6a05 	vldr	s13, [r3, #20]
 80053a6:	89bb      	ldrh	r3, [r7, #12]
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 80053b6:	edc3 7a05 	vstr	s15, [r3, #20]
	 g_imu_struct.gy_offset /=  SAMPLES_COUNT;
 80053ba:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 80053bc:	edd3 6a06 	vldr	s13, [r3, #24]
 80053c0:	89bb      	ldrh	r3, [r7, #12]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ce:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 80053d0:	edc3 7a06 	vstr	s15, [r3, #24]
	 g_imu_struct.gz_offset /=  SAMPLES_COUNT;
 80053d4:	4b08      	ldr	r3, [pc, #32]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 80053d6:	edd3 6a07 	vldr	s13, [r3, #28]
 80053da:	89bb      	ldrh	r3, [r7, #12]
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053e8:	4b03      	ldr	r3, [pc, #12]	; (80053f8 <Get_Gyro_StaticError+0xd4>)
 80053ea:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20000010 	.word	0x20000010
 80053fc:	00000000 	.word	0x00000000

08005400 <IMU_GetInit_Angle>:

static void IMU_GetInit_Angle(void)
{
 8005400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005404:	b08a      	sub	sp, #40	; 0x28
 8005406:	af00      	add	r7, sp, #0

	float temp = 0;
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	627b      	str	r3, [r7, #36]	; 0x24

	float roll;
	float pitch;
	float yaw;

	IMU_GetData();
 800540e:	f000 fbc7 	bl	8005ba0 <IMU_GetData>

	float ax = g_imu_struct.ax_raw;
 8005412:	4ba7      	ldr	r3, [pc, #668]	; (80056b0 <IMU_GetInit_Angle+0x2b0>)
 8005414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005418:	ee07 3a90 	vmov	s15, r3
 800541c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005420:	edc7 7a08 	vstr	s15, [r7, #32]
	float ay = g_imu_struct.ay_raw;
 8005424:	4ba2      	ldr	r3, [pc, #648]	; (80056b0 <IMU_GetInit_Angle+0x2b0>)
 8005426:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
	float az = g_imu_struct.az_raw;
 8005436:	4b9e      	ldr	r3, [pc, #632]	; (80056b0 <IMU_GetInit_Angle+0x2b0>)
 8005438:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800543c:	ee07 3a90 	vmov	s15, r3
 8005440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005444:	edc7 7a06 	vstr	s15, [r7, #24]
	float mx = g_imu_struct.mx_raw;
 8005448:	4b99      	ldr	r3, [pc, #612]	; (80056b0 <IMU_GetInit_Angle+0x2b0>)
 800544a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005456:	edc7 7a05 	vstr	s15, [r7, #20]
	float my = g_imu_struct.my_raw;
 800545a:	4b95      	ldr	r3, [pc, #596]	; (80056b0 <IMU_GetInit_Angle+0x2b0>)
 800545c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005468:	edc7 7a04 	vstr	s15, [r7, #16]
	float mz = g_imu_struct.mz_raw;
 800546c:	4b90      	ldr	r3, [pc, #576]	; (80056b0 <IMU_GetInit_Angle+0x2b0>)
 800546e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800547a:	edc7 7a03 	vstr	s15, [r7, #12]

	temp = 1 / invSqrt( pow(ay, 2) + pow(az, 2));
 800547e:	69f8      	ldr	r0, [r7, #28]
 8005480:	f7fb f806 	bl	8000490 <__aeabi_f2d>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	ed9f 1b87 	vldr	d1, [pc, #540]	; 80056a8 <IMU_GetInit_Angle+0x2a8>
 800548c:	ec43 2b10 	vmov	d0, r2, r3
 8005490:	f001 fe22 	bl	80070d8 <pow>
 8005494:	ec55 4b10 	vmov	r4, r5, d0
 8005498:	69b8      	ldr	r0, [r7, #24]
 800549a:	f7fa fff9 	bl	8000490 <__aeabi_f2d>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	ed9f 1b81 	vldr	d1, [pc, #516]	; 80056a8 <IMU_GetInit_Angle+0x2a8>
 80054a6:	ec43 2b10 	vmov	d0, r2, r3
 80054aa:	f001 fe15 	bl	80070d8 <pow>
 80054ae:	ec53 2b10 	vmov	r2, r3, d0
 80054b2:	4620      	mov	r0, r4
 80054b4:	4629      	mov	r1, r5
 80054b6:	f7fa fe8d 	bl	80001d4 <__adddf3>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4610      	mov	r0, r2
 80054c0:	4619      	mov	r1, r3
 80054c2:	f7fb fb15 	bl	8000af0 <__aeabi_d2f>
 80054c6:	4603      	mov	r3, r0
 80054c8:	ee00 3a10 	vmov	s0, r3
 80054cc:	f7ff fc18 	bl	8004d00 <invSqrt>
 80054d0:	eeb0 7a40 	vmov.f32	s14, s0
 80054d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	roll = atan2f(ay, az);
 80054e0:	edd7 0a06 	vldr	s1, [r7, #24]
 80054e4:	ed97 0a07 	vldr	s0, [r7, #28]
 80054e8:	f001 febe 	bl	8007268 <atan2f>
 80054ec:	ed87 0a02 	vstr	s0, [r7, #8]
	pitch = -atan2f(ax, temp);
 80054f0:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80054f4:	ed97 0a08 	vldr	s0, [r7, #32]
 80054f8:	f001 feb6 	bl	8007268 <atan2f>
 80054fc:	eef0 7a40 	vmov.f32	s15, s0
 8005500:	eef1 7a67 	vneg.f32	s15, s15
 8005504:	edc7 7a01 	vstr	s15, [r7, #4]

	mx = mx * cos(roll) + my * sin(roll) * sin(pitch) + mz * sin(roll) * cos(pitch);
 8005508:	6978      	ldr	r0, [r7, #20]
 800550a:	f7fa ffc1 	bl	8000490 <__aeabi_f2d>
 800550e:	4604      	mov	r4, r0
 8005510:	460d      	mov	r5, r1
 8005512:	68b8      	ldr	r0, [r7, #8]
 8005514:	f7fa ffbc 	bl	8000490 <__aeabi_f2d>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	ec43 2b10 	vmov	d0, r2, r3
 8005520:	f001 fd2e 	bl	8006f80 <cos>
 8005524:	ec53 2b10 	vmov	r2, r3, d0
 8005528:	4620      	mov	r0, r4
 800552a:	4629      	mov	r1, r5
 800552c:	f7fb f808 	bl	8000540 <__aeabi_dmul>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4690      	mov	r8, r2
 8005536:	4699      	mov	r9, r3
 8005538:	6938      	ldr	r0, [r7, #16]
 800553a:	f7fa ffa9 	bl	8000490 <__aeabi_f2d>
 800553e:	4604      	mov	r4, r0
 8005540:	460d      	mov	r5, r1
 8005542:	68b8      	ldr	r0, [r7, #8]
 8005544:	f7fa ffa4 	bl	8000490 <__aeabi_f2d>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	ec43 2b10 	vmov	d0, r2, r3
 8005550:	f001 fd6a 	bl	8007028 <sin>
 8005554:	ec53 2b10 	vmov	r2, r3, d0
 8005558:	4620      	mov	r0, r4
 800555a:	4629      	mov	r1, r5
 800555c:	f7fa fff0 	bl	8000540 <__aeabi_dmul>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4614      	mov	r4, r2
 8005566:	461d      	mov	r5, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fa ff91 	bl	8000490 <__aeabi_f2d>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	ec43 2b10 	vmov	d0, r2, r3
 8005576:	f001 fd57 	bl	8007028 <sin>
 800557a:	ec53 2b10 	vmov	r2, r3, d0
 800557e:	4620      	mov	r0, r4
 8005580:	4629      	mov	r1, r5
 8005582:	f7fa ffdd 	bl	8000540 <__aeabi_dmul>
 8005586:	4602      	mov	r2, r0
 8005588:	460b      	mov	r3, r1
 800558a:	4640      	mov	r0, r8
 800558c:	4649      	mov	r1, r9
 800558e:	f7fa fe21 	bl	80001d4 <__adddf3>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4690      	mov	r8, r2
 8005598:	4699      	mov	r9, r3
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f7fa ff78 	bl	8000490 <__aeabi_f2d>
 80055a0:	4604      	mov	r4, r0
 80055a2:	460d      	mov	r5, r1
 80055a4:	68b8      	ldr	r0, [r7, #8]
 80055a6:	f7fa ff73 	bl	8000490 <__aeabi_f2d>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	ec43 2b10 	vmov	d0, r2, r3
 80055b2:	f001 fd39 	bl	8007028 <sin>
 80055b6:	ec53 2b10 	vmov	r2, r3, d0
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	f7fa ffbf 	bl	8000540 <__aeabi_dmul>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4614      	mov	r4, r2
 80055c8:	461d      	mov	r5, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fa ff60 	bl	8000490 <__aeabi_f2d>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	ec43 2b10 	vmov	d0, r2, r3
 80055d8:	f001 fcd2 	bl	8006f80 <cos>
 80055dc:	ec53 2b10 	vmov	r2, r3, d0
 80055e0:	4620      	mov	r0, r4
 80055e2:	4629      	mov	r1, r5
 80055e4:	f7fa ffac 	bl	8000540 <__aeabi_dmul>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4640      	mov	r0, r8
 80055ee:	4649      	mov	r1, r9
 80055f0:	f7fa fdf0 	bl	80001d4 <__adddf3>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4610      	mov	r0, r2
 80055fa:	4619      	mov	r1, r3
 80055fc:	f7fb fa78 	bl	8000af0 <__aeabi_d2f>
 8005600:	4603      	mov	r3, r0
 8005602:	617b      	str	r3, [r7, #20]
	my = my * cos(pitch) - mz * sin(pitch);
 8005604:	6938      	ldr	r0, [r7, #16]
 8005606:	f7fa ff43 	bl	8000490 <__aeabi_f2d>
 800560a:	4604      	mov	r4, r0
 800560c:	460d      	mov	r5, r1
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fa ff3e 	bl	8000490 <__aeabi_f2d>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	ec43 2b10 	vmov	d0, r2, r3
 800561c:	f001 fcb0 	bl	8006f80 <cos>
 8005620:	ec53 2b10 	vmov	r2, r3, d0
 8005624:	4620      	mov	r0, r4
 8005626:	4629      	mov	r1, r5
 8005628:	f7fa ff8a 	bl	8000540 <__aeabi_dmul>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4690      	mov	r8, r2
 8005632:	4699      	mov	r9, r3
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7fa ff2b 	bl	8000490 <__aeabi_f2d>
 800563a:	4604      	mov	r4, r0
 800563c:	460d      	mov	r5, r1
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fa ff26 	bl	8000490 <__aeabi_f2d>
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	ec43 2b10 	vmov	d0, r2, r3
 800564c:	f001 fcec 	bl	8007028 <sin>
 8005650:	ec53 2b10 	vmov	r2, r3, d0
 8005654:	4620      	mov	r0, r4
 8005656:	4629      	mov	r1, r5
 8005658:	f7fa ff72 	bl	8000540 <__aeabi_dmul>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4640      	mov	r0, r8
 8005662:	4649      	mov	r1, r9
 8005664:	f7fa fdb4 	bl	80001d0 <__aeabi_dsub>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4610      	mov	r0, r2
 800566e:	4619      	mov	r1, r3
 8005670:	f7fb fa3e 	bl	8000af0 <__aeabi_d2f>
 8005674:	4603      	mov	r3, r0
 8005676:	613b      	str	r3, [r7, #16]
	yaw = atan2f(my, mx);
 8005678:	edd7 0a05 	vldr	s1, [r7, #20]
 800567c:	ed97 0a04 	vldr	s0, [r7, #16]
 8005680:	f001 fdf2 	bl	8007268 <atan2f>
 8005684:	ed87 0a00 	vstr	s0, [r7]

	g_imu_struct.roll = roll;
 8005688:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <IMU_GetInit_Angle+0x2b0>)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6293      	str	r3, [r2, #40]	; 0x28
    g_imu_struct.pitch = pitch;
 800568e:	4a08      	ldr	r2, [pc, #32]	; (80056b0 <IMU_GetInit_Angle+0x2b0>)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	62d3      	str	r3, [r2, #44]	; 0x2c
    g_imu_struct.yaw = yaw;
 8005694:	4a06      	ldr	r2, [pc, #24]	; (80056b0 <IMU_GetInit_Angle+0x2b0>)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6313      	str	r3, [r2, #48]	; 0x30

}
 800569a:	bf00      	nop
 800569c:	3728      	adds	r7, #40	; 0x28
 800569e:	46bd      	mov	sp, r7
 80056a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056a4:	f3af 8000 	nop.w
 80056a8:	00000000 	.word	0x00000000
 80056ac:	40000000 	.word	0x40000000
 80056b0:	20000010 	.word	0x20000010

080056b4 <Init_Quaternions>:

static void Init_Quaternions(void)
{
 80056b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
	float roll;
	float pitch;
	float yaw;

	IMU_GetInit_Angle();
 80056bc:	f7ff fea0 	bl	8005400 <IMU_GetInit_Angle>

	roll = g_imu_struct.roll;
 80056c0:	4bf5      	ldr	r3, [pc, #980]	; (8005a98 <Init_Quaternions+0x3e4>)
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	60fb      	str	r3, [r7, #12]
	pitch = g_imu_struct.pitch;
 80056c6:	4bf4      	ldr	r3, [pc, #976]	; (8005a98 <Init_Quaternions+0x3e4>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	60bb      	str	r3, [r7, #8]
	yaw = g_imu_struct.yaw;
 80056cc:	4bf2      	ldr	r3, [pc, #968]	; (8005a98 <Init_Quaternions+0x3e4>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d0:	607b      	str	r3, [r7, #4]


	g_imu_struct.quat.q0 = cos(roll / 2)*cos(pitch / 2)*cos(yaw / 2) + sin(roll / 2)*sin(pitch / 2)*sin(yaw / 2);
 80056d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80056d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80056da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80056de:	ee16 0a90 	vmov	r0, s13
 80056e2:	f7fa fed5 	bl	8000490 <__aeabi_f2d>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	ec43 2b10 	vmov	d0, r2, r3
 80056ee:	f001 fc47 	bl	8006f80 <cos>
 80056f2:	ec55 4b10 	vmov	r4, r5, d0
 80056f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80056fa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80056fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005702:	ee16 0a90 	vmov	r0, s13
 8005706:	f7fa fec3 	bl	8000490 <__aeabi_f2d>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	ec43 2b10 	vmov	d0, r2, r3
 8005712:	f001 fc35 	bl	8006f80 <cos>
 8005716:	ec53 2b10 	vmov	r2, r3, d0
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fa ff0f 	bl	8000540 <__aeabi_dmul>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4614      	mov	r4, r2
 8005728:	461d      	mov	r5, r3
 800572a:	edd7 7a01 	vldr	s15, [r7, #4]
 800572e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005732:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005736:	ee16 0a90 	vmov	r0, s13
 800573a:	f7fa fea9 	bl	8000490 <__aeabi_f2d>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	ec43 2b10 	vmov	d0, r2, r3
 8005746:	f001 fc1b 	bl	8006f80 <cos>
 800574a:	ec53 2b10 	vmov	r2, r3, d0
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fa fef5 	bl	8000540 <__aeabi_dmul>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4614      	mov	r4, r2
 800575c:	461d      	mov	r5, r3
 800575e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005762:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800576a:	ee16 0a90 	vmov	r0, s13
 800576e:	f7fa fe8f 	bl	8000490 <__aeabi_f2d>
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	ec43 2b10 	vmov	d0, r2, r3
 800577a:	f001 fc55 	bl	8007028 <sin>
 800577e:	ec59 8b10 	vmov	r8, r9, d0
 8005782:	edd7 7a02 	vldr	s15, [r7, #8]
 8005786:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800578a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800578e:	ee16 0a90 	vmov	r0, s13
 8005792:	f7fa fe7d 	bl	8000490 <__aeabi_f2d>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	ec43 2b10 	vmov	d0, r2, r3
 800579e:	f001 fc43 	bl	8007028 <sin>
 80057a2:	ec53 2b10 	vmov	r2, r3, d0
 80057a6:	4640      	mov	r0, r8
 80057a8:	4649      	mov	r1, r9
 80057aa:	f7fa fec9 	bl	8000540 <__aeabi_dmul>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4690      	mov	r8, r2
 80057b4:	4699      	mov	r9, r3
 80057b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80057ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80057be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80057c2:	ee16 0a90 	vmov	r0, s13
 80057c6:	f7fa fe63 	bl	8000490 <__aeabi_f2d>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	ec43 2b10 	vmov	d0, r2, r3
 80057d2:	f001 fc29 	bl	8007028 <sin>
 80057d6:	ec53 2b10 	vmov	r2, r3, d0
 80057da:	4640      	mov	r0, r8
 80057dc:	4649      	mov	r1, r9
 80057de:	f7fa feaf 	bl	8000540 <__aeabi_dmul>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fa fcf3 	bl	80001d4 <__adddf3>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4610      	mov	r0, r2
 80057f4:	4619      	mov	r1, r3
 80057f6:	f7fb f97b 	bl	8000af0 <__aeabi_d2f>
 80057fa:	4603      	mov	r3, r0
 80057fc:	4aa6      	ldr	r2, [pc, #664]	; (8005a98 <Init_Quaternions+0x3e4>)
 80057fe:	6353      	str	r3, [r2, #52]	; 0x34
	g_imu_struct.quat.q1 = sin(roll / 2)*cos(pitch / 2)*cos(yaw / 2) - cos(roll / 2)*sin(pitch / 2)*sin(yaw / 2);
 8005800:	edd7 7a03 	vldr	s15, [r7, #12]
 8005804:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005808:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800580c:	ee16 0a90 	vmov	r0, s13
 8005810:	f7fa fe3e 	bl	8000490 <__aeabi_f2d>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	ec43 2b10 	vmov	d0, r2, r3
 800581c:	f001 fc04 	bl	8007028 <sin>
 8005820:	ec55 4b10 	vmov	r4, r5, d0
 8005824:	edd7 7a02 	vldr	s15, [r7, #8]
 8005828:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800582c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005830:	ee16 0a90 	vmov	r0, s13
 8005834:	f7fa fe2c 	bl	8000490 <__aeabi_f2d>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	ec43 2b10 	vmov	d0, r2, r3
 8005840:	f001 fb9e 	bl	8006f80 <cos>
 8005844:	ec53 2b10 	vmov	r2, r3, d0
 8005848:	4620      	mov	r0, r4
 800584a:	4629      	mov	r1, r5
 800584c:	f7fa fe78 	bl	8000540 <__aeabi_dmul>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4614      	mov	r4, r2
 8005856:	461d      	mov	r5, r3
 8005858:	edd7 7a01 	vldr	s15, [r7, #4]
 800585c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005860:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005864:	ee16 0a90 	vmov	r0, s13
 8005868:	f7fa fe12 	bl	8000490 <__aeabi_f2d>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	ec43 2b10 	vmov	d0, r2, r3
 8005874:	f001 fb84 	bl	8006f80 <cos>
 8005878:	ec53 2b10 	vmov	r2, r3, d0
 800587c:	4620      	mov	r0, r4
 800587e:	4629      	mov	r1, r5
 8005880:	f7fa fe5e 	bl	8000540 <__aeabi_dmul>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4614      	mov	r4, r2
 800588a:	461d      	mov	r5, r3
 800588c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005890:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005894:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005898:	ee16 0a90 	vmov	r0, s13
 800589c:	f7fa fdf8 	bl	8000490 <__aeabi_f2d>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	ec43 2b10 	vmov	d0, r2, r3
 80058a8:	f001 fb6a 	bl	8006f80 <cos>
 80058ac:	ec59 8b10 	vmov	r8, r9, d0
 80058b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80058b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80058b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80058bc:	ee16 0a90 	vmov	r0, s13
 80058c0:	f7fa fde6 	bl	8000490 <__aeabi_f2d>
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	ec43 2b10 	vmov	d0, r2, r3
 80058cc:	f001 fbac 	bl	8007028 <sin>
 80058d0:	ec53 2b10 	vmov	r2, r3, d0
 80058d4:	4640      	mov	r0, r8
 80058d6:	4649      	mov	r1, r9
 80058d8:	f7fa fe32 	bl	8000540 <__aeabi_dmul>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4690      	mov	r8, r2
 80058e2:	4699      	mov	r9, r3
 80058e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80058e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80058ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80058f0:	ee16 0a90 	vmov	r0, s13
 80058f4:	f7fa fdcc 	bl	8000490 <__aeabi_f2d>
 80058f8:	4602      	mov	r2, r0
 80058fa:	460b      	mov	r3, r1
 80058fc:	ec43 2b10 	vmov	d0, r2, r3
 8005900:	f001 fb92 	bl	8007028 <sin>
 8005904:	ec53 2b10 	vmov	r2, r3, d0
 8005908:	4640      	mov	r0, r8
 800590a:	4649      	mov	r1, r9
 800590c:	f7fa fe18 	bl	8000540 <__aeabi_dmul>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	4620      	mov	r0, r4
 8005916:	4629      	mov	r1, r5
 8005918:	f7fa fc5a 	bl	80001d0 <__aeabi_dsub>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4610      	mov	r0, r2
 8005922:	4619      	mov	r1, r3
 8005924:	f7fb f8e4 	bl	8000af0 <__aeabi_d2f>
 8005928:	4603      	mov	r3, r0
 800592a:	4a5b      	ldr	r2, [pc, #364]	; (8005a98 <Init_Quaternions+0x3e4>)
 800592c:	6393      	str	r3, [r2, #56]	; 0x38
	g_imu_struct.quat.q2 = cos(roll / 2)*sin(pitch / 2)*cos(yaw / 2) + sin(roll / 2)*cos(pitch / 2)*sin(yaw / 2);
 800592e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005932:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005936:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800593a:	ee16 0a90 	vmov	r0, s13
 800593e:	f7fa fda7 	bl	8000490 <__aeabi_f2d>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	ec43 2b10 	vmov	d0, r2, r3
 800594a:	f001 fb19 	bl	8006f80 <cos>
 800594e:	ec55 4b10 	vmov	r4, r5, d0
 8005952:	edd7 7a02 	vldr	s15, [r7, #8]
 8005956:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800595a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800595e:	ee16 0a90 	vmov	r0, s13
 8005962:	f7fa fd95 	bl	8000490 <__aeabi_f2d>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	ec43 2b10 	vmov	d0, r2, r3
 800596e:	f001 fb5b 	bl	8007028 <sin>
 8005972:	ec53 2b10 	vmov	r2, r3, d0
 8005976:	4620      	mov	r0, r4
 8005978:	4629      	mov	r1, r5
 800597a:	f7fa fde1 	bl	8000540 <__aeabi_dmul>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4614      	mov	r4, r2
 8005984:	461d      	mov	r5, r3
 8005986:	edd7 7a01 	vldr	s15, [r7, #4]
 800598a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800598e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005992:	ee16 0a90 	vmov	r0, s13
 8005996:	f7fa fd7b 	bl	8000490 <__aeabi_f2d>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	ec43 2b10 	vmov	d0, r2, r3
 80059a2:	f001 faed 	bl	8006f80 <cos>
 80059a6:	ec53 2b10 	vmov	r2, r3, d0
 80059aa:	4620      	mov	r0, r4
 80059ac:	4629      	mov	r1, r5
 80059ae:	f7fa fdc7 	bl	8000540 <__aeabi_dmul>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4614      	mov	r4, r2
 80059b8:	461d      	mov	r5, r3
 80059ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80059be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80059c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80059c6:	ee16 0a90 	vmov	r0, s13
 80059ca:	f7fa fd61 	bl	8000490 <__aeabi_f2d>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	ec43 2b10 	vmov	d0, r2, r3
 80059d6:	f001 fb27 	bl	8007028 <sin>
 80059da:	ec59 8b10 	vmov	r8, r9, d0
 80059de:	edd7 7a02 	vldr	s15, [r7, #8]
 80059e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80059e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80059ea:	ee16 0a90 	vmov	r0, s13
 80059ee:	f7fa fd4f 	bl	8000490 <__aeabi_f2d>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	ec43 2b10 	vmov	d0, r2, r3
 80059fa:	f001 fac1 	bl	8006f80 <cos>
 80059fe:	ec53 2b10 	vmov	r2, r3, d0
 8005a02:	4640      	mov	r0, r8
 8005a04:	4649      	mov	r1, r9
 8005a06:	f7fa fd9b 	bl	8000540 <__aeabi_dmul>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4690      	mov	r8, r2
 8005a10:	4699      	mov	r9, r3
 8005a12:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a16:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005a1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a1e:	ee16 0a90 	vmov	r0, s13
 8005a22:	f7fa fd35 	bl	8000490 <__aeabi_f2d>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	ec43 2b10 	vmov	d0, r2, r3
 8005a2e:	f001 fafb 	bl	8007028 <sin>
 8005a32:	ec53 2b10 	vmov	r2, r3, d0
 8005a36:	4640      	mov	r0, r8
 8005a38:	4649      	mov	r1, r9
 8005a3a:	f7fa fd81 	bl	8000540 <__aeabi_dmul>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4620      	mov	r0, r4
 8005a44:	4629      	mov	r1, r5
 8005a46:	f7fa fbc5 	bl	80001d4 <__adddf3>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4619      	mov	r1, r3
 8005a52:	f7fb f84d 	bl	8000af0 <__aeabi_d2f>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4a0f      	ldr	r2, [pc, #60]	; (8005a98 <Init_Quaternions+0x3e4>)
 8005a5a:	63d3      	str	r3, [r2, #60]	; 0x3c
	g_imu_struct.quat.q3 = cos(roll / 2)*cos(pitch / 2)*sin(yaw / 2) + sin(roll / 2)*sin(pitch / 2)*cos(yaw / 2);
 8005a5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005a64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a68:	ee16 0a90 	vmov	r0, s13
 8005a6c:	f7fa fd10 	bl	8000490 <__aeabi_f2d>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	ec43 2b10 	vmov	d0, r2, r3
 8005a78:	f001 fa82 	bl	8006f80 <cos>
 8005a7c:	ec55 4b10 	vmov	r4, r5, d0
 8005a80:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a84:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005a88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005a8c:	ee16 0a90 	vmov	r0, s13
 8005a90:	f7fa fcfe 	bl	8000490 <__aeabi_f2d>
 8005a94:	e002      	b.n	8005a9c <Init_Quaternions+0x3e8>
 8005a96:	bf00      	nop
 8005a98:	20000010 	.word	0x20000010
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	ec43 2b10 	vmov	d0, r2, r3
 8005aa4:	f001 fa6c 	bl	8006f80 <cos>
 8005aa8:	ec53 2b10 	vmov	r2, r3, d0
 8005aac:	4620      	mov	r0, r4
 8005aae:	4629      	mov	r1, r5
 8005ab0:	f7fa fd46 	bl	8000540 <__aeabi_dmul>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	461d      	mov	r5, r3
 8005abc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ac0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005ac4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ac8:	ee16 0a90 	vmov	r0, s13
 8005acc:	f7fa fce0 	bl	8000490 <__aeabi_f2d>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	ec43 2b10 	vmov	d0, r2, r3
 8005ad8:	f001 faa6 	bl	8007028 <sin>
 8005adc:	ec53 2b10 	vmov	r2, r3, d0
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	f7fa fd2c 	bl	8000540 <__aeabi_dmul>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4614      	mov	r4, r2
 8005aee:	461d      	mov	r5, r3
 8005af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005af4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005af8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005afc:	ee16 0a90 	vmov	r0, s13
 8005b00:	f7fa fcc6 	bl	8000490 <__aeabi_f2d>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	ec43 2b10 	vmov	d0, r2, r3
 8005b0c:	f001 fa8c 	bl	8007028 <sin>
 8005b10:	ec59 8b10 	vmov	r8, r9, d0
 8005b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b18:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005b1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b20:	ee16 0a90 	vmov	r0, s13
 8005b24:	f7fa fcb4 	bl	8000490 <__aeabi_f2d>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	ec43 2b10 	vmov	d0, r2, r3
 8005b30:	f001 fa7a 	bl	8007028 <sin>
 8005b34:	ec53 2b10 	vmov	r2, r3, d0
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fa fd00 	bl	8000540 <__aeabi_dmul>
 8005b40:	4602      	mov	r2, r0
 8005b42:	460b      	mov	r3, r1
 8005b44:	4690      	mov	r8, r2
 8005b46:	4699      	mov	r9, r3
 8005b48:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b4c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005b50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005b54:	ee16 0a90 	vmov	r0, s13
 8005b58:	f7fa fc9a 	bl	8000490 <__aeabi_f2d>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	ec43 2b10 	vmov	d0, r2, r3
 8005b64:	f001 fa0c 	bl	8006f80 <cos>
 8005b68:	ec53 2b10 	vmov	r2, r3, d0
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	4649      	mov	r1, r9
 8005b70:	f7fa fce6 	bl	8000540 <__aeabi_dmul>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4620      	mov	r0, r4
 8005b7a:	4629      	mov	r1, r5
 8005b7c:	f7fa fb2a 	bl	80001d4 <__adddf3>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4610      	mov	r0, r2
 8005b86:	4619      	mov	r1, r3
 8005b88:	f7fa ffb2 	bl	8000af0 <__aeabi_d2f>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	4a03      	ldr	r2, [pc, #12]	; (8005b9c <Init_Quaternions+0x4e8>)
 8005b90:	6413      	str	r3, [r2, #64]	; 0x40


}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b9c:	20000010 	.word	0x20000010

08005ba0 <IMU_GetData>:
static void IMU_GetData(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
	int16_t accdata[3];
	int16_t gyrodata[3];
	int16_t magdata[3];
	BMI088_Getdata_Acc_raw(accdata);
 8005ba6:	f107 0310 	add.w	r3, r7, #16
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff f9fa 	bl	8004fa4 <BMI088_Getdata_Acc_raw>
	BMI088_Getdata_Gyro_raw(gyrodata);
 8005bb0:	f107 0308 	add.w	r3, r7, #8
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fa21 	bl	8004ffc <BMI088_Getdata_Gyro_raw>
	IST8310_Getdata_Mag_raw(magdata);
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fde1 	bl	8006784 <IST8310_Getdata_Mag_raw>
	g_imu_struct.temperature =  BMI088_Get_Temperature();
 8005bc2:	f7ff f9bd 	bl	8004f40 <BMI088_Get_Temperature>
 8005bc6:	eef0 7a40 	vmov.f32	s15, s0
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <IMU_GetData+0x80>)
 8005bcc:	edc3 7a08 	vstr	s15, [r3, #32]
	g_imu_struct.ax_raw = accdata[0];
 8005bd0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005bd4:	4b12      	ldr	r3, [pc, #72]	; (8005c20 <IMU_GetData+0x80>)
 8005bd6:	801a      	strh	r2, [r3, #0]
	g_imu_struct.ay_raw = accdata[1];
 8005bd8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8005bdc:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <IMU_GetData+0x80>)
 8005bde:	805a      	strh	r2, [r3, #2]
	g_imu_struct.az_raw = accdata[2];
 8005be0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8005be4:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <IMU_GetData+0x80>)
 8005be6:	809a      	strh	r2, [r3, #4]
	g_imu_struct.gx_raw = gyrodata[0];
 8005be8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005bec:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <IMU_GetData+0x80>)
 8005bee:	80da      	strh	r2, [r3, #6]
	g_imu_struct.gy_raw = gyrodata[1];
 8005bf0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <IMU_GetData+0x80>)
 8005bf6:	811a      	strh	r2, [r3, #8]
	g_imu_struct.gz_raw = gyrodata[2];
 8005bf8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005bfc:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <IMU_GetData+0x80>)
 8005bfe:	815a      	strh	r2, [r3, #10]
	g_imu_struct.mx_raw = magdata[0];
 8005c00:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <IMU_GetData+0x80>)
 8005c06:	819a      	strh	r2, [r3, #12]
	g_imu_struct.my_raw = magdata[1];
 8005c08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005c0c:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <IMU_GetData+0x80>)
 8005c0e:	81da      	strh	r2, [r3, #14]
	g_imu_struct.mz_raw = magdata[2];
 8005c10:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005c14:	4b02      	ldr	r3, [pc, #8]	; (8005c20 <IMU_GetData+0x80>)
 8005c16:	821a      	strh	r2, [r3, #16]
}
 8005c18:	bf00      	nop
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000010 	.word	0x20000010
 8005c24:	00000000 	.word	0x00000000

08005c28 <IMU_Data_Fusion_Mahony>:

//三传感器显式互补滤波数据融合解算姿态
void IMU_Data_Fusion_Mahony(float dt, float *roll, float *pitch, float *yaw)
{
 8005c28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c2c:	b0b0      	sub	sp, #192	; 0xc0
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	ed87 0a03 	vstr	s0, [r7, #12]
 8005c34:	60b8      	str	r0, [r7, #8]
 8005c36:	6079      	str	r1, [r7, #4]
 8005c38:	603a      	str	r2, [r7, #0]
	float gx_rad, gy_rad, gz_rad;

	//四元数转余弦矩阵中间变量
	float g1, g2, g3, g4, g5;

	IMU_GetData();
 8005c3a:	f7ff ffb1 	bl	8005ba0 <IMU_GetData>
	float ax = g_imu_struct.ax_raw;
 8005c3e:	4bf3      	ldr	r3, [pc, #972]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c4c:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	float ay = g_imu_struct.ay_raw;
 8005c50:	4bee      	ldr	r3, [pc, #952]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005c52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c5e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	float az = g_imu_struct.az_raw;
 8005c62:	4bea      	ldr	r3, [pc, #936]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005c64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c68:	ee07 3a90 	vmov	s15, r3
 8005c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c70:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	float mx = g_imu_struct.mx_raw;
 8005c74:	4be5      	ldr	r3, [pc, #916]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005c76:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c82:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	float my = g_imu_struct.my_raw;
 8005c86:	4be1      	ldr	r3, [pc, #900]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005c88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c94:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	float mz = g_imu_struct.mz_raw;
 8005c98:	4bdc      	ldr	r3, [pc, #880]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005c9a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ca6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	float q0 = g_imu_struct.quat.q0;
 8005caa:	4bd8      	ldr	r3, [pc, #864]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	float q1 = g_imu_struct.quat.q1;
 8005cb2:	4bd6      	ldr	r3, [pc, #856]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	float q2 = g_imu_struct.quat.q2;
 8005cba:	4bd4      	ldr	r3, [pc, #848]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float q3 = g_imu_struct.quat.q3;
 8005cc2:	4bd2      	ldr	r3, [pc, #840]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    float q0q0 = q0 * q0;
 8005cca:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005cce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005cd2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    float q0q1 = q0 * q1;
 8005cd6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005cda:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    float q0q2 = q0 * q2;
 8005ce6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005cea:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    float q0q3 = q0 * q3;
 8005cf6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005cfa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d02:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    float q1q1 = q1 * q1;
 8005d06:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005d0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d0e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    float q1q2 = q1 * q2;
 8005d12:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005d16:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    float q1q3 = q1 * q3;
 8005d22:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8005d26:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    float q2q2 = q2 * q2;
 8005d32:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d3a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    float q2q3 = q2 * q3;
 8005d3e:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8005d42:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    float q3q3 = q3 * q3;
 8005d4e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005d52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005d56:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	//更新数据

	//零漂补偿并弧度制陀螺仪数据
	gx_rad = (g_imu_struct.gx_raw - g_imu_struct.gx_offset) * BMI088_GYRO_2000_SEN;
 8005d5a:	4bac      	ldr	r3, [pc, #688]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005d5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d68:	4ba8      	ldr	r3, [pc, #672]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005d6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8005d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d72:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8006010 <IMU_Data_Fusion_Mahony+0x3e8>
 8005d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d7a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	gy_rad = (g_imu_struct.gy_raw - g_imu_struct.gy_offset) * BMI088_GYRO_2000_SEN;
 8005d7e:	4ba3      	ldr	r3, [pc, #652]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d8c:	4b9f      	ldr	r3, [pc, #636]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005d8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d96:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8006010 <IMU_Data_Fusion_Mahony+0x3e8>
 8005d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d9e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	gz_rad = (g_imu_struct.gz_raw - g_imu_struct.gz_offset) * BMI088_GYRO_2000_SEN;
 8005da2:	4b9a      	ldr	r3, [pc, #616]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005da4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005da8:	ee07 3a90 	vmov	s15, r3
 8005dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005db0:	4b96      	ldr	r3, [pc, #600]	; (800600c <IMU_Data_Fusion_Mahony+0x3e4>)
 8005db2:	edd3 7a07 	vldr	s15, [r3, #28]
 8005db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dba:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006010 <IMU_Data_Fusion_Mahony+0x3e8>
 8005dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dc2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	//加速度归一化
	norm_temp = invSqrt(ax * ax + ay * ay + az * az);
 8005dc6:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8005dca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005dce:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005dd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dda:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005dde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de6:	eeb0 0a67 	vmov.f32	s0, s15
 8005dea:	f7fe ff89 	bl	8004d00 <invSqrt>
 8005dee:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	ax = ax * norm_temp;
 8005df2:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8005df6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfe:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	ay = ay * norm_temp;
 8005e02:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005e06:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	az = az * norm_temp;
 8005e12:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005e16:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	//磁力计归一化
    norm_temp = invSqrt(mx * mx + my * my + mz * mz);
 8005e22:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005e26:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005e2a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005e2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e36:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005e3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e42:	eeb0 0a67 	vmov.f32	s0, s15
 8005e46:	f7fe ff5b 	bl	8004d00 <invSqrt>
 8005e4a:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
    mx = mx * norm_temp;
 8005e4e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005e52:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    my = my * norm_temp;
 8005e5e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005e62:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    mz = mz * norm_temp;
 8005e6e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8005e72:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	//用陀螺仪的数据计算物体坐标系重力分量
    vx = 2.0f * (q1q3 - q0q2);
 8005e7e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8005e82:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005e8e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    vy = 2.0f * (q0q1 + q2q3);
 8005e92:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005e96:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ea2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    vz = q0q0 - q1q1 - q2q2 + q3q3;
 8005ea6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005eaa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005eae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005eb2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eba:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ec2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	//用陀螺仪的数据计算物体坐标系磁力分量
    hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 8005ec6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005eca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005ece:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005ed2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005ed6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005eda:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005ede:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ee6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005eea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005eee:	ed97 6a20 	vldr	s12, [r7, #128]	; 0x80
 8005ef2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005ef6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f02:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005f06:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f0a:	ed97 6a1f 	vldr	s12, [r7, #124]	; 0x7c
 8005f0e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005f12:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f1e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 8005f22:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005f26:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005f2a:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8005f2e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f3a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f42:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005f46:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005f4a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005f4e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f52:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f5e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005f62:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f66:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 8005f6a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f7a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 8005f7e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005f82:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005f86:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8005f8a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005f8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f96:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f9a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f9e:	ed97 6a1d 	vldr	s12, [r7, #116]	; 0x74
 8005fa2:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005fa6:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fb2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005fb6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005fba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005fbe:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005fc2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005fc6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8005fca:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fd6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    bx = sqrt((hx * hx) + (hy * hy));
 8005fda:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005fde:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005fe2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005fe6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fee:	ee17 0a90 	vmov	r0, s15
 8005ff2:	f7fa fa4d 	bl	8000490 <__aeabi_f2d>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	460b      	mov	r3, r1
 8005ffa:	ec43 2b10 	vmov	d0, r2, r3
 8005ffe:	f001 f8db 	bl	80071b8 <sqrt>
 8006002:	ec53 2b10 	vmov	r2, r3, d0
 8006006:	4610      	mov	r0, r2
 8006008:	4619      	mov	r1, r3
 800600a:	e003      	b.n	8006014 <IMU_Data_Fusion_Mahony+0x3ec>
 800600c:	20000010 	.word	0x20000010
 8006010:	3a8ba058 	.word	0x3a8ba058
 8006014:	f7fa fd6c 	bl	8000af0 <__aeabi_d2f>
 8006018:	4603      	mov	r3, r0
 800601a:	647b      	str	r3, [r7, #68]	; 0x44
    bz = hz;
 800601c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601e:	643b      	str	r3, [r7, #64]	; 0x40


    wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 8006020:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006024:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006028:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800602c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8006030:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006034:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006038:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800603c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006040:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8006044:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006048:	ed97 6a1f 	vldr	s12, [r7, #124]	; 0x7c
 800604c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8006050:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800605c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 8006060:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006064:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006068:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 800606c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8006070:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006078:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800607c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006080:	ed97 6a24 	vldr	s12, [r7, #144]	; 0x90
 8006084:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006088:	ee76 7a27 	vadd.f32	s15, s12, s15
 800608c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006094:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 8006098:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800609c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80060a0:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80060a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80060a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060b0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80060b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80060b8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80060bc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80060c0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80060c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80060c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80060cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060d4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    //求姿态误差
    ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 80060d8:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80060dc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80060e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060e4:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 80060e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80060ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060f4:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80060f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80060fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006100:	ed97 6a2a 	vldr	s12, [r7, #168]	; 0xa8
 8006104:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006108:	ee66 7a27 	vmul.f32	s15, s12, s15
 800610c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006114:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8006118:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800611c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006124:	edd7 6a2f 	vldr	s13, [r7, #188]	; 0xbc
 8006128:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800612c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006130:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006134:	edd7 6a2a 	vldr	s13, [r7, #168]	; 0xa8
 8006138:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800613c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006140:	ed97 6a2c 	vldr	s12, [r7, #176]	; 0xb0
 8006144:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006148:	ee66 7a27 	vmul.f32	s15, s12, s15
 800614c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006154:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8006158:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 800615c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006164:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8006168:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800616c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006174:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8006178:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800617c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006180:	ed97 6a2b 	vldr	s12, [r7, #172]	; 0xac
 8006184:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006188:	ee66 7a27 	vmul.f32	s15, s12, s15
 800618c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006194:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28


	//误差积分
	ex_sum += Ki * dt * ex;
 8006198:	4bef      	ldr	r3, [pc, #956]	; (8006558 <IMU_Data_Fusion_Mahony+0x930>)
 800619a:	ed93 7a00 	vldr	s14, [r3]
 800619e:	edd7 7a03 	vldr	s15, [r7, #12]
 80061a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80061aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ae:	4beb      	ldr	r3, [pc, #940]	; (800655c <IMU_Data_Fusion_Mahony+0x934>)
 80061b0:	edd3 7a00 	vldr	s15, [r3]
 80061b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b8:	4be8      	ldr	r3, [pc, #928]	; (800655c <IMU_Data_Fusion_Mahony+0x934>)
 80061ba:	edc3 7a00 	vstr	s15, [r3]
	ey_sum += Ki * dt * ey;
 80061be:	4be6      	ldr	r3, [pc, #920]	; (8006558 <IMU_Data_Fusion_Mahony+0x930>)
 80061c0:	ed93 7a00 	vldr	s14, [r3]
 80061c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80061c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80061d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061d4:	4be2      	ldr	r3, [pc, #904]	; (8006560 <IMU_Data_Fusion_Mahony+0x938>)
 80061d6:	edd3 7a00 	vldr	s15, [r3]
 80061da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061de:	4be0      	ldr	r3, [pc, #896]	; (8006560 <IMU_Data_Fusion_Mahony+0x938>)
 80061e0:	edc3 7a00 	vstr	s15, [r3]
	ez_sum += Ki * dt * ez;
 80061e4:	4bdc      	ldr	r3, [pc, #880]	; (8006558 <IMU_Data_Fusion_Mahony+0x930>)
 80061e6:	ed93 7a00 	vldr	s14, [r3]
 80061ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80061ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80061f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061fa:	4bda      	ldr	r3, [pc, #872]	; (8006564 <IMU_Data_Fusion_Mahony+0x93c>)
 80061fc:	edd3 7a00 	vldr	s15, [r3]
 8006200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006204:	4bd7      	ldr	r3, [pc, #860]	; (8006564 <IMU_Data_Fusion_Mahony+0x93c>)
 8006206:	edc3 7a00 	vstr	s15, [r3]
	//互补滤波
	gx_rad = gx_rad + Kp * ex + ex_sum;
 800620a:	4bd7      	ldr	r3, [pc, #860]	; (8006568 <IMU_Data_Fusion_Mahony+0x940>)
 800620c:	ed93 7a00 	vldr	s14, [r3]
 8006210:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006218:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800621c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006220:	4bce      	ldr	r3, [pc, #824]	; (800655c <IMU_Data_Fusion_Mahony+0x934>)
 8006222:	edd3 7a00 	vldr	s15, [r3]
 8006226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800622a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	gy_rad = gy_rad + Kp * ey + ey_sum;
 800622e:	4bce      	ldr	r3, [pc, #824]	; (8006568 <IMU_Data_Fusion_Mahony+0x940>)
 8006230:	ed93 7a00 	vldr	s14, [r3]
 8006234:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800623c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006244:	4bc6      	ldr	r3, [pc, #792]	; (8006560 <IMU_Data_Fusion_Mahony+0x938>)
 8006246:	edd3 7a00 	vldr	s15, [r3]
 800624a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800624e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	gz_rad = gz_rad + Kp * ez + ez_sum;
 8006252:	4bc5      	ldr	r3, [pc, #788]	; (8006568 <IMU_Data_Fusion_Mahony+0x940>)
 8006254:	ed93 7a00 	vldr	s14, [r3]
 8006258:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800625c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006260:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006268:	4bbe      	ldr	r3, [pc, #760]	; (8006564 <IMU_Data_Fusion_Mahony+0x93c>)
 800626a:	edd3 7a00 	vldr	s15, [r3]
 800626e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006272:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
//    now_update = HAL_GetTick(); //ms
//    halfperiod = ((float)(now_update - last_update) / 2000.0f);
//    last_update = now_update;

	//解四元数微分方程更新四元数
	q0 = q0 +  0.5 * dt *(-gx_rad * q1 - gy_rad * q2 - gz_rad * q3);
 8006276:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800627a:	f7fa f909 	bl	8000490 <__aeabi_f2d>
 800627e:	4604      	mov	r4, r0
 8006280:	460d      	mov	r5, r1
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7fa f904 	bl	8000490 <__aeabi_f2d>
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	4bb7      	ldr	r3, [pc, #732]	; (800656c <IMU_Data_Fusion_Mahony+0x944>)
 800628e:	f7fa f957 	bl	8000540 <__aeabi_dmul>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4690      	mov	r8, r2
 8006298:	4699      	mov	r9, r3
 800629a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800629e:	eeb1 7a67 	vneg.f32	s14, s15
 80062a2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80062a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062aa:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80062ae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80062b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062ba:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80062be:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80062c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ca:	ee17 0a90 	vmov	r0, s15
 80062ce:	f7fa f8df 	bl	8000490 <__aeabi_f2d>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4640      	mov	r0, r8
 80062d8:	4649      	mov	r1, r9
 80062da:	f7fa f931 	bl	8000540 <__aeabi_dmul>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4620      	mov	r0, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7f9 ff75 	bl	80001d4 <__adddf3>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4610      	mov	r0, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	f7fa fbfd 	bl	8000af0 <__aeabi_d2f>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	q1 = q1 +  0.5 * dt *( gx_rad * q0 - gy_rad * q3 + gz_rad * q2);
 80062fc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006300:	f7fa f8c6 	bl	8000490 <__aeabi_f2d>
 8006304:	4604      	mov	r4, r0
 8006306:	460d      	mov	r5, r1
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7fa f8c1 	bl	8000490 <__aeabi_f2d>
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	4b96      	ldr	r3, [pc, #600]	; (800656c <IMU_Data_Fusion_Mahony+0x944>)
 8006314:	f7fa f914 	bl	8000540 <__aeabi_dmul>
 8006318:	4602      	mov	r2, r0
 800631a:	460b      	mov	r3, r1
 800631c:	4690      	mov	r8, r2
 800631e:	4699      	mov	r9, r3
 8006320:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8006324:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800632c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006330:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006338:	ee37 7a67 	vsub.f32	s14, s14, s15
 800633c:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006340:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800634c:	ee17 0a90 	vmov	r0, s15
 8006350:	f7fa f89e 	bl	8000490 <__aeabi_f2d>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4640      	mov	r0, r8
 800635a:	4649      	mov	r1, r9
 800635c:	f7fa f8f0 	bl	8000540 <__aeabi_dmul>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4620      	mov	r0, r4
 8006366:	4629      	mov	r1, r5
 8006368:	f7f9 ff34 	bl	80001d4 <__adddf3>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4610      	mov	r0, r2
 8006372:	4619      	mov	r1, r3
 8006374:	f7fa fbbc 	bl	8000af0 <__aeabi_d2f>
 8006378:	4603      	mov	r3, r0
 800637a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	q2 = q2 +  0.5 * dt *( gx_rad * q3 + gy_rad * q0 - gz_rad * q1);
 800637e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8006382:	f7fa f885 	bl	8000490 <__aeabi_f2d>
 8006386:	4604      	mov	r4, r0
 8006388:	460d      	mov	r5, r1
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7fa f880 	bl	8000490 <__aeabi_f2d>
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	4b75      	ldr	r3, [pc, #468]	; (800656c <IMU_Data_Fusion_Mahony+0x944>)
 8006396:	f7fa f8d3 	bl	8000540 <__aeabi_dmul>
 800639a:	4602      	mov	r2, r0
 800639c:	460b      	mov	r3, r1
 800639e:	4690      	mov	r8, r2
 80063a0:	4699      	mov	r9, r3
 80063a2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80063a6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80063aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063ae:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 80063b2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80063b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063be:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 80063c2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80063c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063ce:	ee17 0a90 	vmov	r0, s15
 80063d2:	f7fa f85d 	bl	8000490 <__aeabi_f2d>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4640      	mov	r0, r8
 80063dc:	4649      	mov	r1, r9
 80063de:	f7fa f8af 	bl	8000540 <__aeabi_dmul>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4620      	mov	r0, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7f9 fef3 	bl	80001d4 <__adddf3>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	f7fa fb7b 	bl	8000af0 <__aeabi_d2f>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	q3 = q3 +  0.5 * dt *(-gx_rad * q2 + gy_rad * q1 + gz_rad * q0);
 8006400:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006404:	f7fa f844 	bl	8000490 <__aeabi_f2d>
 8006408:	4604      	mov	r4, r0
 800640a:	460d      	mov	r5, r1
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7fa f83f 	bl	8000490 <__aeabi_f2d>
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	4b55      	ldr	r3, [pc, #340]	; (800656c <IMU_Data_Fusion_Mahony+0x944>)
 8006418:	f7fa f892 	bl	8000540 <__aeabi_dmul>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4690      	mov	r8, r2
 8006422:	4699      	mov	r9, r3
 8006424:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8006428:	eeb1 7a67 	vneg.f32	s14, s15
 800642c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006430:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006434:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006438:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800643c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006444:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8006448:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800644c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006454:	ee17 0a90 	vmov	r0, s15
 8006458:	f7fa f81a 	bl	8000490 <__aeabi_f2d>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7fa f86c 	bl	8000540 <__aeabi_dmul>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4620      	mov	r0, r4
 800646e:	4629      	mov	r1, r5
 8006470:	f7f9 feb0 	bl	80001d4 <__adddf3>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4610      	mov	r0, r2
 800647a:	4619      	mov	r1, r3
 800647c:	f7fa fb38 	bl	8000af0 <__aeabi_d2f>
 8006480:	4603      	mov	r3, r0
 8006482:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	//四元数归一化
	norm_temp = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8006486:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800648a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800648e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006492:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800649a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800649e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064a6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80064aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064b2:	eeb0 0a67 	vmov.f32	s0, s15
 80064b6:	f7fe fc23 	bl	8004d00 <invSqrt>
 80064ba:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	q0 = q0 * norm_temp;
 80064be:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80064c2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80064c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ca:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	q1 = q1 * norm_temp;
 80064ce:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 80064d2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80064d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064da:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	q2 = q2 * norm_temp;
 80064de:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80064e2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80064e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ea:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	q3 = q3 * norm_temp;
 80064ee:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80064f2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80064f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	//四元数转旋转矩阵
	g1 = 2.0f * (q1 * q3 - q0 * q2);
 80064fe:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006502:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800650a:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800650e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006516:	ee77 7a67 	vsub.f32	s15, s14, s15
 800651a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800651e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	g2 = 2.0f * (q0 * q1 + q2 * q3);
 8006522:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006526:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800652a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800652e:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 8006532:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800653a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800653e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006542:	edc7 7a08 	vstr	s15, [r7, #32]
	g3 = q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3;
 8006546:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800654a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800654e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8006552:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006556:	e00b      	b.n	8006570 <IMU_Data_Fusion_Mahony+0x948>
 8006558:	20000054 	.word	0x20000054
 800655c:	20000208 	.word	0x20000208
 8006560:	2000020c 	.word	0x2000020c
 8006564:	20000210 	.word	0x20000210
 8006568:	20000058 	.word	0x20000058
 800656c:	3fe00000 	.word	0x3fe00000
 8006570:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006574:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006578:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800657c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006580:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8006584:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800658c:	edc7 7a07 	vstr	s15, [r7, #28]
	g4 = 2.0f * (q1 * q2 + q0 * q3);
 8006590:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 8006594:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8006598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800659c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 80065a0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80065a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80065b0:	edc7 7a06 	vstr	s15, [r7, #24]
	g5 = q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3;
 80065b4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80065b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80065bc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80065c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80065c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80065cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065d4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80065d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80065dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065e0:	edc7 7a05 	vstr	s15, [r7, #20]

	*roll = atan2f(g2,g3) * 57.29578;
 80065e4:	edd7 0a07 	vldr	s1, [r7, #28]
 80065e8:	ed97 0a08 	vldr	s0, [r7, #32]
 80065ec:	f000 fe3c 	bl	8007268 <atan2f>
 80065f0:	ee10 3a10 	vmov	r3, s0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7f9 ff4b 	bl	8000490 <__aeabi_f2d>
 80065fa:	a323      	add	r3, pc, #140	; (adr r3, 8006688 <IMU_Data_Fusion_Mahony+0xa60>)
 80065fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006600:	f7f9 ff9e 	bl	8000540 <__aeabi_dmul>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4610      	mov	r0, r2
 800660a:	4619      	mov	r1, r3
 800660c:	f7fa fa70 	bl	8000af0 <__aeabi_d2f>
 8006610:	4602      	mov	r2, r0
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	601a      	str	r2, [r3, #0]
	*pitch = -asinf(g1) * 57.29578;
 8006616:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800661a:	f000 fdf9 	bl	8007210 <asinf>
 800661e:	eef0 7a40 	vmov.f32	s15, s0
 8006622:	eef1 7a67 	vneg.f32	s15, s15
 8006626:	ee17 3a90 	vmov	r3, s15
 800662a:	4618      	mov	r0, r3
 800662c:	f7f9 ff30 	bl	8000490 <__aeabi_f2d>
 8006630:	a315      	add	r3, pc, #84	; (adr r3, 8006688 <IMU_Data_Fusion_Mahony+0xa60>)
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	f7f9 ff83 	bl	8000540 <__aeabi_dmul>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4610      	mov	r0, r2
 8006640:	4619      	mov	r1, r3
 8006642:	f7fa fa55 	bl	8000af0 <__aeabi_d2f>
 8006646:	4602      	mov	r2, r0
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
	*yaw = atan2f(g4, g5) * 57.29578;
 800664c:	edd7 0a05 	vldr	s1, [r7, #20]
 8006650:	ed97 0a06 	vldr	s0, [r7, #24]
 8006654:	f000 fe08 	bl	8007268 <atan2f>
 8006658:	ee10 3a10 	vmov	r3, s0
 800665c:	4618      	mov	r0, r3
 800665e:	f7f9 ff17 	bl	8000490 <__aeabi_f2d>
 8006662:	a309      	add	r3, pc, #36	; (adr r3, 8006688 <IMU_Data_Fusion_Mahony+0xa60>)
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f7f9 ff6a 	bl	8000540 <__aeabi_dmul>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	f7fa fa3c 	bl	8000af0 <__aeabi_d2f>
 8006678:	4602      	mov	r2, r0
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	601a      	str	r2, [r3, #0]


}
 800667e:	bf00      	nop
 8006680:	37c0      	adds	r7, #192	; 0xc0
 8006682:	46bd      	mov	sp, r7
 8006684:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006688:	1e7967cb 	.word	0x1e7967cb
 800668c:	404ca5dc 	.word	0x404ca5dc

08006690 <IST8310_WriteReg>:
  * @param   reg_add:寄存器地址
	* @param	 reg_data:要写入的数据
  * @retval
  */
void IST8310_WriteReg(uint8_t reg_add,uint8_t reg_dat)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af04      	add	r7, sp, #16
 8006696:	4603      	mov	r3, r0
 8006698:	460a      	mov	r2, r1
 800669a:	71fb      	strb	r3, [r7, #7]
 800669c:	4613      	mov	r3, r2
 800669e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS << 1, reg_add, I2C_MEMADD_SIZE_8BIT, &reg_dat, 1, 0xff);
 80066a0:	79fb      	ldrb	r3, [r7, #7]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	23ff      	movs	r3, #255	; 0xff
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	2301      	movs	r3, #1
 80066aa:	9301      	str	r3, [sp, #4]
 80066ac:	1dbb      	adds	r3, r7, #6
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	2301      	movs	r3, #1
 80066b2:	211c      	movs	r1, #28
 80066b4:	4803      	ldr	r0, [pc, #12]	; (80066c4 <IST8310_WriteReg+0x34>)
 80066b6:	f7fb fe39 	bl	800232c <HAL_I2C_Mem_Write>
}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	200000dc 	.word	0x200000dc

080066c8 <IST8310_ReadData>:
	* @param	 *pdata:存储数据的缓存区
	* @param	 len:要读取的数据量
  * @retval
  */
void IST8310_ReadData(uint8_t reg_add,uint8_t *pdata,uint8_t len)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af04      	add	r7, sp, #16
 80066ce:	4603      	mov	r3, r0
 80066d0:	6039      	str	r1, [r7, #0]
 80066d2:	71fb      	strb	r3, [r7, #7]
 80066d4:	4613      	mov	r3, r2
 80066d6:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS << 1, reg_add, I2C_MEMADD_SIZE_8BIT, pdata, len, 0xff);
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	79bb      	ldrb	r3, [r7, #6]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	21ff      	movs	r1, #255	; 0xff
 80066e2:	9102      	str	r1, [sp, #8]
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	2301      	movs	r3, #1
 80066ec:	211c      	movs	r1, #28
 80066ee:	4803      	ldr	r0, [pc, #12]	; (80066fc <IST8310_ReadData+0x34>)
 80066f0:	f7fb ff16 	bl	8002520 <HAL_I2C_Mem_Read>
}
 80066f4:	bf00      	nop
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	200000dc 	.word	0x200000dc

08006700 <IST8310_ReadID>:
/**
  * @brief   读取mpu6050的ID
  * @retval  Status_OK正常 | Status_ERROR错误
  */
uint8_t IST8310_ReadID(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
	uint8_t ID;
	IST8310_ReadData(IST8310_WHO_AM_I, &ID, 1);
 8006706:	1dfb      	adds	r3, r7, #7
 8006708:	2201      	movs	r2, #1
 800670a:	4619      	mov	r1, r3
 800670c:	2000      	movs	r0, #0
 800670e:	f7ff ffdb 	bl	80066c8 <IST8310_ReadData>
	return ID;
 8006712:	79fb      	ldrb	r3, [r7, #7]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <IST8310_Init>:

IMU_ERROR_Typedef IST8310_Init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
	if(IST8310_ReadID() == IST8310_WHO_AM_I_VALUE)
 8006720:	f7ff ffee 	bl	8006700 <IST8310_ReadID>
 8006724:	4603      	mov	r3, r0
 8006726:	2b10      	cmp	r3, #16
 8006728:	d126      	bne.n	8006778 <IST8310_Init+0x5c>
	{
		//重启IST8310
		HAL_GPIO_WritePin(GPIOG, IST8310_RST_PIN, GPIO_PIN_RESET);
 800672a:	2200      	movs	r2, #0
 800672c:	2140      	movs	r1, #64	; 0x40
 800672e:	4814      	ldr	r0, [pc, #80]	; (8006780 <IST8310_Init+0x64>)
 8006730:	f7fb fc6c 	bl	800200c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8006734:	2032      	movs	r0, #50	; 0x32
 8006736:	f7fb f97f 	bl	8001a38 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, IST8310_RST_PIN, GPIO_PIN_SET);
 800673a:	2201      	movs	r2, #1
 800673c:	2140      	movs	r1, #64	; 0x40
 800673e:	4810      	ldr	r0, [pc, #64]	; (8006780 <IST8310_Init+0x64>)
 8006740:	f7fb fc64 	bl	800200c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8006744:	2032      	movs	r0, #50	; 0x32
 8006746:	f7fb f977 	bl	8001a38 <HAL_Delay>
		//不开启中断
		IST8310_WriteReg(IST8310_CNTL2_ADDR, 0x00);
 800674a:	2100      	movs	r1, #0
 800674c:	200b      	movs	r0, #11
 800674e:	f7ff ff9f 	bl	8006690 <IST8310_WriteReg>
		HAL_Delay(150);
 8006752:	2096      	movs	r0, #150	; 0x96
 8006754:	f7fb f970 	bl	8001a38 <HAL_Delay>
		//四次采样平均
		IST8310_WriteReg(IST8310_AVGCNTL_ADDR, IST8310_AVGCNTL_FOURTH);
 8006758:	2112      	movs	r1, #18
 800675a:	2041      	movs	r0, #65	; 0x41
 800675c:	f7ff ff98 	bl	8006690 <IST8310_WriteReg>
		HAL_Delay(150);
 8006760:	2096      	movs	r0, #150	; 0x96
 8006762:	f7fb f969 	bl	8001a38 <HAL_Delay>
		//连续采样，200HZ输出模式
		IST8310_WriteReg(IST8310_CNTL1_ADDR, IST8310_CNTL1_CONTINUE);
 8006766:	210b      	movs	r1, #11
 8006768:	200a      	movs	r0, #10
 800676a:	f7ff ff91 	bl	8006690 <IST8310_WriteReg>
		HAL_Delay(150);
 800676e:	2096      	movs	r0, #150	; 0x96
 8006770:	f7fb f962 	bl	8001a38 <HAL_Delay>

    	return IMU_NO_ERROR;
 8006774:	2300      	movs	r3, #0
 8006776:	e000      	b.n	800677a <IST8310_Init+0x5e>
	}
	else
	{
		return IMU_MAG_ERROR;
 8006778:	2304      	movs	r3, #4
	}
}
 800677a:	4618      	mov	r0, r3
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	40021800 	.word	0x40021800

08006784 <IST8310_Getdata_Mag_raw>:

void IST8310_Getdata_Mag_raw(int16_t *magdata)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	IST8310_ReadData(IST8310_DATA_XL_ADDR, buff, 6);
 800678c:	f107 0308 	add.w	r3, r7, #8
 8006790:	2206      	movs	r2, #6
 8006792:	4619      	mov	r1, r3
 8006794:	2003      	movs	r0, #3
 8006796:	f7ff ff97 	bl	80066c8 <IST8310_ReadData>
	magdata[0] = (int16_t)( (buff[1] << 8) | buff[0] );
 800679a:	7a7b      	ldrb	r3, [r7, #9]
 800679c:	021b      	lsls	r3, r3, #8
 800679e:	b21a      	sxth	r2, r3
 80067a0:	7a3b      	ldrb	r3, [r7, #8]
 80067a2:	b21b      	sxth	r3, r3
 80067a4:	4313      	orrs	r3, r2
 80067a6:	b21a      	sxth	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	801a      	strh	r2, [r3, #0]
	magdata[1] = (int16_t)( (buff[3] << 8) | buff[2] );
 80067ac:	7afb      	ldrb	r3, [r7, #11]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	b219      	sxth	r1, r3
 80067b2:	7abb      	ldrb	r3, [r7, #10]
 80067b4:	b21a      	sxth	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3302      	adds	r3, #2
 80067ba:	430a      	orrs	r2, r1
 80067bc:	b212      	sxth	r2, r2
 80067be:	801a      	strh	r2, [r3, #0]
	magdata[2] = (int16_t)( (buff[5] << 8) | buff[4] );
 80067c0:	7b7b      	ldrb	r3, [r7, #13]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	b219      	sxth	r1, r3
 80067c6:	7b3b      	ldrb	r3, [r7, #12]
 80067c8:	b21a      	sxth	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3304      	adds	r3, #4
 80067ce:	430a      	orrs	r2, r1
 80067d0:	b212      	sxth	r2, r2
 80067d2:	801a      	strh	r2, [r3, #0]
}
 80067d4:	bf00      	nop
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <IST8310_Getdata_Mag>:

void IST8310_Getdata_Mag(float *magdata)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	uint8_t buff[6];
	int16_t tempbuff = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	81fb      	strh	r3, [r7, #14]
	IST8310_ReadData(IST8310_DATA_XL_ADDR, buff, 6);
 80067e8:	f107 0308 	add.w	r3, r7, #8
 80067ec:	2206      	movs	r2, #6
 80067ee:	4619      	mov	r1, r3
 80067f0:	2003      	movs	r0, #3
 80067f2:	f7ff ff69 	bl	80066c8 <IST8310_ReadData>
	tempbuff = (int16_t)( (buff[1] << 8) | buff[0] );
 80067f6:	7a7b      	ldrb	r3, [r7, #9]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	b21a      	sxth	r2, r3
 80067fc:	7a3b      	ldrb	r3, [r7, #8]
 80067fe:	b21b      	sxth	r3, r3
 8006800:	4313      	orrs	r3, r2
 8006802:	81fb      	strh	r3, [r7, #14]
	magdata[0] = tempbuff * MAG_SEN;
 8006804:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006810:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800687c <IST8310_Getdata_Mag+0xa0>
 8006814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[3] << 8) | buff[2] );
 800681e:	7afb      	ldrb	r3, [r7, #11]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	b21a      	sxth	r2, r3
 8006824:	7abb      	ldrb	r3, [r7, #10]
 8006826:	b21b      	sxth	r3, r3
 8006828:	4313      	orrs	r3, r2
 800682a:	81fb      	strh	r3, [r7, #14]
	magdata[1] = tempbuff * MAG_SEN;
 800682c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006830:	ee07 3a90 	vmov	s15, r3
 8006834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800687c <IST8310_Getdata_Mag+0xa0>
 8006840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006844:	edc3 7a00 	vstr	s15, [r3]
	tempbuff = (int16_t)( (buff[5] << 8) | buff[4] );
 8006848:	7b7b      	ldrb	r3, [r7, #13]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	b21a      	sxth	r2, r3
 800684e:	7b3b      	ldrb	r3, [r7, #12]
 8006850:	b21b      	sxth	r3, r3
 8006852:	4313      	orrs	r3, r2
 8006854:	81fb      	strh	r3, [r7, #14]
	magdata[2] = tempbuff * MAG_SEN;
 8006856:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800685a:	ee07 3a90 	vmov	s15, r3
 800685e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3308      	adds	r3, #8
 8006866:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800687c <IST8310_Getdata_Mag+0xa0>
 800686a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800686e:	edc3 7a00 	vstr	s15, [r3]

}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	3e99999a 	.word	0x3e99999a

08006880 <OLED_I2C_Start>:
  * @brief  I2C开始
  * @param  无
  * @retval 无
  */
void OLED_I2C_Start(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 8006884:	2201      	movs	r2, #1
 8006886:	2101      	movs	r1, #1
 8006888:	4809      	ldr	r0, [pc, #36]	; (80068b0 <OLED_I2C_Start+0x30>)
 800688a:	f7fb fbbf 	bl	800200c <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 800688e:	2201      	movs	r2, #1
 8006890:	2102      	movs	r1, #2
 8006892:	4807      	ldr	r0, [pc, #28]	; (80068b0 <OLED_I2C_Start+0x30>)
 8006894:	f7fb fbba 	bl	800200c <HAL_GPIO_WritePin>
	OLED_W_SDA(0);
 8006898:	2200      	movs	r2, #0
 800689a:	2101      	movs	r1, #1
 800689c:	4804      	ldr	r0, [pc, #16]	; (80068b0 <OLED_I2C_Start+0x30>)
 800689e:	f7fb fbb5 	bl	800200c <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 80068a2:	2200      	movs	r2, #0
 80068a4:	2102      	movs	r1, #2
 80068a6:	4802      	ldr	r0, [pc, #8]	; (80068b0 <OLED_I2C_Start+0x30>)
 80068a8:	f7fb fbb0 	bl	800200c <HAL_GPIO_WritePin>
}
 80068ac:	bf00      	nop
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40021400 	.word	0x40021400

080068b4 <OLED_I2C_Stop>:
  * @brief  I2C停止
  * @param  无
  * @retval 无
  */
void OLED_I2C_Stop(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 80068b8:	2200      	movs	r2, #0
 80068ba:	2101      	movs	r1, #1
 80068bc:	4807      	ldr	r0, [pc, #28]	; (80068dc <OLED_I2C_Stop+0x28>)
 80068be:	f7fb fba5 	bl	800200c <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 80068c2:	2201      	movs	r2, #1
 80068c4:	2102      	movs	r1, #2
 80068c6:	4805      	ldr	r0, [pc, #20]	; (80068dc <OLED_I2C_Stop+0x28>)
 80068c8:	f7fb fba0 	bl	800200c <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 80068cc:	2201      	movs	r2, #1
 80068ce:	2101      	movs	r1, #1
 80068d0:	4802      	ldr	r0, [pc, #8]	; (80068dc <OLED_I2C_Stop+0x28>)
 80068d2:	f7fb fb9b 	bl	800200c <HAL_GPIO_WritePin>
}
 80068d6:	bf00      	nop
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40021400 	.word	0x40021400

080068e0 <OLED_I2C_SendByte>:
  * @brief  I2C发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
 80068ee:	e01b      	b.n	8006928 <OLED_I2C_SendByte+0x48>
	{
		OLED_W_SDA(Byte & (0x80 >> i));
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	fa42 f303 	asr.w	r3, r2, r3
 80068f8:	b25a      	sxtb	r2, r3
 80068fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fe:	4013      	ands	r3, r2
 8006900:	b25b      	sxtb	r3, r3
 8006902:	b2db      	uxtb	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	2101      	movs	r1, #1
 8006908:	4810      	ldr	r0, [pc, #64]	; (800694c <OLED_I2C_SendByte+0x6c>)
 800690a:	f7fb fb7f 	bl	800200c <HAL_GPIO_WritePin>
		OLED_W_SCL(1);
 800690e:	2201      	movs	r2, #1
 8006910:	2102      	movs	r1, #2
 8006912:	480e      	ldr	r0, [pc, #56]	; (800694c <OLED_I2C_SendByte+0x6c>)
 8006914:	f7fb fb7a 	bl	800200c <HAL_GPIO_WritePin>
		OLED_W_SCL(0);
 8006918:	2200      	movs	r2, #0
 800691a:	2102      	movs	r1, #2
 800691c:	480b      	ldr	r0, [pc, #44]	; (800694c <OLED_I2C_SendByte+0x6c>)
 800691e:	f7fb fb75 	bl	800200c <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	3301      	adds	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2b07      	cmp	r3, #7
 800692c:	d9e0      	bls.n	80068f0 <OLED_I2C_SendByte+0x10>
	}
	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 800692e:	2201      	movs	r2, #1
 8006930:	2102      	movs	r1, #2
 8006932:	4806      	ldr	r0, [pc, #24]	; (800694c <OLED_I2C_SendByte+0x6c>)
 8006934:	f7fb fb6a 	bl	800200c <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 8006938:	2200      	movs	r2, #0
 800693a:	2102      	movs	r1, #2
 800693c:	4803      	ldr	r0, [pc, #12]	; (800694c <OLED_I2C_SendByte+0x6c>)
 800693e:	f7fb fb65 	bl	800200c <HAL_GPIO_WritePin>
}
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	40021400 	.word	0x40021400

08006950 <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 800695a:	f7ff ff91 	bl	8006880 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 800695e:	2078      	movs	r0, #120	; 0x78
 8006960:	f7ff ffbe 	bl	80068e0 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//写命令
 8006964:	2000      	movs	r0, #0
 8006966:	f7ff ffbb 	bl	80068e0 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command); 
 800696a:	79fb      	ldrb	r3, [r7, #7]
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff ffb7 	bl	80068e0 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 8006972:	f7ff ff9f 	bl	80068b4 <OLED_I2C_Stop>
}
 8006976:	bf00      	nop
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
 8006984:	4603      	mov	r3, r0
 8006986:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 8006988:	f7ff ff7a 	bl	8006880 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 800698c:	2078      	movs	r0, #120	; 0x78
 800698e:	f7ff ffa7 	bl	80068e0 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//写数据
 8006992:	2040      	movs	r0, #64	; 0x40
 8006994:	f7ff ffa4 	bl	80068e0 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff ffa0 	bl	80068e0 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 80069a0:	f7ff ff88 	bl	80068b4 <OLED_I2C_Stop>
}
 80069a4:	bf00      	nop
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	460a      	mov	r2, r1
 80069b6:	71fb      	strb	r3, [r7, #7]
 80069b8:	4613      	mov	r3, r2
 80069ba:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 80069bc:	79fb      	ldrb	r3, [r7, #7]
 80069be:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff ffc3 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置低4位
 80069ca:	79bb      	ldrb	r3, [r7, #6]
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f043 0310 	orr.w	r3, r3, #16
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff ffba 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置高4位
 80069dc:	79bb      	ldrb	r3, [r7, #6]
 80069de:	f003 030f 	and.w	r3, r3, #15
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff ffb3 	bl	8006950 <OLED_WriteCommand>
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 80069f8:	2300      	movs	r3, #0
 80069fa:	71bb      	strb	r3, [r7, #6]
 80069fc:	e014      	b.n	8006a28 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 80069fe:	79bb      	ldrb	r3, [r7, #6]
 8006a00:	2100      	movs	r1, #0
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff ffd2 	bl	80069ac <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	71fb      	strb	r3, [r7, #7]
 8006a0c:	e005      	b.n	8006a1a <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 8006a0e:	2000      	movs	r0, #0
 8006a10:	f7ff ffb5 	bl	800697e <OLED_WriteData>
		for(i = 0; i < 128; i++)
 8006a14:	79fb      	ldrb	r3, [r7, #7]
 8006a16:	3301      	adds	r3, #1
 8006a18:	71fb      	strb	r3, [r7, #7]
 8006a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	daf5      	bge.n	8006a0e <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 8006a22:	79bb      	ldrb	r3, [r7, #6]
 8006a24:	3301      	adds	r3, #1
 8006a26:	71bb      	strb	r3, [r7, #6]
 8006a28:	79bb      	ldrb	r3, [r7, #6]
 8006a2a:	2b07      	cmp	r3, #7
 8006a2c:	d9e7      	bls.n	80069fe <OLED_Clear+0xc>
		}
	}
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	71fb      	strb	r3, [r7, #7]
 8006a42:	460b      	mov	r3, r1
 8006a44:	71bb      	strb	r3, [r7, #6]
 8006a46:	4613      	mov	r3, r2
 8006a48:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	79bb      	ldrb	r3, [r7, #6]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4610      	mov	r0, r2
 8006a62:	f7ff ffa3 	bl	80069ac <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]
 8006a6a:	e00e      	b.n	8006a8a <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 8006a6c:	797b      	ldrb	r3, [r7, #5]
 8006a6e:	f1a3 0220 	sub.w	r2, r3, #32
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	491c      	ldr	r1, [pc, #112]	; (8006ae8 <OLED_ShowChar+0xb0>)
 8006a76:	0112      	lsls	r2, r2, #4
 8006a78:	440a      	add	r2, r1
 8006a7a:	4413      	add	r3, r2
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7ff ff7d 	bl	800697e <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	3301      	adds	r3, #1
 8006a88:	73fb      	strb	r3, [r7, #15]
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	2b07      	cmp	r3, #7
 8006a8e:	d9ed      	bls.n	8006a6c <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	79bb      	ldrb	r3, [r7, #6]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	00db      	lsls	r3, r3, #3
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4610      	mov	r0, r2
 8006aac:	f7ff ff7e 	bl	80069ac <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]
 8006ab4:	e00f      	b.n	8006ad6 <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 8006ab6:	797b      	ldrb	r3, [r7, #5]
 8006ab8:	f1a3 0220 	sub.w	r2, r3, #32
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	4909      	ldr	r1, [pc, #36]	; (8006ae8 <OLED_ShowChar+0xb0>)
 8006ac2:	0112      	lsls	r2, r2, #4
 8006ac4:	440a      	add	r2, r1
 8006ac6:	4413      	add	r3, r2
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff ff57 	bl	800697e <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	73fb      	strb	r3, [r7, #15]
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2b07      	cmp	r3, #7
 8006ada:	d9ec      	bls.n	8006ab6 <OLED_ShowChar+0x7e>
	}
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	080093e8 	.word	0x080093e8

08006aec <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	603a      	str	r2, [r7, #0]
 8006af6:	71fb      	strb	r3, [r7, #7]
 8006af8:	460b      	mov	r3, r1
 8006afa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]
 8006b00:	e00e      	b.n	8006b20 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 8006b02:	79ba      	ldrb	r2, [r7, #6]
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	4413      	add	r3, r2
 8006b08:	b2d9      	uxtb	r1, r3
 8006b0a:	7bfb      	ldrb	r3, [r7, #15]
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	4413      	add	r3, r2
 8006b10:	781a      	ldrb	r2, [r3, #0]
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff ff8f 	bl	8006a38 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	4413      	add	r3, r2
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1ea      	bne.n	8006b02 <OLED_ShowString+0x16>
	}
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <OLED_Pow>:
/**
  * @brief  OLED次方函数
  * @retval 返回值等于X的Y次方
  */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8006b40:	2301      	movs	r3, #1
 8006b42:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8006b44:	e004      	b.n	8006b50 <OLED_Pow+0x1a>
	{
		Result *= X;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	1e5a      	subs	r2, r3, #1
 8006b54:	603a      	str	r2, [r7, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f5      	bne.n	8006b46 <OLED_Pow+0x10>
	}
	return Result;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <OLED_ShowNum>:
  * @param  Number 要显示的数字，范围：0~4294967295
  * @param  Length 要显示数字的长度，范围：1~10
  * @retval 无
  */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8006b68:	b590      	push	{r4, r7, lr}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	603a      	str	r2, [r7, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
 8006b76:	460b      	mov	r3, r1
 8006b78:	71bb      	strb	r3, [r7, #6]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)							
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
 8006b82:	e023      	b.n	8006bcc <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8006b84:	79ba      	ldrb	r2, [r7, #6]
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	4413      	add	r3, r2
 8006b8a:	b2dc      	uxtb	r4, r3
 8006b8c:	797a      	ldrb	r2, [r7, #5]
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	4619      	mov	r1, r3
 8006b96:	200a      	movs	r0, #10
 8006b98:	f7ff ffcd 	bl	8006b36 <OLED_Pow>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ba4:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <OLED_ShowNum+0x78>)
 8006ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8006baa:	08da      	lsrs	r2, r3, #3
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	1aca      	subs	r2, r1, r3
 8006bb6:	b2d3      	uxtb	r3, r2
 8006bb8:	3330      	adds	r3, #48	; 0x30
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	79fb      	ldrb	r3, [r7, #7]
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff ff39 	bl	8006a38 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	73fb      	strb	r3, [r7, #15]
 8006bcc:	7bfa      	ldrb	r2, [r7, #15]
 8006bce:	797b      	ldrb	r3, [r7, #5]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d3d7      	bcc.n	8006b84 <OLED_ShowNum+0x1c>
	}
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd90      	pop	{r4, r7, pc}
 8006bde:	bf00      	nop
 8006be0:	cccccccd 	.word	0xcccccccd

08006be4 <OLED_ShowSignedNum>:
  * @param  Number 要显示的数字，范围：-2147483648~2147483647
  * @param  Length 要显示数字的长度，范围：1~10
  * @retval 无
  */
void OLED_ShowSignedNum(uint8_t Line, uint8_t Column, int32_t Number, uint8_t Length)
{
 8006be4:	b590      	push	{r4, r7, lr}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	603a      	str	r2, [r7, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	71fb      	strb	r3, [r7, #7]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	71bb      	strb	r3, [r7, #6]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	uint32_t Number1;
	if (Number >= 0)
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	db08      	blt.n	8006c12 <OLED_ShowSignedNum+0x2e>
	{
		OLED_ShowChar(Line, Column, '+');
 8006c00:	79b9      	ldrb	r1, [r7, #6]
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	222b      	movs	r2, #43	; 0x2b
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff ff16 	bl	8006a38 <OLED_ShowChar>
		Number1 = Number;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	60bb      	str	r3, [r7, #8]
 8006c10:	e008      	b.n	8006c24 <OLED_ShowSignedNum+0x40>
	}
	else
	{
		OLED_ShowChar(Line, Column, '-');
 8006c12:	79b9      	ldrb	r1, [r7, #6]
 8006c14:	79fb      	ldrb	r3, [r7, #7]
 8006c16:	222d      	movs	r2, #45	; 0x2d
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff ff0d 	bl	8006a38 <OLED_ShowChar>
		Number1 = -Number;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	425b      	negs	r3, r3
 8006c22:	60bb      	str	r3, [r7, #8]
	}
	for (i = 0; i < Length; i++)							
 8006c24:	2300      	movs	r3, #0
 8006c26:	73fb      	strb	r3, [r7, #15]
 8006c28:	e025      	b.n	8006c76 <OLED_ShowSignedNum+0x92>
	{
		OLED_ShowChar(Line, Column + i + 1, Number1 / OLED_Pow(10, Length - i - 1) % 10 + '0');
 8006c2a:	79ba      	ldrb	r2, [r7, #6]
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	4413      	add	r3, r2
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	3301      	adds	r3, #1
 8006c34:	b2dc      	uxtb	r4, r3
 8006c36:	797a      	ldrb	r2, [r7, #5]
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	4619      	mov	r1, r3
 8006c40:	200a      	movs	r0, #10
 8006c42:	f7ff ff78 	bl	8006b36 <OLED_Pow>
 8006c46:	4602      	mov	r2, r0
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	; (8006c88 <OLED_ShowSignedNum+0xa4>)
 8006c50:	fba3 2301 	umull	r2, r3, r3, r1
 8006c54:	08da      	lsrs	r2, r3, #3
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	1aca      	subs	r2, r1, r3
 8006c60:	b2d3      	uxtb	r3, r2
 8006c62:	3330      	adds	r3, #48	; 0x30
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fee4 	bl	8006a38 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	3301      	adds	r3, #1
 8006c74:	73fb      	strb	r3, [r7, #15]
 8006c76:	7bfa      	ldrb	r2, [r7, #15]
 8006c78:	797b      	ldrb	r3, [r7, #5]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d3d5      	bcc.n	8006c2a <OLED_ShowSignedNum+0x46>
	}
}
 8006c7e:	bf00      	nop
 8006c80:	bf00      	nop
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd90      	pop	{r4, r7, pc}
 8006c88:	cccccccd 	.word	0xcccccccd

08006c8c <OLED_ShowHexNum>:
  * @param  Number 要显示的数字，范围：0~0xFFFFFFFF
  * @param  Length 要显示数字的长度，范围：1~8
  * @retval 无
  */
void OLED_ShowHexNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	603a      	str	r2, [r7, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	4603      	mov	r3, r0
 8006c98:	71fb      	strb	r3, [r7, #7]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	71bb      	strb	r3, [r7, #6]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	717b      	strb	r3, [r7, #5]
	uint8_t i, SingleNumber;
	for (i = 0; i < Length; i++)							
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
 8006ca6:	e02c      	b.n	8006d02 <OLED_ShowHexNum+0x76>
	{
		SingleNumber = Number / OLED_Pow(16, Length - i - 1) % 16;
 8006ca8:	797a      	ldrb	r2, [r7, #5]
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	2010      	movs	r0, #16
 8006cb4:	f7ff ff3f 	bl	8006b36 <OLED_Pow>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f003 030f 	and.w	r3, r3, #15
 8006cc6:	73bb      	strb	r3, [r7, #14]
		if (SingleNumber < 10)
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b09      	cmp	r3, #9
 8006ccc:	d80b      	bhi.n	8006ce6 <OLED_ShowHexNum+0x5a>
		{
			OLED_ShowChar(Line, Column + i, SingleNumber + '0');
 8006cce:	79ba      	ldrb	r2, [r7, #6]
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	b2d9      	uxtb	r1, r3
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	3330      	adds	r3, #48	; 0x30
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff feaa 	bl	8006a38 <OLED_ShowChar>
 8006ce4:	e00a      	b.n	8006cfc <OLED_ShowHexNum+0x70>
		}
		else
		{
			OLED_ShowChar(Line, Column + i, SingleNumber - 10 + 'A');
 8006ce6:	79ba      	ldrb	r2, [r7, #6]
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	4413      	add	r3, r2
 8006cec:	b2d9      	uxtb	r1, r3
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	3337      	adds	r3, #55	; 0x37
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fe9e 	bl	8006a38 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	73fb      	strb	r3, [r7, #15]
 8006d02:	7bfa      	ldrb	r2, [r7, #15]
 8006d04:	797b      	ldrb	r3, [r7, #5]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d3ce      	bcc.n	8006ca8 <OLED_ShowHexNum+0x1c>
		}
	}
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <OLED_ShowBinNum>:
  * @param  Number 要显示的数字，范围：0~1111 1111 1111 1111
  * @param  Length 要显示数字的长度，范围：1~16
  * @retval 无
  */
void OLED_ShowBinNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	603a      	str	r2, [r7, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	71fb      	strb	r3, [r7, #7]
 8006d22:	460b      	mov	r3, r1
 8006d24:	71bb      	strb	r3, [r7, #6]
 8006d26:	4613      	mov	r3, r2
 8006d28:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)							
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
 8006d2e:	e01d      	b.n	8006d6c <OLED_ShowBinNum+0x58>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(2, Length - i - 1) % 2 + '0');
 8006d30:	79ba      	ldrb	r2, [r7, #6]
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	4413      	add	r3, r2
 8006d36:	b2dc      	uxtb	r4, r3
 8006d38:	797a      	ldrb	r2, [r7, #5]
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4619      	mov	r1, r3
 8006d42:	2002      	movs	r0, #2
 8006d44:	f7ff fef7 	bl	8006b36 <OLED_Pow>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	3330      	adds	r3, #48	; 0x30
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fe69 	bl	8006a38 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
 8006d6c:	7bfa      	ldrb	r2, [r7, #15]
 8006d6e:	797b      	ldrb	r3, [r7, #5]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d3dd      	bcc.n	8006d30 <OLED_ShowBinNum+0x1c>
	}
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd90      	pop	{r4, r7, pc}
	...

08006d80 <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	e00c      	b.n	8006da6 <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	e002      	b.n	8006d98 <OLED_Init+0x18>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d9e:	d3f8      	bcc.n	8006d92 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3301      	adds	r3, #1
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dac:	d3ee      	bcc.n	8006d8c <OLED_Init+0xc>
	}
	OLED_W_SCL(1);
 8006dae:	2201      	movs	r2, #1
 8006db0:	2102      	movs	r1, #2
 8006db2:	4829      	ldr	r0, [pc, #164]	; (8006e58 <OLED_Init+0xd8>)
 8006db4:	f7fb f92a 	bl	800200c <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 8006db8:	2201      	movs	r2, #1
 8006dba:	2101      	movs	r1, #1
 8006dbc:	4826      	ldr	r0, [pc, #152]	; (8006e58 <OLED_Init+0xd8>)
 8006dbe:	f7fb f925 	bl	800200c <HAL_GPIO_WritePin>
	//OLED_I2C_Init();			//端口初始化
	
	OLED_WriteCommand(0xAE);	//关闭显示
 8006dc2:	20ae      	movs	r0, #174	; 0xae
 8006dc4:	f7ff fdc4 	bl	8006950 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 8006dc8:	20d5      	movs	r0, #213	; 0xd5
 8006dca:	f7ff fdc1 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 8006dce:	2080      	movs	r0, #128	; 0x80
 8006dd0:	f7ff fdbe 	bl	8006950 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 8006dd4:	20a8      	movs	r0, #168	; 0xa8
 8006dd6:	f7ff fdbb 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8006dda:	203f      	movs	r0, #63	; 0x3f
 8006ddc:	f7ff fdb8 	bl	8006950 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 8006de0:	20d3      	movs	r0, #211	; 0xd3
 8006de2:	f7ff fdb5 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8006de6:	2000      	movs	r0, #0
 8006de8:	f7ff fdb2 	bl	8006950 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 8006dec:	2040      	movs	r0, #64	; 0x40
 8006dee:	f7ff fdaf 	bl	8006950 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 8006df2:	20a1      	movs	r0, #161	; 0xa1
 8006df4:	f7ff fdac 	bl	8006950 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 8006df8:	20c8      	movs	r0, #200	; 0xc8
 8006dfa:	f7ff fda9 	bl	8006950 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8006dfe:	20da      	movs	r0, #218	; 0xda
 8006e00:	f7ff fda6 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8006e04:	2012      	movs	r0, #18
 8006e06:	f7ff fda3 	bl	8006950 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 8006e0a:	2081      	movs	r0, #129	; 0x81
 8006e0c:	f7ff fda0 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8006e10:	20cf      	movs	r0, #207	; 0xcf
 8006e12:	f7ff fd9d 	bl	8006950 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8006e16:	20d9      	movs	r0, #217	; 0xd9
 8006e18:	f7ff fd9a 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8006e1c:	20f1      	movs	r0, #241	; 0xf1
 8006e1e:	f7ff fd97 	bl	8006950 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8006e22:	20db      	movs	r0, #219	; 0xdb
 8006e24:	f7ff fd94 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8006e28:	2030      	movs	r0, #48	; 0x30
 8006e2a:	f7ff fd91 	bl	8006950 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8006e2e:	20a4      	movs	r0, #164	; 0xa4
 8006e30:	f7ff fd8e 	bl	8006950 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 8006e34:	20a6      	movs	r0, #166	; 0xa6
 8006e36:	f7ff fd8b 	bl	8006950 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8006e3a:	208d      	movs	r0, #141	; 0x8d
 8006e3c:	f7ff fd88 	bl	8006950 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8006e40:	2014      	movs	r0, #20
 8006e42:	f7ff fd85 	bl	8006950 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8006e46:	20af      	movs	r0, #175	; 0xaf
 8006e48:	f7ff fd82 	bl	8006950 <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8006e4c:	f7ff fdd1 	bl	80069f2 <OLED_Clear>
}
 8006e50:	bf00      	nop
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40021400 	.word	0x40021400

08006e5c <OLED_Showfloat>:
		OLED_ShowString(4, 1, "->->->->->->->->-");
	}
}

void OLED_Showfloat(uint8_t Line, uint8_t Column, float Number, uint8_t integer_length, uint8_t decimal_length)
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	ed87 0a00 	vstr	s0, [r7]
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4623      	mov	r3, r4
 8006e70:	71fb      	strb	r3, [r7, #7]
 8006e72:	4603      	mov	r3, r0
 8006e74:	71bb      	strb	r3, [r7, #6]
 8006e76:	460b      	mov	r3, r1
 8006e78:	717b      	strb	r3, [r7, #5]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	713b      	strb	r3, [r7, #4]
	int16_t number_integer;
	int16_t number_decimals;
	float temp;
	uint8_t i;
	number_integer = (int16_t)Number;
 8006e7e:	edd7 7a00 	vldr	s15, [r7]
 8006e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e86:	ee17 3a90 	vmov	r3, s15
 8006e8a:	823b      	strh	r3, [r7, #16]
	temp = Number - number_integer;
 8006e8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006e90:	ee07 3a90 	vmov	s15, r3
 8006e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e98:	ed97 7a00 	vldr	s14, [r7]
 8006e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ea0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(i = 0; i < decimal_length; i++)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	74fb      	strb	r3, [r7, #19]
 8006ea8:	e00a      	b.n	8006ec0 <OLED_Showfloat+0x64>
	{
		temp *= 10;
 8006eaa:	edd7 7a05 	vldr	s15, [r7, #20]
 8006eae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006eb6:	edc7 7a05 	vstr	s15, [r7, #20]
	for(i = 0; i < decimal_length; i++)
 8006eba:	7cfb      	ldrb	r3, [r7, #19]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	74fb      	strb	r3, [r7, #19]
 8006ec0:	7cfa      	ldrb	r2, [r7, #19]
 8006ec2:	793b      	ldrb	r3, [r7, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d3f0      	bcc.n	8006eaa <OLED_Showfloat+0x4e>
	}
	number_decimals = (int16_t)temp;
 8006ec8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ed0:	ee17 3a90 	vmov	r3, s15
 8006ed4:	81fb      	strh	r3, [r7, #14]
	OLED_ShowSignedNum(Line, Column, number_integer, integer_length);
 8006ed6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006eda:	797b      	ldrb	r3, [r7, #5]
 8006edc:	79b9      	ldrb	r1, [r7, #6]
 8006ede:	79f8      	ldrb	r0, [r7, #7]
 8006ee0:	f7ff fe80 	bl	8006be4 <OLED_ShowSignedNum>
	OLED_ShowChar(Line, Column + integer_length + 1, '.');
 8006ee4:	79ba      	ldrb	r2, [r7, #6]
 8006ee6:	797b      	ldrb	r3, [r7, #5]
 8006ee8:	4413      	add	r3, r2
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	3301      	adds	r3, #1
 8006eee:	b2d9      	uxtb	r1, r3
 8006ef0:	79fb      	ldrb	r3, [r7, #7]
 8006ef2:	222e      	movs	r2, #46	; 0x2e
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7ff fd9f 	bl	8006a38 <OLED_ShowChar>
	OLED_ShowNum(Line, Column + integer_length + 2, number_decimals, decimal_length);
 8006efa:	79ba      	ldrb	r2, [r7, #6]
 8006efc:	797b      	ldrb	r3, [r7, #5]
 8006efe:	4413      	add	r3, r2
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	3302      	adds	r3, #2
 8006f04:	b2d9      	uxtb	r1, r3
 8006f06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006f0a:	793b      	ldrb	r3, [r7, #4]
 8006f0c:	79f8      	ldrb	r0, [r7, #7]
 8006f0e:	f7ff fe2b 	bl	8006b68 <OLED_ShowNum>


}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd90      	pop	{r4, r7, pc}
	...

08006f1c <__errno>:
 8006f1c:	4b01      	ldr	r3, [pc, #4]	; (8006f24 <__errno+0x8>)
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	2000005c 	.word	0x2000005c

08006f28 <__libc_init_array>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	4d0d      	ldr	r5, [pc, #52]	; (8006f60 <__libc_init_array+0x38>)
 8006f2c:	4c0d      	ldr	r4, [pc, #52]	; (8006f64 <__libc_init_array+0x3c>)
 8006f2e:	1b64      	subs	r4, r4, r5
 8006f30:	10a4      	asrs	r4, r4, #2
 8006f32:	2600      	movs	r6, #0
 8006f34:	42a6      	cmp	r6, r4
 8006f36:	d109      	bne.n	8006f4c <__libc_init_array+0x24>
 8006f38:	4d0b      	ldr	r5, [pc, #44]	; (8006f68 <__libc_init_array+0x40>)
 8006f3a:	4c0c      	ldr	r4, [pc, #48]	; (8006f6c <__libc_init_array+0x44>)
 8006f3c:	f002 fa14 	bl	8009368 <_init>
 8006f40:	1b64      	subs	r4, r4, r5
 8006f42:	10a4      	asrs	r4, r4, #2
 8006f44:	2600      	movs	r6, #0
 8006f46:	42a6      	cmp	r6, r4
 8006f48:	d105      	bne.n	8006f56 <__libc_init_array+0x2e>
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f50:	4798      	blx	r3
 8006f52:	3601      	adds	r6, #1
 8006f54:	e7ee      	b.n	8006f34 <__libc_init_array+0xc>
 8006f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f5a:	4798      	blx	r3
 8006f5c:	3601      	adds	r6, #1
 8006f5e:	e7f2      	b.n	8006f46 <__libc_init_array+0x1e>
 8006f60:	08009c28 	.word	0x08009c28
 8006f64:	08009c28 	.word	0x08009c28
 8006f68:	08009c28 	.word	0x08009c28
 8006f6c:	08009c2c 	.word	0x08009c2c

08006f70 <memset>:
 8006f70:	4402      	add	r2, r0
 8006f72:	4603      	mov	r3, r0
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d100      	bne.n	8006f7a <memset+0xa>
 8006f78:	4770      	bx	lr
 8006f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f7e:	e7f9      	b.n	8006f74 <memset+0x4>

08006f80 <cos>:
 8006f80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f82:	ec53 2b10 	vmov	r2, r3, d0
 8006f86:	4826      	ldr	r0, [pc, #152]	; (8007020 <cos+0xa0>)
 8006f88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006f8c:	4281      	cmp	r1, r0
 8006f8e:	dc06      	bgt.n	8006f9e <cos+0x1e>
 8006f90:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007018 <cos+0x98>
 8006f94:	b005      	add	sp, #20
 8006f96:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f9a:	f001 bae1 	b.w	8008560 <__kernel_cos>
 8006f9e:	4821      	ldr	r0, [pc, #132]	; (8007024 <cos+0xa4>)
 8006fa0:	4281      	cmp	r1, r0
 8006fa2:	dd09      	ble.n	8006fb8 <cos+0x38>
 8006fa4:	ee10 0a10 	vmov	r0, s0
 8006fa8:	4619      	mov	r1, r3
 8006faa:	f7f9 f911 	bl	80001d0 <__aeabi_dsub>
 8006fae:	ec41 0b10 	vmov	d0, r0, r1
 8006fb2:	b005      	add	sp, #20
 8006fb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006fb8:	4668      	mov	r0, sp
 8006fba:	f000 fe89 	bl	8007cd0 <__ieee754_rem_pio2>
 8006fbe:	f000 0003 	and.w	r0, r0, #3
 8006fc2:	2801      	cmp	r0, #1
 8006fc4:	d00b      	beq.n	8006fde <cos+0x5e>
 8006fc6:	2802      	cmp	r0, #2
 8006fc8:	d016      	beq.n	8006ff8 <cos+0x78>
 8006fca:	b9e0      	cbnz	r0, 8007006 <cos+0x86>
 8006fcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fd0:	ed9d 0b00 	vldr	d0, [sp]
 8006fd4:	f001 fac4 	bl	8008560 <__kernel_cos>
 8006fd8:	ec51 0b10 	vmov	r0, r1, d0
 8006fdc:	e7e7      	b.n	8006fae <cos+0x2e>
 8006fde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006fe2:	ed9d 0b00 	vldr	d0, [sp]
 8006fe6:	f001 fed3 	bl	8008d90 <__kernel_sin>
 8006fea:	ec53 2b10 	vmov	r2, r3, d0
 8006fee:	ee10 0a10 	vmov	r0, s0
 8006ff2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006ff6:	e7da      	b.n	8006fae <cos+0x2e>
 8006ff8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ffc:	ed9d 0b00 	vldr	d0, [sp]
 8007000:	f001 faae 	bl	8008560 <__kernel_cos>
 8007004:	e7f1      	b.n	8006fea <cos+0x6a>
 8007006:	ed9d 1b02 	vldr	d1, [sp, #8]
 800700a:	ed9d 0b00 	vldr	d0, [sp]
 800700e:	2001      	movs	r0, #1
 8007010:	f001 febe 	bl	8008d90 <__kernel_sin>
 8007014:	e7e0      	b.n	8006fd8 <cos+0x58>
 8007016:	bf00      	nop
	...
 8007020:	3fe921fb 	.word	0x3fe921fb
 8007024:	7fefffff 	.word	0x7fefffff

08007028 <sin>:
 8007028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800702a:	ec53 2b10 	vmov	r2, r3, d0
 800702e:	4828      	ldr	r0, [pc, #160]	; (80070d0 <sin+0xa8>)
 8007030:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007034:	4281      	cmp	r1, r0
 8007036:	dc07      	bgt.n	8007048 <sin+0x20>
 8007038:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80070c8 <sin+0xa0>
 800703c:	2000      	movs	r0, #0
 800703e:	b005      	add	sp, #20
 8007040:	f85d eb04 	ldr.w	lr, [sp], #4
 8007044:	f001 bea4 	b.w	8008d90 <__kernel_sin>
 8007048:	4822      	ldr	r0, [pc, #136]	; (80070d4 <sin+0xac>)
 800704a:	4281      	cmp	r1, r0
 800704c:	dd09      	ble.n	8007062 <sin+0x3a>
 800704e:	ee10 0a10 	vmov	r0, s0
 8007052:	4619      	mov	r1, r3
 8007054:	f7f9 f8bc 	bl	80001d0 <__aeabi_dsub>
 8007058:	ec41 0b10 	vmov	d0, r0, r1
 800705c:	b005      	add	sp, #20
 800705e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007062:	4668      	mov	r0, sp
 8007064:	f000 fe34 	bl	8007cd0 <__ieee754_rem_pio2>
 8007068:	f000 0003 	and.w	r0, r0, #3
 800706c:	2801      	cmp	r0, #1
 800706e:	d00c      	beq.n	800708a <sin+0x62>
 8007070:	2802      	cmp	r0, #2
 8007072:	d011      	beq.n	8007098 <sin+0x70>
 8007074:	b9f0      	cbnz	r0, 80070b4 <sin+0x8c>
 8007076:	ed9d 1b02 	vldr	d1, [sp, #8]
 800707a:	ed9d 0b00 	vldr	d0, [sp]
 800707e:	2001      	movs	r0, #1
 8007080:	f001 fe86 	bl	8008d90 <__kernel_sin>
 8007084:	ec51 0b10 	vmov	r0, r1, d0
 8007088:	e7e6      	b.n	8007058 <sin+0x30>
 800708a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800708e:	ed9d 0b00 	vldr	d0, [sp]
 8007092:	f001 fa65 	bl	8008560 <__kernel_cos>
 8007096:	e7f5      	b.n	8007084 <sin+0x5c>
 8007098:	ed9d 1b02 	vldr	d1, [sp, #8]
 800709c:	ed9d 0b00 	vldr	d0, [sp]
 80070a0:	2001      	movs	r0, #1
 80070a2:	f001 fe75 	bl	8008d90 <__kernel_sin>
 80070a6:	ec53 2b10 	vmov	r2, r3, d0
 80070aa:	ee10 0a10 	vmov	r0, s0
 80070ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80070b2:	e7d1      	b.n	8007058 <sin+0x30>
 80070b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070b8:	ed9d 0b00 	vldr	d0, [sp]
 80070bc:	f001 fa50 	bl	8008560 <__kernel_cos>
 80070c0:	e7f1      	b.n	80070a6 <sin+0x7e>
 80070c2:	bf00      	nop
 80070c4:	f3af 8000 	nop.w
	...
 80070d0:	3fe921fb 	.word	0x3fe921fb
 80070d4:	7fefffff 	.word	0x7fefffff

080070d8 <pow>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	ed2d 8b02 	vpush	{d8}
 80070de:	eeb0 8a40 	vmov.f32	s16, s0
 80070e2:	eef0 8a60 	vmov.f32	s17, s1
 80070e6:	ec55 4b11 	vmov	r4, r5, d1
 80070ea:	f000 f8c1 	bl	8007270 <__ieee754_pow>
 80070ee:	4622      	mov	r2, r4
 80070f0:	462b      	mov	r3, r5
 80070f2:	4620      	mov	r0, r4
 80070f4:	4629      	mov	r1, r5
 80070f6:	ec57 6b10 	vmov	r6, r7, d0
 80070fa:	f7f9 fcbb 	bl	8000a74 <__aeabi_dcmpun>
 80070fe:	2800      	cmp	r0, #0
 8007100:	d13b      	bne.n	800717a <pow+0xa2>
 8007102:	ec51 0b18 	vmov	r0, r1, d8
 8007106:	2200      	movs	r2, #0
 8007108:	2300      	movs	r3, #0
 800710a:	f7f9 fc81 	bl	8000a10 <__aeabi_dcmpeq>
 800710e:	b1b8      	cbz	r0, 8007140 <pow+0x68>
 8007110:	2200      	movs	r2, #0
 8007112:	2300      	movs	r3, #0
 8007114:	4620      	mov	r0, r4
 8007116:	4629      	mov	r1, r5
 8007118:	f7f9 fc7a 	bl	8000a10 <__aeabi_dcmpeq>
 800711c:	2800      	cmp	r0, #0
 800711e:	d146      	bne.n	80071ae <pow+0xd6>
 8007120:	ec45 4b10 	vmov	d0, r4, r5
 8007124:	f001 ff2b 	bl	8008f7e <finite>
 8007128:	b338      	cbz	r0, 800717a <pow+0xa2>
 800712a:	2200      	movs	r2, #0
 800712c:	2300      	movs	r3, #0
 800712e:	4620      	mov	r0, r4
 8007130:	4629      	mov	r1, r5
 8007132:	f7f9 fc77 	bl	8000a24 <__aeabi_dcmplt>
 8007136:	b300      	cbz	r0, 800717a <pow+0xa2>
 8007138:	f7ff fef0 	bl	8006f1c <__errno>
 800713c:	2322      	movs	r3, #34	; 0x22
 800713e:	e01b      	b.n	8007178 <pow+0xa0>
 8007140:	ec47 6b10 	vmov	d0, r6, r7
 8007144:	f001 ff1b 	bl	8008f7e <finite>
 8007148:	b9e0      	cbnz	r0, 8007184 <pow+0xac>
 800714a:	eeb0 0a48 	vmov.f32	s0, s16
 800714e:	eef0 0a68 	vmov.f32	s1, s17
 8007152:	f001 ff14 	bl	8008f7e <finite>
 8007156:	b1a8      	cbz	r0, 8007184 <pow+0xac>
 8007158:	ec45 4b10 	vmov	d0, r4, r5
 800715c:	f001 ff0f 	bl	8008f7e <finite>
 8007160:	b180      	cbz	r0, 8007184 <pow+0xac>
 8007162:	4632      	mov	r2, r6
 8007164:	463b      	mov	r3, r7
 8007166:	4630      	mov	r0, r6
 8007168:	4639      	mov	r1, r7
 800716a:	f7f9 fc83 	bl	8000a74 <__aeabi_dcmpun>
 800716e:	2800      	cmp	r0, #0
 8007170:	d0e2      	beq.n	8007138 <pow+0x60>
 8007172:	f7ff fed3 	bl	8006f1c <__errno>
 8007176:	2321      	movs	r3, #33	; 0x21
 8007178:	6003      	str	r3, [r0, #0]
 800717a:	ecbd 8b02 	vpop	{d8}
 800717e:	ec47 6b10 	vmov	d0, r6, r7
 8007182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007184:	2200      	movs	r2, #0
 8007186:	2300      	movs	r3, #0
 8007188:	4630      	mov	r0, r6
 800718a:	4639      	mov	r1, r7
 800718c:	f7f9 fc40 	bl	8000a10 <__aeabi_dcmpeq>
 8007190:	2800      	cmp	r0, #0
 8007192:	d0f2      	beq.n	800717a <pow+0xa2>
 8007194:	eeb0 0a48 	vmov.f32	s0, s16
 8007198:	eef0 0a68 	vmov.f32	s1, s17
 800719c:	f001 feef 	bl	8008f7e <finite>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d0ea      	beq.n	800717a <pow+0xa2>
 80071a4:	ec45 4b10 	vmov	d0, r4, r5
 80071a8:	f001 fee9 	bl	8008f7e <finite>
 80071ac:	e7c3      	b.n	8007136 <pow+0x5e>
 80071ae:	4f01      	ldr	r7, [pc, #4]	; (80071b4 <pow+0xdc>)
 80071b0:	2600      	movs	r6, #0
 80071b2:	e7e2      	b.n	800717a <pow+0xa2>
 80071b4:	3ff00000 	.word	0x3ff00000

080071b8 <sqrt>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	ed2d 8b02 	vpush	{d8}
 80071be:	ec55 4b10 	vmov	r4, r5, d0
 80071c2:	f000 ff91 	bl	80080e8 <__ieee754_sqrt>
 80071c6:	4622      	mov	r2, r4
 80071c8:	462b      	mov	r3, r5
 80071ca:	4620      	mov	r0, r4
 80071cc:	4629      	mov	r1, r5
 80071ce:	eeb0 8a40 	vmov.f32	s16, s0
 80071d2:	eef0 8a60 	vmov.f32	s17, s1
 80071d6:	f7f9 fc4d 	bl	8000a74 <__aeabi_dcmpun>
 80071da:	b990      	cbnz	r0, 8007202 <sqrt+0x4a>
 80071dc:	2200      	movs	r2, #0
 80071de:	2300      	movs	r3, #0
 80071e0:	4620      	mov	r0, r4
 80071e2:	4629      	mov	r1, r5
 80071e4:	f7f9 fc1e 	bl	8000a24 <__aeabi_dcmplt>
 80071e8:	b158      	cbz	r0, 8007202 <sqrt+0x4a>
 80071ea:	f7ff fe97 	bl	8006f1c <__errno>
 80071ee:	2321      	movs	r3, #33	; 0x21
 80071f0:	6003      	str	r3, [r0, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	2300      	movs	r3, #0
 80071f6:	4610      	mov	r0, r2
 80071f8:	4619      	mov	r1, r3
 80071fa:	f7f9 facb 	bl	8000794 <__aeabi_ddiv>
 80071fe:	ec41 0b18 	vmov	d8, r0, r1
 8007202:	eeb0 0a48 	vmov.f32	s0, s16
 8007206:	eef0 0a68 	vmov.f32	s1, s17
 800720a:	ecbd 8b02 	vpop	{d8}
 800720e:	bd38      	pop	{r3, r4, r5, pc}

08007210 <asinf>:
 8007210:	b508      	push	{r3, lr}
 8007212:	ed2d 8b02 	vpush	{d8}
 8007216:	eeb0 8a40 	vmov.f32	s16, s0
 800721a:	f001 f817 	bl	800824c <__ieee754_asinf>
 800721e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007226:	eef0 8a40 	vmov.f32	s17, s0
 800722a:	d615      	bvs.n	8007258 <asinf+0x48>
 800722c:	eeb0 0a48 	vmov.f32	s0, s16
 8007230:	f002 f88c 	bl	800934c <fabsf>
 8007234:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007238:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800723c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007240:	dd0a      	ble.n	8007258 <asinf+0x48>
 8007242:	f7ff fe6b 	bl	8006f1c <__errno>
 8007246:	ecbd 8b02 	vpop	{d8}
 800724a:	2321      	movs	r3, #33	; 0x21
 800724c:	6003      	str	r3, [r0, #0]
 800724e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007252:	4804      	ldr	r0, [pc, #16]	; (8007264 <asinf+0x54>)
 8007254:	f002 b882 	b.w	800935c <nanf>
 8007258:	eeb0 0a68 	vmov.f32	s0, s17
 800725c:	ecbd 8b02 	vpop	{d8}
 8007260:	bd08      	pop	{r3, pc}
 8007262:	bf00      	nop
 8007264:	080099d8 	.word	0x080099d8

08007268 <atan2f>:
 8007268:	f001 b8d6 	b.w	8008418 <__ieee754_atan2f>
 800726c:	0000      	movs	r0, r0
	...

08007270 <__ieee754_pow>:
 8007270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007274:	ed2d 8b06 	vpush	{d8-d10}
 8007278:	b089      	sub	sp, #36	; 0x24
 800727a:	ed8d 1b00 	vstr	d1, [sp]
 800727e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007282:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007286:	ea58 0102 	orrs.w	r1, r8, r2
 800728a:	ec57 6b10 	vmov	r6, r7, d0
 800728e:	d115      	bne.n	80072bc <__ieee754_pow+0x4c>
 8007290:	19b3      	adds	r3, r6, r6
 8007292:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007296:	4152      	adcs	r2, r2
 8007298:	4299      	cmp	r1, r3
 800729a:	4b89      	ldr	r3, [pc, #548]	; (80074c0 <__ieee754_pow+0x250>)
 800729c:	4193      	sbcs	r3, r2
 800729e:	f080 84d2 	bcs.w	8007c46 <__ieee754_pow+0x9d6>
 80072a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072a6:	4630      	mov	r0, r6
 80072a8:	4639      	mov	r1, r7
 80072aa:	f7f8 ff93 	bl	80001d4 <__adddf3>
 80072ae:	ec41 0b10 	vmov	d0, r0, r1
 80072b2:	b009      	add	sp, #36	; 0x24
 80072b4:	ecbd 8b06 	vpop	{d8-d10}
 80072b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072bc:	4b81      	ldr	r3, [pc, #516]	; (80074c4 <__ieee754_pow+0x254>)
 80072be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80072c2:	429c      	cmp	r4, r3
 80072c4:	ee10 aa10 	vmov	sl, s0
 80072c8:	463d      	mov	r5, r7
 80072ca:	dc06      	bgt.n	80072da <__ieee754_pow+0x6a>
 80072cc:	d101      	bne.n	80072d2 <__ieee754_pow+0x62>
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d1e7      	bne.n	80072a2 <__ieee754_pow+0x32>
 80072d2:	4598      	cmp	r8, r3
 80072d4:	dc01      	bgt.n	80072da <__ieee754_pow+0x6a>
 80072d6:	d10f      	bne.n	80072f8 <__ieee754_pow+0x88>
 80072d8:	b172      	cbz	r2, 80072f8 <__ieee754_pow+0x88>
 80072da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80072de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80072e2:	ea55 050a 	orrs.w	r5, r5, sl
 80072e6:	d1dc      	bne.n	80072a2 <__ieee754_pow+0x32>
 80072e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80072ec:	18db      	adds	r3, r3, r3
 80072ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80072f2:	4152      	adcs	r2, r2
 80072f4:	429d      	cmp	r5, r3
 80072f6:	e7d0      	b.n	800729a <__ieee754_pow+0x2a>
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	da3b      	bge.n	8007374 <__ieee754_pow+0x104>
 80072fc:	4b72      	ldr	r3, [pc, #456]	; (80074c8 <__ieee754_pow+0x258>)
 80072fe:	4598      	cmp	r8, r3
 8007300:	dc51      	bgt.n	80073a6 <__ieee754_pow+0x136>
 8007302:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007306:	4598      	cmp	r8, r3
 8007308:	f340 84ac 	ble.w	8007c64 <__ieee754_pow+0x9f4>
 800730c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007310:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007314:	2b14      	cmp	r3, #20
 8007316:	dd0f      	ble.n	8007338 <__ieee754_pow+0xc8>
 8007318:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800731c:	fa22 f103 	lsr.w	r1, r2, r3
 8007320:	fa01 f303 	lsl.w	r3, r1, r3
 8007324:	4293      	cmp	r3, r2
 8007326:	f040 849d 	bne.w	8007c64 <__ieee754_pow+0x9f4>
 800732a:	f001 0101 	and.w	r1, r1, #1
 800732e:	f1c1 0302 	rsb	r3, r1, #2
 8007332:	9304      	str	r3, [sp, #16]
 8007334:	b182      	cbz	r2, 8007358 <__ieee754_pow+0xe8>
 8007336:	e05f      	b.n	80073f8 <__ieee754_pow+0x188>
 8007338:	2a00      	cmp	r2, #0
 800733a:	d15b      	bne.n	80073f4 <__ieee754_pow+0x184>
 800733c:	f1c3 0314 	rsb	r3, r3, #20
 8007340:	fa48 f103 	asr.w	r1, r8, r3
 8007344:	fa01 f303 	lsl.w	r3, r1, r3
 8007348:	4543      	cmp	r3, r8
 800734a:	f040 8488 	bne.w	8007c5e <__ieee754_pow+0x9ee>
 800734e:	f001 0101 	and.w	r1, r1, #1
 8007352:	f1c1 0302 	rsb	r3, r1, #2
 8007356:	9304      	str	r3, [sp, #16]
 8007358:	4b5c      	ldr	r3, [pc, #368]	; (80074cc <__ieee754_pow+0x25c>)
 800735a:	4598      	cmp	r8, r3
 800735c:	d132      	bne.n	80073c4 <__ieee754_pow+0x154>
 800735e:	f1b9 0f00 	cmp.w	r9, #0
 8007362:	f280 8478 	bge.w	8007c56 <__ieee754_pow+0x9e6>
 8007366:	4959      	ldr	r1, [pc, #356]	; (80074cc <__ieee754_pow+0x25c>)
 8007368:	4632      	mov	r2, r6
 800736a:	463b      	mov	r3, r7
 800736c:	2000      	movs	r0, #0
 800736e:	f7f9 fa11 	bl	8000794 <__aeabi_ddiv>
 8007372:	e79c      	b.n	80072ae <__ieee754_pow+0x3e>
 8007374:	2300      	movs	r3, #0
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	2a00      	cmp	r2, #0
 800737a:	d13d      	bne.n	80073f8 <__ieee754_pow+0x188>
 800737c:	4b51      	ldr	r3, [pc, #324]	; (80074c4 <__ieee754_pow+0x254>)
 800737e:	4598      	cmp	r8, r3
 8007380:	d1ea      	bne.n	8007358 <__ieee754_pow+0xe8>
 8007382:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007386:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800738a:	ea53 030a 	orrs.w	r3, r3, sl
 800738e:	f000 845a 	beq.w	8007c46 <__ieee754_pow+0x9d6>
 8007392:	4b4f      	ldr	r3, [pc, #316]	; (80074d0 <__ieee754_pow+0x260>)
 8007394:	429c      	cmp	r4, r3
 8007396:	dd08      	ble.n	80073aa <__ieee754_pow+0x13a>
 8007398:	f1b9 0f00 	cmp.w	r9, #0
 800739c:	f2c0 8457 	blt.w	8007c4e <__ieee754_pow+0x9de>
 80073a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073a4:	e783      	b.n	80072ae <__ieee754_pow+0x3e>
 80073a6:	2302      	movs	r3, #2
 80073a8:	e7e5      	b.n	8007376 <__ieee754_pow+0x106>
 80073aa:	f1b9 0f00 	cmp.w	r9, #0
 80073ae:	f04f 0000 	mov.w	r0, #0
 80073b2:	f04f 0100 	mov.w	r1, #0
 80073b6:	f6bf af7a 	bge.w	80072ae <__ieee754_pow+0x3e>
 80073ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 80073be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80073c2:	e774      	b.n	80072ae <__ieee754_pow+0x3e>
 80073c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80073c8:	d106      	bne.n	80073d8 <__ieee754_pow+0x168>
 80073ca:	4632      	mov	r2, r6
 80073cc:	463b      	mov	r3, r7
 80073ce:	4630      	mov	r0, r6
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f9 f8b5 	bl	8000540 <__aeabi_dmul>
 80073d6:	e76a      	b.n	80072ae <__ieee754_pow+0x3e>
 80073d8:	4b3e      	ldr	r3, [pc, #248]	; (80074d4 <__ieee754_pow+0x264>)
 80073da:	4599      	cmp	r9, r3
 80073dc:	d10c      	bne.n	80073f8 <__ieee754_pow+0x188>
 80073de:	2d00      	cmp	r5, #0
 80073e0:	db0a      	blt.n	80073f8 <__ieee754_pow+0x188>
 80073e2:	ec47 6b10 	vmov	d0, r6, r7
 80073e6:	b009      	add	sp, #36	; 0x24
 80073e8:	ecbd 8b06 	vpop	{d8-d10}
 80073ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	f000 be7a 	b.w	80080e8 <__ieee754_sqrt>
 80073f4:	2300      	movs	r3, #0
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	ec47 6b10 	vmov	d0, r6, r7
 80073fc:	f001 fdb6 	bl	8008f6c <fabs>
 8007400:	ec51 0b10 	vmov	r0, r1, d0
 8007404:	f1ba 0f00 	cmp.w	sl, #0
 8007408:	d129      	bne.n	800745e <__ieee754_pow+0x1ee>
 800740a:	b124      	cbz	r4, 8007416 <__ieee754_pow+0x1a6>
 800740c:	4b2f      	ldr	r3, [pc, #188]	; (80074cc <__ieee754_pow+0x25c>)
 800740e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007412:	429a      	cmp	r2, r3
 8007414:	d123      	bne.n	800745e <__ieee754_pow+0x1ee>
 8007416:	f1b9 0f00 	cmp.w	r9, #0
 800741a:	da05      	bge.n	8007428 <__ieee754_pow+0x1b8>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	2000      	movs	r0, #0
 8007422:	492a      	ldr	r1, [pc, #168]	; (80074cc <__ieee754_pow+0x25c>)
 8007424:	f7f9 f9b6 	bl	8000794 <__aeabi_ddiv>
 8007428:	2d00      	cmp	r5, #0
 800742a:	f6bf af40 	bge.w	80072ae <__ieee754_pow+0x3e>
 800742e:	9b04      	ldr	r3, [sp, #16]
 8007430:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007434:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007438:	4323      	orrs	r3, r4
 800743a:	d108      	bne.n	800744e <__ieee754_pow+0x1de>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4610      	mov	r0, r2
 8007442:	4619      	mov	r1, r3
 8007444:	f7f8 fec4 	bl	80001d0 <__aeabi_dsub>
 8007448:	4602      	mov	r2, r0
 800744a:	460b      	mov	r3, r1
 800744c:	e78f      	b.n	800736e <__ieee754_pow+0xfe>
 800744e:	9b04      	ldr	r3, [sp, #16]
 8007450:	2b01      	cmp	r3, #1
 8007452:	f47f af2c 	bne.w	80072ae <__ieee754_pow+0x3e>
 8007456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800745a:	4619      	mov	r1, r3
 800745c:	e727      	b.n	80072ae <__ieee754_pow+0x3e>
 800745e:	0feb      	lsrs	r3, r5, #31
 8007460:	3b01      	subs	r3, #1
 8007462:	9306      	str	r3, [sp, #24]
 8007464:	9a06      	ldr	r2, [sp, #24]
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	d102      	bne.n	8007472 <__ieee754_pow+0x202>
 800746c:	4632      	mov	r2, r6
 800746e:	463b      	mov	r3, r7
 8007470:	e7e6      	b.n	8007440 <__ieee754_pow+0x1d0>
 8007472:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <__ieee754_pow+0x268>)
 8007474:	4598      	cmp	r8, r3
 8007476:	f340 80fb 	ble.w	8007670 <__ieee754_pow+0x400>
 800747a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800747e:	4598      	cmp	r8, r3
 8007480:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <__ieee754_pow+0x260>)
 8007482:	dd0c      	ble.n	800749e <__ieee754_pow+0x22e>
 8007484:	429c      	cmp	r4, r3
 8007486:	dc0f      	bgt.n	80074a8 <__ieee754_pow+0x238>
 8007488:	f1b9 0f00 	cmp.w	r9, #0
 800748c:	da0f      	bge.n	80074ae <__ieee754_pow+0x23e>
 800748e:	2000      	movs	r0, #0
 8007490:	b009      	add	sp, #36	; 0x24
 8007492:	ecbd 8b06 	vpop	{d8-d10}
 8007496:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749a:	f001 bd5e 	b.w	8008f5a <__math_oflow>
 800749e:	429c      	cmp	r4, r3
 80074a0:	dbf2      	blt.n	8007488 <__ieee754_pow+0x218>
 80074a2:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <__ieee754_pow+0x25c>)
 80074a4:	429c      	cmp	r4, r3
 80074a6:	dd19      	ble.n	80074dc <__ieee754_pow+0x26c>
 80074a8:	f1b9 0f00 	cmp.w	r9, #0
 80074ac:	dcef      	bgt.n	800748e <__ieee754_pow+0x21e>
 80074ae:	2000      	movs	r0, #0
 80074b0:	b009      	add	sp, #36	; 0x24
 80074b2:	ecbd 8b06 	vpop	{d8-d10}
 80074b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	f001 bd45 	b.w	8008f48 <__math_uflow>
 80074be:	bf00      	nop
 80074c0:	fff00000 	.word	0xfff00000
 80074c4:	7ff00000 	.word	0x7ff00000
 80074c8:	433fffff 	.word	0x433fffff
 80074cc:	3ff00000 	.word	0x3ff00000
 80074d0:	3fefffff 	.word	0x3fefffff
 80074d4:	3fe00000 	.word	0x3fe00000
 80074d8:	41e00000 	.word	0x41e00000
 80074dc:	4b60      	ldr	r3, [pc, #384]	; (8007660 <__ieee754_pow+0x3f0>)
 80074de:	2200      	movs	r2, #0
 80074e0:	f7f8 fe76 	bl	80001d0 <__aeabi_dsub>
 80074e4:	a354      	add	r3, pc, #336	; (adr r3, 8007638 <__ieee754_pow+0x3c8>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	4604      	mov	r4, r0
 80074ec:	460d      	mov	r5, r1
 80074ee:	f7f9 f827 	bl	8000540 <__aeabi_dmul>
 80074f2:	a353      	add	r3, pc, #332	; (adr r3, 8007640 <__ieee754_pow+0x3d0>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	4606      	mov	r6, r0
 80074fa:	460f      	mov	r7, r1
 80074fc:	4620      	mov	r0, r4
 80074fe:	4629      	mov	r1, r5
 8007500:	f7f9 f81e 	bl	8000540 <__aeabi_dmul>
 8007504:	4b57      	ldr	r3, [pc, #348]	; (8007664 <__ieee754_pow+0x3f4>)
 8007506:	4682      	mov	sl, r0
 8007508:	468b      	mov	fp, r1
 800750a:	2200      	movs	r2, #0
 800750c:	4620      	mov	r0, r4
 800750e:	4629      	mov	r1, r5
 8007510:	f7f9 f816 	bl	8000540 <__aeabi_dmul>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	a14b      	add	r1, pc, #300	; (adr r1, 8007648 <__ieee754_pow+0x3d8>)
 800751a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800751e:	f7f8 fe57 	bl	80001d0 <__aeabi_dsub>
 8007522:	4622      	mov	r2, r4
 8007524:	462b      	mov	r3, r5
 8007526:	f7f9 f80b 	bl	8000540 <__aeabi_dmul>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	2000      	movs	r0, #0
 8007530:	494d      	ldr	r1, [pc, #308]	; (8007668 <__ieee754_pow+0x3f8>)
 8007532:	f7f8 fe4d 	bl	80001d0 <__aeabi_dsub>
 8007536:	4622      	mov	r2, r4
 8007538:	4680      	mov	r8, r0
 800753a:	4689      	mov	r9, r1
 800753c:	462b      	mov	r3, r5
 800753e:	4620      	mov	r0, r4
 8007540:	4629      	mov	r1, r5
 8007542:	f7f8 fffd 	bl	8000540 <__aeabi_dmul>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	4640      	mov	r0, r8
 800754c:	4649      	mov	r1, r9
 800754e:	f7f8 fff7 	bl	8000540 <__aeabi_dmul>
 8007552:	a33f      	add	r3, pc, #252	; (adr r3, 8007650 <__ieee754_pow+0x3e0>)
 8007554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007558:	f7f8 fff2 	bl	8000540 <__aeabi_dmul>
 800755c:	4602      	mov	r2, r0
 800755e:	460b      	mov	r3, r1
 8007560:	4650      	mov	r0, sl
 8007562:	4659      	mov	r1, fp
 8007564:	f7f8 fe34 	bl	80001d0 <__aeabi_dsub>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4680      	mov	r8, r0
 800756e:	4689      	mov	r9, r1
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f8 fe2e 	bl	80001d4 <__adddf3>
 8007578:	2000      	movs	r0, #0
 800757a:	4632      	mov	r2, r6
 800757c:	463b      	mov	r3, r7
 800757e:	4604      	mov	r4, r0
 8007580:	460d      	mov	r5, r1
 8007582:	f7f8 fe25 	bl	80001d0 <__aeabi_dsub>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4640      	mov	r0, r8
 800758c:	4649      	mov	r1, r9
 800758e:	f7f8 fe1f 	bl	80001d0 <__aeabi_dsub>
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	9a06      	ldr	r2, [sp, #24]
 8007596:	3b01      	subs	r3, #1
 8007598:	4313      	orrs	r3, r2
 800759a:	4682      	mov	sl, r0
 800759c:	468b      	mov	fp, r1
 800759e:	f040 81e7 	bne.w	8007970 <__ieee754_pow+0x700>
 80075a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007658 <__ieee754_pow+0x3e8>
 80075a6:	eeb0 8a47 	vmov.f32	s16, s14
 80075aa:	eef0 8a67 	vmov.f32	s17, s15
 80075ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075b2:	2600      	movs	r6, #0
 80075b4:	4632      	mov	r2, r6
 80075b6:	463b      	mov	r3, r7
 80075b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075bc:	f7f8 fe08 	bl	80001d0 <__aeabi_dsub>
 80075c0:	4622      	mov	r2, r4
 80075c2:	462b      	mov	r3, r5
 80075c4:	f7f8 ffbc 	bl	8000540 <__aeabi_dmul>
 80075c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075cc:	4680      	mov	r8, r0
 80075ce:	4689      	mov	r9, r1
 80075d0:	4650      	mov	r0, sl
 80075d2:	4659      	mov	r1, fp
 80075d4:	f7f8 ffb4 	bl	8000540 <__aeabi_dmul>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f8 fdf8 	bl	80001d4 <__adddf3>
 80075e4:	4632      	mov	r2, r6
 80075e6:	463b      	mov	r3, r7
 80075e8:	4680      	mov	r8, r0
 80075ea:	4689      	mov	r9, r1
 80075ec:	4620      	mov	r0, r4
 80075ee:	4629      	mov	r1, r5
 80075f0:	f7f8 ffa6 	bl	8000540 <__aeabi_dmul>
 80075f4:	460b      	mov	r3, r1
 80075f6:	4604      	mov	r4, r0
 80075f8:	460d      	mov	r5, r1
 80075fa:	4602      	mov	r2, r0
 80075fc:	4649      	mov	r1, r9
 80075fe:	4640      	mov	r0, r8
 8007600:	f7f8 fde8 	bl	80001d4 <__adddf3>
 8007604:	4b19      	ldr	r3, [pc, #100]	; (800766c <__ieee754_pow+0x3fc>)
 8007606:	4299      	cmp	r1, r3
 8007608:	ec45 4b19 	vmov	d9, r4, r5
 800760c:	4606      	mov	r6, r0
 800760e:	460f      	mov	r7, r1
 8007610:	468b      	mov	fp, r1
 8007612:	f340 82f1 	ble.w	8007bf8 <__ieee754_pow+0x988>
 8007616:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800761a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800761e:	4303      	orrs	r3, r0
 8007620:	f000 81e4 	beq.w	80079ec <__ieee754_pow+0x77c>
 8007624:	ec51 0b18 	vmov	r0, r1, d8
 8007628:	2200      	movs	r2, #0
 800762a:	2300      	movs	r3, #0
 800762c:	f7f9 f9fa 	bl	8000a24 <__aeabi_dcmplt>
 8007630:	3800      	subs	r0, #0
 8007632:	bf18      	it	ne
 8007634:	2001      	movne	r0, #1
 8007636:	e72b      	b.n	8007490 <__ieee754_pow+0x220>
 8007638:	60000000 	.word	0x60000000
 800763c:	3ff71547 	.word	0x3ff71547
 8007640:	f85ddf44 	.word	0xf85ddf44
 8007644:	3e54ae0b 	.word	0x3e54ae0b
 8007648:	55555555 	.word	0x55555555
 800764c:	3fd55555 	.word	0x3fd55555
 8007650:	652b82fe 	.word	0x652b82fe
 8007654:	3ff71547 	.word	0x3ff71547
 8007658:	00000000 	.word	0x00000000
 800765c:	bff00000 	.word	0xbff00000
 8007660:	3ff00000 	.word	0x3ff00000
 8007664:	3fd00000 	.word	0x3fd00000
 8007668:	3fe00000 	.word	0x3fe00000
 800766c:	408fffff 	.word	0x408fffff
 8007670:	4bd5      	ldr	r3, [pc, #852]	; (80079c8 <__ieee754_pow+0x758>)
 8007672:	402b      	ands	r3, r5
 8007674:	2200      	movs	r2, #0
 8007676:	b92b      	cbnz	r3, 8007684 <__ieee754_pow+0x414>
 8007678:	4bd4      	ldr	r3, [pc, #848]	; (80079cc <__ieee754_pow+0x75c>)
 800767a:	f7f8 ff61 	bl	8000540 <__aeabi_dmul>
 800767e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007682:	460c      	mov	r4, r1
 8007684:	1523      	asrs	r3, r4, #20
 8007686:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800768a:	4413      	add	r3, r2
 800768c:	9305      	str	r3, [sp, #20]
 800768e:	4bd0      	ldr	r3, [pc, #832]	; (80079d0 <__ieee754_pow+0x760>)
 8007690:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007694:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007698:	429c      	cmp	r4, r3
 800769a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800769e:	dd08      	ble.n	80076b2 <__ieee754_pow+0x442>
 80076a0:	4bcc      	ldr	r3, [pc, #816]	; (80079d4 <__ieee754_pow+0x764>)
 80076a2:	429c      	cmp	r4, r3
 80076a4:	f340 8162 	ble.w	800796c <__ieee754_pow+0x6fc>
 80076a8:	9b05      	ldr	r3, [sp, #20]
 80076aa:	3301      	adds	r3, #1
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80076b2:	2400      	movs	r4, #0
 80076b4:	00e3      	lsls	r3, r4, #3
 80076b6:	9307      	str	r3, [sp, #28]
 80076b8:	4bc7      	ldr	r3, [pc, #796]	; (80079d8 <__ieee754_pow+0x768>)
 80076ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076be:	ed93 7b00 	vldr	d7, [r3]
 80076c2:	4629      	mov	r1, r5
 80076c4:	ec53 2b17 	vmov	r2, r3, d7
 80076c8:	eeb0 9a47 	vmov.f32	s18, s14
 80076cc:	eef0 9a67 	vmov.f32	s19, s15
 80076d0:	4682      	mov	sl, r0
 80076d2:	f7f8 fd7d 	bl	80001d0 <__aeabi_dsub>
 80076d6:	4652      	mov	r2, sl
 80076d8:	4606      	mov	r6, r0
 80076da:	460f      	mov	r7, r1
 80076dc:	462b      	mov	r3, r5
 80076de:	ec51 0b19 	vmov	r0, r1, d9
 80076e2:	f7f8 fd77 	bl	80001d4 <__adddf3>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	2000      	movs	r0, #0
 80076ec:	49bb      	ldr	r1, [pc, #748]	; (80079dc <__ieee754_pow+0x76c>)
 80076ee:	f7f9 f851 	bl	8000794 <__aeabi_ddiv>
 80076f2:	ec41 0b1a 	vmov	d10, r0, r1
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4630      	mov	r0, r6
 80076fc:	4639      	mov	r1, r7
 80076fe:	f7f8 ff1f 	bl	8000540 <__aeabi_dmul>
 8007702:	2300      	movs	r3, #0
 8007704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800770e:	46ab      	mov	fp, r5
 8007710:	106d      	asrs	r5, r5, #1
 8007712:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007716:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800771a:	ec41 0b18 	vmov	d8, r0, r1
 800771e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007722:	2200      	movs	r2, #0
 8007724:	4640      	mov	r0, r8
 8007726:	4649      	mov	r1, r9
 8007728:	4614      	mov	r4, r2
 800772a:	461d      	mov	r5, r3
 800772c:	f7f8 ff08 	bl	8000540 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4630      	mov	r0, r6
 8007736:	4639      	mov	r1, r7
 8007738:	f7f8 fd4a 	bl	80001d0 <__aeabi_dsub>
 800773c:	ec53 2b19 	vmov	r2, r3, d9
 8007740:	4606      	mov	r6, r0
 8007742:	460f      	mov	r7, r1
 8007744:	4620      	mov	r0, r4
 8007746:	4629      	mov	r1, r5
 8007748:	f7f8 fd42 	bl	80001d0 <__aeabi_dsub>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	4650      	mov	r0, sl
 8007752:	4659      	mov	r1, fp
 8007754:	f7f8 fd3c 	bl	80001d0 <__aeabi_dsub>
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	f7f8 fef0 	bl	8000540 <__aeabi_dmul>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	4630      	mov	r0, r6
 8007766:	4639      	mov	r1, r7
 8007768:	f7f8 fd32 	bl	80001d0 <__aeabi_dsub>
 800776c:	ec53 2b1a 	vmov	r2, r3, d10
 8007770:	f7f8 fee6 	bl	8000540 <__aeabi_dmul>
 8007774:	ec53 2b18 	vmov	r2, r3, d8
 8007778:	ec41 0b19 	vmov	d9, r0, r1
 800777c:	ec51 0b18 	vmov	r0, r1, d8
 8007780:	f7f8 fede 	bl	8000540 <__aeabi_dmul>
 8007784:	a37c      	add	r3, pc, #496	; (adr r3, 8007978 <__ieee754_pow+0x708>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	4604      	mov	r4, r0
 800778c:	460d      	mov	r5, r1
 800778e:	f7f8 fed7 	bl	8000540 <__aeabi_dmul>
 8007792:	a37b      	add	r3, pc, #492	; (adr r3, 8007980 <__ieee754_pow+0x710>)
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f7f8 fd1c 	bl	80001d4 <__adddf3>
 800779c:	4622      	mov	r2, r4
 800779e:	462b      	mov	r3, r5
 80077a0:	f7f8 fece 	bl	8000540 <__aeabi_dmul>
 80077a4:	a378      	add	r3, pc, #480	; (adr r3, 8007988 <__ieee754_pow+0x718>)
 80077a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077aa:	f7f8 fd13 	bl	80001d4 <__adddf3>
 80077ae:	4622      	mov	r2, r4
 80077b0:	462b      	mov	r3, r5
 80077b2:	f7f8 fec5 	bl	8000540 <__aeabi_dmul>
 80077b6:	a376      	add	r3, pc, #472	; (adr r3, 8007990 <__ieee754_pow+0x720>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f7f8 fd0a 	bl	80001d4 <__adddf3>
 80077c0:	4622      	mov	r2, r4
 80077c2:	462b      	mov	r3, r5
 80077c4:	f7f8 febc 	bl	8000540 <__aeabi_dmul>
 80077c8:	a373      	add	r3, pc, #460	; (adr r3, 8007998 <__ieee754_pow+0x728>)
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f7f8 fd01 	bl	80001d4 <__adddf3>
 80077d2:	4622      	mov	r2, r4
 80077d4:	462b      	mov	r3, r5
 80077d6:	f7f8 feb3 	bl	8000540 <__aeabi_dmul>
 80077da:	a371      	add	r3, pc, #452	; (adr r3, 80079a0 <__ieee754_pow+0x730>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f7f8 fcf8 	bl	80001d4 <__adddf3>
 80077e4:	4622      	mov	r2, r4
 80077e6:	4606      	mov	r6, r0
 80077e8:	460f      	mov	r7, r1
 80077ea:	462b      	mov	r3, r5
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fea6 	bl	8000540 <__aeabi_dmul>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f8 fea0 	bl	8000540 <__aeabi_dmul>
 8007800:	4642      	mov	r2, r8
 8007802:	4604      	mov	r4, r0
 8007804:	460d      	mov	r5, r1
 8007806:	464b      	mov	r3, r9
 8007808:	ec51 0b18 	vmov	r0, r1, d8
 800780c:	f7f8 fce2 	bl	80001d4 <__adddf3>
 8007810:	ec53 2b19 	vmov	r2, r3, d9
 8007814:	f7f8 fe94 	bl	8000540 <__aeabi_dmul>
 8007818:	4622      	mov	r2, r4
 800781a:	462b      	mov	r3, r5
 800781c:	f7f8 fcda 	bl	80001d4 <__adddf3>
 8007820:	4642      	mov	r2, r8
 8007822:	4682      	mov	sl, r0
 8007824:	468b      	mov	fp, r1
 8007826:	464b      	mov	r3, r9
 8007828:	4640      	mov	r0, r8
 800782a:	4649      	mov	r1, r9
 800782c:	f7f8 fe88 	bl	8000540 <__aeabi_dmul>
 8007830:	4b6b      	ldr	r3, [pc, #428]	; (80079e0 <__ieee754_pow+0x770>)
 8007832:	2200      	movs	r2, #0
 8007834:	4606      	mov	r6, r0
 8007836:	460f      	mov	r7, r1
 8007838:	f7f8 fccc 	bl	80001d4 <__adddf3>
 800783c:	4652      	mov	r2, sl
 800783e:	465b      	mov	r3, fp
 8007840:	f7f8 fcc8 	bl	80001d4 <__adddf3>
 8007844:	2000      	movs	r0, #0
 8007846:	4604      	mov	r4, r0
 8007848:	460d      	mov	r5, r1
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4640      	mov	r0, r8
 8007850:	4649      	mov	r1, r9
 8007852:	f7f8 fe75 	bl	8000540 <__aeabi_dmul>
 8007856:	4b62      	ldr	r3, [pc, #392]	; (80079e0 <__ieee754_pow+0x770>)
 8007858:	4680      	mov	r8, r0
 800785a:	4689      	mov	r9, r1
 800785c:	2200      	movs	r2, #0
 800785e:	4620      	mov	r0, r4
 8007860:	4629      	mov	r1, r5
 8007862:	f7f8 fcb5 	bl	80001d0 <__aeabi_dsub>
 8007866:	4632      	mov	r2, r6
 8007868:	463b      	mov	r3, r7
 800786a:	f7f8 fcb1 	bl	80001d0 <__aeabi_dsub>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4650      	mov	r0, sl
 8007874:	4659      	mov	r1, fp
 8007876:	f7f8 fcab 	bl	80001d0 <__aeabi_dsub>
 800787a:	ec53 2b18 	vmov	r2, r3, d8
 800787e:	f7f8 fe5f 	bl	8000540 <__aeabi_dmul>
 8007882:	4622      	mov	r2, r4
 8007884:	4606      	mov	r6, r0
 8007886:	460f      	mov	r7, r1
 8007888:	462b      	mov	r3, r5
 800788a:	ec51 0b19 	vmov	r0, r1, d9
 800788e:	f7f8 fe57 	bl	8000540 <__aeabi_dmul>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	4630      	mov	r0, r6
 8007898:	4639      	mov	r1, r7
 800789a:	f7f8 fc9b 	bl	80001d4 <__adddf3>
 800789e:	4606      	mov	r6, r0
 80078a0:	460f      	mov	r7, r1
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4640      	mov	r0, r8
 80078a8:	4649      	mov	r1, r9
 80078aa:	f7f8 fc93 	bl	80001d4 <__adddf3>
 80078ae:	a33e      	add	r3, pc, #248	; (adr r3, 80079a8 <__ieee754_pow+0x738>)
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	2000      	movs	r0, #0
 80078b6:	4604      	mov	r4, r0
 80078b8:	460d      	mov	r5, r1
 80078ba:	f7f8 fe41 	bl	8000540 <__aeabi_dmul>
 80078be:	4642      	mov	r2, r8
 80078c0:	ec41 0b18 	vmov	d8, r0, r1
 80078c4:	464b      	mov	r3, r9
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f8 fc81 	bl	80001d0 <__aeabi_dsub>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4630      	mov	r0, r6
 80078d4:	4639      	mov	r1, r7
 80078d6:	f7f8 fc7b 	bl	80001d0 <__aeabi_dsub>
 80078da:	a335      	add	r3, pc, #212	; (adr r3, 80079b0 <__ieee754_pow+0x740>)
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f7f8 fe2e 	bl	8000540 <__aeabi_dmul>
 80078e4:	a334      	add	r3, pc, #208	; (adr r3, 80079b8 <__ieee754_pow+0x748>)
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	4606      	mov	r6, r0
 80078ec:	460f      	mov	r7, r1
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f8 fe25 	bl	8000540 <__aeabi_dmul>
 80078f6:	4602      	mov	r2, r0
 80078f8:	460b      	mov	r3, r1
 80078fa:	4630      	mov	r0, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	f7f8 fc69 	bl	80001d4 <__adddf3>
 8007902:	9a07      	ldr	r2, [sp, #28]
 8007904:	4b37      	ldr	r3, [pc, #220]	; (80079e4 <__ieee754_pow+0x774>)
 8007906:	4413      	add	r3, r2
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	f7f8 fc62 	bl	80001d4 <__adddf3>
 8007910:	4682      	mov	sl, r0
 8007912:	9805      	ldr	r0, [sp, #20]
 8007914:	468b      	mov	fp, r1
 8007916:	f7f8 fda9 	bl	800046c <__aeabi_i2d>
 800791a:	9a07      	ldr	r2, [sp, #28]
 800791c:	4b32      	ldr	r3, [pc, #200]	; (80079e8 <__ieee754_pow+0x778>)
 800791e:	4413      	add	r3, r2
 8007920:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007924:	4606      	mov	r6, r0
 8007926:	460f      	mov	r7, r1
 8007928:	4652      	mov	r2, sl
 800792a:	465b      	mov	r3, fp
 800792c:	ec51 0b18 	vmov	r0, r1, d8
 8007930:	f7f8 fc50 	bl	80001d4 <__adddf3>
 8007934:	4642      	mov	r2, r8
 8007936:	464b      	mov	r3, r9
 8007938:	f7f8 fc4c 	bl	80001d4 <__adddf3>
 800793c:	4632      	mov	r2, r6
 800793e:	463b      	mov	r3, r7
 8007940:	f7f8 fc48 	bl	80001d4 <__adddf3>
 8007944:	2000      	movs	r0, #0
 8007946:	4632      	mov	r2, r6
 8007948:	463b      	mov	r3, r7
 800794a:	4604      	mov	r4, r0
 800794c:	460d      	mov	r5, r1
 800794e:	f7f8 fc3f 	bl	80001d0 <__aeabi_dsub>
 8007952:	4642      	mov	r2, r8
 8007954:	464b      	mov	r3, r9
 8007956:	f7f8 fc3b 	bl	80001d0 <__aeabi_dsub>
 800795a:	ec53 2b18 	vmov	r2, r3, d8
 800795e:	f7f8 fc37 	bl	80001d0 <__aeabi_dsub>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4650      	mov	r0, sl
 8007968:	4659      	mov	r1, fp
 800796a:	e610      	b.n	800758e <__ieee754_pow+0x31e>
 800796c:	2401      	movs	r4, #1
 800796e:	e6a1      	b.n	80076b4 <__ieee754_pow+0x444>
 8007970:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80079c0 <__ieee754_pow+0x750>
 8007974:	e617      	b.n	80075a6 <__ieee754_pow+0x336>
 8007976:	bf00      	nop
 8007978:	4a454eef 	.word	0x4a454eef
 800797c:	3fca7e28 	.word	0x3fca7e28
 8007980:	93c9db65 	.word	0x93c9db65
 8007984:	3fcd864a 	.word	0x3fcd864a
 8007988:	a91d4101 	.word	0xa91d4101
 800798c:	3fd17460 	.word	0x3fd17460
 8007990:	518f264d 	.word	0x518f264d
 8007994:	3fd55555 	.word	0x3fd55555
 8007998:	db6fabff 	.word	0xdb6fabff
 800799c:	3fdb6db6 	.word	0x3fdb6db6
 80079a0:	33333303 	.word	0x33333303
 80079a4:	3fe33333 	.word	0x3fe33333
 80079a8:	e0000000 	.word	0xe0000000
 80079ac:	3feec709 	.word	0x3feec709
 80079b0:	dc3a03fd 	.word	0xdc3a03fd
 80079b4:	3feec709 	.word	0x3feec709
 80079b8:	145b01f5 	.word	0x145b01f5
 80079bc:	be3e2fe0 	.word	0xbe3e2fe0
 80079c0:	00000000 	.word	0x00000000
 80079c4:	3ff00000 	.word	0x3ff00000
 80079c8:	7ff00000 	.word	0x7ff00000
 80079cc:	43400000 	.word	0x43400000
 80079d0:	0003988e 	.word	0x0003988e
 80079d4:	000bb679 	.word	0x000bb679
 80079d8:	080099e0 	.word	0x080099e0
 80079dc:	3ff00000 	.word	0x3ff00000
 80079e0:	40080000 	.word	0x40080000
 80079e4:	08009a00 	.word	0x08009a00
 80079e8:	080099f0 	.word	0x080099f0
 80079ec:	a3b5      	add	r3, pc, #724	; (adr r3, 8007cc4 <__ieee754_pow+0xa54>)
 80079ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f2:	4640      	mov	r0, r8
 80079f4:	4649      	mov	r1, r9
 80079f6:	f7f8 fbed 	bl	80001d4 <__adddf3>
 80079fa:	4622      	mov	r2, r4
 80079fc:	ec41 0b1a 	vmov	d10, r0, r1
 8007a00:	462b      	mov	r3, r5
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f8 fbe3 	bl	80001d0 <__aeabi_dsub>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	ec51 0b1a 	vmov	r0, r1, d10
 8007a12:	f7f9 f825 	bl	8000a60 <__aeabi_dcmpgt>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	f47f ae04 	bne.w	8007624 <__ieee754_pow+0x3b4>
 8007a1c:	4aa4      	ldr	r2, [pc, #656]	; (8007cb0 <__ieee754_pow+0xa40>)
 8007a1e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a22:	4293      	cmp	r3, r2
 8007a24:	f340 8108 	ble.w	8007c38 <__ieee754_pow+0x9c8>
 8007a28:	151b      	asrs	r3, r3, #20
 8007a2a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007a2e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007a32:	fa4a f303 	asr.w	r3, sl, r3
 8007a36:	445b      	add	r3, fp
 8007a38:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007a3c:	4e9d      	ldr	r6, [pc, #628]	; (8007cb4 <__ieee754_pow+0xa44>)
 8007a3e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007a42:	4116      	asrs	r6, r2
 8007a44:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007a48:	2000      	movs	r0, #0
 8007a4a:	ea23 0106 	bic.w	r1, r3, r6
 8007a4e:	f1c2 0214 	rsb	r2, r2, #20
 8007a52:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007a56:	fa4a fa02 	asr.w	sl, sl, r2
 8007a5a:	f1bb 0f00 	cmp.w	fp, #0
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	4620      	mov	r0, r4
 8007a64:	4629      	mov	r1, r5
 8007a66:	bfb8      	it	lt
 8007a68:	f1ca 0a00 	rsblt	sl, sl, #0
 8007a6c:	f7f8 fbb0 	bl	80001d0 <__aeabi_dsub>
 8007a70:	ec41 0b19 	vmov	d9, r0, r1
 8007a74:	4642      	mov	r2, r8
 8007a76:	464b      	mov	r3, r9
 8007a78:	ec51 0b19 	vmov	r0, r1, d9
 8007a7c:	f7f8 fbaa 	bl	80001d4 <__adddf3>
 8007a80:	a37b      	add	r3, pc, #492	; (adr r3, 8007c70 <__ieee754_pow+0xa00>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	2000      	movs	r0, #0
 8007a88:	4604      	mov	r4, r0
 8007a8a:	460d      	mov	r5, r1
 8007a8c:	f7f8 fd58 	bl	8000540 <__aeabi_dmul>
 8007a90:	ec53 2b19 	vmov	r2, r3, d9
 8007a94:	4606      	mov	r6, r0
 8007a96:	460f      	mov	r7, r1
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f7f8 fb98 	bl	80001d0 <__aeabi_dsub>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	4649      	mov	r1, r9
 8007aa8:	f7f8 fb92 	bl	80001d0 <__aeabi_dsub>
 8007aac:	a372      	add	r3, pc, #456	; (adr r3, 8007c78 <__ieee754_pow+0xa08>)
 8007aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab2:	f7f8 fd45 	bl	8000540 <__aeabi_dmul>
 8007ab6:	a372      	add	r3, pc, #456	; (adr r3, 8007c80 <__ieee754_pow+0xa10>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	4680      	mov	r8, r0
 8007abe:	4689      	mov	r9, r1
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	f7f8 fd3c 	bl	8000540 <__aeabi_dmul>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4640      	mov	r0, r8
 8007ace:	4649      	mov	r1, r9
 8007ad0:	f7f8 fb80 	bl	80001d4 <__adddf3>
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	460d      	mov	r5, r1
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4630      	mov	r0, r6
 8007ade:	4639      	mov	r1, r7
 8007ae0:	f7f8 fb78 	bl	80001d4 <__adddf3>
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	4680      	mov	r8, r0
 8007aea:	4689      	mov	r9, r1
 8007aec:	f7f8 fb70 	bl	80001d0 <__aeabi_dsub>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4620      	mov	r0, r4
 8007af6:	4629      	mov	r1, r5
 8007af8:	f7f8 fb6a 	bl	80001d0 <__aeabi_dsub>
 8007afc:	4642      	mov	r2, r8
 8007afe:	4606      	mov	r6, r0
 8007b00:	460f      	mov	r7, r1
 8007b02:	464b      	mov	r3, r9
 8007b04:	4640      	mov	r0, r8
 8007b06:	4649      	mov	r1, r9
 8007b08:	f7f8 fd1a 	bl	8000540 <__aeabi_dmul>
 8007b0c:	a35e      	add	r3, pc, #376	; (adr r3, 8007c88 <__ieee754_pow+0xa18>)
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	4604      	mov	r4, r0
 8007b14:	460d      	mov	r5, r1
 8007b16:	f7f8 fd13 	bl	8000540 <__aeabi_dmul>
 8007b1a:	a35d      	add	r3, pc, #372	; (adr r3, 8007c90 <__ieee754_pow+0xa20>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	f7f8 fb56 	bl	80001d0 <__aeabi_dsub>
 8007b24:	4622      	mov	r2, r4
 8007b26:	462b      	mov	r3, r5
 8007b28:	f7f8 fd0a 	bl	8000540 <__aeabi_dmul>
 8007b2c:	a35a      	add	r3, pc, #360	; (adr r3, 8007c98 <__ieee754_pow+0xa28>)
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	f7f8 fb4f 	bl	80001d4 <__adddf3>
 8007b36:	4622      	mov	r2, r4
 8007b38:	462b      	mov	r3, r5
 8007b3a:	f7f8 fd01 	bl	8000540 <__aeabi_dmul>
 8007b3e:	a358      	add	r3, pc, #352	; (adr r3, 8007ca0 <__ieee754_pow+0xa30>)
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f7f8 fb44 	bl	80001d0 <__aeabi_dsub>
 8007b48:	4622      	mov	r2, r4
 8007b4a:	462b      	mov	r3, r5
 8007b4c:	f7f8 fcf8 	bl	8000540 <__aeabi_dmul>
 8007b50:	a355      	add	r3, pc, #340	; (adr r3, 8007ca8 <__ieee754_pow+0xa38>)
 8007b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b56:	f7f8 fb3d 	bl	80001d4 <__adddf3>
 8007b5a:	4622      	mov	r2, r4
 8007b5c:	462b      	mov	r3, r5
 8007b5e:	f7f8 fcef 	bl	8000540 <__aeabi_dmul>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4640      	mov	r0, r8
 8007b68:	4649      	mov	r1, r9
 8007b6a:	f7f8 fb31 	bl	80001d0 <__aeabi_dsub>
 8007b6e:	4604      	mov	r4, r0
 8007b70:	460d      	mov	r5, r1
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4640      	mov	r0, r8
 8007b78:	4649      	mov	r1, r9
 8007b7a:	f7f8 fce1 	bl	8000540 <__aeabi_dmul>
 8007b7e:	2200      	movs	r2, #0
 8007b80:	ec41 0b19 	vmov	d9, r0, r1
 8007b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b88:	4620      	mov	r0, r4
 8007b8a:	4629      	mov	r1, r5
 8007b8c:	f7f8 fb20 	bl	80001d0 <__aeabi_dsub>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	ec51 0b19 	vmov	r0, r1, d9
 8007b98:	f7f8 fdfc 	bl	8000794 <__aeabi_ddiv>
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	460d      	mov	r5, r1
 8007ba2:	463b      	mov	r3, r7
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	f7f8 fcca 	bl	8000540 <__aeabi_dmul>
 8007bac:	4632      	mov	r2, r6
 8007bae:	463b      	mov	r3, r7
 8007bb0:	f7f8 fb10 	bl	80001d4 <__adddf3>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4620      	mov	r0, r4
 8007bba:	4629      	mov	r1, r5
 8007bbc:	f7f8 fb08 	bl	80001d0 <__aeabi_dsub>
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	464b      	mov	r3, r9
 8007bc4:	f7f8 fb04 	bl	80001d0 <__aeabi_dsub>
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4602      	mov	r2, r0
 8007bcc:	493a      	ldr	r1, [pc, #232]	; (8007cb8 <__ieee754_pow+0xa48>)
 8007bce:	2000      	movs	r0, #0
 8007bd0:	f7f8 fafe 	bl	80001d0 <__aeabi_dsub>
 8007bd4:	ec41 0b10 	vmov	d0, r0, r1
 8007bd8:	ee10 3a90 	vmov	r3, s1
 8007bdc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007be4:	da2b      	bge.n	8007c3e <__ieee754_pow+0x9ce>
 8007be6:	4650      	mov	r0, sl
 8007be8:	f001 fa56 	bl	8009098 <scalbn>
 8007bec:	ec51 0b10 	vmov	r0, r1, d0
 8007bf0:	ec53 2b18 	vmov	r2, r3, d8
 8007bf4:	f7ff bbed 	b.w	80073d2 <__ieee754_pow+0x162>
 8007bf8:	4b30      	ldr	r3, [pc, #192]	; (8007cbc <__ieee754_pow+0xa4c>)
 8007bfa:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007bfe:	429e      	cmp	r6, r3
 8007c00:	f77f af0c 	ble.w	8007a1c <__ieee754_pow+0x7ac>
 8007c04:	4b2e      	ldr	r3, [pc, #184]	; (8007cc0 <__ieee754_pow+0xa50>)
 8007c06:	440b      	add	r3, r1
 8007c08:	4303      	orrs	r3, r0
 8007c0a:	d009      	beq.n	8007c20 <__ieee754_pow+0x9b0>
 8007c0c:	ec51 0b18 	vmov	r0, r1, d8
 8007c10:	2200      	movs	r2, #0
 8007c12:	2300      	movs	r3, #0
 8007c14:	f7f8 ff06 	bl	8000a24 <__aeabi_dcmplt>
 8007c18:	3800      	subs	r0, #0
 8007c1a:	bf18      	it	ne
 8007c1c:	2001      	movne	r0, #1
 8007c1e:	e447      	b.n	80074b0 <__ieee754_pow+0x240>
 8007c20:	4622      	mov	r2, r4
 8007c22:	462b      	mov	r3, r5
 8007c24:	f7f8 fad4 	bl	80001d0 <__aeabi_dsub>
 8007c28:	4642      	mov	r2, r8
 8007c2a:	464b      	mov	r3, r9
 8007c2c:	f7f8 ff0e 	bl	8000a4c <__aeabi_dcmpge>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	f43f aef3 	beq.w	8007a1c <__ieee754_pow+0x7ac>
 8007c36:	e7e9      	b.n	8007c0c <__ieee754_pow+0x99c>
 8007c38:	f04f 0a00 	mov.w	sl, #0
 8007c3c:	e71a      	b.n	8007a74 <__ieee754_pow+0x804>
 8007c3e:	ec51 0b10 	vmov	r0, r1, d0
 8007c42:	4619      	mov	r1, r3
 8007c44:	e7d4      	b.n	8007bf0 <__ieee754_pow+0x980>
 8007c46:	491c      	ldr	r1, [pc, #112]	; (8007cb8 <__ieee754_pow+0xa48>)
 8007c48:	2000      	movs	r0, #0
 8007c4a:	f7ff bb30 	b.w	80072ae <__ieee754_pow+0x3e>
 8007c4e:	2000      	movs	r0, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	f7ff bb2c 	b.w	80072ae <__ieee754_pow+0x3e>
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7ff bb28 	b.w	80072ae <__ieee754_pow+0x3e>
 8007c5e:	9204      	str	r2, [sp, #16]
 8007c60:	f7ff bb7a 	b.w	8007358 <__ieee754_pow+0xe8>
 8007c64:	2300      	movs	r3, #0
 8007c66:	f7ff bb64 	b.w	8007332 <__ieee754_pow+0xc2>
 8007c6a:	bf00      	nop
 8007c6c:	f3af 8000 	nop.w
 8007c70:	00000000 	.word	0x00000000
 8007c74:	3fe62e43 	.word	0x3fe62e43
 8007c78:	fefa39ef 	.word	0xfefa39ef
 8007c7c:	3fe62e42 	.word	0x3fe62e42
 8007c80:	0ca86c39 	.word	0x0ca86c39
 8007c84:	be205c61 	.word	0xbe205c61
 8007c88:	72bea4d0 	.word	0x72bea4d0
 8007c8c:	3e663769 	.word	0x3e663769
 8007c90:	c5d26bf1 	.word	0xc5d26bf1
 8007c94:	3ebbbd41 	.word	0x3ebbbd41
 8007c98:	af25de2c 	.word	0xaf25de2c
 8007c9c:	3f11566a 	.word	0x3f11566a
 8007ca0:	16bebd93 	.word	0x16bebd93
 8007ca4:	3f66c16c 	.word	0x3f66c16c
 8007ca8:	5555553e 	.word	0x5555553e
 8007cac:	3fc55555 	.word	0x3fc55555
 8007cb0:	3fe00000 	.word	0x3fe00000
 8007cb4:	000fffff 	.word	0x000fffff
 8007cb8:	3ff00000 	.word	0x3ff00000
 8007cbc:	4090cbff 	.word	0x4090cbff
 8007cc0:	3f6f3400 	.word	0x3f6f3400
 8007cc4:	652b82fe 	.word	0x652b82fe
 8007cc8:	3c971547 	.word	0x3c971547
 8007ccc:	00000000 	.word	0x00000000

08007cd0 <__ieee754_rem_pio2>:
 8007cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd4:	ed2d 8b02 	vpush	{d8}
 8007cd8:	ec55 4b10 	vmov	r4, r5, d0
 8007cdc:	4bca      	ldr	r3, [pc, #808]	; (8008008 <__ieee754_rem_pio2+0x338>)
 8007cde:	b08b      	sub	sp, #44	; 0x2c
 8007ce0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007ce4:	4598      	cmp	r8, r3
 8007ce6:	4682      	mov	sl, r0
 8007ce8:	9502      	str	r5, [sp, #8]
 8007cea:	dc08      	bgt.n	8007cfe <__ieee754_rem_pio2+0x2e>
 8007cec:	2200      	movs	r2, #0
 8007cee:	2300      	movs	r3, #0
 8007cf0:	ed80 0b00 	vstr	d0, [r0]
 8007cf4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007cf8:	f04f 0b00 	mov.w	fp, #0
 8007cfc:	e028      	b.n	8007d50 <__ieee754_rem_pio2+0x80>
 8007cfe:	4bc3      	ldr	r3, [pc, #780]	; (800800c <__ieee754_rem_pio2+0x33c>)
 8007d00:	4598      	cmp	r8, r3
 8007d02:	dc78      	bgt.n	8007df6 <__ieee754_rem_pio2+0x126>
 8007d04:	9b02      	ldr	r3, [sp, #8]
 8007d06:	4ec2      	ldr	r6, [pc, #776]	; (8008010 <__ieee754_rem_pio2+0x340>)
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	ee10 0a10 	vmov	r0, s0
 8007d0e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007fd0 <__ieee754_rem_pio2+0x300>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	4629      	mov	r1, r5
 8007d16:	dd39      	ble.n	8007d8c <__ieee754_rem_pio2+0xbc>
 8007d18:	f7f8 fa5a 	bl	80001d0 <__aeabi_dsub>
 8007d1c:	45b0      	cmp	r8, r6
 8007d1e:	4604      	mov	r4, r0
 8007d20:	460d      	mov	r5, r1
 8007d22:	d01b      	beq.n	8007d5c <__ieee754_rem_pio2+0x8c>
 8007d24:	a3ac      	add	r3, pc, #688	; (adr r3, 8007fd8 <__ieee754_rem_pio2+0x308>)
 8007d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2a:	f7f8 fa51 	bl	80001d0 <__aeabi_dsub>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	e9ca 2300 	strd	r2, r3, [sl]
 8007d36:	4620      	mov	r0, r4
 8007d38:	4629      	mov	r1, r5
 8007d3a:	f7f8 fa49 	bl	80001d0 <__aeabi_dsub>
 8007d3e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007fd8 <__ieee754_rem_pio2+0x308>)
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f7f8 fa44 	bl	80001d0 <__aeabi_dsub>
 8007d48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d4c:	f04f 0b01 	mov.w	fp, #1
 8007d50:	4658      	mov	r0, fp
 8007d52:	b00b      	add	sp, #44	; 0x2c
 8007d54:	ecbd 8b02 	vpop	{d8}
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007fe0 <__ieee754_rem_pio2+0x310>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f7f8 fa35 	bl	80001d0 <__aeabi_dsub>
 8007d66:	a3a0      	add	r3, pc, #640	; (adr r3, 8007fe8 <__ieee754_rem_pio2+0x318>)
 8007d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	460d      	mov	r5, r1
 8007d70:	f7f8 fa2e 	bl	80001d0 <__aeabi_dsub>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	e9ca 2300 	strd	r2, r3, [sl]
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	4629      	mov	r1, r5
 8007d80:	f7f8 fa26 	bl	80001d0 <__aeabi_dsub>
 8007d84:	a398      	add	r3, pc, #608	; (adr r3, 8007fe8 <__ieee754_rem_pio2+0x318>)
 8007d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8a:	e7db      	b.n	8007d44 <__ieee754_rem_pio2+0x74>
 8007d8c:	f7f8 fa22 	bl	80001d4 <__adddf3>
 8007d90:	45b0      	cmp	r8, r6
 8007d92:	4604      	mov	r4, r0
 8007d94:	460d      	mov	r5, r1
 8007d96:	d016      	beq.n	8007dc6 <__ieee754_rem_pio2+0xf6>
 8007d98:	a38f      	add	r3, pc, #572	; (adr r3, 8007fd8 <__ieee754_rem_pio2+0x308>)
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	f7f8 fa19 	bl	80001d4 <__adddf3>
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	e9ca 2300 	strd	r2, r3, [sl]
 8007daa:	4620      	mov	r0, r4
 8007dac:	4629      	mov	r1, r5
 8007dae:	f7f8 fa0f 	bl	80001d0 <__aeabi_dsub>
 8007db2:	a389      	add	r3, pc, #548	; (adr r3, 8007fd8 <__ieee754_rem_pio2+0x308>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fa0c 	bl	80001d4 <__adddf3>
 8007dbc:	f04f 3bff 	mov.w	fp, #4294967295
 8007dc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007dc4:	e7c4      	b.n	8007d50 <__ieee754_rem_pio2+0x80>
 8007dc6:	a386      	add	r3, pc, #536	; (adr r3, 8007fe0 <__ieee754_rem_pio2+0x310>)
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	f7f8 fa02 	bl	80001d4 <__adddf3>
 8007dd0:	a385      	add	r3, pc, #532	; (adr r3, 8007fe8 <__ieee754_rem_pio2+0x318>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	460d      	mov	r5, r1
 8007dda:	f7f8 f9fb 	bl	80001d4 <__adddf3>
 8007dde:	4602      	mov	r2, r0
 8007de0:	460b      	mov	r3, r1
 8007de2:	e9ca 2300 	strd	r2, r3, [sl]
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 f9f1 	bl	80001d0 <__aeabi_dsub>
 8007dee:	a37e      	add	r3, pc, #504	; (adr r3, 8007fe8 <__ieee754_rem_pio2+0x318>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	e7e0      	b.n	8007db8 <__ieee754_rem_pio2+0xe8>
 8007df6:	4b87      	ldr	r3, [pc, #540]	; (8008014 <__ieee754_rem_pio2+0x344>)
 8007df8:	4598      	cmp	r8, r3
 8007dfa:	f300 80d9 	bgt.w	8007fb0 <__ieee754_rem_pio2+0x2e0>
 8007dfe:	f001 f8b5 	bl	8008f6c <fabs>
 8007e02:	ec55 4b10 	vmov	r4, r5, d0
 8007e06:	ee10 0a10 	vmov	r0, s0
 8007e0a:	a379      	add	r3, pc, #484	; (adr r3, 8007ff0 <__ieee754_rem_pio2+0x320>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 fb95 	bl	8000540 <__aeabi_dmul>
 8007e16:	4b80      	ldr	r3, [pc, #512]	; (8008018 <__ieee754_rem_pio2+0x348>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f7f8 f9db 	bl	80001d4 <__adddf3>
 8007e1e:	f7f8 fe3f 	bl	8000aa0 <__aeabi_d2iz>
 8007e22:	4683      	mov	fp, r0
 8007e24:	f7f8 fb22 	bl	800046c <__aeabi_i2d>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	ec43 2b18 	vmov	d8, r2, r3
 8007e30:	a367      	add	r3, pc, #412	; (adr r3, 8007fd0 <__ieee754_rem_pio2+0x300>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	f7f8 fb83 	bl	8000540 <__aeabi_dmul>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4620      	mov	r0, r4
 8007e40:	4629      	mov	r1, r5
 8007e42:	f7f8 f9c5 	bl	80001d0 <__aeabi_dsub>
 8007e46:	a364      	add	r3, pc, #400	; (adr r3, 8007fd8 <__ieee754_rem_pio2+0x308>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	460f      	mov	r7, r1
 8007e50:	ec51 0b18 	vmov	r0, r1, d8
 8007e54:	f7f8 fb74 	bl	8000540 <__aeabi_dmul>
 8007e58:	f1bb 0f1f 	cmp.w	fp, #31
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	460d      	mov	r5, r1
 8007e60:	dc0d      	bgt.n	8007e7e <__ieee754_rem_pio2+0x1ae>
 8007e62:	4b6e      	ldr	r3, [pc, #440]	; (800801c <__ieee754_rem_pio2+0x34c>)
 8007e64:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6c:	4543      	cmp	r3, r8
 8007e6e:	d006      	beq.n	8007e7e <__ieee754_rem_pio2+0x1ae>
 8007e70:	4622      	mov	r2, r4
 8007e72:	462b      	mov	r3, r5
 8007e74:	4630      	mov	r0, r6
 8007e76:	4639      	mov	r1, r7
 8007e78:	f7f8 f9aa 	bl	80001d0 <__aeabi_dsub>
 8007e7c:	e00f      	b.n	8007e9e <__ieee754_rem_pio2+0x1ce>
 8007e7e:	462b      	mov	r3, r5
 8007e80:	4622      	mov	r2, r4
 8007e82:	4630      	mov	r0, r6
 8007e84:	4639      	mov	r1, r7
 8007e86:	f7f8 f9a3 	bl	80001d0 <__aeabi_dsub>
 8007e8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e94:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007e98:	f1b8 0f10 	cmp.w	r8, #16
 8007e9c:	dc02      	bgt.n	8007ea4 <__ieee754_rem_pio2+0x1d4>
 8007e9e:	e9ca 0100 	strd	r0, r1, [sl]
 8007ea2:	e039      	b.n	8007f18 <__ieee754_rem_pio2+0x248>
 8007ea4:	a34e      	add	r3, pc, #312	; (adr r3, 8007fe0 <__ieee754_rem_pio2+0x310>)
 8007ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eaa:	ec51 0b18 	vmov	r0, r1, d8
 8007eae:	f7f8 fb47 	bl	8000540 <__aeabi_dmul>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	460d      	mov	r5, r1
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4630      	mov	r0, r6
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	f7f8 f987 	bl	80001d0 <__aeabi_dsub>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	4680      	mov	r8, r0
 8007ec8:	4689      	mov	r9, r1
 8007eca:	4630      	mov	r0, r6
 8007ecc:	4639      	mov	r1, r7
 8007ece:	f7f8 f97f 	bl	80001d0 <__aeabi_dsub>
 8007ed2:	4622      	mov	r2, r4
 8007ed4:	462b      	mov	r3, r5
 8007ed6:	f7f8 f97b 	bl	80001d0 <__aeabi_dsub>
 8007eda:	a343      	add	r3, pc, #268	; (adr r3, 8007fe8 <__ieee754_rem_pio2+0x318>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	460d      	mov	r5, r1
 8007ee4:	ec51 0b18 	vmov	r0, r1, d8
 8007ee8:	f7f8 fb2a 	bl	8000540 <__aeabi_dmul>
 8007eec:	4622      	mov	r2, r4
 8007eee:	462b      	mov	r3, r5
 8007ef0:	f7f8 f96e 	bl	80001d0 <__aeabi_dsub>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4604      	mov	r4, r0
 8007efa:	460d      	mov	r5, r1
 8007efc:	4640      	mov	r0, r8
 8007efe:	4649      	mov	r1, r9
 8007f00:	f7f8 f966 	bl	80001d0 <__aeabi_dsub>
 8007f04:	9a03      	ldr	r2, [sp, #12]
 8007f06:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b31      	cmp	r3, #49	; 0x31
 8007f0e:	dc24      	bgt.n	8007f5a <__ieee754_rem_pio2+0x28a>
 8007f10:	e9ca 0100 	strd	r0, r1, [sl]
 8007f14:	4646      	mov	r6, r8
 8007f16:	464f      	mov	r7, r9
 8007f18:	e9da 8900 	ldrd	r8, r9, [sl]
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	4642      	mov	r2, r8
 8007f20:	464b      	mov	r3, r9
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 f954 	bl	80001d0 <__aeabi_dsub>
 8007f28:	462b      	mov	r3, r5
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	f7f8 f950 	bl	80001d0 <__aeabi_dsub>
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f38:	f6bf af0a 	bge.w	8007d50 <__ieee754_rem_pio2+0x80>
 8007f3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007f40:	f8ca 3004 	str.w	r3, [sl, #4]
 8007f44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f48:	f8ca 8000 	str.w	r8, [sl]
 8007f4c:	f8ca 0008 	str.w	r0, [sl, #8]
 8007f50:	f8ca 300c 	str.w	r3, [sl, #12]
 8007f54:	f1cb 0b00 	rsb	fp, fp, #0
 8007f58:	e6fa      	b.n	8007d50 <__ieee754_rem_pio2+0x80>
 8007f5a:	a327      	add	r3, pc, #156	; (adr r3, 8007ff8 <__ieee754_rem_pio2+0x328>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	ec51 0b18 	vmov	r0, r1, d8
 8007f64:	f7f8 faec 	bl	8000540 <__aeabi_dmul>
 8007f68:	4604      	mov	r4, r0
 8007f6a:	460d      	mov	r5, r1
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4640      	mov	r0, r8
 8007f72:	4649      	mov	r1, r9
 8007f74:	f7f8 f92c 	bl	80001d0 <__aeabi_dsub>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	460f      	mov	r7, r1
 8007f80:	4640      	mov	r0, r8
 8007f82:	4649      	mov	r1, r9
 8007f84:	f7f8 f924 	bl	80001d0 <__aeabi_dsub>
 8007f88:	4622      	mov	r2, r4
 8007f8a:	462b      	mov	r3, r5
 8007f8c:	f7f8 f920 	bl	80001d0 <__aeabi_dsub>
 8007f90:	a31b      	add	r3, pc, #108	; (adr r3, 8008000 <__ieee754_rem_pio2+0x330>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	4604      	mov	r4, r0
 8007f98:	460d      	mov	r5, r1
 8007f9a:	ec51 0b18 	vmov	r0, r1, d8
 8007f9e:	f7f8 facf 	bl	8000540 <__aeabi_dmul>
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	f7f8 f913 	bl	80001d0 <__aeabi_dsub>
 8007faa:	4604      	mov	r4, r0
 8007fac:	460d      	mov	r5, r1
 8007fae:	e75f      	b.n	8007e70 <__ieee754_rem_pio2+0x1a0>
 8007fb0:	4b1b      	ldr	r3, [pc, #108]	; (8008020 <__ieee754_rem_pio2+0x350>)
 8007fb2:	4598      	cmp	r8, r3
 8007fb4:	dd36      	ble.n	8008024 <__ieee754_rem_pio2+0x354>
 8007fb6:	ee10 2a10 	vmov	r2, s0
 8007fba:	462b      	mov	r3, r5
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f7f8 f906 	bl	80001d0 <__aeabi_dsub>
 8007fc4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007fc8:	e9ca 0100 	strd	r0, r1, [sl]
 8007fcc:	e694      	b.n	8007cf8 <__ieee754_rem_pio2+0x28>
 8007fce:	bf00      	nop
 8007fd0:	54400000 	.word	0x54400000
 8007fd4:	3ff921fb 	.word	0x3ff921fb
 8007fd8:	1a626331 	.word	0x1a626331
 8007fdc:	3dd0b461 	.word	0x3dd0b461
 8007fe0:	1a600000 	.word	0x1a600000
 8007fe4:	3dd0b461 	.word	0x3dd0b461
 8007fe8:	2e037073 	.word	0x2e037073
 8007fec:	3ba3198a 	.word	0x3ba3198a
 8007ff0:	6dc9c883 	.word	0x6dc9c883
 8007ff4:	3fe45f30 	.word	0x3fe45f30
 8007ff8:	2e000000 	.word	0x2e000000
 8007ffc:	3ba3198a 	.word	0x3ba3198a
 8008000:	252049c1 	.word	0x252049c1
 8008004:	397b839a 	.word	0x397b839a
 8008008:	3fe921fb 	.word	0x3fe921fb
 800800c:	4002d97b 	.word	0x4002d97b
 8008010:	3ff921fb 	.word	0x3ff921fb
 8008014:	413921fb 	.word	0x413921fb
 8008018:	3fe00000 	.word	0x3fe00000
 800801c:	08009a10 	.word	0x08009a10
 8008020:	7fefffff 	.word	0x7fefffff
 8008024:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008028:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800802c:	ee10 0a10 	vmov	r0, s0
 8008030:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008034:	ee10 6a10 	vmov	r6, s0
 8008038:	460f      	mov	r7, r1
 800803a:	f7f8 fd31 	bl	8000aa0 <__aeabi_d2iz>
 800803e:	f7f8 fa15 	bl	800046c <__aeabi_i2d>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4630      	mov	r0, r6
 8008048:	4639      	mov	r1, r7
 800804a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800804e:	f7f8 f8bf 	bl	80001d0 <__aeabi_dsub>
 8008052:	4b23      	ldr	r3, [pc, #140]	; (80080e0 <__ieee754_rem_pio2+0x410>)
 8008054:	2200      	movs	r2, #0
 8008056:	f7f8 fa73 	bl	8000540 <__aeabi_dmul>
 800805a:	460f      	mov	r7, r1
 800805c:	4606      	mov	r6, r0
 800805e:	f7f8 fd1f 	bl	8000aa0 <__aeabi_d2iz>
 8008062:	f7f8 fa03 	bl	800046c <__aeabi_i2d>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4630      	mov	r0, r6
 800806c:	4639      	mov	r1, r7
 800806e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008072:	f7f8 f8ad 	bl	80001d0 <__aeabi_dsub>
 8008076:	4b1a      	ldr	r3, [pc, #104]	; (80080e0 <__ieee754_rem_pio2+0x410>)
 8008078:	2200      	movs	r2, #0
 800807a:	f7f8 fa61 	bl	8000540 <__aeabi_dmul>
 800807e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008082:	ad04      	add	r5, sp, #16
 8008084:	f04f 0803 	mov.w	r8, #3
 8008088:	46a9      	mov	r9, r5
 800808a:	2600      	movs	r6, #0
 800808c:	2700      	movs	r7, #0
 800808e:	4632      	mov	r2, r6
 8008090:	463b      	mov	r3, r7
 8008092:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008096:	46c3      	mov	fp, r8
 8008098:	3d08      	subs	r5, #8
 800809a:	f108 38ff 	add.w	r8, r8, #4294967295
 800809e:	f7f8 fcb7 	bl	8000a10 <__aeabi_dcmpeq>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d1f3      	bne.n	800808e <__ieee754_rem_pio2+0x3be>
 80080a6:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <__ieee754_rem_pio2+0x414>)
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	2302      	movs	r3, #2
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	4622      	mov	r2, r4
 80080b0:	465b      	mov	r3, fp
 80080b2:	4651      	mov	r1, sl
 80080b4:	4648      	mov	r0, r9
 80080b6:	f000 fb1b 	bl	80086f0 <__kernel_rem_pio2>
 80080ba:	9b02      	ldr	r3, [sp, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	4683      	mov	fp, r0
 80080c0:	f6bf ae46 	bge.w	8007d50 <__ieee754_rem_pio2+0x80>
 80080c4:	e9da 2100 	ldrd	r2, r1, [sl]
 80080c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080cc:	e9ca 2300 	strd	r2, r3, [sl]
 80080d0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80080d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080d8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80080dc:	e73a      	b.n	8007f54 <__ieee754_rem_pio2+0x284>
 80080de:	bf00      	nop
 80080e0:	41700000 	.word	0x41700000
 80080e4:	08009a90 	.word	0x08009a90

080080e8 <__ieee754_sqrt>:
 80080e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ec:	ec55 4b10 	vmov	r4, r5, d0
 80080f0:	4e55      	ldr	r6, [pc, #340]	; (8008248 <__ieee754_sqrt+0x160>)
 80080f2:	43ae      	bics	r6, r5
 80080f4:	ee10 0a10 	vmov	r0, s0
 80080f8:	ee10 3a10 	vmov	r3, s0
 80080fc:	462a      	mov	r2, r5
 80080fe:	4629      	mov	r1, r5
 8008100:	d110      	bne.n	8008124 <__ieee754_sqrt+0x3c>
 8008102:	ee10 2a10 	vmov	r2, s0
 8008106:	462b      	mov	r3, r5
 8008108:	f7f8 fa1a 	bl	8000540 <__aeabi_dmul>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4620      	mov	r0, r4
 8008112:	4629      	mov	r1, r5
 8008114:	f7f8 f85e 	bl	80001d4 <__adddf3>
 8008118:	4604      	mov	r4, r0
 800811a:	460d      	mov	r5, r1
 800811c:	ec45 4b10 	vmov	d0, r4, r5
 8008120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008124:	2d00      	cmp	r5, #0
 8008126:	dc10      	bgt.n	800814a <__ieee754_sqrt+0x62>
 8008128:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800812c:	4330      	orrs	r0, r6
 800812e:	d0f5      	beq.n	800811c <__ieee754_sqrt+0x34>
 8008130:	b15d      	cbz	r5, 800814a <__ieee754_sqrt+0x62>
 8008132:	ee10 2a10 	vmov	r2, s0
 8008136:	462b      	mov	r3, r5
 8008138:	ee10 0a10 	vmov	r0, s0
 800813c:	f7f8 f848 	bl	80001d0 <__aeabi_dsub>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	f7f8 fb26 	bl	8000794 <__aeabi_ddiv>
 8008148:	e7e6      	b.n	8008118 <__ieee754_sqrt+0x30>
 800814a:	1512      	asrs	r2, r2, #20
 800814c:	d074      	beq.n	8008238 <__ieee754_sqrt+0x150>
 800814e:	07d4      	lsls	r4, r2, #31
 8008150:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008154:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800815c:	bf5e      	ittt	pl
 800815e:	0fda      	lsrpl	r2, r3, #31
 8008160:	005b      	lslpl	r3, r3, #1
 8008162:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008166:	2400      	movs	r4, #0
 8008168:	0fda      	lsrs	r2, r3, #31
 800816a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800816e:	107f      	asrs	r7, r7, #1
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	2516      	movs	r5, #22
 8008174:	4620      	mov	r0, r4
 8008176:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800817a:	1886      	adds	r6, r0, r2
 800817c:	428e      	cmp	r6, r1
 800817e:	bfde      	ittt	le
 8008180:	1b89      	suble	r1, r1, r6
 8008182:	18b0      	addle	r0, r6, r2
 8008184:	18a4      	addle	r4, r4, r2
 8008186:	0049      	lsls	r1, r1, #1
 8008188:	3d01      	subs	r5, #1
 800818a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800818e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008192:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008196:	d1f0      	bne.n	800817a <__ieee754_sqrt+0x92>
 8008198:	462a      	mov	r2, r5
 800819a:	f04f 0e20 	mov.w	lr, #32
 800819e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80081a2:	4281      	cmp	r1, r0
 80081a4:	eb06 0c05 	add.w	ip, r6, r5
 80081a8:	dc02      	bgt.n	80081b0 <__ieee754_sqrt+0xc8>
 80081aa:	d113      	bne.n	80081d4 <__ieee754_sqrt+0xec>
 80081ac:	459c      	cmp	ip, r3
 80081ae:	d811      	bhi.n	80081d4 <__ieee754_sqrt+0xec>
 80081b0:	f1bc 0f00 	cmp.w	ip, #0
 80081b4:	eb0c 0506 	add.w	r5, ip, r6
 80081b8:	da43      	bge.n	8008242 <__ieee754_sqrt+0x15a>
 80081ba:	2d00      	cmp	r5, #0
 80081bc:	db41      	blt.n	8008242 <__ieee754_sqrt+0x15a>
 80081be:	f100 0801 	add.w	r8, r0, #1
 80081c2:	1a09      	subs	r1, r1, r0
 80081c4:	459c      	cmp	ip, r3
 80081c6:	bf88      	it	hi
 80081c8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80081cc:	eba3 030c 	sub.w	r3, r3, ip
 80081d0:	4432      	add	r2, r6
 80081d2:	4640      	mov	r0, r8
 80081d4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80081d8:	f1be 0e01 	subs.w	lr, lr, #1
 80081dc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80081e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80081e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80081e8:	d1db      	bne.n	80081a2 <__ieee754_sqrt+0xba>
 80081ea:	430b      	orrs	r3, r1
 80081ec:	d006      	beq.n	80081fc <__ieee754_sqrt+0x114>
 80081ee:	1c50      	adds	r0, r2, #1
 80081f0:	bf13      	iteet	ne
 80081f2:	3201      	addne	r2, #1
 80081f4:	3401      	addeq	r4, #1
 80081f6:	4672      	moveq	r2, lr
 80081f8:	f022 0201 	bicne.w	r2, r2, #1
 80081fc:	1063      	asrs	r3, r4, #1
 80081fe:	0852      	lsrs	r2, r2, #1
 8008200:	07e1      	lsls	r1, r4, #31
 8008202:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008206:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800820a:	bf48      	it	mi
 800820c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008210:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008214:	4614      	mov	r4, r2
 8008216:	e781      	b.n	800811c <__ieee754_sqrt+0x34>
 8008218:	0ad9      	lsrs	r1, r3, #11
 800821a:	3815      	subs	r0, #21
 800821c:	055b      	lsls	r3, r3, #21
 800821e:	2900      	cmp	r1, #0
 8008220:	d0fa      	beq.n	8008218 <__ieee754_sqrt+0x130>
 8008222:	02cd      	lsls	r5, r1, #11
 8008224:	d50a      	bpl.n	800823c <__ieee754_sqrt+0x154>
 8008226:	f1c2 0420 	rsb	r4, r2, #32
 800822a:	fa23 f404 	lsr.w	r4, r3, r4
 800822e:	1e55      	subs	r5, r2, #1
 8008230:	4093      	lsls	r3, r2
 8008232:	4321      	orrs	r1, r4
 8008234:	1b42      	subs	r2, r0, r5
 8008236:	e78a      	b.n	800814e <__ieee754_sqrt+0x66>
 8008238:	4610      	mov	r0, r2
 800823a:	e7f0      	b.n	800821e <__ieee754_sqrt+0x136>
 800823c:	0049      	lsls	r1, r1, #1
 800823e:	3201      	adds	r2, #1
 8008240:	e7ef      	b.n	8008222 <__ieee754_sqrt+0x13a>
 8008242:	4680      	mov	r8, r0
 8008244:	e7bd      	b.n	80081c2 <__ieee754_sqrt+0xda>
 8008246:	bf00      	nop
 8008248:	7ff00000 	.word	0x7ff00000

0800824c <__ieee754_asinf>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	ee10 5a10 	vmov	r5, s0
 8008252:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008256:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800825a:	ed2d 8b04 	vpush	{d8-d9}
 800825e:	d10c      	bne.n	800827a <__ieee754_asinf+0x2e>
 8008260:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80083d8 <__ieee754_asinf+0x18c>
 8008264:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80083dc <__ieee754_asinf+0x190>
 8008268:	ee60 7a27 	vmul.f32	s15, s0, s15
 800826c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008270:	eeb0 0a67 	vmov.f32	s0, s15
 8008274:	ecbd 8b04 	vpop	{d8-d9}
 8008278:	bd38      	pop	{r3, r4, r5, pc}
 800827a:	dd04      	ble.n	8008286 <__ieee754_asinf+0x3a>
 800827c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008280:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008284:	e7f6      	b.n	8008274 <__ieee754_asinf+0x28>
 8008286:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800828a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800828e:	da0b      	bge.n	80082a8 <__ieee754_asinf+0x5c>
 8008290:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8008294:	da52      	bge.n	800833c <__ieee754_asinf+0xf0>
 8008296:	eddf 7a52 	vldr	s15, [pc, #328]	; 80083e0 <__ieee754_asinf+0x194>
 800829a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800829e:	eef4 7ae8 	vcmpe.f32	s15, s17
 80082a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082a6:	dce5      	bgt.n	8008274 <__ieee754_asinf+0x28>
 80082a8:	f001 f850 	bl	800934c <fabsf>
 80082ac:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80082b0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80082b4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80082b8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80083e4 <__ieee754_asinf+0x198>
 80082bc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80083e8 <__ieee754_asinf+0x19c>
 80082c0:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80083ec <__ieee754_asinf+0x1a0>
 80082c4:	eea8 7a27 	vfma.f32	s14, s16, s15
 80082c8:	eddf 7a49 	vldr	s15, [pc, #292]	; 80083f0 <__ieee754_asinf+0x1a4>
 80082cc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80082d0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80083f4 <__ieee754_asinf+0x1a8>
 80082d4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80082d8:	eddf 7a47 	vldr	s15, [pc, #284]	; 80083f8 <__ieee754_asinf+0x1ac>
 80082dc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80082e0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80083fc <__ieee754_asinf+0x1b0>
 80082e4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80082e8:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008400 <__ieee754_asinf+0x1b4>
 80082ec:	eee8 7a07 	vfma.f32	s15, s16, s14
 80082f0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008404 <__ieee754_asinf+0x1b8>
 80082f4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80082f8:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008408 <__ieee754_asinf+0x1bc>
 80082fc:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008300:	eeb0 0a48 	vmov.f32	s0, s16
 8008304:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008308:	f000 f926 	bl	8008558 <__ieee754_sqrtf>
 800830c:	4b3f      	ldr	r3, [pc, #252]	; (800840c <__ieee754_asinf+0x1c0>)
 800830e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8008312:	429c      	cmp	r4, r3
 8008314:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008318:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800831c:	dd3d      	ble.n	800839a <__ieee754_asinf+0x14e>
 800831e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8008322:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008410 <__ieee754_asinf+0x1c4>
 8008326:	eee0 7a26 	vfma.f32	s15, s0, s13
 800832a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80083dc <__ieee754_asinf+0x190>
 800832e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008332:	2d00      	cmp	r5, #0
 8008334:	bfd8      	it	le
 8008336:	eeb1 0a40 	vnegle.f32	s0, s0
 800833a:	e79b      	b.n	8008274 <__ieee754_asinf+0x28>
 800833c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008340:	eddf 6a28 	vldr	s13, [pc, #160]	; 80083e4 <__ieee754_asinf+0x198>
 8008344:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80083e8 <__ieee754_asinf+0x19c>
 8008348:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80083fc <__ieee754_asinf+0x1b0>
 800834c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008350:	eddf 6a27 	vldr	s13, [pc, #156]	; 80083f0 <__ieee754_asinf+0x1a4>
 8008354:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008358:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80083f4 <__ieee754_asinf+0x1a8>
 800835c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008360:	eddf 6a25 	vldr	s13, [pc, #148]	; 80083f8 <__ieee754_asinf+0x1ac>
 8008364:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008368:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80083ec <__ieee754_asinf+0x1a0>
 800836c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008370:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008400 <__ieee754_asinf+0x1b4>
 8008374:	eee7 6a86 	vfma.f32	s13, s15, s12
 8008378:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8008404 <__ieee754_asinf+0x1b8>
 800837c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008380:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008408 <__ieee754_asinf+0x1bc>
 8008384:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800838c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008390:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8008394:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008398:	e76c      	b.n	8008274 <__ieee754_asinf+0x28>
 800839a:	ee10 3a10 	vmov	r3, s0
 800839e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80083a2:	f023 030f 	bic.w	r3, r3, #15
 80083a6:	ee07 3a10 	vmov	s14, r3
 80083aa:	eea7 8a47 	vfms.f32	s16, s14, s14
 80083ae:	ee70 7a07 	vadd.f32	s15, s0, s14
 80083b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80083b6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80083ba:	eddf 7a07 	vldr	s15, [pc, #28]	; 80083d8 <__ieee754_asinf+0x18c>
 80083be:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80083c2:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80083c6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8008414 <__ieee754_asinf+0x1c8>
 80083ca:	eeb0 6a40 	vmov.f32	s12, s0
 80083ce:	eea7 6a66 	vfms.f32	s12, s14, s13
 80083d2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80083d6:	e7aa      	b.n	800832e <__ieee754_asinf+0xe2>
 80083d8:	b33bbd2e 	.word	0xb33bbd2e
 80083dc:	3fc90fdb 	.word	0x3fc90fdb
 80083e0:	7149f2ca 	.word	0x7149f2ca
 80083e4:	3811ef08 	.word	0x3811ef08
 80083e8:	3a4f7f04 	.word	0x3a4f7f04
 80083ec:	3e2aaaab 	.word	0x3e2aaaab
 80083f0:	bd241146 	.word	0xbd241146
 80083f4:	3e4e0aa8 	.word	0x3e4e0aa8
 80083f8:	bea6b090 	.word	0xbea6b090
 80083fc:	3d9dc62e 	.word	0x3d9dc62e
 8008400:	bf303361 	.word	0xbf303361
 8008404:	4001572d 	.word	0x4001572d
 8008408:	c019d139 	.word	0xc019d139
 800840c:	3f799999 	.word	0x3f799999
 8008410:	333bbd2e 	.word	0x333bbd2e
 8008414:	3f490fdb 	.word	0x3f490fdb

08008418 <__ieee754_atan2f>:
 8008418:	ee10 2a90 	vmov	r2, s1
 800841c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008420:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008424:	b510      	push	{r4, lr}
 8008426:	eef0 7a40 	vmov.f32	s15, s0
 800842a:	dc06      	bgt.n	800843a <__ieee754_atan2f+0x22>
 800842c:	ee10 0a10 	vmov	r0, s0
 8008430:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008434:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008438:	dd04      	ble.n	8008444 <__ieee754_atan2f+0x2c>
 800843a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800843e:	eeb0 0a67 	vmov.f32	s0, s15
 8008442:	bd10      	pop	{r4, pc}
 8008444:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008448:	d103      	bne.n	8008452 <__ieee754_atan2f+0x3a>
 800844a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800844e:	f000 bea9 	b.w	80091a4 <atanf>
 8008452:	1794      	asrs	r4, r2, #30
 8008454:	f004 0402 	and.w	r4, r4, #2
 8008458:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800845c:	b943      	cbnz	r3, 8008470 <__ieee754_atan2f+0x58>
 800845e:	2c02      	cmp	r4, #2
 8008460:	d05e      	beq.n	8008520 <__ieee754_atan2f+0x108>
 8008462:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008534 <__ieee754_atan2f+0x11c>
 8008466:	2c03      	cmp	r4, #3
 8008468:	bf08      	it	eq
 800846a:	eef0 7a47 	vmoveq.f32	s15, s14
 800846e:	e7e6      	b.n	800843e <__ieee754_atan2f+0x26>
 8008470:	b941      	cbnz	r1, 8008484 <__ieee754_atan2f+0x6c>
 8008472:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008538 <__ieee754_atan2f+0x120>
 8008476:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800853c <__ieee754_atan2f+0x124>
 800847a:	2800      	cmp	r0, #0
 800847c:	bfb8      	it	lt
 800847e:	eef0 7a40 	vmovlt.f32	s15, s0
 8008482:	e7dc      	b.n	800843e <__ieee754_atan2f+0x26>
 8008484:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008488:	d110      	bne.n	80084ac <__ieee754_atan2f+0x94>
 800848a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800848e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008492:	d107      	bne.n	80084a4 <__ieee754_atan2f+0x8c>
 8008494:	2c02      	cmp	r4, #2
 8008496:	d846      	bhi.n	8008526 <__ieee754_atan2f+0x10e>
 8008498:	4b29      	ldr	r3, [pc, #164]	; (8008540 <__ieee754_atan2f+0x128>)
 800849a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800849e:	edd4 7a00 	vldr	s15, [r4]
 80084a2:	e7cc      	b.n	800843e <__ieee754_atan2f+0x26>
 80084a4:	2c02      	cmp	r4, #2
 80084a6:	d841      	bhi.n	800852c <__ieee754_atan2f+0x114>
 80084a8:	4b26      	ldr	r3, [pc, #152]	; (8008544 <__ieee754_atan2f+0x12c>)
 80084aa:	e7f6      	b.n	800849a <__ieee754_atan2f+0x82>
 80084ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80084b0:	d0df      	beq.n	8008472 <__ieee754_atan2f+0x5a>
 80084b2:	1a5b      	subs	r3, r3, r1
 80084b4:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80084b8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80084bc:	da1a      	bge.n	80084f4 <__ieee754_atan2f+0xdc>
 80084be:	2a00      	cmp	r2, #0
 80084c0:	da01      	bge.n	80084c6 <__ieee754_atan2f+0xae>
 80084c2:	313c      	adds	r1, #60	; 0x3c
 80084c4:	db19      	blt.n	80084fa <__ieee754_atan2f+0xe2>
 80084c6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80084ca:	f000 ff3f 	bl	800934c <fabsf>
 80084ce:	f000 fe69 	bl	80091a4 <atanf>
 80084d2:	eef0 7a40 	vmov.f32	s15, s0
 80084d6:	2c01      	cmp	r4, #1
 80084d8:	d012      	beq.n	8008500 <__ieee754_atan2f+0xe8>
 80084da:	2c02      	cmp	r4, #2
 80084dc:	d017      	beq.n	800850e <__ieee754_atan2f+0xf6>
 80084de:	2c00      	cmp	r4, #0
 80084e0:	d0ad      	beq.n	800843e <__ieee754_atan2f+0x26>
 80084e2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008548 <__ieee754_atan2f+0x130>
 80084e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80084ea:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800854c <__ieee754_atan2f+0x134>
 80084ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80084f2:	e7a4      	b.n	800843e <__ieee754_atan2f+0x26>
 80084f4:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008538 <__ieee754_atan2f+0x120>
 80084f8:	e7ed      	b.n	80084d6 <__ieee754_atan2f+0xbe>
 80084fa:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008550 <__ieee754_atan2f+0x138>
 80084fe:	e7ea      	b.n	80084d6 <__ieee754_atan2f+0xbe>
 8008500:	ee17 3a90 	vmov	r3, s15
 8008504:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008508:	ee07 3a90 	vmov	s15, r3
 800850c:	e797      	b.n	800843e <__ieee754_atan2f+0x26>
 800850e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008548 <__ieee754_atan2f+0x130>
 8008512:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008516:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800854c <__ieee754_atan2f+0x134>
 800851a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800851e:	e78e      	b.n	800843e <__ieee754_atan2f+0x26>
 8008520:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800854c <__ieee754_atan2f+0x134>
 8008524:	e78b      	b.n	800843e <__ieee754_atan2f+0x26>
 8008526:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008554 <__ieee754_atan2f+0x13c>
 800852a:	e788      	b.n	800843e <__ieee754_atan2f+0x26>
 800852c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008550 <__ieee754_atan2f+0x138>
 8008530:	e785      	b.n	800843e <__ieee754_atan2f+0x26>
 8008532:	bf00      	nop
 8008534:	c0490fdb 	.word	0xc0490fdb
 8008538:	3fc90fdb 	.word	0x3fc90fdb
 800853c:	bfc90fdb 	.word	0xbfc90fdb
 8008540:	08009b98 	.word	0x08009b98
 8008544:	08009ba4 	.word	0x08009ba4
 8008548:	33bbbd2e 	.word	0x33bbbd2e
 800854c:	40490fdb 	.word	0x40490fdb
 8008550:	00000000 	.word	0x00000000
 8008554:	3f490fdb 	.word	0x3f490fdb

08008558 <__ieee754_sqrtf>:
 8008558:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800855c:	4770      	bx	lr
	...

08008560 <__kernel_cos>:
 8008560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008564:	ec57 6b10 	vmov	r6, r7, d0
 8008568:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800856c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008570:	ed8d 1b00 	vstr	d1, [sp]
 8008574:	da07      	bge.n	8008586 <__kernel_cos+0x26>
 8008576:	ee10 0a10 	vmov	r0, s0
 800857a:	4639      	mov	r1, r7
 800857c:	f7f8 fa90 	bl	8000aa0 <__aeabi_d2iz>
 8008580:	2800      	cmp	r0, #0
 8008582:	f000 8088 	beq.w	8008696 <__kernel_cos+0x136>
 8008586:	4632      	mov	r2, r6
 8008588:	463b      	mov	r3, r7
 800858a:	4630      	mov	r0, r6
 800858c:	4639      	mov	r1, r7
 800858e:	f7f7 ffd7 	bl	8000540 <__aeabi_dmul>
 8008592:	4b51      	ldr	r3, [pc, #324]	; (80086d8 <__kernel_cos+0x178>)
 8008594:	2200      	movs	r2, #0
 8008596:	4604      	mov	r4, r0
 8008598:	460d      	mov	r5, r1
 800859a:	f7f7 ffd1 	bl	8000540 <__aeabi_dmul>
 800859e:	a340      	add	r3, pc, #256	; (adr r3, 80086a0 <__kernel_cos+0x140>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	4682      	mov	sl, r0
 80085a6:	468b      	mov	fp, r1
 80085a8:	4620      	mov	r0, r4
 80085aa:	4629      	mov	r1, r5
 80085ac:	f7f7 ffc8 	bl	8000540 <__aeabi_dmul>
 80085b0:	a33d      	add	r3, pc, #244	; (adr r3, 80086a8 <__kernel_cos+0x148>)
 80085b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b6:	f7f7 fe0d 	bl	80001d4 <__adddf3>
 80085ba:	4622      	mov	r2, r4
 80085bc:	462b      	mov	r3, r5
 80085be:	f7f7 ffbf 	bl	8000540 <__aeabi_dmul>
 80085c2:	a33b      	add	r3, pc, #236	; (adr r3, 80086b0 <__kernel_cos+0x150>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f7 fe02 	bl	80001d0 <__aeabi_dsub>
 80085cc:	4622      	mov	r2, r4
 80085ce:	462b      	mov	r3, r5
 80085d0:	f7f7 ffb6 	bl	8000540 <__aeabi_dmul>
 80085d4:	a338      	add	r3, pc, #224	; (adr r3, 80086b8 <__kernel_cos+0x158>)
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	f7f7 fdfb 	bl	80001d4 <__adddf3>
 80085de:	4622      	mov	r2, r4
 80085e0:	462b      	mov	r3, r5
 80085e2:	f7f7 ffad 	bl	8000540 <__aeabi_dmul>
 80085e6:	a336      	add	r3, pc, #216	; (adr r3, 80086c0 <__kernel_cos+0x160>)
 80085e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ec:	f7f7 fdf0 	bl	80001d0 <__aeabi_dsub>
 80085f0:	4622      	mov	r2, r4
 80085f2:	462b      	mov	r3, r5
 80085f4:	f7f7 ffa4 	bl	8000540 <__aeabi_dmul>
 80085f8:	a333      	add	r3, pc, #204	; (adr r3, 80086c8 <__kernel_cos+0x168>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f7f7 fde9 	bl	80001d4 <__adddf3>
 8008602:	4622      	mov	r2, r4
 8008604:	462b      	mov	r3, r5
 8008606:	f7f7 ff9b 	bl	8000540 <__aeabi_dmul>
 800860a:	4622      	mov	r2, r4
 800860c:	462b      	mov	r3, r5
 800860e:	f7f7 ff97 	bl	8000540 <__aeabi_dmul>
 8008612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008616:	4604      	mov	r4, r0
 8008618:	460d      	mov	r5, r1
 800861a:	4630      	mov	r0, r6
 800861c:	4639      	mov	r1, r7
 800861e:	f7f7 ff8f 	bl	8000540 <__aeabi_dmul>
 8008622:	460b      	mov	r3, r1
 8008624:	4602      	mov	r2, r0
 8008626:	4629      	mov	r1, r5
 8008628:	4620      	mov	r0, r4
 800862a:	f7f7 fdd1 	bl	80001d0 <__aeabi_dsub>
 800862e:	4b2b      	ldr	r3, [pc, #172]	; (80086dc <__kernel_cos+0x17c>)
 8008630:	4598      	cmp	r8, r3
 8008632:	4606      	mov	r6, r0
 8008634:	460f      	mov	r7, r1
 8008636:	dc10      	bgt.n	800865a <__kernel_cos+0xfa>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4650      	mov	r0, sl
 800863e:	4659      	mov	r1, fp
 8008640:	f7f7 fdc6 	bl	80001d0 <__aeabi_dsub>
 8008644:	460b      	mov	r3, r1
 8008646:	4926      	ldr	r1, [pc, #152]	; (80086e0 <__kernel_cos+0x180>)
 8008648:	4602      	mov	r2, r0
 800864a:	2000      	movs	r0, #0
 800864c:	f7f7 fdc0 	bl	80001d0 <__aeabi_dsub>
 8008650:	ec41 0b10 	vmov	d0, r0, r1
 8008654:	b003      	add	sp, #12
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865a:	4b22      	ldr	r3, [pc, #136]	; (80086e4 <__kernel_cos+0x184>)
 800865c:	4920      	ldr	r1, [pc, #128]	; (80086e0 <__kernel_cos+0x180>)
 800865e:	4598      	cmp	r8, r3
 8008660:	bfcc      	ite	gt
 8008662:	4d21      	ldrgt	r5, [pc, #132]	; (80086e8 <__kernel_cos+0x188>)
 8008664:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008668:	2400      	movs	r4, #0
 800866a:	4622      	mov	r2, r4
 800866c:	462b      	mov	r3, r5
 800866e:	2000      	movs	r0, #0
 8008670:	f7f7 fdae 	bl	80001d0 <__aeabi_dsub>
 8008674:	4622      	mov	r2, r4
 8008676:	4680      	mov	r8, r0
 8008678:	4689      	mov	r9, r1
 800867a:	462b      	mov	r3, r5
 800867c:	4650      	mov	r0, sl
 800867e:	4659      	mov	r1, fp
 8008680:	f7f7 fda6 	bl	80001d0 <__aeabi_dsub>
 8008684:	4632      	mov	r2, r6
 8008686:	463b      	mov	r3, r7
 8008688:	f7f7 fda2 	bl	80001d0 <__aeabi_dsub>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	e7da      	b.n	800864c <__kernel_cos+0xec>
 8008696:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80086d0 <__kernel_cos+0x170>
 800869a:	e7db      	b.n	8008654 <__kernel_cos+0xf4>
 800869c:	f3af 8000 	nop.w
 80086a0:	be8838d4 	.word	0xbe8838d4
 80086a4:	bda8fae9 	.word	0xbda8fae9
 80086a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80086ac:	3e21ee9e 	.word	0x3e21ee9e
 80086b0:	809c52ad 	.word	0x809c52ad
 80086b4:	3e927e4f 	.word	0x3e927e4f
 80086b8:	19cb1590 	.word	0x19cb1590
 80086bc:	3efa01a0 	.word	0x3efa01a0
 80086c0:	16c15177 	.word	0x16c15177
 80086c4:	3f56c16c 	.word	0x3f56c16c
 80086c8:	5555554c 	.word	0x5555554c
 80086cc:	3fa55555 	.word	0x3fa55555
 80086d0:	00000000 	.word	0x00000000
 80086d4:	3ff00000 	.word	0x3ff00000
 80086d8:	3fe00000 	.word	0x3fe00000
 80086dc:	3fd33332 	.word	0x3fd33332
 80086e0:	3ff00000 	.word	0x3ff00000
 80086e4:	3fe90000 	.word	0x3fe90000
 80086e8:	3fd20000 	.word	0x3fd20000
 80086ec:	00000000 	.word	0x00000000

080086f0 <__kernel_rem_pio2>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	ed2d 8b02 	vpush	{d8}
 80086f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80086fc:	f112 0f14 	cmn.w	r2, #20
 8008700:	9308      	str	r3, [sp, #32]
 8008702:	9101      	str	r1, [sp, #4]
 8008704:	4bc4      	ldr	r3, [pc, #784]	; (8008a18 <__kernel_rem_pio2+0x328>)
 8008706:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008708:	900b      	str	r0, [sp, #44]	; 0x2c
 800870a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	9b08      	ldr	r3, [sp, #32]
 8008712:	f103 33ff 	add.w	r3, r3, #4294967295
 8008716:	bfa8      	it	ge
 8008718:	1ed4      	subge	r4, r2, #3
 800871a:	9306      	str	r3, [sp, #24]
 800871c:	bfb2      	itee	lt
 800871e:	2400      	movlt	r4, #0
 8008720:	2318      	movge	r3, #24
 8008722:	fb94 f4f3 	sdivge	r4, r4, r3
 8008726:	f06f 0317 	mvn.w	r3, #23
 800872a:	fb04 3303 	mla	r3, r4, r3, r3
 800872e:	eb03 0a02 	add.w	sl, r3, r2
 8008732:	9b02      	ldr	r3, [sp, #8]
 8008734:	9a06      	ldr	r2, [sp, #24]
 8008736:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008a08 <__kernel_rem_pio2+0x318>
 800873a:	eb03 0802 	add.w	r8, r3, r2
 800873e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008740:	1aa7      	subs	r7, r4, r2
 8008742:	ae22      	add	r6, sp, #136	; 0x88
 8008744:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008748:	2500      	movs	r5, #0
 800874a:	4545      	cmp	r5, r8
 800874c:	dd13      	ble.n	8008776 <__kernel_rem_pio2+0x86>
 800874e:	9b08      	ldr	r3, [sp, #32]
 8008750:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008a08 <__kernel_rem_pio2+0x318>
 8008754:	aa22      	add	r2, sp, #136	; 0x88
 8008756:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800875a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800875e:	f04f 0800 	mov.w	r8, #0
 8008762:	9b02      	ldr	r3, [sp, #8]
 8008764:	4598      	cmp	r8, r3
 8008766:	dc2f      	bgt.n	80087c8 <__kernel_rem_pio2+0xd8>
 8008768:	ed8d 8b04 	vstr	d8, [sp, #16]
 800876c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008770:	462f      	mov	r7, r5
 8008772:	2600      	movs	r6, #0
 8008774:	e01b      	b.n	80087ae <__kernel_rem_pio2+0xbe>
 8008776:	42ef      	cmn	r7, r5
 8008778:	d407      	bmi.n	800878a <__kernel_rem_pio2+0x9a>
 800877a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800877e:	f7f7 fe75 	bl	800046c <__aeabi_i2d>
 8008782:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008786:	3501      	adds	r5, #1
 8008788:	e7df      	b.n	800874a <__kernel_rem_pio2+0x5a>
 800878a:	ec51 0b18 	vmov	r0, r1, d8
 800878e:	e7f8      	b.n	8008782 <__kernel_rem_pio2+0x92>
 8008790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008794:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008798:	f7f7 fed2 	bl	8000540 <__aeabi_dmul>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a4:	f7f7 fd16 	bl	80001d4 <__adddf3>
 80087a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087ac:	3601      	adds	r6, #1
 80087ae:	9b06      	ldr	r3, [sp, #24]
 80087b0:	429e      	cmp	r6, r3
 80087b2:	f1a7 0708 	sub.w	r7, r7, #8
 80087b6:	ddeb      	ble.n	8008790 <__kernel_rem_pio2+0xa0>
 80087b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80087bc:	f108 0801 	add.w	r8, r8, #1
 80087c0:	ecab 7b02 	vstmia	fp!, {d7}
 80087c4:	3508      	adds	r5, #8
 80087c6:	e7cc      	b.n	8008762 <__kernel_rem_pio2+0x72>
 80087c8:	9b02      	ldr	r3, [sp, #8]
 80087ca:	aa0e      	add	r2, sp, #56	; 0x38
 80087cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087d0:	930d      	str	r3, [sp, #52]	; 0x34
 80087d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80087d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80087d8:	9c02      	ldr	r4, [sp, #8]
 80087da:	930c      	str	r3, [sp, #48]	; 0x30
 80087dc:	00e3      	lsls	r3, r4, #3
 80087de:	930a      	str	r3, [sp, #40]	; 0x28
 80087e0:	ab9a      	add	r3, sp, #616	; 0x268
 80087e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80087ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80087ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80087f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80087f4:	46c3      	mov	fp, r8
 80087f6:	46a1      	mov	r9, r4
 80087f8:	f1b9 0f00 	cmp.w	r9, #0
 80087fc:	f1a5 0508 	sub.w	r5, r5, #8
 8008800:	dc77      	bgt.n	80088f2 <__kernel_rem_pio2+0x202>
 8008802:	ec47 6b10 	vmov	d0, r6, r7
 8008806:	4650      	mov	r0, sl
 8008808:	f000 fc46 	bl	8009098 <scalbn>
 800880c:	ec57 6b10 	vmov	r6, r7, d0
 8008810:	2200      	movs	r2, #0
 8008812:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008816:	ee10 0a10 	vmov	r0, s0
 800881a:	4639      	mov	r1, r7
 800881c:	f7f7 fe90 	bl	8000540 <__aeabi_dmul>
 8008820:	ec41 0b10 	vmov	d0, r0, r1
 8008824:	f000 fbb8 	bl	8008f98 <floor>
 8008828:	4b7c      	ldr	r3, [pc, #496]	; (8008a1c <__kernel_rem_pio2+0x32c>)
 800882a:	ec51 0b10 	vmov	r0, r1, d0
 800882e:	2200      	movs	r2, #0
 8008830:	f7f7 fe86 	bl	8000540 <__aeabi_dmul>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f7 fcc8 	bl	80001d0 <__aeabi_dsub>
 8008840:	460f      	mov	r7, r1
 8008842:	4606      	mov	r6, r0
 8008844:	f7f8 f92c 	bl	8000aa0 <__aeabi_d2iz>
 8008848:	9004      	str	r0, [sp, #16]
 800884a:	f7f7 fe0f 	bl	800046c <__aeabi_i2d>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4630      	mov	r0, r6
 8008854:	4639      	mov	r1, r7
 8008856:	f7f7 fcbb 	bl	80001d0 <__aeabi_dsub>
 800885a:	f1ba 0f00 	cmp.w	sl, #0
 800885e:	4606      	mov	r6, r0
 8008860:	460f      	mov	r7, r1
 8008862:	dd6d      	ble.n	8008940 <__kernel_rem_pio2+0x250>
 8008864:	1e62      	subs	r2, r4, #1
 8008866:	ab0e      	add	r3, sp, #56	; 0x38
 8008868:	9d04      	ldr	r5, [sp, #16]
 800886a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800886e:	f1ca 0118 	rsb	r1, sl, #24
 8008872:	fa40 f301 	asr.w	r3, r0, r1
 8008876:	441d      	add	r5, r3
 8008878:	408b      	lsls	r3, r1
 800887a:	1ac0      	subs	r0, r0, r3
 800887c:	ab0e      	add	r3, sp, #56	; 0x38
 800887e:	9504      	str	r5, [sp, #16]
 8008880:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008884:	f1ca 0317 	rsb	r3, sl, #23
 8008888:	fa40 fb03 	asr.w	fp, r0, r3
 800888c:	f1bb 0f00 	cmp.w	fp, #0
 8008890:	dd65      	ble.n	800895e <__kernel_rem_pio2+0x26e>
 8008892:	9b04      	ldr	r3, [sp, #16]
 8008894:	2200      	movs	r2, #0
 8008896:	3301      	adds	r3, #1
 8008898:	9304      	str	r3, [sp, #16]
 800889a:	4615      	mov	r5, r2
 800889c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80088a0:	4294      	cmp	r4, r2
 80088a2:	f300 809c 	bgt.w	80089de <__kernel_rem_pio2+0x2ee>
 80088a6:	f1ba 0f00 	cmp.w	sl, #0
 80088aa:	dd07      	ble.n	80088bc <__kernel_rem_pio2+0x1cc>
 80088ac:	f1ba 0f01 	cmp.w	sl, #1
 80088b0:	f000 80c0 	beq.w	8008a34 <__kernel_rem_pio2+0x344>
 80088b4:	f1ba 0f02 	cmp.w	sl, #2
 80088b8:	f000 80c6 	beq.w	8008a48 <__kernel_rem_pio2+0x358>
 80088bc:	f1bb 0f02 	cmp.w	fp, #2
 80088c0:	d14d      	bne.n	800895e <__kernel_rem_pio2+0x26e>
 80088c2:	4632      	mov	r2, r6
 80088c4:	463b      	mov	r3, r7
 80088c6:	4956      	ldr	r1, [pc, #344]	; (8008a20 <__kernel_rem_pio2+0x330>)
 80088c8:	2000      	movs	r0, #0
 80088ca:	f7f7 fc81 	bl	80001d0 <__aeabi_dsub>
 80088ce:	4606      	mov	r6, r0
 80088d0:	460f      	mov	r7, r1
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	d043      	beq.n	800895e <__kernel_rem_pio2+0x26e>
 80088d6:	4650      	mov	r0, sl
 80088d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008a10 <__kernel_rem_pio2+0x320>
 80088dc:	f000 fbdc 	bl	8009098 <scalbn>
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	ec53 2b10 	vmov	r2, r3, d0
 80088e8:	f7f7 fc72 	bl	80001d0 <__aeabi_dsub>
 80088ec:	4606      	mov	r6, r0
 80088ee:	460f      	mov	r7, r1
 80088f0:	e035      	b.n	800895e <__kernel_rem_pio2+0x26e>
 80088f2:	4b4c      	ldr	r3, [pc, #304]	; (8008a24 <__kernel_rem_pio2+0x334>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	4630      	mov	r0, r6
 80088f8:	4639      	mov	r1, r7
 80088fa:	f7f7 fe21 	bl	8000540 <__aeabi_dmul>
 80088fe:	f7f8 f8cf 	bl	8000aa0 <__aeabi_d2iz>
 8008902:	f7f7 fdb3 	bl	800046c <__aeabi_i2d>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	ec43 2b18 	vmov	d8, r2, r3
 800890e:	4b46      	ldr	r3, [pc, #280]	; (8008a28 <__kernel_rem_pio2+0x338>)
 8008910:	2200      	movs	r2, #0
 8008912:	f7f7 fe15 	bl	8000540 <__aeabi_dmul>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4630      	mov	r0, r6
 800891c:	4639      	mov	r1, r7
 800891e:	f7f7 fc57 	bl	80001d0 <__aeabi_dsub>
 8008922:	f7f8 f8bd 	bl	8000aa0 <__aeabi_d2iz>
 8008926:	e9d5 2300 	ldrd	r2, r3, [r5]
 800892a:	f84b 0b04 	str.w	r0, [fp], #4
 800892e:	ec51 0b18 	vmov	r0, r1, d8
 8008932:	f7f7 fc4f 	bl	80001d4 <__adddf3>
 8008936:	f109 39ff 	add.w	r9, r9, #4294967295
 800893a:	4606      	mov	r6, r0
 800893c:	460f      	mov	r7, r1
 800893e:	e75b      	b.n	80087f8 <__kernel_rem_pio2+0x108>
 8008940:	d106      	bne.n	8008950 <__kernel_rem_pio2+0x260>
 8008942:	1e63      	subs	r3, r4, #1
 8008944:	aa0e      	add	r2, sp, #56	; 0x38
 8008946:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800894a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800894e:	e79d      	b.n	800888c <__kernel_rem_pio2+0x19c>
 8008950:	4b36      	ldr	r3, [pc, #216]	; (8008a2c <__kernel_rem_pio2+0x33c>)
 8008952:	2200      	movs	r2, #0
 8008954:	f7f8 f87a 	bl	8000a4c <__aeabi_dcmpge>
 8008958:	2800      	cmp	r0, #0
 800895a:	d13d      	bne.n	80089d8 <__kernel_rem_pio2+0x2e8>
 800895c:	4683      	mov	fp, r0
 800895e:	2200      	movs	r2, #0
 8008960:	2300      	movs	r3, #0
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	f7f8 f853 	bl	8000a10 <__aeabi_dcmpeq>
 800896a:	2800      	cmp	r0, #0
 800896c:	f000 80c0 	beq.w	8008af0 <__kernel_rem_pio2+0x400>
 8008970:	1e65      	subs	r5, r4, #1
 8008972:	462b      	mov	r3, r5
 8008974:	2200      	movs	r2, #0
 8008976:	9902      	ldr	r1, [sp, #8]
 8008978:	428b      	cmp	r3, r1
 800897a:	da6c      	bge.n	8008a56 <__kernel_rem_pio2+0x366>
 800897c:	2a00      	cmp	r2, #0
 800897e:	f000 8089 	beq.w	8008a94 <__kernel_rem_pio2+0x3a4>
 8008982:	ab0e      	add	r3, sp, #56	; 0x38
 8008984:	f1aa 0a18 	sub.w	sl, sl, #24
 8008988:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80ad 	beq.w	8008aec <__kernel_rem_pio2+0x3fc>
 8008992:	4650      	mov	r0, sl
 8008994:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8008a10 <__kernel_rem_pio2+0x320>
 8008998:	f000 fb7e 	bl	8009098 <scalbn>
 800899c:	ab9a      	add	r3, sp, #616	; 0x268
 800899e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80089a2:	ec57 6b10 	vmov	r6, r7, d0
 80089a6:	00ec      	lsls	r4, r5, #3
 80089a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80089ac:	46aa      	mov	sl, r5
 80089ae:	f1ba 0f00 	cmp.w	sl, #0
 80089b2:	f280 80d6 	bge.w	8008b62 <__kernel_rem_pio2+0x472>
 80089b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008a08 <__kernel_rem_pio2+0x318>
 80089ba:	462e      	mov	r6, r5
 80089bc:	2e00      	cmp	r6, #0
 80089be:	f2c0 8104 	blt.w	8008bca <__kernel_rem_pio2+0x4da>
 80089c2:	ab72      	add	r3, sp, #456	; 0x1c8
 80089c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80089c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008a30 <__kernel_rem_pio2+0x340>
 80089cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80089d0:	f04f 0800 	mov.w	r8, #0
 80089d4:	1baf      	subs	r7, r5, r6
 80089d6:	e0ea      	b.n	8008bae <__kernel_rem_pio2+0x4be>
 80089d8:	f04f 0b02 	mov.w	fp, #2
 80089dc:	e759      	b.n	8008892 <__kernel_rem_pio2+0x1a2>
 80089de:	f8d8 3000 	ldr.w	r3, [r8]
 80089e2:	b955      	cbnz	r5, 80089fa <__kernel_rem_pio2+0x30a>
 80089e4:	b123      	cbz	r3, 80089f0 <__kernel_rem_pio2+0x300>
 80089e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80089ea:	f8c8 3000 	str.w	r3, [r8]
 80089ee:	2301      	movs	r3, #1
 80089f0:	3201      	adds	r2, #1
 80089f2:	f108 0804 	add.w	r8, r8, #4
 80089f6:	461d      	mov	r5, r3
 80089f8:	e752      	b.n	80088a0 <__kernel_rem_pio2+0x1b0>
 80089fa:	1acb      	subs	r3, r1, r3
 80089fc:	f8c8 3000 	str.w	r3, [r8]
 8008a00:	462b      	mov	r3, r5
 8008a02:	e7f5      	b.n	80089f0 <__kernel_rem_pio2+0x300>
 8008a04:	f3af 8000 	nop.w
	...
 8008a14:	3ff00000 	.word	0x3ff00000
 8008a18:	08009bf0 	.word	0x08009bf0
 8008a1c:	40200000 	.word	0x40200000
 8008a20:	3ff00000 	.word	0x3ff00000
 8008a24:	3e700000 	.word	0x3e700000
 8008a28:	41700000 	.word	0x41700000
 8008a2c:	3fe00000 	.word	0x3fe00000
 8008a30:	08009bb0 	.word	0x08009bb0
 8008a34:	1e62      	subs	r2, r4, #1
 8008a36:	ab0e      	add	r3, sp, #56	; 0x38
 8008a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008a40:	a90e      	add	r1, sp, #56	; 0x38
 8008a42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008a46:	e739      	b.n	80088bc <__kernel_rem_pio2+0x1cc>
 8008a48:	1e62      	subs	r2, r4, #1
 8008a4a:	ab0e      	add	r3, sp, #56	; 0x38
 8008a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008a54:	e7f4      	b.n	8008a40 <__kernel_rem_pio2+0x350>
 8008a56:	a90e      	add	r1, sp, #56	; 0x38
 8008a58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	e789      	b.n	8008976 <__kernel_rem_pio2+0x286>
 8008a62:	3301      	adds	r3, #1
 8008a64:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008a68:	2900      	cmp	r1, #0
 8008a6a:	d0fa      	beq.n	8008a62 <__kernel_rem_pio2+0x372>
 8008a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a6e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008a72:	446a      	add	r2, sp
 8008a74:	3a98      	subs	r2, #152	; 0x98
 8008a76:	920a      	str	r2, [sp, #40]	; 0x28
 8008a78:	9a08      	ldr	r2, [sp, #32]
 8008a7a:	18e3      	adds	r3, r4, r3
 8008a7c:	18a5      	adds	r5, r4, r2
 8008a7e:	aa22      	add	r2, sp, #136	; 0x88
 8008a80:	f104 0801 	add.w	r8, r4, #1
 8008a84:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008a88:	9304      	str	r3, [sp, #16]
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	4543      	cmp	r3, r8
 8008a8e:	da04      	bge.n	8008a9a <__kernel_rem_pio2+0x3aa>
 8008a90:	461c      	mov	r4, r3
 8008a92:	e6a3      	b.n	80087dc <__kernel_rem_pio2+0xec>
 8008a94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a96:	2301      	movs	r3, #1
 8008a98:	e7e4      	b.n	8008a64 <__kernel_rem_pio2+0x374>
 8008a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008aa0:	f7f7 fce4 	bl	800046c <__aeabi_i2d>
 8008aa4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aaa:	46ab      	mov	fp, r5
 8008aac:	461c      	mov	r4, r3
 8008aae:	f04f 0900 	mov.w	r9, #0
 8008ab2:	2600      	movs	r6, #0
 8008ab4:	2700      	movs	r7, #0
 8008ab6:	9b06      	ldr	r3, [sp, #24]
 8008ab8:	4599      	cmp	r9, r3
 8008aba:	dd06      	ble.n	8008aca <__kernel_rem_pio2+0x3da>
 8008abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008abe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008ac2:	f108 0801 	add.w	r8, r8, #1
 8008ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ac8:	e7df      	b.n	8008a8a <__kernel_rem_pio2+0x39a>
 8008aca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008ace:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008ad2:	f7f7 fd35 	bl	8000540 <__aeabi_dmul>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4630      	mov	r0, r6
 8008adc:	4639      	mov	r1, r7
 8008ade:	f7f7 fb79 	bl	80001d4 <__adddf3>
 8008ae2:	f109 0901 	add.w	r9, r9, #1
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	460f      	mov	r7, r1
 8008aea:	e7e4      	b.n	8008ab6 <__kernel_rem_pio2+0x3c6>
 8008aec:	3d01      	subs	r5, #1
 8008aee:	e748      	b.n	8008982 <__kernel_rem_pio2+0x292>
 8008af0:	ec47 6b10 	vmov	d0, r6, r7
 8008af4:	f1ca 0000 	rsb	r0, sl, #0
 8008af8:	f000 face 	bl	8009098 <scalbn>
 8008afc:	ec57 6b10 	vmov	r6, r7, d0
 8008b00:	4ba0      	ldr	r3, [pc, #640]	; (8008d84 <__kernel_rem_pio2+0x694>)
 8008b02:	ee10 0a10 	vmov	r0, s0
 8008b06:	2200      	movs	r2, #0
 8008b08:	4639      	mov	r1, r7
 8008b0a:	f7f7 ff9f 	bl	8000a4c <__aeabi_dcmpge>
 8008b0e:	b1f8      	cbz	r0, 8008b50 <__kernel_rem_pio2+0x460>
 8008b10:	4b9d      	ldr	r3, [pc, #628]	; (8008d88 <__kernel_rem_pio2+0x698>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f7f7 fd12 	bl	8000540 <__aeabi_dmul>
 8008b1c:	f7f7 ffc0 	bl	8000aa0 <__aeabi_d2iz>
 8008b20:	4680      	mov	r8, r0
 8008b22:	f7f7 fca3 	bl	800046c <__aeabi_i2d>
 8008b26:	4b97      	ldr	r3, [pc, #604]	; (8008d84 <__kernel_rem_pio2+0x694>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f7f7 fd09 	bl	8000540 <__aeabi_dmul>
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4602      	mov	r2, r0
 8008b32:	4639      	mov	r1, r7
 8008b34:	4630      	mov	r0, r6
 8008b36:	f7f7 fb4b 	bl	80001d0 <__aeabi_dsub>
 8008b3a:	f7f7 ffb1 	bl	8000aa0 <__aeabi_d2iz>
 8008b3e:	1c65      	adds	r5, r4, #1
 8008b40:	ab0e      	add	r3, sp, #56	; 0x38
 8008b42:	f10a 0a18 	add.w	sl, sl, #24
 8008b46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008b4a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8008b4e:	e720      	b.n	8008992 <__kernel_rem_pio2+0x2a2>
 8008b50:	4630      	mov	r0, r6
 8008b52:	4639      	mov	r1, r7
 8008b54:	f7f7 ffa4 	bl	8000aa0 <__aeabi_d2iz>
 8008b58:	ab0e      	add	r3, sp, #56	; 0x38
 8008b5a:	4625      	mov	r5, r4
 8008b5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008b60:	e717      	b.n	8008992 <__kernel_rem_pio2+0x2a2>
 8008b62:	ab0e      	add	r3, sp, #56	; 0x38
 8008b64:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008b68:	f7f7 fc80 	bl	800046c <__aeabi_i2d>
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	f7f7 fce6 	bl	8000540 <__aeabi_dmul>
 8008b74:	4b84      	ldr	r3, [pc, #528]	; (8008d88 <__kernel_rem_pio2+0x698>)
 8008b76:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	4639      	mov	r1, r7
 8008b80:	f7f7 fcde 	bl	8000540 <__aeabi_dmul>
 8008b84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b88:	4606      	mov	r6, r0
 8008b8a:	460f      	mov	r7, r1
 8008b8c:	e70f      	b.n	80089ae <__kernel_rem_pio2+0x2be>
 8008b8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008b92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008b96:	f7f7 fcd3 	bl	8000540 <__aeabi_dmul>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ba2:	f7f7 fb17 	bl	80001d4 <__adddf3>
 8008ba6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008baa:	f108 0801 	add.w	r8, r8, #1
 8008bae:	9b02      	ldr	r3, [sp, #8]
 8008bb0:	4598      	cmp	r8, r3
 8008bb2:	dc01      	bgt.n	8008bb8 <__kernel_rem_pio2+0x4c8>
 8008bb4:	45b8      	cmp	r8, r7
 8008bb6:	ddea      	ble.n	8008b8e <__kernel_rem_pio2+0x49e>
 8008bb8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008bbc:	ab4a      	add	r3, sp, #296	; 0x128
 8008bbe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008bc2:	ed87 7b00 	vstr	d7, [r7]
 8008bc6:	3e01      	subs	r6, #1
 8008bc8:	e6f8      	b.n	80089bc <__kernel_rem_pio2+0x2cc>
 8008bca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	dc0b      	bgt.n	8008be8 <__kernel_rem_pio2+0x4f8>
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dc35      	bgt.n	8008c40 <__kernel_rem_pio2+0x550>
 8008bd4:	d059      	beq.n	8008c8a <__kernel_rem_pio2+0x59a>
 8008bd6:	9b04      	ldr	r3, [sp, #16]
 8008bd8:	f003 0007 	and.w	r0, r3, #7
 8008bdc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008be0:	ecbd 8b02 	vpop	{d8}
 8008be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d1f3      	bne.n	8008bd6 <__kernel_rem_pio2+0x4e6>
 8008bee:	ab4a      	add	r3, sp, #296	; 0x128
 8008bf0:	4423      	add	r3, r4
 8008bf2:	9306      	str	r3, [sp, #24]
 8008bf4:	461c      	mov	r4, r3
 8008bf6:	469a      	mov	sl, r3
 8008bf8:	9502      	str	r5, [sp, #8]
 8008bfa:	9b02      	ldr	r3, [sp, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f1aa 0a08 	sub.w	sl, sl, #8
 8008c02:	dc6b      	bgt.n	8008cdc <__kernel_rem_pio2+0x5ec>
 8008c04:	46aa      	mov	sl, r5
 8008c06:	f1ba 0f01 	cmp.w	sl, #1
 8008c0a:	f1a4 0408 	sub.w	r4, r4, #8
 8008c0e:	f300 8085 	bgt.w	8008d1c <__kernel_rem_pio2+0x62c>
 8008c12:	9c06      	ldr	r4, [sp, #24]
 8008c14:	2000      	movs	r0, #0
 8008c16:	3408      	adds	r4, #8
 8008c18:	2100      	movs	r1, #0
 8008c1a:	2d01      	cmp	r5, #1
 8008c1c:	f300 809d 	bgt.w	8008d5a <__kernel_rem_pio2+0x66a>
 8008c20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8008c24:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008c28:	f1bb 0f00 	cmp.w	fp, #0
 8008c2c:	f040 809b 	bne.w	8008d66 <__kernel_rem_pio2+0x676>
 8008c30:	9b01      	ldr	r3, [sp, #4]
 8008c32:	e9c3 5600 	strd	r5, r6, [r3]
 8008c36:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008c3a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008c3e:	e7ca      	b.n	8008bd6 <__kernel_rem_pio2+0x4e6>
 8008c40:	3408      	adds	r4, #8
 8008c42:	ab4a      	add	r3, sp, #296	; 0x128
 8008c44:	441c      	add	r4, r3
 8008c46:	462e      	mov	r6, r5
 8008c48:	2000      	movs	r0, #0
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	da36      	bge.n	8008cbe <__kernel_rem_pio2+0x5ce>
 8008c50:	f1bb 0f00 	cmp.w	fp, #0
 8008c54:	d039      	beq.n	8008cca <__kernel_rem_pio2+0x5da>
 8008c56:	4602      	mov	r2, r0
 8008c58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c5c:	9c01      	ldr	r4, [sp, #4]
 8008c5e:	e9c4 2300 	strd	r2, r3, [r4]
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008c6a:	f7f7 fab1 	bl	80001d0 <__aeabi_dsub>
 8008c6e:	ae4c      	add	r6, sp, #304	; 0x130
 8008c70:	2401      	movs	r4, #1
 8008c72:	42a5      	cmp	r5, r4
 8008c74:	da2c      	bge.n	8008cd0 <__kernel_rem_pio2+0x5e0>
 8008c76:	f1bb 0f00 	cmp.w	fp, #0
 8008c7a:	d002      	beq.n	8008c82 <__kernel_rem_pio2+0x592>
 8008c7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c80:	4619      	mov	r1, r3
 8008c82:	9b01      	ldr	r3, [sp, #4]
 8008c84:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008c88:	e7a5      	b.n	8008bd6 <__kernel_rem_pio2+0x4e6>
 8008c8a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008c8e:	eb0d 0403 	add.w	r4, sp, r3
 8008c92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008c96:	2000      	movs	r0, #0
 8008c98:	2100      	movs	r1, #0
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	da09      	bge.n	8008cb2 <__kernel_rem_pio2+0x5c2>
 8008c9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ca2:	d002      	beq.n	8008caa <__kernel_rem_pio2+0x5ba>
 8008ca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ca8:	4619      	mov	r1, r3
 8008caa:	9b01      	ldr	r3, [sp, #4]
 8008cac:	e9c3 0100 	strd	r0, r1, [r3]
 8008cb0:	e791      	b.n	8008bd6 <__kernel_rem_pio2+0x4e6>
 8008cb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008cb6:	f7f7 fa8d 	bl	80001d4 <__adddf3>
 8008cba:	3d01      	subs	r5, #1
 8008cbc:	e7ed      	b.n	8008c9a <__kernel_rem_pio2+0x5aa>
 8008cbe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008cc2:	f7f7 fa87 	bl	80001d4 <__adddf3>
 8008cc6:	3e01      	subs	r6, #1
 8008cc8:	e7c0      	b.n	8008c4c <__kernel_rem_pio2+0x55c>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	e7c5      	b.n	8008c5c <__kernel_rem_pio2+0x56c>
 8008cd0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008cd4:	f7f7 fa7e 	bl	80001d4 <__adddf3>
 8008cd8:	3401      	adds	r4, #1
 8008cda:	e7ca      	b.n	8008c72 <__kernel_rem_pio2+0x582>
 8008cdc:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ce0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008ce4:	9b02      	ldr	r3, [sp, #8]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	9302      	str	r3, [sp, #8]
 8008cea:	4632      	mov	r2, r6
 8008cec:	463b      	mov	r3, r7
 8008cee:	4640      	mov	r0, r8
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	f7f7 fa6f 	bl	80001d4 <__adddf3>
 8008cf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4640      	mov	r0, r8
 8008d00:	4649      	mov	r1, r9
 8008d02:	f7f7 fa65 	bl	80001d0 <__aeabi_dsub>
 8008d06:	4632      	mov	r2, r6
 8008d08:	463b      	mov	r3, r7
 8008d0a:	f7f7 fa63 	bl	80001d4 <__adddf3>
 8008d0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008d12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d16:	ed8a 7b00 	vstr	d7, [sl]
 8008d1a:	e76e      	b.n	8008bfa <__kernel_rem_pio2+0x50a>
 8008d1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008d20:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008d24:	4640      	mov	r0, r8
 8008d26:	4632      	mov	r2, r6
 8008d28:	463b      	mov	r3, r7
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	f7f7 fa52 	bl	80001d4 <__adddf3>
 8008d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4640      	mov	r0, r8
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	f7f7 fa48 	bl	80001d0 <__aeabi_dsub>
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	f7f7 fa46 	bl	80001d4 <__adddf3>
 8008d48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d50:	ed84 7b00 	vstr	d7, [r4]
 8008d54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d58:	e755      	b.n	8008c06 <__kernel_rem_pio2+0x516>
 8008d5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008d5e:	f7f7 fa39 	bl	80001d4 <__adddf3>
 8008d62:	3d01      	subs	r5, #1
 8008d64:	e759      	b.n	8008c1a <__kernel_rem_pio2+0x52a>
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	9a01      	ldr	r2, [sp, #4]
 8008d6a:	601d      	str	r5, [r3, #0]
 8008d6c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008d70:	605c      	str	r4, [r3, #4]
 8008d72:	609f      	str	r7, [r3, #8]
 8008d74:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008d78:	60d3      	str	r3, [r2, #12]
 8008d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d7e:	6110      	str	r0, [r2, #16]
 8008d80:	6153      	str	r3, [r2, #20]
 8008d82:	e728      	b.n	8008bd6 <__kernel_rem_pio2+0x4e6>
 8008d84:	41700000 	.word	0x41700000
 8008d88:	3e700000 	.word	0x3e700000
 8008d8c:	00000000 	.word	0x00000000

08008d90 <__kernel_sin>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	ed2d 8b04 	vpush	{d8-d9}
 8008d98:	eeb0 8a41 	vmov.f32	s16, s2
 8008d9c:	eef0 8a61 	vmov.f32	s17, s3
 8008da0:	ec55 4b10 	vmov	r4, r5, d0
 8008da4:	b083      	sub	sp, #12
 8008da6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008daa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008dae:	9001      	str	r0, [sp, #4]
 8008db0:	da06      	bge.n	8008dc0 <__kernel_sin+0x30>
 8008db2:	ee10 0a10 	vmov	r0, s0
 8008db6:	4629      	mov	r1, r5
 8008db8:	f7f7 fe72 	bl	8000aa0 <__aeabi_d2iz>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	d051      	beq.n	8008e64 <__kernel_sin+0xd4>
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	462b      	mov	r3, r5
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	f7f7 fbba 	bl	8000540 <__aeabi_dmul>
 8008dcc:	4682      	mov	sl, r0
 8008dce:	468b      	mov	fp, r1
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7f7 fbb2 	bl	8000540 <__aeabi_dmul>
 8008ddc:	a341      	add	r3, pc, #260	; (adr r3, 8008ee4 <__kernel_sin+0x154>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	4680      	mov	r8, r0
 8008de4:	4689      	mov	r9, r1
 8008de6:	4650      	mov	r0, sl
 8008de8:	4659      	mov	r1, fp
 8008dea:	f7f7 fba9 	bl	8000540 <__aeabi_dmul>
 8008dee:	a33f      	add	r3, pc, #252	; (adr r3, 8008eec <__kernel_sin+0x15c>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f7f7 f9ec 	bl	80001d0 <__aeabi_dsub>
 8008df8:	4652      	mov	r2, sl
 8008dfa:	465b      	mov	r3, fp
 8008dfc:	f7f7 fba0 	bl	8000540 <__aeabi_dmul>
 8008e00:	a33c      	add	r3, pc, #240	; (adr r3, 8008ef4 <__kernel_sin+0x164>)
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	f7f7 f9e5 	bl	80001d4 <__adddf3>
 8008e0a:	4652      	mov	r2, sl
 8008e0c:	465b      	mov	r3, fp
 8008e0e:	f7f7 fb97 	bl	8000540 <__aeabi_dmul>
 8008e12:	a33a      	add	r3, pc, #232	; (adr r3, 8008efc <__kernel_sin+0x16c>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	f7f7 f9da 	bl	80001d0 <__aeabi_dsub>
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	465b      	mov	r3, fp
 8008e20:	f7f7 fb8e 	bl	8000540 <__aeabi_dmul>
 8008e24:	a337      	add	r3, pc, #220	; (adr r3, 8008f04 <__kernel_sin+0x174>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f7f7 f9d3 	bl	80001d4 <__adddf3>
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	4606      	mov	r6, r0
 8008e32:	460f      	mov	r7, r1
 8008e34:	b9eb      	cbnz	r3, 8008e72 <__kernel_sin+0xe2>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4650      	mov	r0, sl
 8008e3c:	4659      	mov	r1, fp
 8008e3e:	f7f7 fb7f 	bl	8000540 <__aeabi_dmul>
 8008e42:	a325      	add	r3, pc, #148	; (adr r3, 8008ed8 <__kernel_sin+0x148>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 f9c2 	bl	80001d0 <__aeabi_dsub>
 8008e4c:	4642      	mov	r2, r8
 8008e4e:	464b      	mov	r3, r9
 8008e50:	f7f7 fb76 	bl	8000540 <__aeabi_dmul>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	4620      	mov	r0, r4
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	f7f7 f9ba 	bl	80001d4 <__adddf3>
 8008e60:	4604      	mov	r4, r0
 8008e62:	460d      	mov	r5, r1
 8008e64:	ec45 4b10 	vmov	d0, r4, r5
 8008e68:	b003      	add	sp, #12
 8008e6a:	ecbd 8b04 	vpop	{d8-d9}
 8008e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e72:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <__kernel_sin+0x150>)
 8008e74:	ec51 0b18 	vmov	r0, r1, d8
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f7f7 fb61 	bl	8000540 <__aeabi_dmul>
 8008e7e:	4632      	mov	r2, r6
 8008e80:	ec41 0b19 	vmov	d9, r0, r1
 8008e84:	463b      	mov	r3, r7
 8008e86:	4640      	mov	r0, r8
 8008e88:	4649      	mov	r1, r9
 8008e8a:	f7f7 fb59 	bl	8000540 <__aeabi_dmul>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	ec51 0b19 	vmov	r0, r1, d9
 8008e96:	f7f7 f99b 	bl	80001d0 <__aeabi_dsub>
 8008e9a:	4652      	mov	r2, sl
 8008e9c:	465b      	mov	r3, fp
 8008e9e:	f7f7 fb4f 	bl	8000540 <__aeabi_dmul>
 8008ea2:	ec53 2b18 	vmov	r2, r3, d8
 8008ea6:	f7f7 f993 	bl	80001d0 <__aeabi_dsub>
 8008eaa:	a30b      	add	r3, pc, #44	; (adr r3, 8008ed8 <__kernel_sin+0x148>)
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	460f      	mov	r7, r1
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 fb42 	bl	8000540 <__aeabi_dmul>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	f7f7 f986 	bl	80001d4 <__adddf3>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4620      	mov	r0, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	f7f7 f97e 	bl	80001d0 <__aeabi_dsub>
 8008ed4:	e7c4      	b.n	8008e60 <__kernel_sin+0xd0>
 8008ed6:	bf00      	nop
 8008ed8:	55555549 	.word	0x55555549
 8008edc:	3fc55555 	.word	0x3fc55555
 8008ee0:	3fe00000 	.word	0x3fe00000
 8008ee4:	5acfd57c 	.word	0x5acfd57c
 8008ee8:	3de5d93a 	.word	0x3de5d93a
 8008eec:	8a2b9ceb 	.word	0x8a2b9ceb
 8008ef0:	3e5ae5e6 	.word	0x3e5ae5e6
 8008ef4:	57b1fe7d 	.word	0x57b1fe7d
 8008ef8:	3ec71de3 	.word	0x3ec71de3
 8008efc:	19c161d5 	.word	0x19c161d5
 8008f00:	3f2a01a0 	.word	0x3f2a01a0
 8008f04:	1110f8a6 	.word	0x1110f8a6
 8008f08:	3f811111 	.word	0x3f811111

08008f0c <with_errno>:
 8008f0c:	b570      	push	{r4, r5, r6, lr}
 8008f0e:	4604      	mov	r4, r0
 8008f10:	460d      	mov	r5, r1
 8008f12:	4616      	mov	r6, r2
 8008f14:	f7fe f802 	bl	8006f1c <__errno>
 8008f18:	4629      	mov	r1, r5
 8008f1a:	6006      	str	r6, [r0, #0]
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	bd70      	pop	{r4, r5, r6, pc}

08008f20 <xflow>:
 8008f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f22:	4614      	mov	r4, r2
 8008f24:	461d      	mov	r5, r3
 8008f26:	b108      	cbz	r0, 8008f2c <xflow+0xc>
 8008f28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f2c:	e9cd 2300 	strd	r2, r3, [sp]
 8008f30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f34:	4620      	mov	r0, r4
 8008f36:	4629      	mov	r1, r5
 8008f38:	f7f7 fb02 	bl	8000540 <__aeabi_dmul>
 8008f3c:	2222      	movs	r2, #34	; 0x22
 8008f3e:	b003      	add	sp, #12
 8008f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f44:	f7ff bfe2 	b.w	8008f0c <with_errno>

08008f48 <__math_uflow>:
 8008f48:	b508      	push	{r3, lr}
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f50:	f7ff ffe6 	bl	8008f20 <xflow>
 8008f54:	ec41 0b10 	vmov	d0, r0, r1
 8008f58:	bd08      	pop	{r3, pc}

08008f5a <__math_oflow>:
 8008f5a:	b508      	push	{r3, lr}
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8008f62:	f7ff ffdd 	bl	8008f20 <xflow>
 8008f66:	ec41 0b10 	vmov	d0, r0, r1
 8008f6a:	bd08      	pop	{r3, pc}

08008f6c <fabs>:
 8008f6c:	ec51 0b10 	vmov	r0, r1, d0
 8008f70:	ee10 2a10 	vmov	r2, s0
 8008f74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f78:	ec43 2b10 	vmov	d0, r2, r3
 8008f7c:	4770      	bx	lr

08008f7e <finite>:
 8008f7e:	b082      	sub	sp, #8
 8008f80:	ed8d 0b00 	vstr	d0, [sp]
 8008f84:	9801      	ldr	r0, [sp, #4]
 8008f86:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008f8a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008f8e:	0fc0      	lsrs	r0, r0, #31
 8008f90:	b002      	add	sp, #8
 8008f92:	4770      	bx	lr
 8008f94:	0000      	movs	r0, r0
	...

08008f98 <floor>:
 8008f98:	ec51 0b10 	vmov	r0, r1, d0
 8008f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008fa4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008fa8:	2e13      	cmp	r6, #19
 8008faa:	ee10 5a10 	vmov	r5, s0
 8008fae:	ee10 8a10 	vmov	r8, s0
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	dc32      	bgt.n	800901c <floor+0x84>
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	da14      	bge.n	8008fe4 <floor+0x4c>
 8008fba:	a333      	add	r3, pc, #204	; (adr r3, 8009088 <floor+0xf0>)
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	f7f7 f908 	bl	80001d4 <__adddf3>
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f7f7 fd4a 	bl	8000a60 <__aeabi_dcmpgt>
 8008fcc:	b138      	cbz	r0, 8008fde <floor+0x46>
 8008fce:	2c00      	cmp	r4, #0
 8008fd0:	da57      	bge.n	8009082 <floor+0xea>
 8008fd2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008fd6:	431d      	orrs	r5, r3
 8008fd8:	d001      	beq.n	8008fde <floor+0x46>
 8008fda:	4c2d      	ldr	r4, [pc, #180]	; (8009090 <floor+0xf8>)
 8008fdc:	2500      	movs	r5, #0
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	e025      	b.n	8009030 <floor+0x98>
 8008fe4:	4f2b      	ldr	r7, [pc, #172]	; (8009094 <floor+0xfc>)
 8008fe6:	4137      	asrs	r7, r6
 8008fe8:	ea01 0307 	and.w	r3, r1, r7
 8008fec:	4303      	orrs	r3, r0
 8008fee:	d01f      	beq.n	8009030 <floor+0x98>
 8008ff0:	a325      	add	r3, pc, #148	; (adr r3, 8009088 <floor+0xf0>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	f7f7 f8ed 	bl	80001d4 <__adddf3>
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f7f7 fd2f 	bl	8000a60 <__aeabi_dcmpgt>
 8009002:	2800      	cmp	r0, #0
 8009004:	d0eb      	beq.n	8008fde <floor+0x46>
 8009006:	2c00      	cmp	r4, #0
 8009008:	bfbe      	ittt	lt
 800900a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800900e:	fa43 f606 	asrlt.w	r6, r3, r6
 8009012:	19a4      	addlt	r4, r4, r6
 8009014:	ea24 0407 	bic.w	r4, r4, r7
 8009018:	2500      	movs	r5, #0
 800901a:	e7e0      	b.n	8008fde <floor+0x46>
 800901c:	2e33      	cmp	r6, #51	; 0x33
 800901e:	dd0b      	ble.n	8009038 <floor+0xa0>
 8009020:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009024:	d104      	bne.n	8009030 <floor+0x98>
 8009026:	ee10 2a10 	vmov	r2, s0
 800902a:	460b      	mov	r3, r1
 800902c:	f7f7 f8d2 	bl	80001d4 <__adddf3>
 8009030:	ec41 0b10 	vmov	d0, r0, r1
 8009034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009038:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800903c:	f04f 33ff 	mov.w	r3, #4294967295
 8009040:	fa23 f707 	lsr.w	r7, r3, r7
 8009044:	4207      	tst	r7, r0
 8009046:	d0f3      	beq.n	8009030 <floor+0x98>
 8009048:	a30f      	add	r3, pc, #60	; (adr r3, 8009088 <floor+0xf0>)
 800904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904e:	f7f7 f8c1 	bl	80001d4 <__adddf3>
 8009052:	2200      	movs	r2, #0
 8009054:	2300      	movs	r3, #0
 8009056:	f7f7 fd03 	bl	8000a60 <__aeabi_dcmpgt>
 800905a:	2800      	cmp	r0, #0
 800905c:	d0bf      	beq.n	8008fde <floor+0x46>
 800905e:	2c00      	cmp	r4, #0
 8009060:	da02      	bge.n	8009068 <floor+0xd0>
 8009062:	2e14      	cmp	r6, #20
 8009064:	d103      	bne.n	800906e <floor+0xd6>
 8009066:	3401      	adds	r4, #1
 8009068:	ea25 0507 	bic.w	r5, r5, r7
 800906c:	e7b7      	b.n	8008fde <floor+0x46>
 800906e:	2301      	movs	r3, #1
 8009070:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009074:	fa03 f606 	lsl.w	r6, r3, r6
 8009078:	4435      	add	r5, r6
 800907a:	4545      	cmp	r5, r8
 800907c:	bf38      	it	cc
 800907e:	18e4      	addcc	r4, r4, r3
 8009080:	e7f2      	b.n	8009068 <floor+0xd0>
 8009082:	2500      	movs	r5, #0
 8009084:	462c      	mov	r4, r5
 8009086:	e7aa      	b.n	8008fde <floor+0x46>
 8009088:	8800759c 	.word	0x8800759c
 800908c:	7e37e43c 	.word	0x7e37e43c
 8009090:	bff00000 	.word	0xbff00000
 8009094:	000fffff 	.word	0x000fffff

08009098 <scalbn>:
 8009098:	b570      	push	{r4, r5, r6, lr}
 800909a:	ec55 4b10 	vmov	r4, r5, d0
 800909e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80090a2:	4606      	mov	r6, r0
 80090a4:	462b      	mov	r3, r5
 80090a6:	b99a      	cbnz	r2, 80090d0 <scalbn+0x38>
 80090a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80090ac:	4323      	orrs	r3, r4
 80090ae:	d036      	beq.n	800911e <scalbn+0x86>
 80090b0:	4b39      	ldr	r3, [pc, #228]	; (8009198 <scalbn+0x100>)
 80090b2:	4629      	mov	r1, r5
 80090b4:	ee10 0a10 	vmov	r0, s0
 80090b8:	2200      	movs	r2, #0
 80090ba:	f7f7 fa41 	bl	8000540 <__aeabi_dmul>
 80090be:	4b37      	ldr	r3, [pc, #220]	; (800919c <scalbn+0x104>)
 80090c0:	429e      	cmp	r6, r3
 80090c2:	4604      	mov	r4, r0
 80090c4:	460d      	mov	r5, r1
 80090c6:	da10      	bge.n	80090ea <scalbn+0x52>
 80090c8:	a32b      	add	r3, pc, #172	; (adr r3, 8009178 <scalbn+0xe0>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	e03a      	b.n	8009146 <scalbn+0xae>
 80090d0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80090d4:	428a      	cmp	r2, r1
 80090d6:	d10c      	bne.n	80090f2 <scalbn+0x5a>
 80090d8:	ee10 2a10 	vmov	r2, s0
 80090dc:	4620      	mov	r0, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	f7f7 f878 	bl	80001d4 <__adddf3>
 80090e4:	4604      	mov	r4, r0
 80090e6:	460d      	mov	r5, r1
 80090e8:	e019      	b.n	800911e <scalbn+0x86>
 80090ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090ee:	460b      	mov	r3, r1
 80090f0:	3a36      	subs	r2, #54	; 0x36
 80090f2:	4432      	add	r2, r6
 80090f4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80090f8:	428a      	cmp	r2, r1
 80090fa:	dd08      	ble.n	800910e <scalbn+0x76>
 80090fc:	2d00      	cmp	r5, #0
 80090fe:	a120      	add	r1, pc, #128	; (adr r1, 8009180 <scalbn+0xe8>)
 8009100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009104:	da1c      	bge.n	8009140 <scalbn+0xa8>
 8009106:	a120      	add	r1, pc, #128	; (adr r1, 8009188 <scalbn+0xf0>)
 8009108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800910c:	e018      	b.n	8009140 <scalbn+0xa8>
 800910e:	2a00      	cmp	r2, #0
 8009110:	dd08      	ble.n	8009124 <scalbn+0x8c>
 8009112:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009116:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800911a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800911e:	ec45 4b10 	vmov	d0, r4, r5
 8009122:	bd70      	pop	{r4, r5, r6, pc}
 8009124:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009128:	da19      	bge.n	800915e <scalbn+0xc6>
 800912a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800912e:	429e      	cmp	r6, r3
 8009130:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009134:	dd0a      	ble.n	800914c <scalbn+0xb4>
 8009136:	a112      	add	r1, pc, #72	; (adr r1, 8009180 <scalbn+0xe8>)
 8009138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e2      	bne.n	8009106 <scalbn+0x6e>
 8009140:	a30f      	add	r3, pc, #60	; (adr r3, 8009180 <scalbn+0xe8>)
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f7f7 f9fb 	bl	8000540 <__aeabi_dmul>
 800914a:	e7cb      	b.n	80090e4 <scalbn+0x4c>
 800914c:	a10a      	add	r1, pc, #40	; (adr r1, 8009178 <scalbn+0xe0>)
 800914e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0b8      	beq.n	80090c8 <scalbn+0x30>
 8009156:	a10e      	add	r1, pc, #56	; (adr r1, 8009190 <scalbn+0xf8>)
 8009158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800915c:	e7b4      	b.n	80090c8 <scalbn+0x30>
 800915e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009162:	3236      	adds	r2, #54	; 0x36
 8009164:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009168:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800916c:	4620      	mov	r0, r4
 800916e:	4b0c      	ldr	r3, [pc, #48]	; (80091a0 <scalbn+0x108>)
 8009170:	2200      	movs	r2, #0
 8009172:	e7e8      	b.n	8009146 <scalbn+0xae>
 8009174:	f3af 8000 	nop.w
 8009178:	c2f8f359 	.word	0xc2f8f359
 800917c:	01a56e1f 	.word	0x01a56e1f
 8009180:	8800759c 	.word	0x8800759c
 8009184:	7e37e43c 	.word	0x7e37e43c
 8009188:	8800759c 	.word	0x8800759c
 800918c:	fe37e43c 	.word	0xfe37e43c
 8009190:	c2f8f359 	.word	0xc2f8f359
 8009194:	81a56e1f 	.word	0x81a56e1f
 8009198:	43500000 	.word	0x43500000
 800919c:	ffff3cb0 	.word	0xffff3cb0
 80091a0:	3c900000 	.word	0x3c900000

080091a4 <atanf>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	ee10 5a10 	vmov	r5, s0
 80091aa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80091ae:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80091b2:	eef0 7a40 	vmov.f32	s15, s0
 80091b6:	db10      	blt.n	80091da <atanf+0x36>
 80091b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80091bc:	dd04      	ble.n	80091c8 <atanf+0x24>
 80091be:	ee70 7a00 	vadd.f32	s15, s0, s0
 80091c2:	eeb0 0a67 	vmov.f32	s0, s15
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009300 <atanf+0x15c>
 80091cc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8009304 <atanf+0x160>
 80091d0:	2d00      	cmp	r5, #0
 80091d2:	bfd8      	it	le
 80091d4:	eef0 7a40 	vmovle.f32	s15, s0
 80091d8:	e7f3      	b.n	80091c2 <atanf+0x1e>
 80091da:	4b4b      	ldr	r3, [pc, #300]	; (8009308 <atanf+0x164>)
 80091dc:	429c      	cmp	r4, r3
 80091de:	dc10      	bgt.n	8009202 <atanf+0x5e>
 80091e0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80091e4:	da0a      	bge.n	80091fc <atanf+0x58>
 80091e6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800930c <atanf+0x168>
 80091ea:	ee30 7a07 	vadd.f32	s14, s0, s14
 80091ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80091f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091fa:	dce2      	bgt.n	80091c2 <atanf+0x1e>
 80091fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009200:	e013      	b.n	800922a <atanf+0x86>
 8009202:	f000 f8a3 	bl	800934c <fabsf>
 8009206:	4b42      	ldr	r3, [pc, #264]	; (8009310 <atanf+0x16c>)
 8009208:	429c      	cmp	r4, r3
 800920a:	dc4f      	bgt.n	80092ac <atanf+0x108>
 800920c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009210:	429c      	cmp	r4, r3
 8009212:	dc41      	bgt.n	8009298 <atanf+0xf4>
 8009214:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009218:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800921c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009220:	2300      	movs	r3, #0
 8009222:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009226:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800922a:	1c5a      	adds	r2, r3, #1
 800922c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8009230:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009314 <atanf+0x170>
 8009234:	eddf 5a38 	vldr	s11, [pc, #224]	; 8009318 <atanf+0x174>
 8009238:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800931c <atanf+0x178>
 800923c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8009240:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009244:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8009320 <atanf+0x17c>
 8009248:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800924c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8009324 <atanf+0x180>
 8009250:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009254:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8009328 <atanf+0x184>
 8009258:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800925c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800932c <atanf+0x188>
 8009260:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009264:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8009330 <atanf+0x18c>
 8009268:	eea6 5a87 	vfma.f32	s10, s13, s14
 800926c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009334 <atanf+0x190>
 8009270:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009274:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8009338 <atanf+0x194>
 8009278:	eea7 5a26 	vfma.f32	s10, s14, s13
 800927c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800933c <atanf+0x198>
 8009280:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009284:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009288:	eea5 7a86 	vfma.f32	s14, s11, s12
 800928c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009290:	d121      	bne.n	80092d6 <atanf+0x132>
 8009292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009296:	e794      	b.n	80091c2 <atanf+0x1e>
 8009298:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800929c:	ee30 7a67 	vsub.f32	s14, s0, s15
 80092a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80092a4:	2301      	movs	r3, #1
 80092a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80092aa:	e7be      	b.n	800922a <atanf+0x86>
 80092ac:	4b24      	ldr	r3, [pc, #144]	; (8009340 <atanf+0x19c>)
 80092ae:	429c      	cmp	r4, r3
 80092b0:	dc0b      	bgt.n	80092ca <atanf+0x126>
 80092b2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80092b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ba:	eea0 7a27 	vfma.f32	s14, s0, s15
 80092be:	2302      	movs	r3, #2
 80092c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80092c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c8:	e7af      	b.n	800922a <atanf+0x86>
 80092ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80092ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80092d2:	2303      	movs	r3, #3
 80092d4:	e7a9      	b.n	800922a <atanf+0x86>
 80092d6:	4a1b      	ldr	r2, [pc, #108]	; (8009344 <atanf+0x1a0>)
 80092d8:	491b      	ldr	r1, [pc, #108]	; (8009348 <atanf+0x1a4>)
 80092da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80092de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80092e2:	ed93 0a00 	vldr	s0, [r3]
 80092e6:	ee37 7a40 	vsub.f32	s14, s14, s0
 80092ea:	ed92 0a00 	vldr	s0, [r2]
 80092ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092f2:	2d00      	cmp	r5, #0
 80092f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80092f8:	bfb8      	it	lt
 80092fa:	eef1 7a67 	vneglt.f32	s15, s15
 80092fe:	e760      	b.n	80091c2 <atanf+0x1e>
 8009300:	3fc90fdb 	.word	0x3fc90fdb
 8009304:	bfc90fdb 	.word	0xbfc90fdb
 8009308:	3edfffff 	.word	0x3edfffff
 800930c:	7149f2ca 	.word	0x7149f2ca
 8009310:	3f97ffff 	.word	0x3f97ffff
 8009314:	3c8569d7 	.word	0x3c8569d7
 8009318:	3d4bda59 	.word	0x3d4bda59
 800931c:	bd6ef16b 	.word	0xbd6ef16b
 8009320:	3d886b35 	.word	0x3d886b35
 8009324:	3dba2e6e 	.word	0x3dba2e6e
 8009328:	3e124925 	.word	0x3e124925
 800932c:	3eaaaaab 	.word	0x3eaaaaab
 8009330:	bd15a221 	.word	0xbd15a221
 8009334:	bd9d8795 	.word	0xbd9d8795
 8009338:	bde38e38 	.word	0xbde38e38
 800933c:	be4ccccd 	.word	0xbe4ccccd
 8009340:	401bffff 	.word	0x401bffff
 8009344:	08009c00 	.word	0x08009c00
 8009348:	08009c10 	.word	0x08009c10

0800934c <fabsf>:
 800934c:	ee10 3a10 	vmov	r3, s0
 8009350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009354:	ee00 3a10 	vmov	s0, r3
 8009358:	4770      	bx	lr
	...

0800935c <nanf>:
 800935c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009364 <nanf+0x8>
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	7fc00000 	.word	0x7fc00000

08009368 <_init>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	bf00      	nop
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr

08009374 <_fini>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	bf00      	nop
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr
